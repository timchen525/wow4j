(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{512:function(e,n,s){"use strict";s.r(n);var _=s(19),t=Object(_.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"_1-背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-背景"}},[e._v("#")]),e._v(" 1. 背景")]),e._v(" "),s("p",[e._v('不管是全文搜索引擎，还是垂直搜索系统中，当用户在搜索🔍输入框中输入几个字的时候，会自动下来一些词去自动补全用户可能要搜的词语，这部分的功能，我们称作搜索建议器的功能（英文叫做"suggest"）。本文将介绍下目前主流的搜索建议器的做法，并且给出了一个我们认为更好的搜索建议器的做法。')]),e._v(" "),s("h2",{attrs:{id:"_2-搜索建议器的指导原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-搜索建议器的指导原则"}},[e._v("#")]),e._v(" 2. 搜索建议器的指导原则")]),e._v(" "),s("p",[e._v("这里，我们给出如下"),s("strong",[e._v("搜索联想词指导原则")]),e._v("：")]),e._v(" "),s("ol",[s("li",[e._v("搜索联想词的个数是"),s("strong",[e._v("非常有限")]),e._v("的，所以必须尽量有效")]),e._v(" "),s("li",[e._v("搜索联想词应该是能够"),s("strong",[e._v("最贴近用户")]),e._v("想要的结果")]),e._v(" "),s("li",[e._v("搜索联想出来的词应该是能够**99%**搜索到商品")]),e._v(" "),s("li",[e._v("搜索联想词能够帮用户"),s("strong",[e._v("纠正")]),e._v("一些错误")])]),e._v(" "),s("h2",{attrs:{id:"_3-搜索建议器实现功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-搜索建议器实现功能"}},[e._v("#")]),e._v(" 3.  搜索建议器实现功能")]),e._v(" "),s("p",[e._v("在这部分我们给出了搜索建议器需要实现的功能，这部分功能不仅是程序员需要考虑能够实现的功能，也可以用于测试用于进行验证搜索建议器的功能是否能够满足基本的使用要求。")]),e._v(" "),s("p",[e._v("具体例子如下：")]),e._v(" "),s("ol",[s("li",[s("p",[s("code",[e._v("苹果")]),e._v('   =》 在A市，不应该出现"苹果醋"，在深圳和广州应该出现“苹果醋”（ 因为“苹果醋”只在广州和深圳有卖）即搜索建议词具有'),s("strong",[e._v("区域性")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("平果")]),e._v('  =》 纠错成"苹果"，即拼音纠错')])]),e._v(" "),s("li",[s("p",[s("code",[e._v("PingGUO")]),e._v("=> 出现苹果，即归一化输入词")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("pinguo")]),e._v(" =》出现苹果，即后鼻音纠错")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("pg")]),e._v("  =>  出现pg开头的拼音的前缀，即首字母返回")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("虾n")]),e._v(" =》不应该出现“鲜花”，即不能将虾n，转成xian去查询")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("虾r")]),e._v(" =》 出现“虾仁”，即汉字和首字母可出现正确的词")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("长f奶")]),e._v(" => 不出现结果，这里不出现是因为要汉字和字母要连着，不能中间插入字母")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("chanfu")]),e._v(" "),s("code",[e._v("zhangfu")]),e._v("=》应该可以出现“长富”，即支持多音字搜索")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("Kafeii")]),e._v(" =》 出现咖啡（基于编辑距离进行纠正，推荐大于5个字母才进行）")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("白萝卜")]),e._v("、"),s("code",[e._v("白罗卜")]),e._v("  =》 只出现"),s("code",[e._v("白萝卜")]),e._v("   皇上皇  煌上煌的问题，即建议词只出现正确的词")])]),e._v(" "),s("li",[s("p",[e._v("囗"),s("code",[e._v("=> 纠错成")]),e._v("口`，出现口罩相关的名词，即把手写错误的词能够纠正过来")]),e._v(" "),s("p",[s("code",[e._v("祙")]),e._v(" => 纠错成 "),s("code",[e._v("袜")])])]),e._v(" "),s("li",[s("p",[s("code",[e._v("牛奶")]),e._v(' =》 深圳地区会出现"燕塘牛奶"相关，长沙地区出现"花园牛奶"')])]),e._v(" "),s("li",[s("p",[s("code",[e._v("蘋果")]),e._v(" =>  繁体字也能够搜索出结果，这个也是通过词归一化处理")])])]),e._v(" "),s("h2",{attrs:{id:"_4-搜索建议词需要考虑的因素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-搜索建议词需要考虑的因素"}},[e._v("#")]),e._v(" 4.  搜索建议词需要考虑的因素")]),e._v(" "),s("ol",[s("li",[e._v("建议词的来源可以是商品的分类名称、品牌名称、热搜词，也可以是一些组合词，还可以是一些自定义添加的词。")]),e._v(" "),s("li",[e._v('搜索建议词需要考虑去重，比如：“QQ”和"qq"应该是相同的。')]),e._v(" "),s("li",[e._v("搜索建议词每个词关联的商品个数，为了避免对用户搜索的影响。因此在凌晨执行，并且使用单线程调用。（使用Multi search 中的count，以及批量插入）")]),e._v(" "),s("li",[e._v("搜索建议服务，思路还是先查缓存，是否匹配到缓存的记录，如果匹配则直接返回。否则去es中进行查询。")]),e._v(" "),s("li",[e._v("返回结果为空的结果，此时需要增加拼写纠错的处理。(可以建一个纠错表)")])]),e._v(" "),s("h2",{attrs:{id:"_5-基于es-的搜索建议器的用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-基于es-的搜索建议器的用法"}},[e._v("#")]),e._v(" 5. 基于ES 的搜索建议器的用法")]),e._v(" "),s("blockquote",[s("p",[e._v("suggester基本原理是将输入的文本分解为token，然后在索引的字典里查找相似的term并返回。根据使用场景的不同，在Elasticsearch里面涉及了4种类别的suggester，分别是：")]),e._v(" "),s("ol",[s("li",[e._v("Term Suggester")]),e._v(" "),s("li",[e._v("Phrase Suggester")]),e._v(" "),s("li",[e._v("Completion Suggester")]),e._v(" "),s("li",[e._v("Context Suggester")])])]),e._v(" "),s("p",[e._v("我们依次讲解下，上述4中类别的suggester的用法。")]),e._v(" "),s("ol",[s("li",[e._v("Term Suggester")])]),e._v(" "),s("p",[e._v("三种suggest_mode:")]),e._v(" "),s("p",[e._v("missing:如果词存在，则不给出相似项。")]),e._v(" "),s("p",[e._v("popular :如果词存在，且有相似项，则给出。")]),e._v(" "),s("p",[e._v("always:不管token是否存在词典里，都给出相似项。")]),e._v(" "),s("p",[e._v("尝试了下，貌似term suggester对于中文是不适用的")]),e._v(" "),s("p",[e._v("下面这段是中文的代码：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('DELETE blogs\nPUT /blogs/\n{\n  "mappings": {\n    "tech": {\n      "properties": {\n        "body": {\n          "type": "text",\n          "analyzer": "ik_max_word",\n          "search_analyzer": "ik_smart"\n        }\n      }\n    }\n  }\n}\n\nPOST _bulk/?refresh=true\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "长富牛奶"}\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "长富奶"}\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "奶粉"}\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "牛奶"}\n\nPOST _bulk/?refresh=true\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "niunai"}\n\n\nPOST _analyze\n{\n  "analyzer": "ik_smart", \n  "text": [\n    "长富牛奶",\n    "长富奶",\n    "奶粉",\n    "牛奶"\n  ]\n}\n\nPOST /blogs/_search\n{ \n  "suggest": {\n    "my-suggestion": {\n      "text": "niunai",\n      "term": {\n        "suggest_mode": "popular",\n        "field": "body"\n      }\n    }\n  }\n}\n')])])]),s("ol",{attrs:{start:"2"}},[s("li",[e._v("Phrase Suggester")])]),e._v(" "),s("p",[e._v("在Term Suggester的基础之上，会考虑多个Term之间的关系，比如：是否同时出现在索引的原文中，相邻程度，以及词频，")]),e._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[e._v("Completion Suggester")])]),e._v(" "),s("p",[e._v("主要应用场景是自动自动补全，每输入一个字符，即时发送一次请求到服务端查询可能的匹配项，将数据变成FST，只能用于"),s("strong",[e._v("前缀匹配")]),e._v("，这也是Completion Suggester的局限所在。为了使用Completion Suggester,字段的类型需要专门定义。")]),e._v(" "),s("p",[e._v("有两个参数：")]),e._v(" "),s("p",[e._v("preserve_separators：")]),e._v(" "),s("p",[e._v("preserve_position_increments：")]),e._v(" "),s("p",[e._v("request_cache=true 查询从5ms变成1ms")]),e._v(" "),s("h2",{attrs:{id:"_6-自定义搜索建议器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-自定义搜索建议器"}},[e._v("#")]),e._v(" 6.  自定义搜索建议器")]),e._v(" "),s("p",[e._v("基于ES suggester completion，内部用FST（Finite State Transducer）,只能用于前缀匹配，这也是Completion Suggester的局限所在。我们现在的搜索联想词可以中缀匹配，是因为使用了ngram（min_gram: 1, max_gram: 10），在入库的时候把所有的词进行拆分。")]),e._v(" "),s("blockquote",[s("p",[e._v("比如：长富牛奶，会拆成“长、富、牛、奶、长富、富牛、牛奶、长富牛、富牛奶、长富牛奶”")])]),e._v(" "),s("p",[e._v("另外，使用了ES 的拼音分词器，支持用户输入拼音搜索相关的联想词，以及将输入的中文词也利用对应的拼音进行匹配。")]),e._v(" "),s("p",[e._v("基于ES，不使用ES自带的搜索建议器Suggester，我们打算自己构建一个用于搜索联想词的索引，与旧有的搜索联想词对比如下：")]),e._v(" "),s("h3",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[e._v("#")]),e._v(" 优点")]),e._v(" "),s("ol",[s("li",[e._v("索引更轻量级。因为结构简单，同样的"),s("strong",[e._v("2万")]),e._v("条数据，旧的搜索联想词索引占用"),s("code",[e._v("70M")]),e._v("，而 新的搜索联想词占用空间为"),s("code",[e._v("15M")])]),e._v(" "),s("li",[e._v("排查问题更方便，对于入库的词如何进行拆分，是通过我们自身的应用程序代码进行控制，而且拆分结果直接可以在es中进行数据查看")]),e._v(" "),s("li",[e._v("可操作空间更大，可以自主确定，怎样的词可以查找其他相关的词")])]),e._v(" "),s("h3",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[e._v("#")]),e._v(" 缺点")]),e._v(" "),s("ol",[s("li",[e._v("有一定代码维护成本")]),e._v(" "),s("li",[e._v("分词等原理与ES搜索引擎的分词等原理解耦，可能不利于维护")]),e._v(" "),s("li",[e._v("与搜索联想词对比，数据不是放在缓存中(通过request 中cache进行解决)")])]),e._v(" "),s("p",[e._v("我们的方案，mapping构建如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('PUT search_suggester?include_type_name=false\n{\n  "aliases": {\n    "alias_search_suggester": {\n    }\n  },\n  "settings": {\n    "number_of_shards": 3,\n    "number_of_routing_shards": 9,\n    "number_of_replicas": 0,\n    "refresh_interval": "1s",\n    "index":{\n        "sort.field":["frequency", "sku_num"],\n        "sort.order":["desc", "desc"]\n    },\n    "index.search.slowlog.threshold.query.trace": "20ms",\n    "index.search.slowlog.threshold.query.debug": "100ms",\n    "index.search.slowlog.threshold.query.info": "250ms",\n    "index.search.slowlog.threshold.query.warn": "500ms",\n    "index.search.slowlog.threshold.fetch.trace": "20ms",\n    "index.search.slowlog.threshold.fetch.debug": "100ms",\n    "index.search.slowlog.threshold.fetch.info": "250ms",\n    "index.search.slowlog.threshold.fetch.warn": "500ms",\n    "index.indexing.slowlog.threshold.index.trace": "20ms",\n    "index.indexing.slowlog.threshold.index.debug": "100ms",\n    "index.indexing.slowlog.threshold.index.info": "250ms",\n    "index.indexing.slowlog.threshold.index.warn": "500ms"\n  },\n  "mappings": {\n    "_routing": {\n      "required": true\n    },\n    "dynamic":"strict",\n    "properties": {\n      "query": {\n        "type": "keyword",\n         "doc_values": false,\n         "norms": false \n      },\n      "city_zip": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false\n      },\n      "term_prefixs": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "term_pinyin": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "term_shouzimu": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "pinyin_prefixs": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "shouzimu_prefixs": {\n        "type": "keyword",\n        "doc_values": false,\n         "norms": false,\n         "copy_to": "search_suggester_all"\n      },\n      "frequency": {\n        "type": "long"\n      },\n      "sku_num": {\n        "type": "long"\n      },\n      "search_suggester_all": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false\n      }\n    }\n  }\n}\n')])])]),s("p",[e._v("说明：")]),e._v(" "),s("ol",[s("li",[e._v("term_prefixs : 中文词前缀")]),e._v(" "),s("li",[e._v("term_pinyin：中文词拼音")]),e._v(" "),s("li",[e._v("term_shouzimu：中文词首字母前缀")]),e._v(" "),s("li",[e._v("pinyin_prefixs：拼音前缀")]),e._v(" "),s("li",[e._v("shouzimu_prefixs：首字母前缀")]),e._v(" "),s("li",[e._v("...")])]),e._v(" "),s("p",[e._v("将相应的词，ik拆词，拼音拆词，组合中文和拼音等，按照上述需要的规则，进行拆分，然后插入到索引中。")]),e._v(" "),s("p",[e._v("查询的时候，对于ES的查询可以只查询search_suggester_all这个字段啦。")]),e._v(" "),s("p",[s("code",[e._v("查询DSL语句如下：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('GET alias_search_suggester/_search\n{\n    "from": 0,\n    "size": 10,\n    "query": {\n        "bool": {\n            "filter": [\n                {\n                    "term": {\n                        "city_zip": {\n                            "value": "400100",\n                            "boost": 1\n                        }\n                    }\n                },\n                {\n                    "term": {\n                        "search_suggester_all": {\n                            "value": "花园",\n                            "boost": 1\n                        }\n                    }\n                }\n            ],\n            "adjust_pure_negative": true,\n            "boost": 1\n        }\n    },\n    "_source": {\n        "includes": [\n            "query",\n            "sku_num"\n        ],\n        "excludes": []\n    },\n    "sort": [\n        {\n            "frequency": {\n                "order": "desc"\n            }\n        },\n        {\n            "sku_num": {\n                "order": "desc"\n            }\n        }\n    ],\n    "track_total_hits": false\n}\n')])])]),s("p",[e._v("使用到的工具包有：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\x3c!-- ik分词 --\x3e\n<dependency>\n    <groupId>org.apache.lucene</groupId>\n    <artifactId>lucene-core</artifactId>\n    <version>8.0.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.lucene</groupId>\n    <artifactId>lucene-queryparser</artifactId>\n    <version>8.0.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.lucene</groupId>\n    <artifactId>lucene-analyzers-common</artifactId>\n    <version>8.0.0</version>\n</dependency>\n\n\x3c!-- 繁体转简体 --\x3e\n<dependency>\n\t\t<groupId>com.github.houbb</groupId>\n\t\t<artifactId>opencc4j</artifactId>\n\t<version>1.0.2</version>\n</dependency>\n\n\x3c!-- 汉字转拼音 --\x3e\n<dependency>\n\t\t<groupId>com.belerweb</groupId>\n\t\t<artifactId>pinyin4j</artifactId>\n\t\t<version>2.5.0</version>\n</dependency>\n")])])]),s("h2",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[e._v("#")]),e._v(" 参考文献")]),e._v(" "),s("ol",[s("li",[e._v("https://blog.csdn.net/wwd0501/article/details/80595201")]),e._v(" "),s("li",[e._v("https://www.jianshu.com/p/9e2c6a8e1b54  (该篇文档较详细的介绍搜索中文搜索建议词的实现方式)")])])])}),[],!1,null,null,null);n.default=t.exports}}]);