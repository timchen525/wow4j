(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{500:function(t,e,n){"use strict";n.r(e);var a=n(19),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_1-背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-背景"}},[t._v("#")]),t._v(" 1 背景")]),t._v(" "),n("p",[t._v("实际的java web开发过程中，在业务处理的过程中，需要调用多次外部的服务（可能是http服务，也可能是rpc服务），而这写调用是可以并行的。然而，目前网上能找到如何编写这类代码的资料极少，对于初学者来说想要实现起来会有一定的难度。因此，本篇文章将给出一个简单易用的并行处理代码，希望对你有帮助。")]),t._v(" "),n("h2",{attrs:{id:"_2-实现的demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现的demo"}},[t._v("#")]),t._v(" 2 实现的demo")]),t._v(" "),n("h3",{attrs:{id:"_2-1-工具类-concurrencydatatagenum-java"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-工具类-concurrencydatatagenum-java"}},[t._v("#")]),t._v(" 2.1 工具类 ConcurrencyDataTagEnum.java")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('@Getter\n@AllArgsConstructor\npublic enum ConcurrencyDataTagEnum {\n\n    /**\n     * 商品id与商品的映射标记\n     */\n    PRODUCT_ID_PRODUCT_MAP_TAG("ProductIdProductMap", "商品id与商品的映射标记"),\n\n    /**\n     * 商品id与品牌的映射标记\n     */\n    PRODUCT_ID_BRAND_MAP_TAG("ProductIdBrandMap", "商品id与品牌的映射标记"),\n\n    /**\n     * 商品id与类别list的映射标记\n     */\n    PRODUCT_ID_CATEGORY_LIST_MAP_TAG("ProductIdCategoryListMap", "品id与类别list的映射标记"),\n\n    /**\n     * 商品id与区域id的映射标记\n     */\n    PRODUCT_ID_AREA_ZIP_AREA_MAP_TAG("ProductIdAreaZipAreaMap", "商品id与区域id的映射标记"),\n\n    /**\n     * 门店商品id与活动列表的映射标记\n     */\n    EFFECTIVE_STORE_PRODUCT_ID_ACTIVITY_ESO_MAP_TAG("EffectiveStoreProductIdActivityESOMap", "门店商品id与活动列表的映射标记");\n\n    private String key;\n\n    private String value;\n\n}\n')])])]),n("h3",{attrs:{id:"_2-2-concurrencydatadto-java"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-concurrencydatadto-java"}},[t._v("#")]),t._v(" 2.2  ConcurrencyDataDTO.java")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("@Data\npublic class ConcurrencyDataDTO<T> {\n\n    /**\n     * 数据的标签，便于后期在一堆并发数据中取得想要的数据\n     */\n    private ConcurrencyDataTagEnum concurrencyDataTagEnum;\n\n    private T data;\n\n    public static ConcurrencyDataDTO create(ConcurrencyDataTagEnum concurrencyDataTagEnum, Object data) {\n        ConcurrencyDataDTO concurrencyDataDTO = new ConcurrencyDataDTO();\n        concurrencyDataDTO.setConcurrencyDataTagEnum(concurrencyDataTagEnum);\n        concurrencyDataDTO.setData(data);\n        return concurrencyDataDTO;\n    }\n}\n")])])]),n("h3",{attrs:{id:"_2-3-executortemplate-java"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-executortemplate-java"}},[t._v("#")]),t._v(" 2.3 ExecutorTemplate.java")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('@Slf4j\npublic class ExecutorTemplate {\n\n    private volatile ThreadPoolTaskExecutor executor = null;\n    private volatile List<Future> futures = null;\n\n    public ExecutorTemplate(ThreadPoolTaskExecutor executor) {\n        this.futures = Collections.synchronizedList(new ArrayList<Future>());\n        this.executor = executor;\n    }\n\n    public void submit(Runnable task) {\n        Future future = executor.submit(task);\n        futures.add(future);\n        check(future);\n    }\n\n    public void submit(Callable<ConcurrencyDataDTO> task) {\n        Future future = executor.submit(task);\n        futures.add(future);\n        check(future);\n    }\n\n    private void check(Future future) {\n        if (future.isDone()) {\n            // 立即判断一次，因为使用了CallerRun可能当场跑出结果，针对异常时快速响应\n            try {\n                future.get();\n            } catch (Throwable e) {\n                // 取消完之后立马退出\n                cancelAllFutures();\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    public synchronized List<ConcurrencyDataDTO> waitForResult() {\n        List<ConcurrencyDataDTO> result = new ArrayList();\n        RuntimeException exception = null;\n        for (Future future : futures) {\n            try {\n                Object object = future.get();\n                if (object instanceof ConcurrencyDataDTO) {\n                    result.add((ConcurrencyDataDTO) object);\n                } else {\n                    log.warn("future.get result object type is\'nt ConcurrencyDTO, return object:{}.", JsonUtils.toJson(object));\n                }\n            } catch (Throwable e) {\n                exception = new RuntimeException(e);\n                // 如果一个future出现了异常，就退出\n                break;\n            }\n        }\n\n        if (exception != null) {\n            cancelAllFutures();\n            throw exception;\n        } else {\n            return result;\n        }\n    }\n\n    public void cancelAllFutures() {\n        for (Future future : futures) {\n            if (!future.isDone() && !future.isCancelled()) {\n                future.cancel(true);\n            }\n        }\n    }\n\n    public void clear() {\n        futures.clear();\n    }\n\n}\n')])])]),n("h3",{attrs:{id:"_2-4-核心业务代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-核心业务代码"}},[t._v("#")]),t._v(" 2.4 核心业务代码")]),t._v(" "),n("p",[t._v("我们将下述的4个本来想要串行的代码并行化：")]),t._v(" "),n("ol",[n("li",[t._v("storeProductRelativeService.getProductIdProductMap(productIdSet))")]),t._v(" "),n("li",[t._v("storeProductRelativeService.getProductIdBrandMap(productIdSet))")]),t._v(" "),n("li",[t._v("storeProductRelativeService.getProductIdCategoryListMap(productIdSet))")]),t._v(" "),n("li",[t._v("storeProductRelativeService.getProductIdAreaZipAreaMap(productIdSet))")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(' ...\n Map<String, ProductDTO> productIdProductMap = null;\n Map<String, BrandDTO> productIdBrandMap = null;\n Map<String, List<CategoryDTO>> productIdCategoryListMap = null;\n Map<String, AreaProductDTO> productIdAreaZipAreaMap = null;\n Map<String, List<ActivityDataESO>> storeProductIdActivityListMap = null;\ntry {\n            // 并发执行相关的rpc调用\n            if (!CollectionUtils.isEmpty(productIdSet)) {\n                executorTemplate.submit(() -> ConcurrencyDataDTO.create(ConcurrencyDataTagEnum.PRODUCT_ID_PRODUCT_MAP_TAG, storeProductRelativeService.getProductIdProductMap(productIdSet)));\n                executorTemplate.submit(() -> ConcurrencyDataDTO.create(ConcurrencyDataTagEnum.PRODUCT_ID_BRAND_MAP_TAG, storeProductRelativeService.getProductIdBrandMap(productIdSet)));\n                executorTemplate.submit(() -> ConcurrencyDataDTO.create(ConcurrencyDataTagEnum.PRODUCT_ID_CATEGORY_LIST_MAP_TAG, storeProductRelativeService.getProductIdCategoryListMap(productIdSet)));\n                executorTemplate.submit(() -> ConcurrencyDataDTO.create(ConcurrencyDataTagEnum.PRODUCT_ID_AREA_ZIP_AREA_MAP_TAG, storeProductRelativeService.getProductIdAreaZipAreaMap(productIdSet)));\n            }\n            if (!CollectionUtils.isEmpty(storeProductIdSet)) {\n                executorTemplate.submit(() -> ConcurrencyDataDTO.create(ConcurrencyDataTagEnum.EFFECTIVE_STORE_PRODUCT_ID_ACTIVITY_ESO_MAP_TAG, activityStoreProductMapsService.getEffectiveStoreProductIdActivityESOMap(storeProductIdSet)));\n            }\n            // 等待所有异步执行结果\n            List<ConcurrencyDataDTO> concurrencyDataDTOList = executorTemplate.waitForResult();\n\n            for (ConcurrencyDataDTO concurrencyDataDTO : concurrencyDataDTOList) {\n                ConcurrencyDataTagEnum concurrencyDataTagEnum = concurrencyDataDTO.getConcurrencyDataTagEnum();\n                switch (concurrencyDataTagEnum) {\n                    case PRODUCT_ID_PRODUCT_MAP_TAG:\n                        productIdProductMap = (Map<String, ProductDTO>) concurrencyDataDTO.getData();\n                        break;\n                    case PRODUCT_ID_BRAND_MAP_TAG:\n                        productIdBrandMap = (Map<String, BrandDTO>) concurrencyDataDTO.getData();\n                        break;\n                    case PRODUCT_ID_CATEGORY_LIST_MAP_TAG:\n                        productIdCategoryListMap = (Map<String, List<CategoryDTO>>) concurrencyDataDTO.getData();\n                        break;\n                    case PRODUCT_ID_AREA_ZIP_AREA_MAP_TAG:\n                        productIdAreaZipAreaMap = (Map<String, AreaProductDTO>) concurrencyDataDTO.getData();\n                        break;\n                    case EFFECTIVE_STORE_PRODUCT_ID_ACTIVITY_ESO_MAP_TAG:\n                        storeProductIdActivityListMap = (Map<String, List<ActivityDataESO>>) concurrencyDataDTO.getData();\n                        break;\n                    default:\n                        log.warn("concurrencyDataTagEnum[{}] is unknown, return data:{}.", concurrencyDataTagEnum, JsonUtils.toJson(concurrencyDataDTO));\n                        break;\n                }\n            }\n        } catch (Exception e) {\n            log.error("exception, error message:{}.", e.getMessage(), e);\n            throw e;\n        } finally {\n            // 注意：一定要添加这个，不然会导致内存泄漏\n            executorTemplate.clear();\n        }\n // 处理上述业务的返回值\n // todo\n ...      \n')])])]),n("blockquote",[n("p",[t._v("executorTemplate 这里面的线程池的参数配置，可以根据业务进行显示的配置。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);