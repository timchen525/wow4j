(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,o,s=e[0],l=e[1],c=e[2],u=0,p=[];u<s.length;u++)o=s[u],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&p.push(a[o][0]),a[o]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(d&&d(e);p.length;)p.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,s=1;s<t.length;s++){var l=t[s];0!==a[l]&&(r=!1)}r&&(i.splice(e--,1),n=o(o.s=t[0]))}return n}var r={},a={1:0},i=[];function o(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.e=function(n){var e=[],t=a[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=a[n]=[e,r]}));e.push(t[2]=r);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(n){return o.p+"assets/js/"+({}[n]||n)+"."+{2:"290edd30",3:"38193b7d",4:"966a8281",5:"0181d5e8",6:"483da95d",7:"37ad2f1b",8:"3e9d78b0",9:"147b07eb",10:"cc49bee5",11:"62833ef0",12:"5f6f9546",13:"52cbcaa6",14:"9598724a",15:"707c3321",16:"d1310490",17:"c7e6087b",18:"d6e79f99",19:"f17afc4a",20:"a637b76c",21:"6851dbb3",22:"72f87f18",23:"7cd46cec",24:"665a7da0",25:"1cce4c66",26:"7e23f5c7",27:"3746869d",28:"baeff496",29:"f4052d4b",30:"d84f8605",31:"792bf7ba",32:"e327ed3c",33:"4d34e13b",34:"f3c67117",35:"ebf77968",36:"76d36ea3",37:"a9305c46",38:"954c0bf8",39:"0529bd6b",40:"1ce6d418",41:"0dd0fdab",42:"4c5d7fd5",43:"32f5429c",44:"af99ecf7",45:"f3f5b339",46:"d1b05cd5",47:"bad9e247",48:"fc6cfc68",49:"557e5fef",50:"4839f893",51:"5f3821cd",52:"90d46757",53:"fbbacabf",54:"de3636aa",55:"440a63f1",56:"e8e725aa",57:"151643fd",58:"2961ced5",59:"3599dd07",60:"9d37925e",61:"bf69f6a4",62:"676ff119",63:"bf8e3019",64:"aa7847d7",65:"aaa6efcd",66:"b0a59fd1",67:"cdb4f3b4",68:"bc5f82db",69:"e4305a92",70:"d9573a2e",71:"5b99c14c",72:"b7538ef4",73:"773b5e16",74:"273d0158",75:"6f5e1a51",76:"7f42b6e5",77:"493a9b73",78:"58c79ad9",79:"8651ff93",80:"06efe637",81:"13f1b905",82:"89f2eae1",83:"95bf174f",84:"7d6d07f7",85:"86ad3916",86:"7bc05860",87:"11ec1120",88:"17d641d1",89:"a896b238",90:"6a4f9bbe",91:"f5aac00e",92:"04032d2e",93:"7f0b6b5c",94:"c659cc62",95:"97436f9a",96:"856d5f2f",97:"b2d11e35",98:"e57c9fff",99:"acf8a766",100:"d0d750a5",101:"c886cab2",102:"19f8414a",103:"77106e4e",104:"1c378d9d",105:"ea2775b6",106:"8cd360a9",107:"723f3b88",108:"402b1319",109:"b484419b",110:"40c42c91",111:"9d56f07a",112:"0481f6bd",113:"8566a1ff",114:"7b735cde",115:"664878dd",116:"b377ad9f",117:"a88ec584",118:"fe3f20bc",119:"3e9fe0d2",120:"56830621",121:"29e5af93",122:"0ce81628",123:"be47c083",124:"838c4ccc",125:"864730ae",126:"77dfdbc4",127:"c6139497",128:"0f244320",129:"bd5a745a",130:"fd400d64",131:"017cf0e1",132:"0700c2f1",133:"f5f2c958",134:"3d973545",135:"d1446f2c",136:"bd089225",137:"8d60eb0b",138:"8ca213e2",139:"c2229689",140:"e3136a19",141:"f23ba9ac",142:"d11ce65a",143:"57a58889",144:"098dfd5b",145:"27e182e2",146:"7690d2b5",147:"bcc94f51",148:"ee9a759b",149:"46774ec2",150:"7cc49407",151:"75f299ba",152:"8f4725a5",153:"bc2293ac",154:"a139674e"}[n]+".js"}(n);var l=new Error;i=function(e){s.onerror=s.onload=null,clearTimeout(c);var t=a[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",l.name="ChunkLoadError",l.type=r,l.request=i,t[1](l)}a[n]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(e)},o.m=n,o.c=r,o.d=function(n,e,t){o.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,e){if(1&e&&(n=o(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)o.d(t,r,function(e){return n[e]}.bind(null,r));return t},o.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(e,"a",e),e},o.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},o.p="/wow4j/",o.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var d=l;i.push([232,0]),t()}([function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var r=t(0),a=t(33).f,i=t(37),o=t(14),s=t(108),l=t(157),c=t(101);n.exports=function(n,e){var t,d,u,p,h,f=n.target,m=n.global,g=n.stat;if(t=m?r:g?r[f]||s(f,{}):(r[f]||{}).prototype)for(d in e){if(p=e[d],u=n.noTargetGet?(h=a(t,d))&&h.value:t[d],!c(m?d:f+(g?".":"#")+d,n.forced)&&void 0!==u){if(typeof p==typeof u)continue;l(p,u)}(n.sham||u&&u.sham)&&i(p,"sham",!0),o(t,d,p,n)}}},function(n,e){var t=Function.prototype,r=t.bind,a=t.call,i=r&&r.bind(a,a);n.exports=r?function(n){return n&&i(n)}:function(n){return n&&function(){return a.apply(n,arguments)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var r=t(118),a=t(14),i=t(248);r||a(Object.prototype,"toString",i,{unsafe:!0})},function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var r=t(0),a=t(75),i=t(11),o=t(76),s=t(109),l=t(150),c=a("wks"),d=r.Symbol,u=d&&d.for,p=l?d:d&&d.withoutSetter||o;n.exports=function(n){if(!i(c,n)||!s&&"string"!=typeof c[n]){var e="Symbol."+n;s&&i(d,n)?c[n]=d[n]:c[n]=l&&u?u(e):p(e)}return c[n]}},function(n,e,t){var r=t(3);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(0),a=t(9),i=r.String,o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not an object")}},function(n,e,t){var r=t(5);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e){var t=Function.prototype.call;n.exports=t.bind?t.bind(t):function(){return t.apply(t,arguments)}},function(n,e,t){var r=t(2),a=t(15),i=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return i(a(n),e)}},function(n,e,t){var r=t(0),a=t(7),i=t(152),o=t(151),s=t(8),l=t(78),c=r.TypeError,d=Object.defineProperty,u=Object.getOwnPropertyDescriptor;e.f=a?o?function(n,e,t){if(s(n),e=l(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=u(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return d(n,e,t)}:d:function(n,e,t){if(s(n),e=l(e),s(t),i)try{return d(n,e,t)}catch(n){}if("get"in t||"set"in t)throw c("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(0),a=t(72),i=r.String;n.exports=function(n){if("Symbol"===a(n))throw TypeError("Cannot convert a Symbol value to a string");return i(n)}},function(n,e,t){var r=t(0),a=t(5),i=t(11),o=t(37),s=t(108),l=t(83),c=t(34),d=t(63).CONFIGURABLE,u=c.get,p=c.enforce,h=String(String).split("String");(n.exports=function(n,e,t,l){var c,u=!!l&&!!l.unsafe,f=!!l&&!!l.enumerable,m=!!l&&!!l.noTargetGet,g=l&&void 0!==l.name?l.name:e;a(t)&&("Symbol("===String(g).slice(0,7)&&(g="["+String(g).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(t,"name")||d&&t.name!==g)&&o(t,"name",g),(c=p(t)).source||(c.source=h.join("string"==typeof g?g:""))),n!==r?(u?!m&&n[e]&&(f=!0):delete n[e],f?n[e]=t:o(n,e,t)):f?n[e]=t:s(e,t)})(Function.prototype,"toString",(function(){return a(this)&&u(this).source||l(this)}))},function(n,e,t){var r=t(0),a=t(16),i=r.Object;n.exports=function(n){return i(a(n))}},function(n,e,t){var r=t(0).TypeError;n.exports=function(n){if(null==n)throw r("Can't call method on "+n);return n}},function(n,e,t){var r=t(60),a=t(16);n.exports=function(n){return r(a(n))}},function(n,e,t){var r=t(0),a=t(5),i=function(n){return a(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?i(r[n]):r[n]&&r[n][e]}},function(n,e,t){"use strict";function r(n,e,t,r,a,i,o,s){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),i&&(c._scopeId="data-v-"+i),o?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(o)},c._ssrRegister=l):a&&(l=s?function(){a.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:a),l)if(c.functional){c._injectStyles=l;var d=c.render;c.render=function(n,e){return l.call(e),d(n,e)}}else{var u=c.beforeCreate;c.beforeCreate=u?[].concat(u,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(1),a=t(90);r({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},function(n,e,t){"use strict";var r=t(169).charAt,a=t(13),i=t(34),o=t(156),s=i.set,l=i.getterFor("String Iterator");o(String,"String",(function(n){s(this,{type:"String Iterator",string:a(n),index:0})}),(function(){var n,e=l(this),t=e.string,a=e.index;return a>=t.length?{value:void 0,done:!0}:(n=r(t,a),e.index+=n.length,{value:n,done:!1})}))},function(n,e,t){var r=t(50);n.exports=function(n){return r(n.length)}},function(n,e,t){"use strict";var r=t(1),a=t(54).filter;r({target:"Array",proto:!0,forced:!t(88)("filter")},{filter:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),a=t(170),i=t(171),o=t(140),s=t(37),l=t(6),c=l("iterator"),d=l("toStringTag"),u=o.values,p=function(n,e){if(n){if(n[c]!==u)try{s(n,c,u)}catch(e){n[c]=u}if(n[d]||s(n,d,e),a[e])for(var t in o)if(n[t]!==o[t])try{s(n,t,o[t])}catch(e){n[t]=o[t]}}};for(var h in a)p(r[h]&&r[h].prototype,h);p(i,"DOMTokenList")},function(n,e,t){var r=t(2),a=r({}.toString),i=r("".slice);n.exports=function(n){return i(a(n),8,-1)}},function(n,e,t){"use strict";var r=t(1),a=t(177);r({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},function(n,e,t){var r=t(0),a=t(170),i=t(171),o=t(177),s=t(37),l=function(n){if(n&&n.forEach!==o)try{s(n,"forEach",o)}catch(e){n.forEach=o}};for(var c in a)a[c]&&l(r[c]&&r[c].prototype);l(i)},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(18);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(186),a="object"==typeof self&&self&&self.Object===Object&&self,i=r||a||Function("return this")();n.exports=i},function(n,e){n.exports=!1},function(n,e,t){var r=t(0),a=t(5),i=t(80),o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not a function")}},function(n,e,t){var r=t(7),a=t(10),i=t(114),o=t(55),s=t(17),l=t(78),c=t(11),d=t(152),u=Object.getOwnPropertyDescriptor;e.f=r?u:function(n,e){if(n=s(n),e=l(e),d)try{return u(n,e)}catch(n){}if(c(n,e))return o(!a(i.f,n,e),n[e])}},function(n,e,t){var r,a,i,o=t(234),s=t(0),l=t(2),c=t(9),d=t(37),u=t(11),p=t(107),h=t(82),f=t(61),m=s.TypeError,g=s.WeakMap;if(o||p.state){var v=p.state||(p.state=new g),E=l(v.get),b=l(v.has),y=l(v.set);r=function(n,e){if(b(v,n))throw new m("Object already initialized");return e.facade=n,y(v,n,e),e},a=function(n){return E(v,n)||{}},i=function(n){return b(v,n)}}else{var A=h("state");f[A]=!0,r=function(n,e){if(u(n,A))throw new m("Object already initialized");return e.facade=n,d(n,A,e),e},a=function(n){return u(n,A)?n[A]:{}},i=function(n){return u(n,A)}}n.exports={set:r,get:a,has:i,enforce:function(n){return i(n)?a(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!c(e)||(t=a(e)).type!==n)throw m("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r,a=t(8),i=t(110),o=t(113),s=t(61),l=t(155),c=t(77),d=t(82),u=d("IE_PROTO"),p=function(){},h=function(n){return"<script>"+n+"<\/script>"},f=function(n){n.write(h("")),n.close();var e=n.parentWindow.Object;return n=null,e},m=function(){try{r=new ActiveXObject("htmlfile")}catch(n){}var n,e;m="undefined"!=typeof document?document.domain&&r?f(r):((e=c("iframe")).style.display="none",l.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(h("document.F=Object")),n.close(),n.F):f(r);for(var t=o.length;t--;)delete m.prototype[o[t]];return m()};s[u]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(p.prototype=a(n),t=new p,p.prototype=null,t[u]=n):t=m(),void 0===e?t:i.f(t,e)}},function(n,e,t){var r=t(2);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(7),a=t(12),i=t(55);n.exports=r?function(n,e,t){return a.f(n,e,i(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e){var t=Function.prototype,r=t.apply,a=t.bind,i=t.call;n.exports="object"==typeof Reflect&&Reflect.apply||(a?i.bind(r):function(){return i.apply(r,arguments)})},function(n,e,t){var r=t(278),a=t(281);n.exports=function(n,e){var t=a(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";var r=t(1),a=t(0),i=t(58),o=t(85),s=t(9),l=t(112),c=t(22),d=t(17),u=t(65),p=t(6),h=t(88),f=t(64),m=h("slice"),g=p("species"),v=a.Array,E=Math.max;r({target:"Array",proto:!0,forced:!m},{slice:function(n,e){var t,r,a,p=d(this),h=c(p),m=l(n,h),b=l(void 0===e?h:e,h);if(i(p)&&(t=p.constructor,(o(t)&&(t===v||i(t.prototype))||s(t)&&null===(t=t[g]))&&(t=void 0),t===v||void 0===t))return f(p,m,b);for(r=new(void 0===t?v:t)(E(b-m,0)),a=0;m<b;m++,a++)m in p&&u(r,a,p[m]);return r.length=a,r}})},function(n,e,t){var r=t(1),a=t(0),i=t(38),o=t(5),s=t(29),l=t(64),c=/MSIE .\./.test(s),d=a.Function,u=function(n){return function(e,t){var r=arguments.length>2,a=r?l(arguments,2):void 0;return n(r?function(){i(o(e)?e:d(e),this,a)}:e,t)}};r({global:!0,bind:!0,forced:c},{setTimeout:u(a.setTimeout),setInterval:u(a.setInterval)})},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return i})),t.d(e,"j",(function(){return o})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return d})),t.d(e,"c",(function(){return u})),t.d(e,"f",(function(){return p})),t.d(e,"l",(function(){return h})),t.d(e,"m",(function(){return f})),t.d(e,"d",(function(){return g})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return E})),t.d(e,"a",(function(){return y}));t(20),t(44),t(136),t(70),t(134),t(106),t(43),t(26),t(4),t(27),t(23),t(73),t(100),t(149),t(51),t(206),t(139);var r=/#.*$/,a=/\.(md|html)$/,i=/\/$/,o=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(a,"")}function l(n){return o.test(n)}function c(n){return/^mailto:/.test(n)}function d(n){return/^tel:/.test(n)}function u(n){if(l(n))return n;var e=n.match(r),t=e?e[0]:"",a=s(n);return i.test(a)?n:a+".html"+t}function p(n,e){var t=n.hash,a=function(n){var e=n.match(r);if(e)return e[0]}(e);return(!a||t===a)&&s(n.path)===s(e)}function h(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?a.pop():"."!==s&&a.push(s)}""!==a[0]&&a.unshift("");return a.join("/")}(e,t));for(var r=s(e),a=0;a<n.length;a++)if(s(n[a].regularPath)===r)return Object.assign({},n[a],{type:"page",path:u(n[a].path)});return console.error('[vuepress] No matching page found for sidebar item "'.concat(e,'"')),{}}function f(n,e,t,r){var a=t.pages,i=t.themeConfig,o=r&&i.locales&&i.locales[r]||i;if("auto"===(n.frontmatter.sidebar||o.sidebar||i.sidebar))return m(n);var s=o.sidebar||i.sidebar;if(s){var l=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(var t in e)if(0===(r=n,/(\.html|\/)$/.test(r)?r:r+"/").indexOf(encodeURI(t)))return{base:t,config:e[t]};var r;return{}}(e,s),c=l.base,d=l.config;return"auto"===d?m(n):d?d.map((function(n){return function n(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if("string"==typeof e)return h(t,e,r);if(Array.isArray(e))return Object.assign(h(t,e[0],r),{title:e[1]});a>3&&console.error("[vuepress] detected a too deep nested sidebar group.");var i=e.children||[];return 0===i.length&&e.path?Object.assign(h(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:i.map((function(e){return n(e,t,r,a+1)})),collapsable:!1!==e.collapsable}}(n,a,c)})):[]}return[]}function m(n){var e=g(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map((function(e){return{type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}}))}]}function g(n){var e;return(n=n.map((function(n){return Object.assign({},n)}))).forEach((function(n){2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)})),n.filter((function(n){return 2===n.level}))}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function E(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function b(n){var e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function y(n,e){return b(e)-b(n)}},function(n,e,t){"use strict";var r=t(1),a=t(54).map;r({target:"Array",proto:!0,forced:!t(88)("map")},{map:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(38),a=t(10),i=t(2),o=t(104),s=t(3),l=t(8),c=t(5),d=t(52),u=t(50),p=t(13),h=t(16),f=t(122),m=t(46),g=t(259),v=t(105),E=t(6)("replace"),b=Math.max,y=Math.min,A=i([].concat),k=i([].push),x=i("".indexOf),B=i("".slice),_="$0"==="a".replace(/./,"$0"),T=!!/./[E]&&""===/./[E]("a","$0");o("replace",(function(n,e,t){var i=T?"$":"$0";return[function(n,t){var r=h(this),i=null==n?void 0:m(n,E);return i?a(i,n,r,t):a(e,p(r),n,t)},function(n,a){var o=l(this),s=p(n);if("string"==typeof a&&-1===x(a,i)&&-1===x(a,"$<")){var h=t(e,o,s,a);if(h.done)return h.value}var m=c(a);m||(a=p(a));var E=o.global;if(E){var _=o.unicode;o.lastIndex=0}for(var T=[];;){var w=v(o,s);if(null===w)break;if(k(T,w),!E)break;""===p(w[0])&&(o.lastIndex=f(s,u(o.lastIndex),_))}for(var C,P="",S=0,I=0;I<T.length;I++){for(var O=p((w=T[I])[0]),j=b(y(d(w.index),s.length),0),L=[],D=1;D<w.length;D++)k(L,void 0===(C=w[D])?C:String(C));var z=w.groups;if(m){var F=A([O],L,j,s);void 0!==z&&k(F,z);var R=p(r(a,void 0,F))}else R=g(O,s,j,L,z,a);j>=S&&(P+=B(s,S,j)+R,S=j+O.length)}return P+B(s,S)}]}),!!s((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!_||T)},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){throw 1},1)}))}},function(n,e,t){var r=t(32);n.exports=function(n,e){var t=n[e];return null==t?void 0:r(t)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(71),t(66),t(23),t(4),t(370),t(26),t(27),t(172),t(371),t(96);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}},function(n,e,t){var r,a,i=t(0),o=t(29),s=i.process,l=i.Deno,c=s&&s.versions||l&&l.version,d=c&&c.v8;d&&(a=(r=d.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&o&&(!(r=o.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=o.match(/Chrome\/(\d+)/))&&(a=+r[1]),n.exports=a},function(n,e,t){var r=t(52),a=Math.min;n.exports=function(n){return n>0?a(r(n),9007199254740991):0}},function(n,e,t){"use strict";var r=t(1),a=t(0),i=t(3),o=t(58),s=t(9),l=t(15),c=t(22),d=t(65),u=t(142),p=t(88),h=t(6),f=t(49),m=h("isConcatSpreadable"),g=a.TypeError,v=f>=51||!i((function(){var n=[];return n[m]=!1,n.concat()[0]!==n})),E=p("concat"),b=function(n){if(!s(n))return!1;var e=n[m];return void 0!==e?!!e:o(n)};r({target:"Array",proto:!0,forced:!v||!E},{concat:function(n){var e,t,r,a,i,o=l(this),s=u(o,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(b(i=-1===e?o:arguments[e])){if(p+(a=c(i))>9007199254740991)throw g("Maximum allowed index exceeded");for(t=0;t<a;t++,p++)t in i&&d(s,p,i[t])}else{if(p>=9007199254740991)throw g("Maximum allowed index exceeded");d(s,p++,i)}return s.length=p,s}})},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=function(n){var e=+n;return e!=e||0===e?0:(e>0?r:t)(e)}},function(n,e,t){var r=t(2),a=t(32),i=r(r.bind);n.exports=function(n,e){return a(n),void 0===e?n:i?i(n,e):function(){return n.apply(e,arguments)}}},function(n,e,t){var r=t(53),a=t(2),i=t(60),o=t(15),s=t(22),l=t(142),c=a([].push),d=function(n){var e=1==n,t=2==n,a=3==n,d=4==n,u=6==n,p=7==n,h=5==n||u;return function(f,m,g,v){for(var E,b,y=o(f),A=i(y),k=r(m,g),x=s(A),B=0,_=v||l,T=e?_(f,x):t||p?_(f,0):void 0;x>B;B++)if((h||B in A)&&(b=k(E=A[B],B,y),n))if(e)T[B]=b;else if(b)switch(n){case 3:return!0;case 5:return E;case 6:return B;case 2:c(T,E)}else switch(n){case 4:return!1;case 7:c(T,E)}return u?-1:a||d?d:T}};n.exports={forEach:d(0),map:d(1),filter:d(2),some:d(3),every:d(4),find:d(5),findIndex:d(6),filterReject:d(7)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(154),a=t(113).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,a)}},function(n,e,t){var r=t(12).f,a=t(11),i=t(6)("toStringTag");n.exports=function(n,e,t){n&&!t&&(n=n.prototype),n&&!a(n,i)&&r(n,i,{configurable:!0,value:e})}},function(n,e,t){var r=t(25);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e,t){var r=t(67),a=t(263),i=t(264),o=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":o&&o in Object(n)?a(n):i(n)}},function(n,e,t){var r=t(0),a=t(2),i=t(3),o=t(25),s=r.Object,l=a("".split);n.exports=i((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==o(n)?l(n,""):s(n)}:s},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){var r=t(7),a=t(11),i=Function.prototype,o=r&&Object.getOwnPropertyDescriptor,s=a(i,"name"),l=s&&"something"===function(){}.name,c=s&&(!r||r&&o(i,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(n,e,t){var r=t(2);n.exports=r([].slice)},function(n,e,t){"use strict";var r=t(78),a=t(12),i=t(55);n.exports=function(n,e,t){var o=r(e);o in n?a.f(n,o,i(0,t)):n[o]=t}},function(n,e,t){"use strict";var r=t(1),a=t(0),i=t(18),o=t(38),s=t(10),l=t(2),c=t(31),d=t(7),u=t(109),p=t(3),h=t(11),f=t(58),m=t(5),g=t(9),v=t(36),E=t(79),b=t(8),y=t(15),A=t(17),k=t(78),x=t(13),B=t(55),_=t(35),T=t(81),w=t(56),C=t(179),P=t(116),S=t(33),I=t(12),O=t(110),j=t(114),L=t(64),D=t(14),z=t(75),F=t(82),R=t(61),U=t(76),M=t(6),q=t(180),N=t(181),K=t(57),$=t(34),H=t(54).forEach,Q=F("hidden"),G=M("toPrimitive"),W=$.set,V=$.getterFor("Symbol"),Z=Object.prototype,J=a.Symbol,Y=J&&J.prototype,X=a.TypeError,nn=a.QObject,en=i("JSON","stringify"),tn=S.f,rn=I.f,an=C.f,on=j.f,sn=l([].push),ln=z("symbols"),cn=z("op-symbols"),dn=z("string-to-symbol-registry"),un=z("symbol-to-string-registry"),pn=z("wks"),hn=!nn||!nn.prototype||!nn.prototype.findChild,fn=d&&p((function(){return 7!=_(rn({},"a",{get:function(){return rn(this,"a",{value:7}).a}})).a}))?function(n,e,t){var r=tn(Z,e);r&&delete Z[e],rn(n,e,t),r&&n!==Z&&rn(Z,e,r)}:rn,mn=function(n,e){var t=ln[n]=_(Y);return W(t,{type:"Symbol",tag:n,description:e}),d||(t.description=e),t},gn=function(n,e,t){n===Z&&gn(cn,e,t),b(n);var r=k(e);return b(t),h(ln,r)?(t.enumerable?(h(n,Q)&&n[Q][r]&&(n[Q][r]=!1),t=_(t,{enumerable:B(0,!1)})):(h(n,Q)||rn(n,Q,B(1,{})),n[Q][r]=!0),fn(n,r,t)):rn(n,r,t)},vn=function(n,e){b(n);var t=A(e),r=T(t).concat(An(t));return H(r,(function(e){d&&!s(En,t,e)||gn(n,e,t[e])})),n},En=function(n){var e=k(n),t=s(on,this,e);return!(this===Z&&h(ln,e)&&!h(cn,e))&&(!(t||!h(this,e)||!h(ln,e)||h(this,Q)&&this[Q][e])||t)},bn=function(n,e){var t=A(n),r=k(e);if(t!==Z||!h(ln,r)||h(cn,r)){var a=tn(t,r);return!a||!h(ln,r)||h(t,Q)&&t[Q][r]||(a.enumerable=!0),a}},yn=function(n){var e=an(A(n)),t=[];return H(e,(function(n){h(ln,n)||h(R,n)||sn(t,n)})),t},An=function(n){var e=n===Z,t=an(e?cn:A(n)),r=[];return H(t,(function(n){!h(ln,n)||e&&!h(Z,n)||sn(r,ln[n])})),r};(u||(D(Y=(J=function(){if(v(Y,this))throw X("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?x(arguments[0]):void 0,e=U(n),t=function(n){this===Z&&s(t,cn,n),h(this,Q)&&h(this[Q],e)&&(this[Q][e]=!1),fn(this,e,B(1,n))};return d&&hn&&fn(Z,e,{configurable:!0,set:t}),mn(e,n)}).prototype,"toString",(function(){return V(this).tag})),D(J,"withoutSetter",(function(n){return mn(U(n),n)})),j.f=En,I.f=gn,O.f=vn,S.f=bn,w.f=C.f=yn,P.f=An,q.f=function(n){return mn(M(n),n)},d&&(rn(Y,"description",{configurable:!0,get:function(){return V(this).description}}),c||D(Z,"propertyIsEnumerable",En,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:J}),H(T(pn),(function(n){N(n)})),r({target:"Symbol",stat:!0,forced:!u},{for:function(n){var e=x(n);if(h(dn,e))return dn[e];var t=J(e);return dn[e]=t,un[t]=e,t},keyFor:function(n){if(!E(n))throw X(n+" is not a symbol");if(h(un,n))return un[n]},useSetter:function(){hn=!0},useSimple:function(){hn=!1}}),r({target:"Object",stat:!0,forced:!u,sham:!d},{create:function(n,e){return void 0===e?_(n):vn(_(n),e)},defineProperty:gn,defineProperties:vn,getOwnPropertyDescriptor:bn}),r({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:yn,getOwnPropertySymbols:An}),r({target:"Object",stat:!0,forced:p((function(){P.f(1)}))},{getOwnPropertySymbols:function(n){return P.f(y(n))}}),en)&&r({target:"JSON",stat:!0,forced:!u||p((function(){var n=J();return"[null]"!=en([n])||"{}"!=en({a:n})||"{}"!=en(Object(n))}))},{stringify:function(n,e,t){var r=L(arguments),a=e;if((g(e)||void 0!==n)&&!E(n))return f(e)||(e=function(n,e){if(m(a)&&(e=s(a,this,n,e)),!E(e))return e}),r[1]=e,o(en,null,r)}});if(!Y[G]){var kn=Y.valueOf;D(Y,G,(function(n){return s(kn,this)}))}K(J,"Symbol"),R[Q]=!0},function(n,e,t){var r=t(30).Symbol;n.exports=r},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(73);var r=t(69);t(66),t(89),t(4),t(121),t(21),t(24),t(182);var a=t(97);function i(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(a.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function r(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";t(20);var r,a,i=t(1),o=t(0),s=t(10),l=t(2),c=t(5),d=t(9),u=(r=!1,(a=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===a.test("abc")&&r),p=o.Error,h=l(/./.test);i({target:"RegExp",proto:!0,forced:!u},{test:function(n){var e=this.exec;if(!c(e))return h(this,n);var t=s(e,this,n);if(null!==t&&!d(t))throw new p("RegExp exec method returned something other than an Object or null");return!!t}})},function(n,e,t){var r=t(1),a=t(15),i=t(81);r({target:"Object",stat:!0,forced:t(3)((function(){i(1)}))},{keys:function(n){return i(a(n))}})},function(n,e,t){var r=t(0),a=t(118),i=t(5),o=t(25),s=t(6)("toStringTag"),l=r.Object,c="Arguments"==o(function(){return arguments}());n.exports=a?o:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=l(n),s))?t:c?o(e):"Object"==(r=o(e))&&i(e.callee)?"Arguments":r}},function(n,e,t){t(1)({target:"Array",stat:!0},{isArray:t(58)})},function(n,e,t){var r=t(7),a=t(63).EXISTS,i=t(2),o=t(12).f,s=Function.prototype,l=i(s.toString),c=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,d=i(c.exec);r&&!a&&o(s,"name",{configurable:!0,get:function(){try{return d(c,l(this))[1]}catch(n){return""}}})},function(n,e,t){var r=t(31),a=t(107);(n.exports=function(n,e){return a[n]||(a[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.20.2",mode:r?"pure":"global",copyright:"© 2022 Denis Pushkarev (zloirock.ru)"})},function(n,e,t){var r=t(2),a=0,i=Math.random(),o=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+o(++a+i,36)}},function(n,e,t){var r=t(0),a=t(9),i=r.document,o=a(i)&&a(i.createElement);n.exports=function(n){return o?i.createElement(n):{}}},function(n,e,t){var r=t(153),a=t(79);n.exports=function(n){var e=r(n,"string");return a(e)?e:e+""}},function(n,e,t){var r=t(0),a=t(18),i=t(5),o=t(36),s=t(150),l=r.Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=a("Symbol");return i(e)&&o(e.prototype,l(n))}},function(n,e,t){var r=t(0).String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(154),a=t(113);n.exports=Object.keys||function(n){return r(n,a)}},function(n,e,t){var r=t(75),a=t(76),i=r("keys");n.exports=function(n){return i[n]||(i[n]=a(n))}},function(n,e,t){var r=t(2),a=t(5),i=t(107),o=r(Function.toString);a(i.inspectSource)||(i.inspectSource=function(n){return o(n)}),n.exports=i.inspectSource},function(n,e,t){var r=t(2),a=t(8),i=t(235);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return a(t),i(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e,t){var r=t(2),a=t(3),i=t(5),o=t(72),s=t(18),l=t(83),c=function(){},d=[],u=s("Reflect","construct"),p=/^\s*(?:class|function)\b/,h=r(p.exec),f=!p.exec(c),m=function(n){if(!i(n))return!1;try{return u(c,d,n),!0}catch(n){return!1}},g=function(n){if(!i(n))return!1;switch(o(n)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return f||!!h(p,l(n))}catch(n){return!0}};g.sham=!0,n.exports=!u||a((function(){var n;return m(m.call)||!m(Object)||!m((function(){n=!0}))||n}))?g:m},function(n,e,t){var r=t(25),a=t(0);n.exports="process"==r(a.process)},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(4);function r(n,e,t,r,a,i,o){try{var s=n[i](o),l=s.value}catch(n){return void t(n)}s.done?e(l):Promise.resolve(l).then(r,a)}function a(n){return function(){var e=this,t=arguments;return new Promise((function(a,i){var o=n.apply(e,t);function s(n){r(o,a,i,s,l,"next",n)}function l(n){r(o,a,i,s,l,"throw",n)}s(void 0)}))}}},function(n,e,t){var r=t(3),a=t(6),i=t(49),o=a("species");n.exports=function(n){return i>=51||!r((function(){var e=[];return(e.constructor={})[o]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){"use strict";var r=t(1),a=t(7),i=t(0),o=t(2),s=t(11),l=t(5),c=t(36),d=t(13),u=t(12).f,p=t(157),h=i.Symbol,f=h&&h.prototype;if(a&&l(h)&&(!("description"in f)||void 0!==h().description)){var m={},g=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:d(arguments[0]),e=c(f,this)?new h(n):void 0===n?h():h(n);return""===n&&(m[e]=!0),e};p(g,h),g.prototype=f,f.constructor=g;var v="Symbol(test)"==String(h("test")),E=o(f.toString),b=o(f.valueOf),y=/^Symbol\((.*)\)[^)]+$/,A=o("".replace),k=o("".slice);u(f,"description",{configurable:!0,get:function(){var n=b(this),e=E(n);if(s(m,n))return"";var t=v?k(e,7,-1):A(e,y,"$1");return""===t?void 0:t}}),r({global:!0,forced:!0},{Symbol:g})}},function(n,e,t){"use strict";var r,a,i=t(10),o=t(2),s=t(13),l=t(144),c=t(103),d=t(75),u=t(35),p=t(34).get,h=t(219),f=t(224),m=d("native-string-replace",String.prototype.replace),g=RegExp.prototype.exec,v=g,E=o("".charAt),b=o("".indexOf),y=o("".replace),A=o("".slice),k=(a=/b*/g,i(g,r=/a/,"a"),i(g,a,"a"),0!==r.lastIndex||0!==a.lastIndex),x=c.BROKEN_CARET,B=void 0!==/()??/.exec("")[1];(k||B||x||h||f)&&(v=function(n){var e,t,r,a,o,c,d,h=this,f=p(h),_=s(n),T=f.raw;if(T)return T.lastIndex=h.lastIndex,e=i(v,T,_),h.lastIndex=T.lastIndex,e;var w=f.groups,C=x&&h.sticky,P=i(l,h),S=h.source,I=0,O=_;if(C&&(P=y(P,"y",""),-1===b(P,"g")&&(P+="g"),O=A(_,h.lastIndex),h.lastIndex>0&&(!h.multiline||h.multiline&&"\n"!==E(_,h.lastIndex-1))&&(S="(?: "+S+")",O=" "+O,I++),t=new RegExp("^(?:"+S+")",P)),B&&(t=new RegExp("^"+S+"$(?!\\s)",P)),k&&(r=h.lastIndex),a=i(g,C?t:h,O),C?a?(a.input=A(a.input,I),a[0]=A(a[0],I),a.index=h.lastIndex,h.lastIndex+=a[0].length):h.lastIndex=0:k&&a&&(h.lastIndex=h.global?a.index+a[0].length:r),B&&a&&a.length>1&&i(m,a[0],t,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(a[o]=void 0)})),a&&w)for(a.groups=c=u(null),o=0;o<w.length;o++)c[(d=w[o])[0]]=a[d[1]];return a}),n.exports=v},function(n,e,t){var r=t(268),a=t(269),i=t(270),o=t(271),s=t(272);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(188);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(39)(Object,"create");n.exports=r},function(n,e,t){var r=t(290);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(130);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r=t(1),a=t(7),i=t(12).f;r({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!a},{defineProperty:i})},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(40),t(4),t(74),t(182),t(21),t(20),t(70);var r=t(69);function a(n,e){if(n){if("string"==typeof n)return Object(r.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(n,e):void 0}}},function(n,e,t){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,e,t){return n<e?e:n>t?t:n}function i(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=a(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),d=r.speed,u=r.easing;return l.offsetWidth,o((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(c,function(n,e,t){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+e+"ms "+t,a}(n,d,u)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),d)}),d)):setTimeout(e,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*a(Math.random()*e,.1,.95)),e=a(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var a,o=e.querySelector(r.barSelector),l=n?"-100":i(t.status||0),d=document.querySelector(r.parent);return s(o,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(a=e.querySelector(r.spinnerSelector))&&p(a),d!=document.body&&c(d,"nprogress-custom-parent"),d.appendChild(e),e},t.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&p(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var o=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,a=n.length,i=e.charAt(0).toUpperCase()+e.slice(1);a--;)if((r=n[a]+i)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,a,i=arguments;if(2==i.length)for(t in e)void 0!==(a=e[t])&&e.hasOwnProperty(t)&&r(n,t,a);else r(n,i[1],i[2])}}();function l(n,e){return("string"==typeof n?n:u(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=u(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function d(n,e){var t,r=u(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function u(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function p(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=a)},function(n){n.exports=JSON.parse('{"name":"vuepress-plugin-comment","version":"0.7.3","description":"Comment plugin in vuepress, such as Gitalk, Valine...","main":"index.js","scripts":{"test":"echo \\"Error: no test specified\\" && exit 1"},"repository":{"type":"git","url":"git+ssh://git@github.com/dongyuanxin/vuepress-plugin-comment.git"},"keywords":["vuepress","comment","plugin","vue","gitalk","valine"],"author":"dongyuanxin","license":"MIT","bugs":{"url":"https://github.com/dongyuanxin/vuepress-plugin-comment/issues"},"homepage":"https://github.com/dongyuanxin/vuepress-plugin-comment#readme","dependencies":{"ejs":"^2.6.1","gitalk":"^1.5.0","gitalk-fix":"^1.5.2","i":"^0.3.6","npm":"^6.9.0","valine":"^1.3.9"}}')},function(n,e,t){"use strict";var r=t(1),a=t(2),i=t(111).indexOf,o=t(45),s=a([].indexOf),l=!!s&&1/s([1],1,-0)<0,c=o("indexOf");r({target:"Array",proto:!0,forced:l||!c},{indexOf:function(n){var e=arguments.length>1?arguments[1]:void 0;return l?s(this,n,e)||0:i(this,n,e)}})},function(n,e,t){var r=t(3),a=t(5),i=/#|\.prototype\./,o=function(n,e){var t=l[s(n)];return t==d||t!=c&&(a(e)?r(e):!!e)},s=o.normalize=function(n){return String(n).replace(i,".").toLowerCase()},l=o.data={},c=o.NATIVE="N",d=o.POLYFILL="P";n.exports=o},function(n,e,t){var r=t(72),a=t(46),i=t(62),o=t(6)("iterator");n.exports=function(n){if(null!=n)return a(n,o)||a(n,"@@iterator")||i[r(n)]}},function(n,e,t){var r=t(3),a=t(0).RegExp,i=r((function(){var n=a("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),o=i||r((function(){return!a("a","y").sticky})),s=i||r((function(){var n=a("^r","gy");return n.lastIndex=2,null!=n.exec("str")}));n.exports={BROKEN_CARET:s,MISSED_STICKY:o,UNSUPPORTED_Y:i}},function(n,e,t){"use strict";t(20);var r=t(2),a=t(14),i=t(90),o=t(3),s=t(6),l=t(37),c=s("species"),d=RegExp.prototype;n.exports=function(n,e,t,u){var p=s(n),h=!o((function(){var e={};return e[p]=function(){return 7},7!=""[n](e)})),f=h&&!o((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[c]=function(){return t},t.flags="",t[p]=/./[p]),t.exec=function(){return e=!0,null},t[p](""),!e}));if(!h||!f||t){var m=r(/./[p]),g=e(p,""[n],(function(n,e,t,a,o){var s=r(n),l=e.exec;return l===i||l===d.exec?h&&!o?{done:!0,value:m(e,t,a)}:{done:!0,value:s(t,e,a)}:{done:!1}}));a(String.prototype,n,g[0]),a(d,p,g[1])}u&&l(d[p],"sham",!0)}},function(n,e,t){var r=t(0),a=t(10),i=t(8),o=t(5),s=t(25),l=t(90),c=r.TypeError;n.exports=function(n,e){var t=n.exec;if(o(t)){var r=a(t,n,e);return null!==r&&i(r),r}if("RegExp"===s(n))return a(l,n,e);throw c("RegExp#exec called on incompatible receiver")}},function(n,e,t){"use strict";var r=t(1),a=t(2),i=t(60),o=t(17),s=t(45),l=a([].join),c=i!=Object,d=s("join",",");r({target:"Array",proto:!0,forced:c||!d},{join:function(n){return l(o(this),void 0===n?",":n)}})},function(n,e,t){var r=t(0),a=t(108),i=r["__core-js_shared__"]||a("__core-js_shared__",{});n.exports=i},function(n,e,t){var r=t(0),a=Object.defineProperty;n.exports=function(n,e){try{a(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(49),a=t(3);n.exports=!!Object.getOwnPropertySymbols&&!a((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r=t(7),a=t(151),i=t(12),o=t(8),s=t(17),l=t(81);e.f=r&&!a?Object.defineProperties:function(n,e){o(n);for(var t,r=s(e),a=l(e),c=a.length,d=0;c>d;)i.f(n,t=a[d++],r[t]);return n}},function(n,e,t){var r=t(17),a=t(112),i=t(22),o=function(n){return function(e,t,o){var s,l=r(e),c=i(l),d=a(o,c);if(n&&t!=t){for(;c>d;)if((s=l[d++])!=s)return!0}else for(;c>d;d++)if((n||d in l)&&l[d]===t)return n||d||0;return!n&&-1}};n.exports={includes:o(!0),indexOf:o(!1)}},function(n,e,t){var r=t(52),a=Math.max,i=Math.min;n.exports=function(n,e){var t=r(n);return t<0?a(t+e,0):i(t,e)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!r.call({1:2},1);e.f=i?function(n){var e=a(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(18),a=t(2),i=t(56),o=t(116),s=t(8),l=a([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=i.f(s(n)),t=o.f;return t?l(e,t(n)):e}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(0),a=t(11),i=t(5),o=t(15),s=t(82),l=t(159),c=s("IE_PROTO"),d=r.Object,u=d.prototype;n.exports=l?d.getPrototypeOf:function(n){var e=o(n);if(a(e,c))return e[c];var t=e.constructor;return i(t)&&e instanceof t?t.prototype:e instanceof d?u:null}},function(n,e,t){var r={};r[t(6)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(8),a=t(164),i=t(6)("species");n.exports=function(n,e){var t,o=r(n).constructor;return void 0===o||null==(t=r(o)[i])?e:a(t)}},function(n,e,t){var r=t(0),a=t(112),i=t(22),o=t(65),s=r.Array,l=Math.max;n.exports=function(n,e,t){for(var r=i(n),c=a(e,r),d=a(void 0===t?r:t,r),u=s(l(d-c,0)),p=0;c<d;c++,p++)o(u,p,n[c]);return u.length=p,u}},function(n,e,t){t(181)("iterator")},function(n,e,t){"use strict";var r=t(169).charAt;n.exports=function(n,e,t){return e+(t?r(n,e).length:1)}},function(n,e,t){var r=t(262),a=t(47),i=Object.prototype,o=i.hasOwnProperty,s=i.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return a(n)&&o.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(39)(t(30),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(282),a=t(289),i=t(291),o=t(292),s=t(293);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(28),a=t(130),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!a(n))||(o.test(n)||!i.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(59),a=t(47);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){var r=t(1),a=t(0),i=t(57);r({global:!0},{Reflect:{}}),i(a.Reflect,"Reflect",!0)},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(73);t(66),t(89),t(4),t(121),t(21),t(24);var r=t(97);function a(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,a,i=[],o=!0,s=!1;try{for(t=t.call(n);!(o=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(n){s=!0,a=n}finally{try{o||null==t.return||t.return()}finally{if(s)throw a}}return i}}(n,e)||Object(r.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";var r=t(38),a=t(10),i=t(2),o=t(104),s=t(143),l=t(8),c=t(16),d=t(119),u=t(122),p=t(50),h=t(13),f=t(46),m=t(120),g=t(105),v=t(90),E=t(103),b=t(3),y=E.UNSUPPORTED_Y,A=Math.min,k=[].push,x=i(/./.exec),B=i(k),_=i("".slice);o("split",(function(n,e,t){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(n,t){var i=h(c(this)),o=void 0===t?4294967295:t>>>0;if(0===o)return[];if(void 0===n)return[i];if(!s(n))return a(e,i,n,o);for(var l,d,u,p=[],f=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),g=0,E=new RegExp(n.source,f+"g");(l=a(v,E,i))&&!((d=E.lastIndex)>g&&(B(p,_(i,g,l.index)),l.length>1&&l.index<i.length&&r(k,p,m(l,1)),u=l[0].length,g=d,p.length>=o));)E.lastIndex===l.index&&E.lastIndex++;return g===i.length?!u&&x(E,"")||B(p,""):B(p,_(i,g)),p.length>o?m(p,0,o):p}:"0".split(void 0,0).length?function(n,t){return void 0===n&&0===t?[]:a(e,this,n,t)}:e,[function(e,t){var r=c(this),o=null==e?void 0:f(e,n);return o?a(o,e,r,t):a(i,h(r),e,t)},function(n,r){var a=l(this),o=h(n),s=t(i,a,o,r,i!==e);if(s.done)return s.value;var c=d(a,RegExp),f=a.unicode,m=(a.ignoreCase?"i":"")+(a.multiline?"m":"")+(a.unicode?"u":"")+(y?"g":"y"),v=new c(y?"^(?:"+a.source+")":a,m),E=void 0===r?4294967295:r>>>0;if(0===E)return[];if(0===o.length)return null===g(v,o)?[o]:[];for(var b=0,k=0,x=[];k<o.length;){v.lastIndex=y?0:k;var T,w=g(v,y?_(o,k):o);if(null===w||(T=A(p(v.lastIndex+(y?k:0)),o.length))===b)k=u(o,k,f);else{if(B(x,_(o,b,k)),x.length===E)return x;for(var C=1;C<=w.length-1;C++)if(B(x,w[C]),x.length===E)return x;k=b=T}}return B(x,_(o,b)),x}]}),!!b((function(){var n=/(?:)/,e=n.exec;n.exec=function(){return e.apply(this,arguments)};var t="ab".split(n);return 2!==t.length||"a"!==t[0]||"b"!==t[1]})),y)},function(n,e,t){"use strict";var r=t(1),a=t(54).some;r({target:"Array",proto:!0,forced:!t(45)("some")},{some:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(10),a=t(104),i=t(8),o=t(50),s=t(13),l=t(16),c=t(46),d=t(122),u=t(105);a("match",(function(n,e,t){return[function(e){var t=l(this),a=null==e?void 0:c(e,n);return a?r(a,e,t):new RegExp(e)[n](s(t))},function(n){var r=i(this),a=s(n),l=t(e,r,a);if(l.done)return l.value;if(!r.global)return u(r,a);var c=r.unicode;r.lastIndex=0;for(var p,h=[],f=0;null!==(p=u(r,a));){var m=s(p[0]);h[f]=m,""===m&&(r.lastIndex=d(a,o(r.lastIndex),c)),f++}return 0===f?null:h}]}))},function(n,e,t){var r=t(6),a=t(35),i=t(12),o=r("unscopables"),s=Array.prototype;null==s[o]&&i.f(s,o,{configurable:!0,value:a(null)}),n.exports=function(n){s[o][n]=!0}},function(n,e,t){var r=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",o=r.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function l(n,e,t,r){var a=e&&e.prototype instanceof u?e:u,i=Object.create(a.prototype),o=new x(r||[]);return i._invoke=function(n,e,t){var r="suspendedStart";return function(a,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw i;return _()}for(t.method=a,t.arg=i;;){var o=t.delegate;if(o){var s=y(o,t);if(s){if(s===d)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var l=c(n,e,t);if("normal"===l.type){if(r=t.done?"completed":"suspendedYield",l.arg===d)continue;return{value:l.arg,done:t.done}}"throw"===l.type&&(r="completed",t.method="throw",t.arg=l.arg)}}}(n,t,o),i}function c(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=l;var d={};function u(){}function p(){}function h(){}var f={};s(f,a,(function(){return this}));var m=Object.getPrototypeOf,g=m&&m(m(B([])));g&&g!==e&&t.call(g,a)&&(f=g);var v=h.prototype=u.prototype=Object.create(f);function E(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function b(n,e){var r;this._invoke=function(a,i){function o(){return new e((function(r,o){!function r(a,i,o,s){var l=c(n[a],n,i);if("throw"!==l.type){var d=l.arg,u=d.value;return u&&"object"==typeof u&&t.call(u,"__await")?e.resolve(u.__await).then((function(n){r("next",n,o,s)}),(function(n){r("throw",n,o,s)})):e.resolve(u).then((function(n){d.value=n,o(d)}),(function(n){return r("throw",n,o,s)}))}s(l.arg)}(a,i,r,o)}))}return r=r?r.then(o,o):o()}}function y(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,y(n,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var r=c(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,d;var a=r.arg;return a?a.done?(e[n.resultName]=a.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function A(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function k(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function x(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(A,this),this.reset(!0)}function B(n){if(n){var e=n[a];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function e(){for(;++r<n.length;)if(t.call(n,r))return e.value=n[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:_}}function _(){return{value:void 0,done:!0}}return p.prototype=h,s(v,"constructor",h),s(h,"constructor",p),p.displayName=s(h,o,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,h):(n.__proto__=h,s(n,o,"GeneratorFunction")),n.prototype=Object.create(v),n},n.awrap=function(n){return{__await:n}},E(b.prototype),s(b.prototype,i,(function(){return this})),n.AsyncIterator=b,n.async=function(e,t,r,a,i){void 0===i&&(i=Promise);var o=new b(l(e,t,r,a),i);return n.isGeneratorFunction(t)?o:o.next().then((function(n){return n.done?n.value:o.next()}))},E(v),s(v,o,"Generator"),s(v,a,(function(){return this})),s(v,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=B,x.prototype={constructor:x,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function r(t,r){return o.type="throw",o.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],o=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=t.call(i,"catchLoc"),l=t.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&t.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=n,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(o)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),d},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),k(t),d}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var a=r.arg;k(t)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:B(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),d}},n}(n.exports);try{regeneratorRuntime=r}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(n,e,t){"use strict";var r=t(2),a=t(63).PROPER,i=t(14),o=t(8),s=t(36),l=t(13),c=t(3),d=t(144),u=RegExp.prototype,p=u.toString,h=r(d),f=c((function(){return"/a/b"!=p.call({source:"a",flags:"b"})})),m=a&&"toString"!=p.name;(f||m)&&i(RegExp.prototype,"toString",(function(){var n=o(this),e=l(n.source),t=n.flags;return"/"+e+"/"+l(void 0===t&&s(u,n)&&!("flags"in u)?h(n):t)}),{unsafe:!0})},function(n,e,t){"use strict";var r=t(17),a=t(137),i=t(62),o=t(34),s=t(12).f,l=t(156),c=t(31),d=t(7),u=o.set,p=o.getterFor("Array Iterator");n.exports=l(Array,"Array",(function(n,e){u(this,{type:"Array Iterator",target:r(n),index:0,kind:e})}),(function(){var n=p(this),e=n.target,t=n.kind,r=n.index++;return!e||r>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values");var h=i.Arguments=i.Array;if(a("keys"),a("values"),a("entries"),!c&&d&&"values"!==h.name)try{s(h,"name",{value:"values"})}catch(n){}},function(n,e,t){var r=t(0),a=t(10),i=t(32),o=t(8),s=t(80),l=t(102),c=r.TypeError;n.exports=function(n,e){var t=arguments.length<2?l(n):e;if(i(t))return o(a(t,n));throw c(s(n)+" is not iterable")}},function(n,e,t){var r=t(249);n.exports=function(n,e){return new(r(n))(0===e?0:e)}},function(n,e,t){var r=t(9),a=t(25),i=t(6)("match");n.exports=function(n){var e;return r(n)&&(void 0!==(e=n[i])?!!e:"RegExp"==a(n))}},function(n,e,t){"use strict";var r=t(8);n.exports=function(){var n=r(this),e="";return n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,o=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),d=Object.prototype.toString,u=Math.max,p=Math.min,h=function(){return c.Date.now()};function f(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function m(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==d.call(n)}(n))return NaN;if(f(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=f(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=a.test(n);return s||i.test(n)?o(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,a,i,o,s,l,c=0,d=!1,g=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function E(e){var t=r,i=a;return r=a=void 0,c=e,o=n.apply(i,t)}function b(n){return c=n,s=setTimeout(A,e),d?E(n):o}function y(n){var t=n-l;return void 0===l||t>=e||t<0||g&&n-c>=i}function A(){var n=h();if(y(n))return k(n);s=setTimeout(A,function(n){var t=e-(n-l);return g?p(t,i-(n-c)):t}(n))}function k(n){return s=void 0,v&&r?E(n):(r=a=void 0,o)}function x(){var n=h(),t=y(n);if(r=arguments,a=this,l=n,t){if(void 0===s)return b(l);if(g)return s=setTimeout(A,e),E(l)}return void 0===s&&(s=setTimeout(A,e)),o}return e=m(e)||0,f(t)&&(d=!!t.leading,i=(g="maxWait"in t)?u(m(t.maxWait)||0,e):i,v="trailing"in t?!!t.trailing:v),x.cancel=function(){void 0!==s&&clearTimeout(s),c=0,r=l=a=s=void 0},x.flush=function(){return void 0===s?o:k(h())},x}},function(n,e,t){var r=t(2),a=t(16),i=t(13),o=t(148),s=r("".replace),l="["+o+"]",c=RegExp("^"+l+l+"*"),d=RegExp(l+l+"*$"),u=function(n){return function(e){var t=i(a(e));return 1&n&&(t=s(t,c,"")),2&n&&(t=s(t,d,"")),t}};n.exports={start:u(1),end:u(2),trim:u(3)}},function(n,e){n.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(n,e,t){var r=t(2),a=t(14),i=Date.prototype,o=r(i.toString),s=r(i.getTime);"Invalid Date"!=String(new Date(NaN))&&a(i,"toString",(function(){var n=s(this);return n==n?o(this):"Invalid Date"}))},function(n,e,t){var r=t(109);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(7),a=t(3);n.exports=r&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(7),a=t(3),i=t(77);n.exports=!r&&!a((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(0),a=t(10),i=t(9),o=t(79),s=t(46),l=t(233),c=t(6),d=r.TypeError,u=c("toPrimitive");n.exports=function(n,e){if(!i(n)||o(n))return n;var t,r=s(n,u);if(r){if(void 0===e&&(e="default"),t=a(r,n,e),!i(t)||o(t))return t;throw d("Can't convert object to primitive value")}return void 0===e&&(e="number"),l(n,e)}},function(n,e,t){var r=t(2),a=t(11),i=t(17),o=t(111).indexOf,s=t(61),l=r([].push);n.exports=function(n,e){var t,r=i(n),c=0,d=[];for(t in r)!a(s,t)&&a(r,t)&&l(d,t);for(;e.length>c;)a(r,t=e[c++])&&(~o(d,t)||l(d,t));return d}},function(n,e,t){var r=t(18);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(1),a=t(10),i=t(31),o=t(63),s=t(5),l=t(220),c=t(117),d=t(84),u=t(57),p=t(37),h=t(14),f=t(6),m=t(62),g=t(158),v=o.PROPER,E=o.CONFIGURABLE,b=g.IteratorPrototype,y=g.BUGGY_SAFARI_ITERATORS,A=f("iterator"),k=function(){return this};n.exports=function(n,e,t,o,f,g,x){l(t,e,o);var B,_,T,w=function(n){if(n===f&&O)return O;if(!y&&n in S)return S[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},C=e+" Iterator",P=!1,S=n.prototype,I=S[A]||S["@@iterator"]||f&&S[f],O=!y&&I||w(f),j="Array"==e&&S.entries||I;if(j&&(B=c(j.call(new n)))!==Object.prototype&&B.next&&(i||c(B)===b||(d?d(B,b):s(B[A])||h(B,A,k)),u(B,C,!0,!0),i&&(m[C]=k)),v&&"values"==f&&I&&"values"!==I.name&&(!i&&E?p(S,"name","values"):(P=!0,O=function(){return a(I,this)})),f)if(_={values:w("values"),keys:g?O:w("keys"),entries:w("entries")},x)for(T in _)(y||P||!(T in S))&&h(S,T,_[T]);else r({target:e,proto:!0,forced:y||P},_);return i&&!x||S[A]===O||h(S,A,O,{name:f}),m[e]=O,_}},function(n,e,t){var r=t(11),a=t(115),i=t(33),o=t(12);n.exports=function(n,e,t){for(var s=a(e),l=o.f,c=i.f,d=0;d<s.length;d++){var u=s[d];r(n,u)||t&&r(t,u)||l(n,u,c(e,u))}}},function(n,e,t){"use strict";var r,a,i,o=t(3),s=t(5),l=t(35),c=t(117),d=t(14),u=t(6),p=t(31),h=u("iterator"),f=!1;[].keys&&("next"in(i=[].keys())?(a=c(c(i)))!==Object.prototype&&(r=a):f=!0),null==r||o((function(){var n={};return r[h].call(n)!==n}))?r={}:p&&(r=l(r)),s(r[h])||d(r,h,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:f}},function(n,e,t){var r=t(3);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){var r=t(0);n.exports=r.Promise},function(n,e,t){var r=t(6),a=t(62),i=r("iterator"),o=Array.prototype;n.exports=function(n){return void 0!==n&&(a.Array===n||o[i]===n)}},function(n,e,t){var r=t(10),a=t(8),i=t(46);n.exports=function(n,e,t){var o,s;a(n);try{if(!(o=i(n,"return"))){if("throw"===e)throw t;return t}o=r(o,n)}catch(n){s=!0,o=n}if("throw"===e)throw t;if(s)throw o;return a(o),t}},function(n,e,t){var r=t(6)("iterator"),a=!1;try{var i=0,o={next:function(){return{done:!!i++}},return:function(){a=!0}};o[r]=function(){return this},Array.from(o,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!a)return!1;var t=!1;try{var i={};i[r]=function(){return{next:function(){return{done:t=!0}}}},n(i)}catch(n){}return t}},function(n,e,t){var r=t(0),a=t(85),i=t(80),o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not a constructor")}},function(n,e,t){var r,a,i,o,s=t(0),l=t(38),c=t(53),d=t(5),u=t(11),p=t(3),h=t(155),f=t(64),m=t(77),g=t(166),v=t(86),E=s.setImmediate,b=s.clearImmediate,y=s.process,A=s.Dispatch,k=s.Function,x=s.MessageChannel,B=s.String,_=0,T={};try{r=s.location}catch(n){}var w=function(n){if(u(T,n)){var e=T[n];delete T[n],e()}},C=function(n){return function(){w(n)}},P=function(n){w(n.data)},S=function(n){s.postMessage(B(n),r.protocol+"//"+r.host)};E&&b||(E=function(n){var e=f(arguments,1);return T[++_]=function(){l(d(n)?n:k(n),void 0,e)},a(_),_},b=function(n){delete T[n]},v?a=function(n){y.nextTick(C(n))}:A&&A.now?a=function(n){A.now(C(n))}:x&&!g?(o=(i=new x).port2,i.port1.onmessage=P,a=c(o.postMessage,o)):s.addEventListener&&d(s.postMessage)&&!s.importScripts&&r&&"file:"!==r.protocol&&!p(S)?(a=S,s.addEventListener("message",P,!1)):a="onreadystatechange"in m("script")?function(n){h.appendChild(m("script")).onreadystatechange=function(){h.removeChild(this),w(n)}}:function(n){setTimeout(C(n),0)}),n.exports={set:E,clear:b}},function(n,e,t){var r=t(29);n.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},function(n,e,t){var r=t(8),a=t(9),i=t(168);n.exports=function(n,e){if(r(n),a(e)&&e.constructor===n)return e;var t=i.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){"use strict";var r=t(32),a=function(n){var e,t;this.promise=new n((function(n,r){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=r})),this.resolve=r(e),this.reject=r(t)};n.exports.f=function(n){return new a(n)}},function(n,e,t){var r=t(2),a=t(52),i=t(13),o=t(16),s=r("".charAt),l=r("".charCodeAt),c=r("".slice),d=function(n){return function(e,t){var r,d,u=i(o(e)),p=a(t),h=u.length;return p<0||p>=h?n?"":void 0:(r=l(u,p))<55296||r>56319||p+1===h||(d=l(u,p+1))<56320||d>57343?n?s(u,p):r:n?c(u,p,p+2):d-56320+(r-55296<<10)+65536}};n.exports={codeAt:d(!1),charAt:d(!0)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var r=t(77)("span").classList,a=r&&r.constructor&&r.constructor.prototype;n.exports=a===Object.prototype?void 0:a},function(n,e,t){var r=t(1),a=t(7),i=t(115),o=t(17),s=t(33),l=t(65);r({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(n){for(var e,t,r=o(n),a=s.f,c=i(r),d={},u=0;c.length>u;)void 0!==(t=a(r,e=c[u++]))&&l(d,e,t);return d}})},function(n,e,t){var r=t(1),a=t(3),i=t(15),o=t(117),s=t(159);r({target:"Object",stat:!0,forced:a((function(){o(1)})),sham:!s},{getPrototypeOf:function(n){return o(i(n))}})},function(n,e,t){"use strict";var r,a=t(1),i=t(2),o=t(33).f,s=t(50),l=t(13),c=t(175),d=t(16),u=t(176),p=t(31),h=i("".startsWith),f=i("".slice),m=Math.min,g=u("startsWith");a({target:"String",proto:!0,forced:!!(p||g||(r=o(String.prototype,"startsWith"),!r||r.writable))&&!g},{startsWith:function(n){var e=l(d(this));c(n);var t=s(m(arguments.length>1?arguments[1]:void 0,e.length)),r=l(n);return h?h(e,r,t):f(e,t,t+r.length)===r}})},function(n,e,t){var r=t(0),a=t(143),i=r.TypeError;n.exports=function(n){if(a(n))throw i("The method doesn't accept regular expressions");return n}},function(n,e,t){var r=t(6)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){"use strict";var r=t(54).forEach,a=t(45)("forEach");n.exports=a?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var r=t(3);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var r=t(25),a=t(17),i=t(56).f,o=t(120),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return s&&"Window"==r(n)?function(n){try{return i(n)}catch(n){return o(s)}}(n):i(a(n))}},function(n,e,t){var r=t(6);e.f=r},function(n,e,t){var r=t(256),a=t(11),i=t(180),o=t(12).f;n.exports=function(n){var e=r.Symbol||(r.Symbol={});a(e,n)||o(e,n,{value:i.f(n)})}},function(n,e,t){var r=t(1),a=t(257);r({target:"Array",stat:!0,forced:!t(163)((function(n){Array.from(n)}))},{from:a})},function(n,e,t){t(1)({target:"Object",stat:!0,sham:!t(7)},{create:t(35)})},function(n,e,t){var r=t(1),a=t(0),i=t(18),o=t(38),s=t(2),l=t(3),c=a.Array,d=i("JSON","stringify"),u=s(/./.exec),p=s("".charAt),h=s("".charCodeAt),f=s("".replace),m=s(1..toString),g=/[\uD800-\uDFFF]/g,v=/^[\uD800-\uDBFF]$/,E=/^[\uDC00-\uDFFF]$/,b=function(n,e,t){var r=p(t,e-1),a=p(t,e+1);return u(v,n)&&!u(E,a)||u(E,n)&&!u(v,r)?"\\u"+m(h(n,0),16):n},y=l((function(){return'"\\udf06\\ud834"'!==d("\udf06\ud834")||'"\\udead"'!==d("\udead")}));d&&r({target:"JSON",stat:!0,forced:y},{stringify:function(n,e,t){for(var r=0,a=arguments.length,i=c(a);r<a;r++)i[r]=arguments[r];var s=o(d,null,i);return"string"==typeof s?f(s,g,b):s}})},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,a=n.length;++t<r;)n[a+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(91),a=t(273),i=t(274),o=t(275),s=t(276),l=t(277);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=a,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=s,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(59),a=t(125);n.exports=function(n){if(!a(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(294),a=t(47);n.exports=function n(e,t,i,o,s){return e===t||(null==e||null==t||!a(e)&&!a(t)?e!=e&&t!=t:r(e,t,i,o,n,s))}},function(n,e,t){var r=t(193),a=t(297),i=t(194);n.exports=function(n,e,t,o,s,l){var c=1&t,d=n.length,u=e.length;if(d!=u&&!(c&&u>d))return!1;var p=l.get(n),h=l.get(e);if(p&&h)return p==e&&h==n;var f=-1,m=!0,g=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++f<d;){var v=n[f],E=e[f];if(o)var b=c?o(E,v,f,e,n,l):o(v,E,f,n,e,l);if(void 0!==b){if(b)continue;m=!1;break}if(g){if(!a(e,(function(n,e){if(!i(g,e)&&(v===n||s(v,n,t,o,l)))return g.push(e)}))){m=!1;break}}else if(v!==E&&!s(v,E,t,o,l)){m=!1;break}}return l.delete(n),l.delete(e),m}},function(n,e,t){var r=t(126),a=t(295),i=t(296);function o(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}o.prototype.add=o.prototype.push=a,o.prototype.has=i,n.exports=o},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(307),a=t(313),i=t(199);n.exports=function(n){return i(n)?r(n):a(n)}},function(n,e,t){(function(n){var r=t(30),a=t(309),i=e&&!e.nodeType&&e,o=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=o&&o.exports===i?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||a;n.exports=l}).call(this,t(145)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(310),a=t(311),i=t(312),o=i&&i.isTypedArray,s=o?a(o):r;n.exports=s},function(n,e,t){var r=t(189),a=t(128);n.exports=function(n){return null!=n&&a(n.length)&&!r(n)}},function(n,e,t){var r=t(39)(t(30),"Set");n.exports=r},function(n,e,t){var r=t(125);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(204),a=t(95);n.exports=function(n,e){for(var t=0,i=(e=r(e,n)).length;null!=n&&t<i;)n=n[a(e[t++])];return t&&t==i?n:void 0}},function(n,e,t){var r=t(28),a=t(129),i=t(324),o=t(327);n.exports=function(n,e){return r(n)?n:a(n,e)?[n]:i(o(n))}},function(n,e,t){"use strict";var r=t(0),a=t(2),i=t(32),o=t(9),s=t(11),l=t(64),c=r.Function,d=a([].concat),u=a([].join),p={},h=function(n,e,t){if(!s(p,e)){for(var r=[],a=0;a<e;a++)r[a]="a["+a+"]";p[e]=c("C,a","return new C("+u(r,",")+")")}return p[e](n,t)};n.exports=c.bind||function(n){var e=i(this),t=e.prototype,r=l(arguments,1),a=function(){var t=d(r,l(arguments));return this instanceof a?h(e,t.length,t):e.apply(n,t)};return o(t)&&(a.prototype=t),a}},function(n,e,t){"use strict";var r=t(1),a=t(359).start;r({target:"String",proto:!0,forced:t(361)},{padStart:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){},function(n,e,t){},function(n,e,t){t(1)({target:"Object",stat:!0},{setPrototypeOf:t(84)})},function(n,e,t){var r=t(1),a=t(18),i=t(38),o=t(205),s=t(164),l=t(8),c=t(9),d=t(35),u=t(3),p=a("Reflect","construct"),h=Object.prototype,f=[].push,m=u((function(){function n(){}return!(p((function(){}),[],n)instanceof n)})),g=!u((function(){p((function(){}))})),v=m||g;r({target:"Reflect",stat:!0,forced:v,sham:v},{construct:function(n,e){s(n),l(e);var t=arguments.length<3?n:s(arguments[2]);if(g&&!m)return p(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var r=[null];return i(f,r,e),new(i(o,n,r))}var a=t.prototype,u=d(c(a)?a:h),v=i(n,u,e);return c(v)?v:u}})},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(260),a=t(265),i=t(336),o=t(344),s=t(353),l=t(227),c=i((function(n){var e=l(n);return s(e)&&(e=void 0),o(r(n,1,s,!0),a(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,a=r.exec(t);if(!a)return t;var i="",o=0,s=0;for(o=a.index;o<t.length;o++){switch(t.charCodeAt(o)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==o&&(i+=t.substring(s,o)),s=o+1,i+=e}return s!==o?i+t.substring(s,o):i}},function(n,e,t){"use strict";
/**
 * @file Embedded JavaScript templating engine. {@link http://ejs.co}
 * @author Matthew Eernisse <mde@fleegix.org>
 * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
 * @project EJS
 * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
 */var r=t(373),a=t(374),i=t(375),o=!1,s=t(376).version,l=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],c=l.concat("cache"),d=/^\uFEFF/;function u(n,t){var a,i,o=t.views,s=/^[A-Za-z]+:\\|^\//.exec(n);if(s&&s.length)a=e.resolveInclude(n.replace(/^\/*/,""),t.root||"/",!0);else if(t.filename&&(i=e.resolveInclude(n,t.filename),r.existsSync(i)&&(a=i)),a||Array.isArray(o)&&o.some((function(t){return i=e.resolveInclude(n,t,!0),r.existsSync(i)}))&&(a=i),!a)throw new Error('Could not find the include file "'+t.escapeFunction(n)+'"');return a}function p(n,t){var r,a=n.filename,i=arguments.length>1;if(n.cache){if(!a)throw new Error("cache option requires a filename");if(r=e.cache.get(a))return r;i||(t=f(a).toString().replace(d,""))}else if(!i){if(!a)throw new Error("Internal EJS error: no file name or template provided");t=f(a).toString().replace(d,"")}return r=e.compile(t,n),n.cache&&e.cache.set(a,r),r}function h(n,t,r){var a;if(!r){if("function"==typeof e.promiseImpl)return new e.promiseImpl((function(e,r){try{e(a=p(n)(t))}catch(n){r(n)}}));throw new Error("Please provide a callback function")}try{a=p(n)(t)}catch(n){return r(n)}r(null,a)}function f(n){return e.fileLoader(n)}function m(n,e,t,r,a){var i=e.split("\n"),o=Math.max(r-3,0),s=Math.min(i.length,r+3),l=a(t),c=i.slice(o,s).map((function(n,e){var t=e+o+1;return(t==r?" >> ":"    ")+t+"| "+n})).join("\n");throw n.path=l,n.message=(l||"ejs")+":"+r+"\n"+c+"\n\n"+n.message,n}function g(n){return n.replace(/;(\s*$)/,"$1")}function v(n,t){t=t||{};var r={};this.templateText=n,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",this.dependencies=[],r.client=t.client||!1,r.escapeFunction=t.escape||t.escapeFunction||i.escapeXML,r.compileDebug=!1!==t.compileDebug,r.debug=!!t.debug,r.filename=t.filename,r.openDelimiter=t.openDelimiter||e.openDelimiter||"<",r.closeDelimiter=t.closeDelimiter||e.closeDelimiter||">",r.delimiter=t.delimiter||e.delimiter||"%",r.strict=t.strict||!1,r.context=t.context,r.cache=t.cache||!1,r.rmWhitespace=t.rmWhitespace,r.root=t.root,r.outputFunctionName=t.outputFunctionName,r.localsName=t.localsName||e.localsName||"locals",r.views=t.views,r.async=t.async,r.destructuredLocals=t.destructuredLocals,r.legacyInclude=void 0===t.legacyInclude||!!t.legacyInclude,r.strict?r._with=!1:r._with=void 0===t._with||t._with,this.opts=r,this.regex=this.createRegex()}e.cache=i.cache,e.fileLoader=r.readFileSync,e.localsName="locals",e.promiseImpl=new Function("return this;")().Promise,e.resolveInclude=function(n,e,t){var r=a.dirname,i=a.extname,o=(0,a.resolve)(t?e:r(e),n);return i(n)||(o+=".ejs"),o},e.compile=function(n,e){return e&&e.scope&&(o||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),o=!0),e.context||(e.context=e.scope),delete e.scope),new v(n,e).compile()},e.render=function(n,e,t){var r=e||{},a=t||{};return 2==arguments.length&&i.shallowCopyFromList(a,r,l),p(a,n)(r)},e.renderFile=function(){var n,e,t,r=Array.prototype.slice.call(arguments),a=r.shift(),o={filename:a};return"function"==typeof arguments[arguments.length-1]&&(n=r.pop()),r.length?(e=r.shift(),r.length?i.shallowCopy(o,r.pop()):(e.settings&&(e.settings.views&&(o.views=e.settings.views),e.settings["view cache"]&&(o.cache=!0),(t=e.settings["view options"])&&i.shallowCopy(o,t)),i.shallowCopyFromList(o,e,c)),o.filename=a):e={},h(o,e,n)},e.Template=v,e.clearCache=function(){e.cache.reset()},v.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"},v.prototype={createRegex:function(){var n="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",e=i.escapeRegExpChars(this.opts.delimiter),t=i.escapeRegExpChars(this.opts.openDelimiter),r=i.escapeRegExpChars(this.opts.closeDelimiter);return n=n.replace(/%/g,e).replace(/</g,t).replace(/>/g,r),new RegExp(n)},compile:function(){var n,e,t,r=this.opts,o="",s="",l=r.escapeFunction;if(!this.source){if(this.generateSource(),o+='  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n',r.outputFunctionName&&(o+="  var "+r.outputFunctionName+" = __append;\n"),r.destructuredLocals&&r.destructuredLocals.length){for(var c="  var __locals = ("+r.localsName+" || {}),\n",d=0;d<r.destructuredLocals.length;d++){var h=r.destructuredLocals[d];d>0&&(c+=",\n  "),c+=h+" = __locals."+h}o+=c+";\n"}!1!==r._with&&(o+="  with ("+r.localsName+" || {}) {\n",s+="  }\n"),s+="  return __output;\n",this.source=o+this.source+s}n=r.compileDebug?"var __line = 1\n  , __lines = "+JSON.stringify(this.templateText)+"\n  , __filename = "+(r.filename?JSON.stringify(r.filename):"undefined")+";\ntry {\n"+this.source+"} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n":this.source,r.client&&(n="escapeFn = escapeFn || "+l.toString()+";\n"+n,r.compileDebug&&(n="rethrow = rethrow || "+m.toString()+";\n"+n)),r.strict&&(n='"use strict";\n'+n),r.debug&&console.log(n),r.compileDebug&&r.filename&&(n=n+"\n//# sourceURL="+r.filename+"\n");try{if(r.async)try{t=new Function("return (async function(){}).constructor;")()}catch(n){throw n instanceof SyntaxError?new Error("This environment does not support async/await"):n}else t=Function;e=new t(r.localsName+", escapeFn, include, rethrow",n)}catch(n){throw n instanceof SyntaxError&&(r.filename&&(n.message+=" in "+r.filename),n.message+=" while compiling ejs\n\n",n.message+="If the above error is not helpful, you may want to try EJS-Lint:\n",n.message+="https://github.com/RyanZim/EJS-Lint",r.async||(n.message+="\n",n.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),n}var f=r.client?e:function(n){return e.apply(r.context,[n||{},l,function(e,t){var a=i.shallowCopy({},n);return t&&(a=i.shallowCopy(a,t)),function(n,e){var t=i.shallowCopy({},e);return t.filename=u(n,t),p(t)}(e,r)(a)},m])};if(f.dependencies=this.dependencies,r.filename&&"function"==typeof Object.defineProperty){var g=r.filename,v=a.basename(g,a.extname(g));try{Object.defineProperty(f,"name",{value:v,writable:!1,enumerable:!1,configurable:!0})}catch(n){}}return f},generateSource:function(){var n=this.opts;n.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,"\n").replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var t=this,r=this.parseTemplateText(),a=this.opts.delimiter,o=this.opts.openDelimiter,s=this.opts.closeDelimiter;r&&r.length&&r.forEach((function(l,c){var p,h,m,g,E,b;if(0===l.indexOf(o+a)&&0!==l.indexOf(o+a+a)&&(h=r[c+2])!=a+s&&h!="-"+a+s&&h!="_"+a+s)throw new Error('Could not find matching close tag for "'+l+'".');if(n.legacyInclude&&(m=l.match(/^\s*include\s+(\S+)/))&&(p=r[c-1])&&(p==o+a||p==o+a+"-"||p==o+a+"_"))return g=i.shallowCopy({},t.opts),E=function(n,e){var t,r,a=i.shallowCopy({},e);r=f(t=u(n,a)).toString().replace(d,""),a.filename=t;var o=new v(r,a);return o.generateSource(),{source:o.source,filename:t,template:r}}(m[1],g),b=t.opts.compileDebug?"    ; (function(){\n      var __line = 1\n      , __lines = "+JSON.stringify(E.template)+"\n      , __filename = "+JSON.stringify(E.filename)+";\n      try {\n"+E.source+"      } catch (e) {\n        rethrow(e, __lines, __filename, __line, escapeFn);\n      }\n    ; }).call(this)\n":"    ; (function(){\n"+E.source+"    ; }).call(this)\n",t.source+=b,void t.dependencies.push(e.resolveInclude(m[1],g.filename));t.scanLine(l)}))},parseTemplateText:function(){for(var n,e=this.templateText,t=this.regex,r=t.exec(e),a=[];r;)0!==(n=r.index)&&(a.push(e.substring(0,n)),e=e.slice(n)),a.push(r[0]),e=e.slice(r[0].length),r=t.exec(e);return e&&a.push(e),a},_addOutput:function(n){if(this.truncate&&(n=n.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!n)return n;n=(n=(n=(n=n.replace(/\\/g,"\\\\")).replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/"/g,'\\"'),this.source+='    ; __append("'+n+'")\n'},scanLine:function(n){var e,t=this.opts.delimiter,r=this.opts.openDelimiter,a=this.opts.closeDelimiter;switch(e=n.split("\n").length-1,n){case r+t:case r+t+"_":this.mode=v.modes.EVAL;break;case r+t+"=":this.mode=v.modes.ESCAPED;break;case r+t+"-":this.mode=v.modes.RAW;break;case r+t+"#":this.mode=v.modes.COMMENT;break;case r+t+t:this.mode=v.modes.LITERAL,this.source+='    ; __append("'+n.replace(r+t+t,r+t)+'")\n';break;case t+t+a:this.mode=v.modes.LITERAL,this.source+='    ; __append("'+n.replace(t+t+a,t+a)+'")\n';break;case t+a:case"-"+t+a:case"_"+t+a:this.mode==v.modes.LITERAL&&this._addOutput(n),this.mode=null,this.truncate=0===n.indexOf("-")||0===n.indexOf("_");break;default:if(this.mode){switch(this.mode){case v.modes.EVAL:case v.modes.ESCAPED:case v.modes.RAW:n.lastIndexOf("//")>n.lastIndexOf("\n")&&(n+="\n")}switch(this.mode){case v.modes.EVAL:this.source+="    ; "+n+"\n";break;case v.modes.ESCAPED:this.source+="    ; __append(escapeFn("+g(n)+"))\n";break;case v.modes.RAW:this.source+="    ; __append("+g(n)+")\n";break;case v.modes.COMMENT:break;case v.modes.LITERAL:this._addOutput(n)}}else this._addOutput(n)}this.opts.compileDebug&&e&&(this.currentLine+=e,this.source+="    ; __line = "+this.currentLine+"\n")}},e.escapeXML=i.escapeXML,e.__express=e.renderFile,e.VERSION=s,e.name="ejs","undefined"!=typeof window&&(window.ejs=e)},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},a=(t(362),t(19)),i=Object(a.a)(r,(function(){var n=this.$createElement;return(this._self._c||n)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=i.exports},function(n,e,t){"use strict";t.r(e);t(26),t(4),t(27),t(43),t(23);var r={name:"CodeGroup",data:function(){return{codeTabs:[],activeCodeTabIndex:-1}},watch:{activeCodeTabIndex:function(n){this.codeTabs.forEach((function(n){n.elm.classList.remove("theme-code-block__active")})),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted:function(){var n=this;this.codeTabs=(this.$slots.default||[]).filter((function(n){return Boolean(n.componentOptions)})).map((function(e,t){return""===e.componentOptions.propsData.active&&(n.activeCodeTabIndex=t),{title:e.componentOptions.propsData.title,elm:e.elm}})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab:function(n){this.activeCodeTabIndex=n}}},a=(t(363),t(19)),i=Object(a.a)(r,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"theme-code-group"},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(e,r){return t("li",{key:e.title,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(e.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=i.exports},function(n,e,t){"use strict";var r=t(7),a=t(0),i=t(2),o=t(101),s=t(14),l=t(11),c=t(229),d=t(36),u=t(79),p=t(153),h=t(3),f=t(56).f,m=t(33).f,g=t(12).f,v=t(358),E=t(147).trim,b=a.Number,y=b.prototype,A=a.TypeError,k=i("".slice),x=i("".charCodeAt),B=function(n){var e=p(n,"number");return"bigint"==typeof e?e:_(e)},_=function(n){var e,t,r,a,i,o,s,l,c=p(n,"number");if(u(c))throw A("Cannot convert a Symbol value to a number");if("string"==typeof c&&c.length>2)if(c=E(c),43===(e=x(c,0))||45===e){if(88===(t=x(c,2))||120===t)return NaN}else if(48===e){switch(x(c,1)){case 66:case 98:r=2,a=49;break;case 79:case 111:r=8,a=55;break;default:return+c}for(o=(i=k(c,2)).length,s=0;s<o;s++)if((l=x(i,s))<48||l>a)return NaN;return parseInt(i,r)}return+c};if(o("Number",!b(" 0o1")||!b("0b1")||b("+0x1"))){for(var T,w=function(n){var e=arguments.length<1?0:b(B(n)),t=this;return d(y,t)&&h((function(){v(t)}))?c(Object(e),t,w):e},C=r?f(b):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),P=0;C.length>P;P++)l(b,T=C[P])&&!l(w,T)&&g(w,T,m(b,T));w.prototype=y,y.constructor=w,s(a,"Number",w)}},function(n,e,t){var r=t(3),a=t(0).RegExp;n.exports=r((function(){var n=a(".","s");return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){"use strict";var r=t(158).IteratorPrototype,a=t(35),i=t(55),o=t(57),s=t(62),l=function(){return this};n.exports=function(n,e,t,c){var d=e+" Iterator";return n.prototype=a(r,{next:i(+!c,t)}),o(n,d,!1,!0),s[d]=l,n}},function(n,e,t){var r=t(14);n.exports=function(n,e,t){for(var a in e)r(n,a,e[a],t);return n}},function(n,e,t){"use strict";var r=t(18),a=t(12),i=t(6),o=t(7),s=i("species");n.exports=function(n){var e=r(n),t=a.f;o&&e&&!e[s]&&t(e,s,{configurable:!0,get:function(){return this}})}},function(n,e,t){var r=t(0),a=t(36),i=r.TypeError;n.exports=function(n,e){if(a(e,n))return n;throw i("Incorrect invocation")}},function(n,e,t){var r=t(3),a=t(0).RegExp;n.exports=r((function(){var n=a("(?<a>b)","g");return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){"use strict";var r=t(1),a=t(111).includes,i=t(137);r({target:"Array",proto:!0},{includes:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(n,e,t){"use strict";var r=t(1),a=t(2),i=t(175),o=t(16),s=t(13),l=t(176),c=a("".indexOf);r({target:"String",proto:!0,forced:!l("includes")},{includes:function(n){return!!~c(s(o(this)),s(i(n)),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){"use strict";var r=t(1),a=t(147).trim;r({target:"String",proto:!0,forced:t(356)("trim")},{trim:function(){return a(this)}})},function(n,e,t){var r=t(5),a=t(9),i=t(84);n.exports=function(n,e,t){var o,s;return i&&r(o=e.constructor)&&o!==t&&a(s=o.prototype)&&s!==t.prototype&&i(n,s),n}},function(n,e,t){var r=t(120),a=Math.floor,i=function(n,e){var t=n.length,l=a(t/2);return t<8?o(n,e):s(n,i(r(n,0,l),e),i(r(n,l),e),e)},o=function(n,e){for(var t,r,a=n.length,i=1;i<a;){for(r=i,t=n[i];r&&e(n[r-1],t)>0;)n[r]=n[--r];r!==i++&&(n[r]=t)}return n},s=function(n,e,t,r){for(var a=e.length,i=t.length,o=0,s=0;o<a||s<i;)n[o+s]=o<a&&s<i?r(e[o],t[s])<=0?e[o++]:t[s++]:o<a?e[o++]:t[s++];return n};n.exports=i},function(n,e,t){var r=t(0),a=t(7),i=t(103).MISSED_STICKY,o=t(25),s=t(12).f,l=t(34).get,c=RegExp.prototype,d=r.TypeError;a&&i&&s(c,"sticky",{configurable:!0,get:function(){if(this!==c){if("RegExp"===o(this))return!!l(this).sticky;throw d("Incompatible receiver, RegExp required")}}})},function(n,e,t){n.exports=t(379)},function(n,e,t){var r=t(0),a=t(10),i=t(5),o=t(9),s=r.TypeError;n.exports=function(n,e){var t,r;if("string"===e&&i(t=n.toString)&&!o(r=a(t,n)))return r;if(i(t=n.valueOf)&&!o(r=a(t,n)))return r;if("string"!==e&&i(t=n.toString)&&!o(r=a(t,n)))return r;throw s("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),a=t(5),i=t(83),o=r.WeakMap;n.exports=a(o)&&/native code/.test(i(o))},function(n,e,t){var r=t(0),a=t(5),i=r.String,o=r.TypeError;n.exports=function(n){if("object"==typeof n||a(n))return n;throw o("Can't set "+i(n)+" as a prototype")}},function(n,e,t){"use strict";var r,a,i,o,s=t(1),l=t(31),c=t(0),d=t(18),u=t(10),p=t(160),h=t(14),f=t(221),m=t(84),g=t(57),v=t(222),E=t(32),b=t(5),y=t(9),A=t(223),k=t(83),x=t(237),B=t(163),_=t(119),T=t(165).set,w=t(238),C=t(167),P=t(241),S=t(168),I=t(242),O=t(243),j=t(34),L=t(101),D=t(6),z=t(244),F=t(86),R=t(49),U=D("species"),M="Promise",q=j.getterFor(M),N=j.set,K=j.getterFor(M),$=p&&p.prototype,H=p,Q=$,G=c.TypeError,W=c.document,V=c.process,Z=S.f,J=Z,Y=!!(W&&W.createEvent&&c.dispatchEvent),X=b(c.PromiseRejectionEvent),nn=!1,en=L(M,(function(){var n=k(H),e=n!==String(H);if(!e&&66===R)return!0;if(l&&!Q.finally)return!0;if(R>=51&&/native code/.test(n))return!1;var t=new H((function(n){n(1)})),r=function(n){n((function(){}),(function(){}))};return(t.constructor={})[U]=r,!(nn=t.then((function(){}))instanceof r)||!e&&z&&!X})),tn=en||!B((function(n){H.all(n).catch((function(){}))})),rn=function(n){var e;return!(!y(n)||!b(e=n.then))&&e},an=function(n,e){var t,r,a,i=e.value,o=1==e.state,s=o?n.ok:n.fail,l=n.resolve,c=n.reject,d=n.domain;try{s?(o||(2===e.rejection&&dn(e),e.rejection=1),!0===s?t=i:(d&&d.enter(),t=s(i),d&&(d.exit(),a=!0)),t===n.promise?c(G("Promise-chain cycle")):(r=rn(t))?u(r,t,l,c):l(t)):c(i)}catch(n){d&&!a&&d.exit(),c(n)}},on=function(n,e){n.notified||(n.notified=!0,w((function(){for(var t,r=n.reactions;t=r.get();)an(t,n);n.notified=!1,e&&!n.rejection&&ln(n)})))},sn=function(n,e,t){var r,a;Y?((r=W.createEvent("Event")).promise=e,r.reason=t,r.initEvent(n,!1,!0),c.dispatchEvent(r)):r={promise:e,reason:t},!X&&(a=c["on"+n])?a(r):"unhandledrejection"===n&&P("Unhandled promise rejection",t)},ln=function(n){u(T,c,(function(){var e,t=n.facade,r=n.value;if(cn(n)&&(e=I((function(){F?V.emit("unhandledRejection",r,t):sn("unhandledrejection",t,r)})),n.rejection=F||cn(n)?2:1,e.error))throw e.value}))},cn=function(n){return 1!==n.rejection&&!n.parent},dn=function(n){u(T,c,(function(){var e=n.facade;F?V.emit("rejectionHandled",e):sn("rejectionhandled",e,n.value)}))},un=function(n,e,t){return function(r){n(e,r,t)}},pn=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,on(n,!0))},hn=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw G("Promise can't be resolved itself");var r=rn(e);r?w((function(){var t={done:!1};try{u(r,e,un(hn,t,n),un(pn,t,n))}catch(e){pn(t,e,n)}})):(n.value=e,n.state=1,on(n,!1))}catch(e){pn({done:!1},e,n)}}};if(en&&(Q=(H=function(n){A(this,Q),E(n),u(r,this);var e=q(this);try{n(un(hn,e),un(pn,e))}catch(n){pn(e,n)}}).prototype,(r=function(n){N(this,{type:M,done:!1,notified:!1,parent:!1,reactions:new O,rejection:!1,state:0,value:void 0})}).prototype=f(Q,{then:function(n,e){var t=K(this),r=Z(_(this,H));return t.parent=!0,r.ok=!b(n)||n,r.fail=b(e)&&e,r.domain=F?V.domain:void 0,0==t.state?t.reactions.add(r):w((function(){an(r,t)})),r.promise},catch:function(n){return this.then(void 0,n)}}),a=function(){var n=new r,e=q(n);this.promise=n,this.resolve=un(hn,e),this.reject=un(pn,e)},S.f=Z=function(n){return n===H||n===i?new a(n):J(n)},!l&&b(p)&&$!==Object.prototype)){o=$.then,nn||(h($,"then",(function(n,e){var t=this;return new H((function(n,e){u(o,t,n,e)})).then(n,e)}),{unsafe:!0}),h($,"catch",Q.catch,{unsafe:!0}));try{delete $.constructor}catch(n){}m&&m($,Q)}s({global:!0,wrap:!0,forced:en},{Promise:H}),g(H,M,!1,!0),v(M),i=d(M),s({target:M,stat:!0,forced:en},{reject:function(n){var e=Z(this);return u(e.reject,void 0,n),e.promise}}),s({target:M,stat:!0,forced:l||en},{resolve:function(n){return C(l&&this===i?H:this,n)}}),s({target:M,stat:!0,forced:tn},{all:function(n){var e=this,t=Z(e),r=t.resolve,a=t.reject,i=I((function(){var t=E(e.resolve),i=[],o=0,s=1;x(n,(function(n){var l=o++,c=!1;s++,u(t,e,n).then((function(n){c||(c=!0,i[l]=n,--s||r(i))}),a)})),--s||r(i)}));return i.error&&a(i.value),t.promise},race:function(n){var e=this,t=Z(e),r=t.reject,a=I((function(){var a=E(e.resolve);x(n,(function(n){u(a,e,n).then(t.resolve,r)}))}));return a.error&&r(a.value),t.promise}})},function(n,e,t){var r=t(0),a=t(53),i=t(10),o=t(8),s=t(80),l=t(161),c=t(22),d=t(36),u=t(141),p=t(102),h=t(162),f=r.TypeError,m=function(n,e){this.stopped=n,this.result=e},g=m.prototype;n.exports=function(n,e,t){var r,v,E,b,y,A,k,x=t&&t.that,B=!(!t||!t.AS_ENTRIES),_=!(!t||!t.IS_ITERATOR),T=!(!t||!t.INTERRUPTED),w=a(e,x),C=function(n){return r&&h(r,"normal",n),new m(!0,n)},P=function(n){return B?(o(n),T?w(n[0],n[1],C):w(n[0],n[1])):T?w(n,C):w(n)};if(_)r=n;else{if(!(v=p(n)))throw f(s(n)+" is not iterable");if(l(v)){for(E=0,b=c(n);b>E;E++)if((y=P(n[E]))&&d(g,y))return y;return new m(!1)}r=u(n,v)}for(A=r.next;!(k=i(A,r)).done;){try{y=P(k.value)}catch(n){h(r,"throw",n)}if("object"==typeof y&&y&&d(g,y))return y}return new m(!1)}},function(n,e,t){var r,a,i,o,s,l,c,d,u=t(0),p=t(53),h=t(33).f,f=t(165).set,m=t(166),g=t(239),v=t(240),E=t(86),b=u.MutationObserver||u.WebKitMutationObserver,y=u.document,A=u.process,k=u.Promise,x=h(u,"queueMicrotask"),B=x&&x.value;B||(r=function(){var n,e;for(E&&(n=A.domain)&&n.exit();a;){e=a.fn,a=a.next;try{e()}catch(n){throw a?o():i=void 0,n}}i=void 0,n&&n.enter()},m||E||v||!b||!y?!g&&k&&k.resolve?((c=k.resolve(void 0)).constructor=k,d=p(c.then,c),o=function(){d(r)}):E?o=function(){A.nextTick(r)}:(f=p(f,u),o=function(){f(r)}):(s=!0,l=y.createTextNode(""),new b(r).observe(l,{characterData:!0}),o=function(){l.data=s=!s})),n.exports=B||function(n){var e={fn:n,next:void 0};i&&(i.next=e),a||(a=e,o()),i=e}},function(n,e,t){var r=t(29),a=t(0);n.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==a.Pebble},function(n,e,t){var r=t(29);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,e,t){var r=t(0);n.exports=function(n,e){var t=r.console;t&&t.error&&(1==arguments.length?t.error(n):t.error(n,e))}},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(n){var e={item:n,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var n=this.head;if(n)return this.head=n.next,this.tail===n&&(this.tail=null),n.item}},n.exports=t},function(n,e){n.exports="object"==typeof window},function(n,e,t){var r=t(1),a=t(246);r({target:"Object",stat:!0,forced:Object.assign!==a},{assign:a})},function(n,e,t){"use strict";var r=t(7),a=t(2),i=t(10),o=t(3),s=t(81),l=t(116),c=t(114),d=t(15),u=t(60),p=Object.assign,h=Object.defineProperty,f=a([].concat);n.exports=!p||o((function(){if(r&&1!==p({b:1},p(h({},"a",{enumerable:!0,get:function(){h(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=p({},n)[t]||"abcdefghijklmnopqrst"!=s(p({},e)).join("")}))?function(n,e){for(var t=d(n),a=arguments.length,o=1,p=l.f,h=c.f;a>o;)for(var m,g=u(arguments[o++]),v=p?f(s(g),p(g)):s(g),E=v.length,b=0;E>b;)m=v[b++],r&&!i(h,g,m)||(t[m]=g[m]);return t}:p},function(n,e,t){"use strict";var r=t(1),a=t(31),i=t(160),o=t(3),s=t(18),l=t(5),c=t(119),d=t(167),u=t(14);if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&o((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=c(this,s("Promise")),t=l(n);return this.then(t?function(t){return d(e,n()).then((function(){return t}))}:n,t?function(t){return d(e,n()).then((function(){throw t}))}:n)}}),!a&&l(i)){var p=s("Promise").prototype.finally;i.prototype.finally!==p&&u(i.prototype,"finally",p,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(118),a=t(72);n.exports=r?{}.toString:function(){return"[object "+a(this)+"]"}},function(n,e,t){var r=t(0),a=t(58),i=t(85),o=t(9),s=t(6)("species"),l=r.Array;n.exports=function(n){var e;return a(n)&&(e=n.constructor,(i(e)&&(e===l||a(e.prototype))||o(e)&&null===(e=e[s]))&&(e=void 0)),void 0===e?l:e}},function(n,e,t){"use strict";var r=t(1),a=t(251).left,i=t(45),o=t(49),s=t(86);r({target:"Array",proto:!0,forced:!i("reduce")||!s&&o>79&&o<83},{reduce:function(n){var e=arguments.length;return a(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(0),a=t(32),i=t(15),o=t(60),s=t(22),l=r.TypeError,c=function(n){return function(e,t,r,c){a(t);var d=i(e),u=o(d),p=s(d),h=n?p-1:0,f=n?-1:1;if(r<2)for(;;){if(h in u){c=u[h],h+=f;break}if(h+=f,n?h<0:p<=h)throw l("Reduce of empty array with no initial value")}for(;n?h>=0:p>h;h+=f)h in u&&(c=t(c,u[h],h,d));return c}};n.exports={left:c(!1),right:c(!0)}},function(n,e,t){var r=t(1),a=t(178),i=t(3),o=t(9),s=t(253).onFreeze,l=Object.freeze;r({target:"Object",stat:!0,forced:i((function(){l(1)})),sham:!a},{freeze:function(n){return l&&o(n)?l(s(n)):n}})},function(n,e,t){var r=t(1),a=t(2),i=t(61),o=t(9),s=t(11),l=t(12).f,c=t(56),d=t(179),u=t(254),p=t(76),h=t(178),f=!1,m=p("meta"),g=0,v=function(n){l(n,m,{value:{objectID:"O"+g++,weakData:{}}})},E=n.exports={enable:function(){E.enable=function(){},f=!0;var n=c.f,e=a([].splice),t={};t[m]=1,n(t).length&&(c.f=function(t){for(var r=n(t),a=0,i=r.length;a<i;a++)if(r[a]===m){e(r,a,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:d.f}))},fastKey:function(n,e){if(!o(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!s(n,m)){if(!u(n))return"F";if(!e)return"E";v(n)}return n[m].objectID},getWeakData:function(n,e){if(!s(n,m)){if(!u(n))return!0;if(!e)return!1;v(n)}return n[m].weakData},onFreeze:function(n){return h&&f&&u(n)&&!s(n,m)&&v(n),n}};i[m]=!0},function(n,e,t){var r=t(3),a=t(9),i=t(25),o=t(255),s=Object.isExtensible,l=r((function(){s(1)}));n.exports=l||o?function(n){return!!a(n)&&((!o||"ArrayBuffer"!=i(n))&&(!s||s(n)))}:s},function(n,e,t){var r=t(3);n.exports=r((function(){if("function"==typeof ArrayBuffer){var n=new ArrayBuffer(8);Object.isExtensible(n)&&Object.defineProperty(n,"a",{value:8})}}))},function(n,e,t){var r=t(0);n.exports=r},function(n,e,t){"use strict";var r=t(0),a=t(53),i=t(10),o=t(15),s=t(258),l=t(161),c=t(85),d=t(22),u=t(65),p=t(141),h=t(102),f=r.Array;n.exports=function(n){var e=o(n),t=c(this),r=arguments.length,m=r>1?arguments[1]:void 0,g=void 0!==m;g&&(m=a(m,r>2?arguments[2]:void 0));var v,E,b,y,A,k,x=h(e),B=0;if(!x||this==f&&l(x))for(v=d(e),E=t?new this(v):f(v);v>B;B++)k=g?m(e[B],B):e[B],u(E,B,k);else for(A=(y=p(e,x)).next,E=t?new this:[];!(b=i(A,y)).done;B++)k=g?s(y,m,[b.value,B],!0):b.value,u(E,B,k);return E.length=B,E}},function(n,e,t){var r=t(8),a=t(162);n.exports=function(n,e,t,i){try{return i?e(r(t)[0],t[1]):e(t)}catch(e){a(n,"throw",e)}}},function(n,e,t){var r=t(2),a=t(15),i=Math.floor,o=r("".charAt),s=r("".replace),l=r("".slice),c=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,d=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,r,u,p){var h=t+n.length,f=r.length,m=d;return void 0!==u&&(u=a(u),m=c),s(p,m,(function(a,s){var c;switch(o(s,0)){case"$":return"$";case"&":return n;case"`":return l(e,0,t);case"'":return l(e,h);case"<":c=u[l(s,1,-1)];break;default:var d=+s;if(0===d)return a;if(d>f){var p=i(d/10);return 0===p?a:p<=f?void 0===r[p-1]?o(s,1):r[p-1]+o(s,1):a}c=r[d-1]}return void 0===c?"":c}))}},function(n,e,t){var r=t(185),a=t(261);n.exports=function n(e,t,i,o,s){var l=-1,c=e.length;for(i||(i=a),s||(s=[]);++l<c;){var d=e[l];t>0&&i(d)?t>1?n(d,t-1,i,o,s):r(s,d):o||(s[s.length]=d)}return s}},function(n,e,t){var r=t(67),a=t(123),i=t(28),o=r?r.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||a(n)||!!(o&&n&&n[o])}},function(n,e,t){var r=t(59),a=t(47);n.exports=function(n){return a(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(67),a=Object.prototype,i=a.hasOwnProperty,o=a.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=i.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var a=o.call(n);return r&&(e?n[s]=t:delete n[s]),a}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(266),a=t(322),i=t(131),o=t(28),s=t(333);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?o(n)?a(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(267),a=t(321),i=t(202);n.exports=function(n){var e=a(n);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(187),a=t(191);n.exports=function(n,e,t,i){var o=t.length,s=o,l=!i;if(null==n)return!s;for(n=Object(n);o--;){var c=t[o];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++o<s;){var d=(c=t[o])[0],u=n[d],p=c[1];if(l&&c[2]){if(void 0===u&&!(d in n))return!1}else{var h=new r;if(i)var f=i(u,p,d,n,e,h);if(!(void 0===f?a(p,u,3,i,h):f))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(92),a=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():a.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(92);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(92);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(92);n.exports=function(n,e){var t=this.__data__,a=r(t,n);return a<0?(++this.size,t.push([n,e])):t[a][1]=e,this}},function(n,e,t){var r=t(91);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(91),a=t(124),i=t(126);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var o=t.__data__;if(!a||o.length<199)return o.push([n,e]),this.size=++t.size,this;t=this.__data__=new i(o)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(189),a=t(279),i=t(125),o=t(190),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,d=l.toString,u=c.hasOwnProperty,p=RegExp("^"+d.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||a(n))&&(r(n)?p:s).test(o(n))}},function(n,e,t){var r,a=t(280),i=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!i&&i in n}},function(n,e,t){var r=t(30)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(283),a=t(91),i=t(124);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||a),string:new r}}},function(n,e,t){var r=t(284),a=t(285),i=t(286),o=t(287),s=t(288);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(93);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(93),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(93),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:a.call(e,n)}},function(n,e,t){var r=t(93);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(94);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(94);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(94);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(94);n.exports=function(n,e){var t=r(this,n),a=t.size;return t.set(n,e),this.size+=t.size==a?0:1,this}},function(n,e,t){var r=t(187),a=t(192),i=t(298),o=t(301),s=t(317),l=t(28),c=t(196),d=t(198),u="[object Object]",p=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,h,f,m){var g=l(n),v=l(e),E=g?"[object Array]":s(n),b=v?"[object Array]":s(e),y=(E="[object Arguments]"==E?u:E)==u,A=(b="[object Arguments]"==b?u:b)==u,k=E==b;if(k&&c(n)){if(!c(e))return!1;g=!0,y=!1}if(k&&!y)return m||(m=new r),g||d(n)?a(n,e,t,h,f,m):i(n,e,E,t,h,f,m);if(!(1&t)){var x=y&&p.call(n,"__wrapped__"),B=A&&p.call(e,"__wrapped__");if(x||B){var _=x?n.value():n,T=B?e.value():e;return m||(m=new r),f(_,T,t,h,m)}}return!!k&&(m||(m=new r),o(n,e,t,h,f,m))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(67),a=t(299),i=t(188),o=t(192),s=t(300),l=t(127),c=r?r.prototype:void 0,d=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,u,p){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!u(new a(n),new a(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var h=s;case"[object Set]":var f=1&r;if(h||(h=l),n.size!=e.size&&!f)return!1;var m=p.get(n);if(m)return m==e;r|=2,p.set(n,e);var g=o(h(n),h(e),r,c,u,p);return p.delete(n),g;case"[object Symbol]":if(d)return d.call(n)==d.call(e)}return!1}},function(n,e,t){var r=t(30).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(302),a=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,i,o,s){var l=1&t,c=r(n),d=c.length;if(d!=r(e).length&&!l)return!1;for(var u=d;u--;){var p=c[u];if(!(l?p in e:a.call(e,p)))return!1}var h=s.get(n),f=s.get(e);if(h&&f)return h==e&&f==n;var m=!0;s.set(n,e),s.set(e,n);for(var g=l;++u<d;){var v=n[p=c[u]],E=e[p];if(i)var b=l?i(E,v,p,e,n,s):i(v,E,p,n,e,s);if(!(void 0===b?v===E||o(v,E,t,i,s):b)){m=!1;break}g||(g="constructor"==p)}if(m&&!g){var y=n.constructor,A=e.constructor;y==A||!("constructor"in n)||!("constructor"in e)||"function"==typeof y&&y instanceof y&&"function"==typeof A&&A instanceof A||(m=!1)}return s.delete(n),s.delete(e),m}},function(n,e,t){var r=t(303),a=t(304),i=t(195);n.exports=function(n){return r(n,i,a)}},function(n,e,t){var r=t(185),a=t(28);n.exports=function(n,e,t){var i=e(n);return a(n)?i:r(i,t(n))}},function(n,e,t){var r=t(305),a=t(306),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,s=o?function(n){return null==n?[]:(n=Object(n),r(o(n),(function(e){return i.call(n,e)})))}:a;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=0,i=[];++t<r;){var o=n[t];e(o,t,n)&&(i[a++]=o)}return i}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(308),a=t(123),i=t(28),o=t(196),s=t(197),l=t(198),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=i(n),d=!t&&a(n),u=!t&&!d&&o(n),p=!t&&!d&&!u&&l(n),h=t||d||u||p,f=h?r(n.length,String):[],m=f.length;for(var g in n)!e&&!c.call(n,g)||h&&("length"==g||u&&("offset"==g||"parent"==g)||p&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,m))||f.push(g);return f}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(59),a=t(128),i=t(47),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&a(n.length)&&!!o[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(186),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,o=i&&i.exports===a&&r.process,s=function(){try{var n=i&&i.require&&i.require("util").types;return n||o&&o.binding&&o.binding("util")}catch(n){}}();n.exports=s}).call(this,t(145)(n))},function(n,e,t){var r=t(314),a=t(315),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return a(n);var e=[];for(var t in Object(n))i.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(316)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(318),a=t(124),i=t(319),o=t(200),s=t(320),l=t(59),c=t(190),d=c(r),u=c(a),p=c(i),h=c(o),f=c(s),m=l;(r&&"[object DataView]"!=m(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=m(new a)||i&&"[object Promise]"!=m(i.resolve())||o&&"[object Set]"!=m(new o)||s&&"[object WeakMap]"!=m(new s))&&(m=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case d:return"[object DataView]";case u:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case f:return"[object WeakMap]"}return e}),n.exports=m},function(n,e,t){var r=t(39)(t(30),"DataView");n.exports=r},function(n,e,t){var r=t(39)(t(30),"Promise");n.exports=r},function(n,e,t){var r=t(39)(t(30),"WeakMap");n.exports=r},function(n,e,t){var r=t(201),a=t(195);n.exports=function(n){for(var e=a(n),t=e.length;t--;){var i=e[t],o=n[i];e[t]=[i,o,r(o)]}return e}},function(n,e,t){var r=t(191),a=t(323),i=t(330),o=t(129),s=t(201),l=t(202),c=t(95);n.exports=function(n,e){return o(n)&&s(e)?l(c(n),e):function(t){var o=a(t,n);return void 0===o&&o===e?i(t,n):r(e,o,3)}}},function(n,e,t){var r=t(203);n.exports=function(n,e,t){var a=null==n?void 0:r(n,e);return void 0===a?t:a}},function(n,e,t){var r=t(325),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(a,(function(n,t,r,a){e.push(r?a.replace(i,"$1"):t||n)})),e}));n.exports=o},function(n,e,t){var r=t(326);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(126);function a(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,a=e?e.apply(this,r):r[0],i=t.cache;if(i.has(a))return i.get(a);var o=n.apply(this,r);return t.cache=i.set(a,o)||i,o};return t.cache=new(a.Cache||r),t}a.Cache=r,n.exports=a},function(n,e,t){var r=t(328);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(67),a=t(329),i=t(28),o=t(130),s=r?r.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(i(e))return a(e,n)+"";if(o(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=Array(r);++t<r;)a[t]=e(n[t],t,n);return a}},function(n,e,t){var r=t(331),a=t(332);n.exports=function(n,e){return null!=n&&a(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(204),a=t(123),i=t(28),o=t(197),s=t(128),l=t(95);n.exports=function(n,e,t){for(var c=-1,d=(e=r(e,n)).length,u=!1;++c<d;){var p=l(e[c]);if(!(u=null!=n&&t(n,p)))break;n=n[p]}return u||++c!=d?u:!!(d=null==n?0:n.length)&&s(d)&&o(p,d)&&(i(n)||a(n))}},function(n,e,t){var r=t(334),a=t(335),i=t(129),o=t(95);n.exports=function(n){return i(n)?r(o(n)):a(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(203);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(131),a=t(337),i=t(339);n.exports=function(n,e){return i(a(n,e,r),n+"")}},function(n,e,t){var r=t(338),a=Math.max;n.exports=function(n,e,t){return e=a(void 0===e?n.length-1:e,0),function(){for(var i=arguments,o=-1,s=a(i.length-e,0),l=Array(s);++o<s;)l[o]=i[e+o];o=-1;for(var c=Array(e+1);++o<e;)c[o]=i[o];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(340),a=t(343)(r);n.exports=a},function(n,e,t){var r=t(341),a=t(342),i=t(131),o=a?function(n,e){return a(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:i;n.exports=o},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(39),a=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var a=t(),i=16-(a-r);if(r=a,i>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(193),a=t(345),i=t(350),o=t(194),s=t(351),l=t(127);n.exports=function(n,e,t){var c=-1,d=a,u=n.length,p=!0,h=[],f=h;if(t)p=!1,d=i;else if(u>=200){var m=e?null:s(n);if(m)return l(m);p=!1,d=o,f=new r}else f=e?[]:h;n:for(;++c<u;){var g=n[c],v=e?e(g):g;if(g=t||0!==g?g:0,p&&v==v){for(var E=f.length;E--;)if(f[E]===v)continue n;e&&f.push(v),h.push(g)}else d(f,v,t)||(f!==h&&f.push(v),h.push(g))}return h}},function(n,e,t){var r=t(346);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(347),a=t(348),i=t(349);n.exports=function(n,e,t){return e==e?i(n,e,t):r(n,a,t)}},function(n,e){n.exports=function(n,e,t,r){for(var a=n.length,i=t+(r?1:-1);r?i--:++i<a;)if(e(n[i],i,n))return i;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,a=n.length;++r<a;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,a=null==n?0:n.length;++r<a;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(200),a=t(352),i=t(127),o=r&&1/i(new r([,-0]))[1]==1/0?function(n){return new r(n)}:a;n.exports=o},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(199),a=t(47);n.exports=function(n){return a(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(63).PROPER,a=t(3),i=t(148);n.exports=function(n){return a((function(){return!!i[n]()||"​᠎"!=="​᠎"[n]()||r&&i[n].name!==n}))}},function(n,e,t){t(1)({target:"Function",proto:!0},{bind:t(205)})},function(n,e,t){var r=t(2);n.exports=r(1..valueOf)},function(n,e,t){var r=t(2),a=t(50),i=t(13),o=t(360),s=t(16),l=r(o),c=r("".slice),d=Math.ceil,u=function(n){return function(e,t,r){var o,u,p=i(s(e)),h=a(t),f=p.length,m=void 0===r?" ":i(r);return h<=f||""==m?p:((u=l(m,d((o=h-f)/m.length))).length>o&&(u=c(u,0,o)),n?p+u:u+p)}};n.exports={start:u(!1),end:u(!0)}},function(n,e,t){"use strict";var r=t(0),a=t(52),i=t(13),o=t(16),s=r.RangeError;n.exports=function(n){var e=i(o(this)),t="",r=a(n);if(r<0||r==1/0)throw s("Wrong number of repetitions");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(t+=e);return t}},function(n,e,t){var r=t(29);n.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},function(n,e,t){"use strict";t(207)},function(n,e,t){"use strict";t(208)},function(n,e,t){"use strict";var r=t(1),a=t(2),i=t(32),o=t(15),s=t(22),l=t(13),c=t(3),d=t(230),u=t(45),p=t(365),h=t(366),f=t(49),m=t(367),g=[],v=a(g.sort),E=a(g.push),b=c((function(){g.sort(void 0)})),y=c((function(){g.sort(null)})),A=u("sort"),k=!c((function(){if(f)return f<70;if(!(p&&p>3)){if(h)return!0;if(m)return m<603;var n,e,t,r,a="";for(n=65;n<76;n++){switch(e=String.fromCharCode(n),n){case 66:case 69:case 70:case 72:t=3;break;case 68:case 71:t=4;break;default:t=2}for(r=0;r<47;r++)g.push({k:e+r,v:t})}for(g.sort((function(n,e){return e.v-n.v})),r=0;r<g.length;r++)e=g[r].k.charAt(0),a.charAt(a.length-1)!==e&&(a+=e);return"DGBEFHACIJK"!==a}}));r({target:"Array",proto:!0,forced:b||!y||!A||!k},{sort:function(n){void 0!==n&&i(n);var e=o(this);if(k)return void 0===n?v(e):v(e,n);var t,r,a=[],c=s(e);for(r=0;r<c;r++)r in e&&E(a,e[r]);for(d(a,function(n){return function(e,t){return void 0===t?-1:void 0===e?1:void 0!==n?+n(e,t)||0:l(e)>l(t)?1:-1}}(n)),t=a.length,r=0;r<t;)e[r]=a[r++];for(;r<c;)delete e[r++];return e}})},function(n,e,t){var r=t(29).match(/firefox\/(\d+)/i);n.exports=!!r&&+r[1]},function(n,e,t){var r=t(29);n.exports=/MSIE|Trident/.test(r)},function(n,e,t){var r=t(29).match(/AppleWebKit\/(\d+)\./);n.exports=!!r&&+r[1]},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(1),a=t(3),i=t(17),o=t(33).f,s=t(7),l=a((function(){o(1)}));r({target:"Object",stat:!0,forced:!s||l,sham:!s},{getOwnPropertyDescriptor:function(n,e){return o(i(n),e)}})},function(n,e,t){var r=t(1),a=t(7),i=t(110).f;r({target:"Object",stat:!0,forced:Object.defineProperties!==i,sham:!a},{defineProperties:i})},function(n,e,t){t(1)({target:"Reflect",stat:!0},{ownKeys:t(115)})},function(n,e){},function(n,e){function t(n,e){for(var t=0,r=n.length-1;r>=0;r--){var a=n[r];"."===a?n.splice(r,1):".."===a?(n.splice(r,1),t++):t&&(n.splice(r,1),t--)}if(e)for(;t--;t)n.unshift("..");return n}function r(n,e){if(n.filter)return n.filter(e);for(var t=[],r=0;r<n.length;r++)e(n[r],r,n)&&t.push(n[r]);return t}e.resolve=function(){for(var n="",e=!1,a=arguments.length-1;a>=-1&&!e;a--){var i=a>=0?arguments[a]:process.cwd();if("string"!=typeof i)throw new TypeError("Arguments to path.resolve must be strings");i&&(n=i+"/"+n,e="/"===i.charAt(0))}return(e?"/":"")+(n=t(r(n.split("/"),(function(n){return!!n})),!e).join("/"))||"."},e.normalize=function(n){var i=e.isAbsolute(n),o="/"===a(n,-1);return(n=t(r(n.split("/"),(function(n){return!!n})),!i).join("/"))||i||(n="."),n&&o&&(n+="/"),(i?"/":"")+n},e.isAbsolute=function(n){return"/"===n.charAt(0)},e.join=function(){var n=Array.prototype.slice.call(arguments,0);return e.normalize(r(n,(function(n,e){if("string"!=typeof n)throw new TypeError("Arguments to path.join must be strings");return n})).join("/"))},e.relative=function(n,t){function r(n){for(var e=0;e<n.length&&""===n[e];e++);for(var t=n.length-1;t>=0&&""===n[t];t--);return e>t?[]:n.slice(e,t-e+1)}n=e.resolve(n).substr(1),t=e.resolve(t).substr(1);for(var a=r(n.split("/")),i=r(t.split("/")),o=Math.min(a.length,i.length),s=o,l=0;l<o;l++)if(a[l]!==i[l]){s=l;break}var c=[];for(l=s;l<a.length;l++)c.push("..");return(c=c.concat(i.slice(s))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(n){if("string"!=typeof n&&(n+=""),0===n.length)return".";for(var e=n.charCodeAt(0),t=47===e,r=-1,a=!0,i=n.length-1;i>=1;--i)if(47===(e=n.charCodeAt(i))){if(!a){r=i;break}}else a=!1;return-1===r?t?"/":".":t&&1===r?"/":n.slice(0,r)},e.basename=function(n,e){var t=function(n){"string"!=typeof n&&(n+="");var e,t=0,r=-1,a=!0;for(e=n.length-1;e>=0;--e)if(47===n.charCodeAt(e)){if(!a){t=e+1;break}}else-1===r&&(a=!1,r=e+1);return-1===r?"":n.slice(t,r)}(n);return e&&t.substr(-1*e.length)===e&&(t=t.substr(0,t.length-e.length)),t},e.extname=function(n){"string"!=typeof n&&(n+="");for(var e=-1,t=0,r=-1,a=!0,i=0,o=n.length-1;o>=0;--o){var s=n.charCodeAt(o);if(47!==s)-1===r&&(a=!1,r=o+1),46===s?-1===e?e=o:1!==i&&(i=1):-1!==e&&(i=-1);else if(!a){t=o+1;break}}return-1===e||-1===r||0===i||1===i&&e===r-1&&e===t+1?"":n.slice(e,r)};var a="b"==="ab".substr(-1)?function(n,e,t){return n.substr(e,t)}:function(n,e,t){return e<0&&(e=n.length+e),n.substr(e,t)}},function(n,e,t){"use strict";var r=/[|\\{}()[\]^$+*?.]/g;e.escapeRegExpChars=function(n){return n?String(n).replace(r,"\\$&"):""};var a={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},i=/[&<>'"]/g;function o(n){return a[n]||n}e.escapeXML=function(n){return null==n?"":String(n).replace(i,o)},e.escapeXML.toString=function(){return Function.prototype.toString.call(this)+';\nvar _ENCODE_HTML_RULES = {\n      "&": "&amp;"\n    , "<": "&lt;"\n    , ">": "&gt;"\n    , \'"\': "&#34;"\n    , "\'": "&#39;"\n    }\n  , _MATCH_HTML = /[&<>\'"]/g;\nfunction encode_char(c) {\n  return _ENCODE_HTML_RULES[c] || c;\n};\n'},e.shallowCopy=function(n,e){for(var t in e=e||{})n[t]=e[t];return n},e.shallowCopyFromList=function(n,e,t){for(var r=0;r<t.length;r++){var a=t[r];void 0!==e[a]&&(n[a]=e[a])}return n},e.cache={_data:{},set:function(n,e){this._data[n]=e},get:function(n){return this._data[n]},remove:function(n){delete this._data[n]},reset:function(){this._data={}}}},function(n){n.exports=JSON.parse('{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.7.4","author":"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)","license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":"https://github.com/mde/ejs/issues","homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.1.1","eslint":"^4.14.0","git-directory-deploy":"^1.5.1","jake":"^10.3.1","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^5.0.5","uglify-js":"^3.3.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","postinstall":"node ./postinstall.js"}}')},function(n,e,t){"use strict";t(211)},function(n,e,t){"use strict";t(212)},function(n,e,t){"use strict";t.r(e);t(140),t(236),t(245),t(247);var r=t(87),a=(t(138),t(40),t(4),t(21),t(24),t(43),t(23),Object.freeze({}));function i(n){return null==n}function o(n){return null!=n}function s(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return null!==n&&"object"==typeof n}var d=Object.prototype.toString;function u(n){return"[object Object]"===d.call(n)}function p(n){return"[object RegExp]"===d.call(n)}function h(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function f(n){return o(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function m(n){return null==n?"":Array.isArray(n)||u(n)&&n.toString===d?JSON.stringify(n,null,2):String(n)}function g(n){var e=parseFloat(n);return isNaN(e)?n:e}function v(n,e){for(var t=Object.create(null),r=n.split(","),a=0;a<r.length;a++)t[r[a]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}v("slot,component",!0);var E=v("key,ref,slot,slot-scope,is");function b(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var y=Object.prototype.hasOwnProperty;function A(n,e){return y.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var x=/-(\w)/g,B=k((function(n){return n.replace(x,(function(n,e){return e?e.toUpperCase():""}))})),_=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),T=/\B([A-Z])/g,w=k((function(n){return n.replace(T,"-$1").toLowerCase()}));var C=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function P(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function S(n,e){for(var t in e)n[t]=e[t];return n}function I(n){for(var e={},t=0;t<n.length;t++)n[t]&&S(e,n[t]);return e}function O(n,e,t){}var j=function(n,e,t){return!1},L=function(n){return n};function D(n,e){if(n===e)return!0;var t=c(n),r=c(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var a=Array.isArray(n),i=Array.isArray(e);if(a&&i)return n.length===e.length&&n.every((function(n,t){return D(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(a||i)return!1;var o=Object.keys(n),s=Object.keys(e);return o.length===s.length&&o.every((function(t){return D(n[t],e[t])}))}catch(n){return!1}}function z(n,e){for(var t=0;t<n.length;t++)if(D(n[t],e))return t;return-1}function F(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var R=["component","directive","filter"],U=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],M={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:j,isReservedAttr:j,isUnknownElement:j,getTagNamespace:O,parsePlatformTagName:L,mustUseProp:j,async:!0,_lifecycleHooks:U},q=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function N(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var K=new RegExp("[^"+q.source+".$_\\d]");var $,H="__proto__"in{},Q="undefined"!=typeof window,G="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,W=G&&WXEnvironment.platform.toLowerCase(),V=Q&&window.navigator.userAgent.toLowerCase(),Z=V&&/msie|trident/.test(V),J=V&&V.indexOf("msie 9.0")>0,Y=V&&V.indexOf("edge/")>0,X=(V&&V.indexOf("android"),V&&/iphone|ipad|ipod|ios/.test(V)||"ios"===W),nn=(V&&/chrome\/\d+/.test(V),V&&/phantomjs/.test(V),V&&V.match(/firefox\/(\d+)/)),en={}.watch,tn=!1;if(Q)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){tn=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var an=function(){return void 0===$&&($=!Q&&!G&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),$},on=Q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function sn(n){return"function"==typeof n&&/native code/.test(n.toString())}var ln,cn="undefined"!=typeof Symbol&&sn(Symbol)&&"undefined"!=typeof Reflect&&sn(Reflect.ownKeys);ln="undefined"!=typeof Set&&sn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var dn=O,un=0,pn=function(){this.id=un++,this.subs=[]};pn.prototype.addSub=function(n){this.subs.push(n)},pn.prototype.removeSub=function(n){b(this.subs,n)},pn.prototype.depend=function(){pn.target&&pn.target.addDep(this)},pn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},pn.target=null;var hn=[];function fn(n){hn.push(n),pn.target=n}function mn(){hn.pop(),pn.target=hn[hn.length-1]}var gn=function(n,e,t,r,a,i,o,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=a,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},vn={child:{configurable:!0}};vn.child.get=function(){return this.componentInstance},Object.defineProperties(gn.prototype,vn);var En=function(n){void 0===n&&(n="");var e=new gn;return e.text=n,e.isComment=!0,e};function bn(n){return new gn(void 0,void 0,void 0,String(n))}function yn(n){var e=new gn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var An=Array.prototype,kn=Object.create(An);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=An[n];N(kn,n,(function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];var a,i=e.apply(this,t),o=this.__ob__;switch(n){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&o.observeArray(a),o.dep.notify(),i}))}));var xn=Object.getOwnPropertyNames(kn),Bn=!0;function _n(n){Bn=n}var Tn=function(n){this.value=n,this.dep=new pn,this.vmCount=0,N(n,"__ob__",this),Array.isArray(n)?(H?function(n,e){n.__proto__=e}(n,kn):function(n,e,t){for(var r=0,a=t.length;r<a;r++){var i=t[r];N(n,i,e[i])}}(n,kn,xn),this.observeArray(n)):this.walk(n)};function wn(n,e){var t;if(c(n)&&!(n instanceof gn))return A(n,"__ob__")&&n.__ob__ instanceof Tn?t=n.__ob__:Bn&&!an()&&(Array.isArray(n)||u(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new Tn(n)),e&&t&&t.vmCount++,t}function Cn(n,e,t,r,a){var i=new pn,o=Object.getOwnPropertyDescriptor(n,e);if(!o||!1!==o.configurable){var s=o&&o.get,l=o&&o.set;s&&!l||2!==arguments.length||(t=n[e]);var c=!a&&wn(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(n):t;return pn.target&&(i.depend(),c&&(c.dep.depend(),Array.isArray(e)&&In(e))),e},set:function(e){var r=s?s.call(n):t;e===r||e!=e&&r!=r||s&&!l||(l?l.call(n,e):t=e,c=!a&&wn(e),i.notify())}})}}function Pn(n,e,t){if(Array.isArray(n)&&h(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var r=n.__ob__;return n._isVue||r&&r.vmCount?t:r?(Cn(r.value,e,t),r.dep.notify(),t):(n[e]=t,t)}function Sn(n,e){if(Array.isArray(n)&&h(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||A(n,e)&&(delete n[e],t&&t.dep.notify())}}function In(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&In(e)}Tn.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)Cn(n,e[t])},Tn.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)wn(n[e])};var On=M.optionMergeStrategies;function jn(n,e){if(!e)return n;for(var t,r,a,i=cn?Reflect.ownKeys(e):Object.keys(e),o=0;o<i.length;o++)"__ob__"!==(t=i[o])&&(r=n[t],a=e[t],A(n,t)?r!==a&&u(r)&&u(a)&&jn(r,a):Pn(n,t,a));return n}function Ln(n,e,t){return t?function(){var r="function"==typeof e?e.call(t,t):e,a="function"==typeof n?n.call(t,t):n;return r?jn(r,a):a}:e?n?function(){return jn("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Dn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function zn(n,e,t,r){var a=Object.create(n||null);return e?S(a,e):a}On.data=function(n,e,t){return t?Ln(n,e,t):e&&"function"!=typeof e?n:Ln(n,e)},U.forEach((function(n){On[n]=Dn})),R.forEach((function(n){On[n+"s"]=zn})),On.watch=function(n,e,t,r){if(n===en&&(n=void 0),e===en&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var i in S(a,n),e){var o=a[i],s=e[i];o&&!Array.isArray(o)&&(o=[o]),a[i]=o?o.concat(s):Array.isArray(s)?s:[s]}return a},On.props=On.methods=On.inject=On.computed=function(n,e,t,r){if(!n)return e;var a=Object.create(null);return S(a,n),e&&S(a,e),a},On.provide=Ln;var Fn=function(n,e){return void 0===e?n:e};function Rn(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var r,a,i={};if(Array.isArray(t))for(r=t.length;r--;)"string"==typeof(a=t[r])&&(i[B(a)]={type:null});else if(u(t))for(var o in t)a=t[o],i[B(o)]=u(a)?a:{type:a};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(Array.isArray(t))for(var a=0;a<t.length;a++)r[t[a]]={from:t[a]};else if(u(t))for(var i in t){var o=t[i];r[i]=u(o)?S({from:i},o):{from:o}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];"function"==typeof r&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Rn(n,e.extends,t)),e.mixins))for(var r=0,a=e.mixins.length;r<a;r++)n=Rn(n,e.mixins[r],t);var i,o={};for(i in n)s(i);for(i in e)A(n,i)||s(i);function s(r){var a=On[r]||Fn;o[r]=a(n[r],e[r],t,r)}return o}function Un(n,e,t,r){if("string"==typeof t){var a=n[e];if(A(a,t))return a[t];var i=B(t);if(A(a,i))return a[i];var o=_(i);return A(a,o)?a[o]:a[t]||a[i]||a[o]}}function Mn(n,e,t,r){var a=e[n],i=!A(t,n),o=t[n],s=$n(Boolean,a.type);if(s>-1)if(i&&!A(a,"default"))o=!1;else if(""===o||o===w(n)){var l=$n(String,a.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=function(n,e,t){if(!A(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof r&&"Function"!==Nn(e.type)?r.call(n):r}(r,a,n);var c=Bn;_n(!0),wn(o),_n(c)}return o}var qn=/^\s*function (\w+)/;function Nn(n){var e=n&&n.toString().match(qn);return e?e[1]:""}function Kn(n,e){return Nn(n)===Nn(e)}function $n(n,e){if(!Array.isArray(e))return Kn(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Kn(e[t],n))return t;return-1}function Hn(n,e,t){fn();try{if(e)for(var r=e;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var i=0;i<a.length;i++)try{if(!1===a[i].call(r,n,e,t))return}catch(n){Gn(n,r,"errorCaptured hook")}}Gn(n,e,t)}finally{mn()}}function Qn(n,e,t,r,a){var i;try{(i=t?n.apply(e,t):n.call(e))&&!i._isVue&&f(i)&&!i._handled&&(i.catch((function(n){return Hn(n,r,a+" (Promise/async)")})),i._handled=!0)}catch(n){Hn(n,r,a)}return i}function Gn(n,e,t){if(M.errorHandler)try{return M.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Wn(e,null,"config.errorHandler")}Wn(n,e,t)}function Wn(n,e,t){if(!Q&&!G||"undefined"==typeof console)throw n;console.error(n)}var Vn,Zn=!1,Jn=[],Yn=!1;function Xn(){Yn=!1;var n=Jn.slice(0);Jn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&sn(Promise)){var ne=Promise.resolve();Vn=function(){ne.then(Xn),X&&setTimeout(O)},Zn=!0}else if(Z||"undefined"==typeof MutationObserver||!sn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Vn="undefined"!=typeof setImmediate&&sn(setImmediate)?function(){setImmediate(Xn)}:function(){setTimeout(Xn,0)};else{var ee=1,te=new MutationObserver(Xn),re=document.createTextNode(String(ee));te.observe(re,{characterData:!0}),Vn=function(){ee=(ee+1)%2,re.data=String(ee)},Zn=!0}function ae(n,e){var t;if(Jn.push((function(){if(n)try{n.call(e)}catch(n){Hn(n,e,"nextTick")}else t&&t(e)})),Yn||(Yn=!0,Vn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var ie=new ln;function oe(n){!function n(e,t){var r,a,i=Array.isArray(e);if(!i&&!c(e)||Object.isFrozen(e)||e instanceof gn)return;if(e.__ob__){var o=e.__ob__.dep.id;if(t.has(o))return;t.add(o)}if(i)for(r=e.length;r--;)n(e[r],t);else for(a=Object.keys(e),r=a.length;r--;)n(e[a[r]],t)}(n,ie),ie.clear()}var se=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function le(n,e){function t(){var n=arguments,r=t.fns;if(!Array.isArray(r))return Qn(r,null,arguments,e,"v-on handler");for(var a=r.slice(),i=0;i<a.length;i++)Qn(a[i],null,n,e,"v-on handler")}return t.fns=n,t}function ce(n,e,t,r,a,o){var l,c,d,u;for(l in n)c=n[l],d=e[l],u=se(l),i(c)||(i(d)?(i(c.fns)&&(c=n[l]=le(c,o)),s(u.once)&&(c=n[l]=a(u.name,c,u.capture)),t(u.name,c,u.capture,u.passive,u.params)):c!==d&&(d.fns=c,n[l]=d));for(l in e)i(n[l])&&r((u=se(l)).name,e[l],u.capture)}function de(n,e,t){var r;n instanceof gn&&(n=n.data.hook||(n.data.hook={}));var a=n[e];function l(){t.apply(this,arguments),b(r.fns,l)}i(a)?r=le([l]):o(a.fns)&&s(a.merged)?(r=a).fns.push(l):r=le([a,l]),r.merged=!0,n[e]=r}function ue(n,e,t,r,a){if(o(e)){if(A(e,t))return n[t]=e[t],a||delete e[t],!0;if(A(e,r))return n[t]=e[r],a||delete e[r],!0}return!1}function pe(n){return l(n)?[bn(n)]:Array.isArray(n)?function n(e,t){var r,a,c,d,u=[];for(r=0;r<e.length;r++)i(a=e[r])||"boolean"==typeof a||(c=u.length-1,d=u[c],Array.isArray(a)?a.length>0&&(he((a=n(a,(t||"")+"_"+r))[0])&&he(d)&&(u[c]=bn(d.text+a[0].text),a.shift()),u.push.apply(u,a)):l(a)?he(d)?u[c]=bn(d.text+a):""!==a&&u.push(bn(a)):he(a)&&he(d)?u[c]=bn(d.text+a.text):(s(e._isVList)&&o(a.tag)&&i(a.key)&&o(t)&&(a.key="__vlist"+t+"_"+r+"__"),u.push(a)));return u}(n):void 0}function he(n){return o(n)&&o(n.text)&&!1===n.isComment}function fe(n,e){if(n){for(var t=Object.create(null),r=cn?Reflect.ownKeys(n):Object.keys(n),a=0;a<r.length;a++){var i=r[a];if("__ob__"!==i){for(var o=n[i].from,s=e;s;){if(s._provided&&A(s._provided,o)){t[i]=s._provided[o];break}s=s.$parent}if(!s)if("default"in n[i]){var l=n[i].default;t[i]="function"==typeof l?l.call(e):l}else 0}}return t}}function me(n,e){if(!n||!n.length)return{};for(var t={},r=0,a=n.length;r<a;r++){var i=n[r],o=i.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,i.context!==e&&i.fnContext!==e||!o||null==o.slot)(t.default||(t.default=[])).push(i);else{var s=o.slot,l=t[s]||(t[s]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var c in t)t[c].every(ge)&&delete t[c];return t}function ge(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ve(n){return n.isComment&&n.asyncFactory}function Ee(n,e,t){var r,i=Object.keys(e).length>0,o=n?!!n.$stable:!i,s=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(o&&t&&t!==a&&s===t.$key&&!i&&!t.$hasNormal)return t;for(var l in r={},n)n[l]&&"$"!==l[0]&&(r[l]=be(e,l,n[l]))}else r={};for(var c in e)c in r||(r[c]=ye(e,c));return n&&Object.isExtensible(n)&&(n._normalized=r),N(r,"$stable",o),N(r,"$key",s),N(r,"$hasNormal",i),r}function be(n,e,t){var r=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:pe(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!ve(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:r,enumerable:!0,configurable:!0}),r}function ye(n,e){return function(){return n[e]}}function Ae(n,e){var t,r,a,i,s;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),r=0,a=n.length;r<a;r++)t[r]=e(n[r],r);else if("number"==typeof n)for(t=new Array(n),r=0;r<n;r++)t[r]=e(r+1,r);else if(c(n))if(cn&&n[Symbol.iterator]){t=[];for(var l=n[Symbol.iterator](),d=l.next();!d.done;)t.push(e(d.value,t.length)),d=l.next()}else for(i=Object.keys(n),t=new Array(i.length),r=0,a=i.length;r<a;r++)s=i[r],t[r]=e(n[s],s,r);return o(t)||(t=[]),t._isVList=!0,t}function ke(n,e,t,r){var a,i=this.$scopedSlots[n];i?(t=t||{},r&&(t=S(S({},r),t)),a=i(t)||("function"==typeof e?e():e)):a=this.$slots[n]||("function"==typeof e?e():e);var o=t&&t.slot;return o?this.$createElement("template",{slot:o},a):a}function xe(n){return Un(this.$options,"filters",n)||L}function Be(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function _e(n,e,t,r,a){var i=M.keyCodes[e]||t;return a&&r&&!M.keyCodes[e]?Be(a,r):i?Be(i,n):r?w(r)!==e:void 0===n}function Te(n,e,t,r,a){if(t)if(c(t)){var i;Array.isArray(t)&&(t=I(t));var o=function(o){if("class"===o||"style"===o||E(o))i=n;else{var s=n.attrs&&n.attrs.type;i=r||M.mustUseProp(e,s,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=B(o),c=w(o);l in i||c in i||(i[o]=t[o],a&&((n.on||(n.on={}))["update:"+o]=function(n){t[o]=n}))};for(var s in t)o(s)}else;return n}function we(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||Pe(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function Ce(n,e,t){return Pe(n,"__once__"+e+(t?"_"+t:""),!0),n}function Pe(n,e,t){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&Se(n[r],e+"_"+r,t);else Se(n,e,t)}function Se(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function Ie(n,e){if(e)if(u(e)){var t=n.on=n.on?S({},n.on):{};for(var r in e){var a=t[r],i=e[r];t[r]=a?[].concat(a,i):i}}else;return n}function Oe(n,e,t,r){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var i=n[a];Array.isArray(i)?Oe(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function je(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function Le(n,e){return"string"==typeof n?e+n:n}function De(n){n._o=Ce,n._n=g,n._s=m,n._l=Ae,n._t=ke,n._q=D,n._i=z,n._m=we,n._f=xe,n._k=_e,n._b=Te,n._v=bn,n._e=En,n._u=Oe,n._g=Ie,n._d=je,n._p=Le}function ze(n,e,t,r,i){var o,l=this,c=i.options;A(r,"_uid")?(o=Object.create(r))._original=r:(o=r,r=r._original);var d=s(c._compiled),u=!d;this.data=n,this.props=e,this.children=t,this.parent=r,this.listeners=n.on||a,this.injections=fe(c.inject,r),this.slots=function(){return l.$slots||Ee(n.scopedSlots,l.$slots=me(t,r)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Ee(n.scopedSlots,this.slots())}}),d&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=Ee(n.scopedSlots,this.$slots)),c._scopeId?this._c=function(n,e,t,a){var i=Ke(o,n,e,t,a,u);return i&&!Array.isArray(i)&&(i.fnScopeId=c._scopeId,i.fnContext=r),i}:this._c=function(n,e,t,r){return Ke(o,n,e,t,r,u)}}function Fe(n,e,t,r,a){var i=yn(n);return i.fnContext=t,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function Re(n,e){for(var t in e)n[B(t)]=e[t]}De(ze.prototype);var Ue={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;Ue.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;o(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ye)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,i){0;var o=r.data.scopedSlots,s=n.$scopedSlots,l=!!(o&&!o.$stable||s!==a&&!s.$stable||o&&n.$scopedSlots.$key!==o.$key||!o&&n.$scopedSlots.$key),c=!!(i||n.$options._renderChildren||l);n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r);if(n.$options._renderChildren=i,n.$attrs=r.data.attrs||a,n.$listeners=t||a,e&&n.$options.props){_n(!1);for(var d=n._props,u=n.$options._propKeys||[],p=0;p<u.length;p++){var h=u[p],f=n.$options.props;d[h]=Mn(h,f,e,n)}_n(!0),n.$options.propsData=e}t=t||a;var m=n.$options._parentListeners;n.$options._parentListeners=t,Je(n,t,m),c&&(n.$slots=me(i,r.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,tt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,at.push(e)):et(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,nt(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);tt(e,"deactivated")}}(e,!0):e.$destroy())}},Me=Object.keys(Ue);function qe(n,e,t,r,l){if(!i(n)){var d=t.$options._base;if(c(n)&&(n=d.extend(n)),"function"==typeof n){var u;if(i(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&o(n.errorComp))return n.errorComp;if(o(n.resolved))return n.resolved;var t=He;t&&o(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(s(n.loading)&&o(n.loadingComp))return n.loadingComp;if(t&&!o(n.owners)){var r=n.owners=[t],a=!0,l=null,d=null;t.$on("hook:destroyed",(function(){return b(r,t)}));var u=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==d&&(clearTimeout(d),d=null))},p=F((function(t){n.resolved=Qe(t,e),a?r.length=0:u(!0)})),h=F((function(e){o(n.errorComp)&&(n.error=!0,u(!0))})),m=n(p,h);return c(m)&&(f(m)?i(n.resolved)&&m.then(p,h):f(m.component)&&(m.component.then(p,h),o(m.error)&&(n.errorComp=Qe(m.error,e)),o(m.loading)&&(n.loadingComp=Qe(m.loading,e),0===m.delay?n.loading=!0:l=setTimeout((function(){l=null,i(n.resolved)&&i(n.error)&&(n.loading=!0,u(!1))}),m.delay||200)),o(m.timeout)&&(d=setTimeout((function(){d=null,i(n.resolved)&&h(null)}),m.timeout)))),a=!1,n.loading?n.loadingComp:n.resolved}}(u=n,d)))return function(n,e,t,r,a){var i=En();return i.asyncFactory=n,i.asyncMeta={data:e,context:t,children:r,tag:a},i}(u,e,t,r,l);e=e||{},Bt(n),o(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var a=e.on||(e.on={}),i=a[r],s=e.model.callback;o(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(a[r]=[s].concat(i)):a[r]=s}(n.options,e);var p=function(n,e,t){var r=e.options.props;if(!i(r)){var a={},s=n.attrs,l=n.props;if(o(s)||o(l))for(var c in r){var d=w(c);ue(a,l,c,d,!0)||ue(a,s,c,d,!1)}return a}}(e,n);if(s(n.options.functional))return function(n,e,t,r,i){var s=n.options,l={},c=s.props;if(o(c))for(var d in c)l[d]=Mn(d,c,e||a);else o(t.attrs)&&Re(l,t.attrs),o(t.props)&&Re(l,t.props);var u=new ze(t,l,i,r,n),p=s.render.call(null,u._c,u);if(p instanceof gn)return Fe(p,t,u.parent,s,u);if(Array.isArray(p)){for(var h=pe(p)||[],f=new Array(h.length),m=0;m<h.length;m++)f[m]=Fe(h[m],t,u.parent,s,u);return f}}(n,p,e,t,r);var h=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var m=e.slot;e={},m&&(e.slot=m)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<Me.length;t++){var r=Me[t],a=e[r],i=Ue[r];a===i||a&&a._merged||(e[r]=a?Ne(i,a):i)}}(e);var g=n.options.name||l;return new gn("vue-component-"+n.cid+(g?"-"+g:""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:p,listeners:h,tag:l,children:r},u)}}}function Ne(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}function Ke(n,e,t,r,a,d){return(Array.isArray(t)||l(t))&&(a=r,r=t,t=void 0),s(d)&&(a=2),function(n,e,t,r,a){if(o(t)&&o(t.__ob__))return En();o(t)&&o(t.is)&&(e=t.is);if(!e)return En();0;Array.isArray(r)&&"function"==typeof r[0]&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===a?r=pe(r):1===a&&(r=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var l,d;if("string"==typeof e){var u;d=n.$vnode&&n.$vnode.ns||M.getTagNamespace(e),l=M.isReservedTag(e)?new gn(M.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!o(u=Un(n.$options,"components",e))?new gn(e,t,r,void 0,void 0,n):qe(u,t,n,r,e)}else l=qe(e,t,n,r);return Array.isArray(l)?l:o(l)?(o(d)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(o(e.children))for(var a=0,l=e.children.length;a<l;a++){var c=e.children[a];o(c.tag)&&(i(c.ns)||s(r)&&"svg"!==c.tag)&&n(c,t,r)}}(l,d),o(t)&&function(n){c(n.style)&&oe(n.style);c(n.class)&&oe(n.class)}(t),l):En()}(n,e,t,r,a)}var $e,He=null;function Qe(n,e){return(n.__esModule||cn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),c(n)?e.extend(n):n}function Ge(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(o(t)&&(o(t.componentOptions)||ve(t)))return t}}function We(n,e){$e.$on(n,e)}function Ve(n,e){$e.$off(n,e)}function Ze(n,e){var t=$e;return function r(){var a=e.apply(null,arguments);null!==a&&t.$off(n,r)}}function Je(n,e,t){$e=n,ce(e,t||{},We,Ve,Ze,n),$e=void 0}var Ye=null;function Xe(n){var e=Ye;return Ye=n,function(){Ye=e}}function nt(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function et(n,e){if(e){if(n._directInactive=!1,nt(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)et(n.$children[t]);tt(n,"activated")}}function tt(n,e){fn();var t=n.$options[e],r=e+" hook";if(t)for(var a=0,i=t.length;a<i;a++)Qn(t[a],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+e),mn()}var rt=[],at=[],it={},ot=!1,st=!1,lt=0;var ct=0,dt=Date.now;if(Q&&!Z){var ut=window.performance;ut&&"function"==typeof ut.now&&dt()>document.createEvent("Event").timeStamp&&(dt=function(){return ut.now()})}function pt(){var n,e;for(ct=dt(),st=!0,rt.sort((function(n,e){return n.id-e.id})),lt=0;lt<rt.length;lt++)(n=rt[lt]).before&&n.before(),e=n.id,it[e]=null,n.run();var t=at.slice(),r=rt.slice();lt=rt.length=at.length=0,it={},ot=st=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,et(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r._watcher===t&&r._isMounted&&!r._isDestroyed&&tt(r,"updated")}}(r),on&&M.devtools&&on.emit("flush")}var ht=0,ft=function(n,e,t,r,a){this.vm=n,a&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++ht,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ln,this.newDepIds=new ln,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!K.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=O)),this.value=this.lazy?void 0:this.get()};ft.prototype.get=function(){var n;fn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Hn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&oe(n),mn(),this.cleanupDeps()}return n},ft.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},ft.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},ft.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==it[e]){if(it[e]=!0,st){for(var t=rt.length-1;t>lt&&rt[t].id>n.id;)t--;rt.splice(t+1,0,n)}else rt.push(n);ot||(ot=!0,ae(pt))}}(this)},ft.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||c(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';Qn(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},ft.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},ft.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},ft.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var mt={enumerable:!0,configurable:!0,get:O,set:O};function gt(n,e,t){mt.get=function(){return this[e][t]},mt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,mt)}function vt(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props={},a=n.$options._propKeys=[];n.$parent&&_n(!1);var i=function(i){a.push(i);var o=Mn(i,e,t,n);Cn(r,i,o),i in n||gt(n,"_props",i)};for(var o in e)i(o);_n(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?O:C(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;u(e=n._data="function"==typeof e?function(n,e){fn();try{return n.call(e,e)}catch(n){return Hn(n,e,"data()"),{}}finally{mn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,a=(n.$options.methods,t.length);for(;a--;){var i=t[a];0,r&&A(r,i)||(o=void 0,36!==(o=(i+"").charCodeAt(0))&&95!==o&&gt(n,"_data",i))}var o;wn(e,!0)}(n):wn(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=an();for(var a in e){var i=e[a],o="function"==typeof i?i:i.get;0,r||(t[a]=new ft(n,o||O,O,Et)),a in n||bt(n,a,i)}}(n,e.computed),e.watch&&e.watch!==en&&function(n,e){for(var t in e){var r=e[t];if(Array.isArray(r))for(var a=0;a<r.length;a++)kt(n,t,r[a]);else kt(n,t,r)}}(n,e.watch)}var Et={lazy:!0};function bt(n,e,t){var r=!an();"function"==typeof t?(mt.get=r?yt(e):At(t),mt.set=O):(mt.get=t.get?r&&!1!==t.cache?yt(e):At(t.get):O,mt.set=t.set||O),Object.defineProperty(n,e,mt)}function yt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),pn.target&&e.depend(),e.value}}function At(n){return function(){return n.call(this,this)}}function kt(n,e,t,r){return u(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var xt=0;function Bt(n){var e=n.options;if(n.super){var t=Bt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var a in t)t[a]!==r[a]&&(e||(e={}),e[a]=t[a]);return e}(n);r&&S(n.extendOptions,r),(e=n.options=Rn(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function _t(n){this._init(n)}function Tt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,a=n._Ctor||(n._Ctor={});if(a[r])return a[r];var i=n.name||t.options.name;var o=function(n){this._init(n)};return(o.prototype=Object.create(t.prototype)).constructor=o,o.cid=e++,o.options=Rn(t.options,n),o.super=t,o.options.props&&function(n){var e=n.options.props;for(var t in e)gt(n.prototype,"_props",t)}(o),o.options.computed&&function(n){var e=n.options.computed;for(var t in e)bt(n.prototype,t,e[t])}(o),o.extend=t.extend,o.mixin=t.mixin,o.use=t.use,R.forEach((function(n){o[n]=t[n]})),i&&(o.options.components[i]=o),o.superOptions=t.options,o.extendOptions=n,o.sealedOptions=S({},o.options),a[r]=o,o}}function wt(n){return n&&(n.Ctor.options.name||n.tag)}function Ct(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!p(n)&&n.test(e)}function Pt(n,e){var t=n.cache,r=n.keys,a=n._vnode;for(var i in t){var o=t[i];if(o){var s=o.name;s&&!e(s)&&St(t,i,r,a)}}}function St(n,e,t,r){var a=n[e];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),n[e]=null,b(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=xt++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var a=r.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Rn(Bt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Je(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=me(e._renderChildren,r),n.$scopedSlots=a,n._c=function(e,t,r,a){return Ke(n,e,t,r,a,!1)},n.$createElement=function(e,t,r,a){return Ke(n,e,t,r,a,!0)};var i=t&&t.data;Cn(n,"$attrs",i&&i.attrs||a,null,!0),Cn(n,"$listeners",e._parentListeners||a,null,!0)}(e),tt(e,"beforeCreate"),function(n){var e=fe(n.$options.inject,n);e&&(_n(!1),Object.keys(e).forEach((function(t){Cn(n,t,e[t])})),_n(!0))}(e),vt(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),tt(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(_t),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=Pn,n.prototype.$delete=Sn,n.prototype.$watch=function(n,e,t){if(u(e))return kt(this,n,e,t);(t=t||{}).user=!0;var r=new ft(this,n,e,t);if(t.immediate){var a='callback for immediate watcher "'+r.expression+'"';fn(),Qn(e,this,[r.value],this,a),mn()}return function(){r.teardown()}}}(_t),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(Array.isArray(n))for(var a=0,i=n.length;a<i;a++)r.$on(n[a],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var r=0,a=n.length;r<a;r++)t.$off(n[r],e);return t}var i,o=t._events[n];if(!o)return t;if(!e)return t._events[n]=null,t;for(var s=o.length;s--;)if((i=o[s])===e||i.fn===e){o.splice(s,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?P(t):t;for(var r=P(arguments,1),a='event handler for "'+n+'"',i=0,o=t.length;i<o;i++)Qn(t[i],e,r,e,a)}return e}}(_t),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,a=t._vnode,i=Xe(t);t._vnode=n,t.$el=a?t.__patch__(a,n):t.__patch__(t.$el,n,e,!1),i(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){tt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||b(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),tt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(_t),function(n){De(n.prototype),n.prototype.$nextTick=function(n){return ae(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,a=t._parentVnode;a&&(e.$scopedSlots=Ee(a.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=a;try{He=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Hn(t,e,"render"),n=e._vnode}finally{He=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof gn||(n=En()),n.parent=a,n}}(_t);var It=[String,RegExp,Array],Ot={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:It,exclude:It,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var a=t.tag,i=t.componentInstance,o=t.componentOptions;n[r]={name:wt(o),tag:a,componentInstance:i},e.push(r),this.max&&e.length>parseInt(this.max)&&St(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)St(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Pt(n,(function(n){return Ct(e,n)}))})),this.$watch("exclude",(function(e){Pt(n,(function(n){return!Ct(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Ge(n),t=e&&e.componentOptions;if(t){var r=wt(t),a=this.include,i=this.exclude;if(a&&(!r||!Ct(a,r))||i&&r&&Ct(i,r))return e;var o=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;o[l]?(e.componentInstance=o[l].componentInstance,b(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return M}};Object.defineProperty(n,"config",e),n.util={warn:dn,extend:S,mergeOptions:Rn,defineReactive:Cn},n.set=Pn,n.delete=Sn,n.nextTick=ae,n.observable=function(n){return wn(n),n},n.options=Object.create(null),R.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,S(n.options.components,Ot),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=P(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Rn(this.options,n),this}}(n),Tt(n),function(n){R.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&u(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(_t),Object.defineProperty(_t.prototype,"$isServer",{get:an}),Object.defineProperty(_t.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(_t,"FunctionalRenderContext",{value:ze}),_t.version="2.6.14";var jt=v("style,class"),Lt=v("input,textarea,option,select,progress"),Dt=v("contenteditable,draggable,spellcheck"),zt=v("events,caret,typing,plaintext-only"),Ft=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Rt="http://www.w3.org/1999/xlink",Ut=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},Mt=function(n){return Ut(n)?n.slice(6,n.length):""},qt=function(n){return null==n||!1===n};function Nt(n){for(var e=n.data,t=n,r=n;o(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Kt(r.data,e));for(;o(t=t.parent);)t&&t.data&&(e=Kt(e,t.data));return function(n,e){if(o(n)||o(e))return $t(n,Ht(e));return""}(e.staticClass,e.class)}function Kt(n,e){return{staticClass:$t(n.staticClass,e.staticClass),class:o(n.class)?[n.class,e.class]:e.class}}function $t(n,e){return n?e?n+" "+e:n:e||""}function Ht(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,a=n.length;r<a;r++)o(e=Ht(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):c(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var Qt={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Gt=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Wt=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Vt=function(n){return Gt(n)||Wt(n)};var Zt=Object.create(null);var Jt=v("text,number,password,search,email,tel,url");var Yt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(Qt[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),Xt={create:function(n,e){nr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(nr(n,!0),nr(e))},destroy:function(n){nr(n,!0)}};function nr(n,e){var t=n.data.ref;if(o(t)){var r=n.context,a=n.componentInstance||n.elm,i=r.$refs;e?Array.isArray(i[t])?b(i[t],a):i[t]===a&&(i[t]=void 0):n.data.refInFor?Array.isArray(i[t])?i[t].indexOf(a)<0&&i[t].push(a):i[t]=[a]:i[t]=a}}var er=new gn("",{},[]),tr=["create","activate","update","remove","destroy"];function rr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&o(n.data)===o(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=o(t=n.data)&&o(t=t.attrs)&&t.type,a=o(t=e.data)&&o(t=t.attrs)&&t.type;return r===a||Jt(r)&&Jt(a)}(n,e)||s(n.isAsyncPlaceholder)&&i(e.asyncFactory.error))}function ar(n,e,t){var r,a,i={};for(r=e;r<=t;++r)o(a=n[r].key)&&(i[a]=r);return i}var ir={create:or,update:or,destroy:function(n){or(n,er)}};function or(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,a,i=n===er,o=e===er,s=lr(n.data.directives,n.context),l=lr(e.data.directives,e.context),c=[],d=[];for(t in l)r=s[t],a=l[t],r?(a.oldValue=r.value,a.oldArg=r.arg,dr(a,"update",e,n),a.def&&a.def.componentUpdated&&d.push(a)):(dr(a,"bind",e,n),a.def&&a.def.inserted&&c.push(a));if(c.length){var u=function(){for(var t=0;t<c.length;t++)dr(c[t],"inserted",e,n)};i?de(e,"insert",u):u()}d.length&&de(e,"postpatch",(function(){for(var t=0;t<d.length;t++)dr(d[t],"componentUpdated",e,n)}));if(!i)for(t in s)l[t]||dr(s[t],"unbind",n,n,o)}(n,e)}var sr=Object.create(null);function lr(n,e){var t,r,a=Object.create(null);if(!n)return a;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=sr),a[cr(r)]=r,r.def=Un(e.$options,"directives",r.name);return a}function cr(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function dr(n,e,t,r,a){var i=n.def&&n.def[e];if(i)try{i(t.elm,n,t,r,a)}catch(r){Hn(r,t.context,"directive "+n.name+" "+e+" hook")}}var ur=[Xt,ir];function pr(n,e){var t=e.componentOptions;if(!(o(t)&&!1===t.Ctor.options.inheritAttrs||i(n.data.attrs)&&i(e.data.attrs))){var r,a,s=e.elm,l=n.data.attrs||{},c=e.data.attrs||{};for(r in o(c.__ob__)&&(c=e.data.attrs=S({},c)),c)a=c[r],l[r]!==a&&hr(s,r,a,e.data.pre);for(r in(Z||Y)&&c.value!==l.value&&hr(s,"value",c.value),l)i(c[r])&&(Ut(r)?s.removeAttributeNS(Rt,Mt(r)):Dt(r)||s.removeAttribute(r))}}function hr(n,e,t,r){r||n.tagName.indexOf("-")>-1?fr(n,e,t):Ft(e)?qt(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Dt(e)?n.setAttribute(e,function(n,e){return qt(e)||"false"===e?"false":"contenteditable"===n&&zt(e)?e:"true"}(e,t)):Ut(e)?qt(t)?n.removeAttributeNS(Rt,Mt(e)):n.setAttributeNS(Rt,e,t):fr(n,e,t)}function fr(n,e,t){if(qt(t))n.removeAttribute(e);else{if(Z&&!J&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var mr={create:pr,update:pr};function gr(n,e){var t=e.elm,r=e.data,a=n.data;if(!(i(r.staticClass)&&i(r.class)&&(i(a)||i(a.staticClass)&&i(a.class)))){var s=Nt(e),l=t._transitionClasses;o(l)&&(s=$t(s,Ht(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var vr,Er={create:gr,update:gr};function br(n,e,t){var r=vr;return function a(){var i=e.apply(null,arguments);null!==i&&kr(n,a,t,r)}}var yr=Zn&&!(nn&&Number(nn[1])<=53);function Ar(n,e,t,r){if(yr){var a=ct,i=e;e=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}vr.addEventListener(n,e,tn?{capture:t,passive:r}:t)}function kr(n,e,t,r){(r||vr).removeEventListener(n,e._wrapper||e,t)}function xr(n,e){if(!i(n.data.on)||!i(e.data.on)){var t=e.data.on||{},r=n.data.on||{};vr=e.elm,function(n){if(o(n.__r)){var e=Z?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}o(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),ce(t,r,Ar,kr,br,e.context),vr=void 0}}var Br,_r={create:xr,update:xr};function Tr(n,e){if(!i(n.data.domProps)||!i(e.data.domProps)){var t,r,a=e.elm,s=n.data.domProps||{},l=e.data.domProps||{};for(t in o(l.__ob__)&&(l=e.data.domProps=S({},l)),s)t in l||(a[t]="");for(t in l){if(r=l[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===s[t])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===t&&"PROGRESS"!==a.tagName){a._value=r;var c=i(r)?"":String(r);wr(a,c)&&(a.value=c)}else if("innerHTML"===t&&Wt(a.tagName)&&i(a.innerHTML)){(Br=Br||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var d=Br.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;d.firstChild;)a.appendChild(d.firstChild)}else if(r!==s[t])try{a[t]=r}catch(n){}}}}function wr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(o(r)){if(r.number)return g(t)!==g(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Cr={create:Tr,update:Tr},Pr=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Sr(n){var e=Ir(n.style);return n.staticStyle?S(n.staticStyle,e):e}function Ir(n){return Array.isArray(n)?I(n):"string"==typeof n?Pr(n):n}var Or,jr=/^--/,Lr=/\s*!important$/,Dr=function(n,e,t){if(jr.test(e))n.style.setProperty(e,t);else if(Lr.test(t))n.style.setProperty(w(e),t.replace(Lr,""),"important");else{var r=Fr(e);if(Array.isArray(t))for(var a=0,i=t.length;a<i;a++)n.style[r]=t[a];else n.style[r]=t}},zr=["Webkit","Moz","ms"],Fr=k((function(n){if(Or=Or||document.createElement("div").style,"filter"!==(n=B(n))&&n in Or)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<zr.length;t++){var r=zr[t]+e;if(r in Or)return r}}));function Rr(n,e){var t=e.data,r=n.data;if(!(i(t.staticStyle)&&i(t.style)&&i(r.staticStyle)&&i(r.style))){var a,s,l=e.elm,c=r.staticStyle,d=r.normalizedStyle||r.style||{},u=c||d,p=Ir(e.data.style)||{};e.data.normalizedStyle=o(p.__ob__)?S({},p):p;var h=function(n,e){var t,r={};if(e)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Sr(a.data))&&S(r,t);(t=Sr(n.data))&&S(r,t);for(var i=n;i=i.parent;)i.data&&(t=Sr(i.data))&&S(r,t);return r}(e,!0);for(s in u)i(h[s])&&Dr(l,s,"");for(s in h)(a=h[s])!==u[s]&&Dr(l,s,null==a?"":a)}}var Ur={create:Rr,update:Rr},Mr=/\s+/;function qr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Mr).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function Nr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Mr).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Kr(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&S(e,$r(n.name||"v")),S(e,n),e}return"string"==typeof n?$r(n):void 0}}var $r=k((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),Hr=Q&&!J,Qr="transition",Gr="transitionend",Wr="animation",Vr="animationend";Hr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Qr="WebkitTransition",Gr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Wr="WebkitAnimation",Vr="webkitAnimationEnd"));var Zr=Q?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Jr(n){Zr((function(){Zr(n)}))}function Yr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),qr(n,e))}function Xr(n,e){n._transitionClasses&&b(n._transitionClasses,e),Nr(n,e)}function na(n,e,t){var r=ta(n,e),a=r.type,i=r.timeout,o=r.propCount;if(!a)return t();var s="transition"===a?Gr:Vr,l=0,c=function(){n.removeEventListener(s,d),t()},d=function(e){e.target===n&&++l>=o&&c()};setTimeout((function(){l<o&&c()}),i+1),n.addEventListener(s,d)}var ea=/\b(transform|all)(,|$)/;function ta(n,e){var t,r=window.getComputedStyle(n),a=(r[Qr+"Delay"]||"").split(", "),i=(r[Qr+"Duration"]||"").split(", "),o=ra(a,i),s=(r[Wr+"Delay"]||"").split(", "),l=(r[Wr+"Duration"]||"").split(", "),c=ra(s,l),d=0,u=0;return"transition"===e?o>0&&(t="transition",d=o,u=i.length):"animation"===e?c>0&&(t="animation",d=c,u=l.length):u=(t=(d=Math.max(o,c))>0?o>c?"transition":"animation":null)?"transition"===t?i.length:l.length:0,{type:t,timeout:d,propCount:u,hasTransform:"transition"===t&&ea.test(r[Qr+"Property"])}}function ra(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return aa(e)+aa(n[t])})))}function aa(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function ia(n,e){var t=n.elm;o(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=Kr(n.data.transition);if(!i(r)&&!o(t._enterCb)&&1===t.nodeType){for(var a=r.css,s=r.type,l=r.enterClass,d=r.enterToClass,u=r.enterActiveClass,p=r.appearClass,h=r.appearToClass,f=r.appearActiveClass,m=r.beforeEnter,v=r.enter,E=r.afterEnter,b=r.enterCancelled,y=r.beforeAppear,A=r.appear,k=r.afterAppear,x=r.appearCancelled,B=r.duration,_=Ye,T=Ye.$vnode;T&&T.parent;)_=T.context,T=T.parent;var w=!_._isMounted||!n.isRootInsert;if(!w||A||""===A){var C=w&&p?p:l,P=w&&f?f:u,S=w&&h?h:d,I=w&&y||m,O=w&&"function"==typeof A?A:v,j=w&&k||E,L=w&&x||b,D=g(c(B)?B.enter:B);0;var z=!1!==a&&!J,R=la(O),U=t._enterCb=F((function(){z&&(Xr(t,S),Xr(t,P)),U.cancelled?(z&&Xr(t,C),L&&L(t)):j&&j(t),t._enterCb=null}));n.data.show||de(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),O&&O(t,U)})),I&&I(t),z&&(Yr(t,C),Yr(t,P),Jr((function(){Xr(t,C),U.cancelled||(Yr(t,S),R||(sa(D)?setTimeout(U,D):na(t,s,U)))}))),n.data.show&&(e&&e(),O&&O(t,U)),z||R||U()}}}function oa(n,e){var t=n.elm;o(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=Kr(n.data.transition);if(i(r)||1!==t.nodeType)return e();if(!o(t._leaveCb)){var a=r.css,s=r.type,l=r.leaveClass,d=r.leaveToClass,u=r.leaveActiveClass,p=r.beforeLeave,h=r.leave,f=r.afterLeave,m=r.leaveCancelled,v=r.delayLeave,E=r.duration,b=!1!==a&&!J,y=la(h),A=g(c(E)?E.leave:E);0;var k=t._leaveCb=F((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),b&&(Xr(t,d),Xr(t,u)),k.cancelled?(b&&Xr(t,l),m&&m(t)):(e(),f&&f(t)),t._leaveCb=null}));v?v(x):x()}function x(){k.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),p&&p(t),b&&(Yr(t,l),Yr(t,u),Jr((function(){Xr(t,l),k.cancelled||(Yr(t,d),y||(sa(A)?setTimeout(k,A):na(t,s,k)))}))),h&&h(t,k),b||y||k())}}function sa(n){return"number"==typeof n&&!isNaN(n)}function la(n){if(i(n))return!1;var e=n.fns;return o(e)?la(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function ca(n,e){!0!==e.data.show&&ia(e)}var da=function(n){var e,t,r={},a=n.modules,c=n.nodeOps;for(e=0;e<tr.length;++e)for(r[tr[e]]=[],t=0;t<a.length;++t)o(a[t][tr[e]])&&r[tr[e]].push(a[t][tr[e]]);function d(n){var e=c.parentNode(n);o(e)&&c.removeChild(e,n)}function u(n,e,t,a,i,l,d){if(o(n.elm)&&o(l)&&(n=l[d]=yn(n)),n.isRootInsert=!i,!function(n,e,t,a){var i=n.data;if(o(i)){var l=o(n.componentInstance)&&i.keepAlive;if(o(i=i.hook)&&o(i=i.init)&&i(n,!1),o(n.componentInstance))return p(n,e),h(t,n.elm,a),s(l)&&function(n,e,t,a){var i,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](er,s);e.push(s);break}h(t,n.elm,a)}(n,e,t,a),!0}}(n,e,t,a)){var u=n.data,m=n.children,v=n.tag;o(v)?(n.elm=n.ns?c.createElementNS(n.ns,v):c.createElement(v,n),E(n),f(n,m,e),o(u)&&g(n,e),h(t,n.elm,a)):s(n.isComment)?(n.elm=c.createComment(n.text),h(t,n.elm,a)):(n.elm=c.createTextNode(n.text),h(t,n.elm,a))}}function p(n,e){o(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,m(n)?(g(n,e),E(n)):(nr(n),e.push(n))}function h(n,e,t){o(n)&&(o(t)?c.parentNode(t)===n&&c.insertBefore(n,e,t):c.appendChild(n,e))}function f(n,e,t){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)u(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&c.appendChild(n.elm,c.createTextNode(String(n.text)))}function m(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return o(n.tag)}function g(n,t){for(var a=0;a<r.create.length;++a)r.create[a](er,n);o(e=n.data.hook)&&(o(e.create)&&e.create(er,n),o(e.insert)&&t.push(n))}function E(n){var e;if(o(e=n.fnScopeId))c.setStyleScope(n.elm,e);else for(var t=n;t;)o(e=t.context)&&o(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e),t=t.parent;o(e=Ye)&&e!==n.context&&e!==n.fnContext&&o(e=e.$options._scopeId)&&c.setStyleScope(n.elm,e)}function b(n,e,t,r,a,i){for(;r<=a;++r)u(t[r],i,n,e,!1,t,r)}function y(n){var e,t,a=n.data;if(o(a))for(o(e=a.hook)&&o(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(o(e=n.children))for(t=0;t<n.children.length;++t)y(n.children[t])}function A(n,e,t){for(;e<=t;++e){var r=n[e];o(r)&&(o(r.tag)?(k(r),y(r)):d(r.elm))}}function k(n,e){if(o(e)||o(n.data)){var t,a=r.remove.length+1;for(o(e)?e.listeners+=a:e=function(n,e){function t(){0==--t.listeners&&d(n)}return t.listeners=e,t}(n.elm,a),o(t=n.componentInstance)&&o(t=t._vnode)&&o(t.data)&&k(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);o(t=n.data.hook)&&o(t=t.remove)?t(n,e):e()}else d(n.elm)}function x(n,e,t,r){for(var a=t;a<r;a++){var i=e[a];if(o(i)&&rr(n,i))return a}}function B(n,e,t,a,l,d){if(n!==e){o(e.elm)&&o(a)&&(e=a[l]=yn(e));var p=e.elm=n.elm;if(s(n.isAsyncPlaceholder))o(e.asyncFactory.resolved)?w(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var h,f=e.data;o(f)&&o(h=f.hook)&&o(h=h.prepatch)&&h(n,e);var g=n.children,v=e.children;if(o(f)&&m(e)){for(h=0;h<r.update.length;++h)r.update[h](n,e);o(h=f.hook)&&o(h=h.update)&&h(n,e)}i(e.text)?o(g)&&o(v)?g!==v&&function(n,e,t,r,a){var s,l,d,p=0,h=0,f=e.length-1,m=e[0],g=e[f],v=t.length-1,E=t[0],y=t[v],k=!a;for(0;p<=f&&h<=v;)i(m)?m=e[++p]:i(g)?g=e[--f]:rr(m,E)?(B(m,E,r,t,h),m=e[++p],E=t[++h]):rr(g,y)?(B(g,y,r,t,v),g=e[--f],y=t[--v]):rr(m,y)?(B(m,y,r,t,v),k&&c.insertBefore(n,m.elm,c.nextSibling(g.elm)),m=e[++p],y=t[--v]):rr(g,E)?(B(g,E,r,t,h),k&&c.insertBefore(n,g.elm,m.elm),g=e[--f],E=t[++h]):(i(s)&&(s=ar(e,p,f)),i(l=o(E.key)?s[E.key]:x(E,e,p,f))?u(E,r,n,m.elm,!1,t,h):rr(d=e[l],E)?(B(d,E,r,t,h),e[l]=void 0,k&&c.insertBefore(n,d.elm,m.elm)):u(E,r,n,m.elm,!1,t,h),E=t[++h]);p>f?b(n,i(t[v+1])?null:t[v+1].elm,t,h,v,r):h>v&&A(e,p,f)}(p,g,v,t,d):o(v)?(o(n.text)&&c.setTextContent(p,""),b(p,null,v,0,v.length-1,t)):o(g)?A(g,0,g.length-1):o(n.text)&&c.setTextContent(p,""):n.text!==e.text&&c.setTextContent(p,e.text),o(f)&&o(h=f.hook)&&o(h=h.postpatch)&&h(n,e)}}}function _(n,e,t){if(s(t)&&o(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=v("attrs,class,staticClass,staticStyle,key");function w(n,e,t,r){var a,i=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,s(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(l)&&(o(a=l.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return p(e,t),!0;if(o(i)){if(o(c))if(n.hasChildNodes())if(o(a=l)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==n.innerHTML)return!1}else{for(var d=!0,u=n.firstChild,h=0;h<c.length;h++){if(!u||!w(u,c[h],t,r)){d=!1;break}u=u.nextSibling}if(!d||u)return!1}else f(e,c,t);if(o(l)){var m=!1;for(var v in l)if(!T(v)){m=!0,g(e,t);break}!m&&l.class&&oe(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,a){if(!i(e)){var l,d=!1,p=[];if(i(n))d=!0,u(e,p);else{var h=o(n.nodeType);if(!h&&rr(n,e))B(n,e,p,null,null,a);else{if(h){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&w(n,e,p))return _(e,p,!0),n;l=n,n=new gn(c.tagName(l).toLowerCase(),{},[],void 0,l)}var f=n.elm,g=c.parentNode(f);if(u(e,p,f._leaveCb?null:g,c.nextSibling(f)),o(e.parent))for(var v=e.parent,E=m(e);v;){for(var b=0;b<r.destroy.length;++b)r.destroy[b](v);if(v.elm=e.elm,E){for(var k=0;k<r.create.length;++k)r.create[k](er,v);var x=v.data.hook.insert;if(x.merged)for(var T=1;T<x.fns.length;T++)x.fns[T]()}else nr(v);v=v.parent}o(g)?A([n],0,0):o(n.tag)&&y(n)}}return _(e,p,d),e.elm}o(n)&&y(n)}}({nodeOps:Yt,modules:[mr,Er,_r,Cr,Ur,Q?{create:ca,activate:ca,remove:function(n,e){!0!==n.data.show?oa(n,e):e()}}:{}].concat(ur)});J&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Ea(n,"input")}));var ua={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?de(t,"postpatch",(function(){ua.componentUpdated(n,e,t)})):pa(n,e,t.context),n._vOptions=[].map.call(n.options,ma)):("textarea"===t.tag||Jt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",ga),n.addEventListener("compositionend",va),n.addEventListener("change",va),J&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){pa(n,e,t.context);var r=n._vOptions,a=n._vOptions=[].map.call(n.options,ma);if(a.some((function(n,e){return!D(n,r[e])})))(n.multiple?e.value.some((function(n){return fa(n,a)})):e.value!==e.oldValue&&fa(e.value,a))&&Ea(n,"change")}}};function pa(n,e,t){ha(n,e,t),(Z||Y)&&setTimeout((function(){ha(n,e,t)}),0)}function ha(n,e,t){var r=e.value,a=n.multiple;if(!a||Array.isArray(r)){for(var i,o,s=0,l=n.options.length;s<l;s++)if(o=n.options[s],a)i=z(r,ma(o))>-1,o.selected!==i&&(o.selected=i);else if(D(ma(o),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));a||(n.selectedIndex=-1)}}function fa(n,e){return e.every((function(e){return!D(e,n)}))}function ma(n){return"_value"in n?n._value:n.value}function ga(n){n.target.composing=!0}function va(n){n.target.composing&&(n.target.composing=!1,Ea(n.target,"input"))}function Ea(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function ba(n){return!n.componentInstance||n.data&&n.data.transition?n:ba(n.componentInstance._vnode)}var ya={model:ua,show:{bind:function(n,e,t){var r=e.value,a=(t=ba(t)).data&&t.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&a?(t.data.show=!0,ia(t,(function(){n.style.display=i}))):n.style.display=r?i:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=ba(t)).data&&t.data.transition?(t.data.show=!0,r?ia(t,(function(){n.style.display=n.__vOriginalDisplay})):oa(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,a){a||(n.style.display=n.__vOriginalDisplay)}}},Aa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ka(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?ka(Ge(e.children)):n}function xa(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var a=t._parentListeners;for(var i in a)e[B(i)]=a[i];return e}function Ba(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var _a=function(n){return n.tag||ve(n)},Ta=function(n){return"show"===n.name},wa={name:"transition",props:Aa,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(_a)).length){0;var r=this.mode;0;var a=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var i=ka(a);if(!i)return a;if(this._leaving)return Ba(n,a);var o="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?o+"comment":o+i.tag:l(i.key)?0===String(i.key).indexOf(o)?i.key:o+i.key:i.key;var s=(i.data||(i.data={})).transition=xa(this),c=this._vnode,d=ka(c);if(i.data.directives&&i.data.directives.some(Ta)&&(i.data.show=!0),d&&d.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(i,d)&&!ve(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var u=d.data.transition=S({},s);if("out-in"===r)return this._leaving=!0,de(u,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Ba(n,a);if("in-out"===r){if(ve(i))return c;var p,h=function(){p()};de(s,"afterEnter",h),de(s,"enterCancelled",h),de(u,"delayLeave",(function(n){p=n}))}}return a}}},Ca=S({tag:String,moveClass:String},Aa);function Pa(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Sa(n){n.data.newPos=n.elm.getBoundingClientRect()}function Ia(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,a=e.top-t.top;if(r||a){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+a+"px)",i.transitionDuration="0s"}}delete Ca.mode;var Oa={Transition:wa,TransitionGroup:{props:Ca,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var a=Xe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],i=this.children=[],o=xa(this),s=0;s<a.length;s++){var l=a[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))i.push(l),t[l.key]=l,(l.data||(l.data={})).transition=o;else;}if(r){for(var c=[],d=[],u=0;u<r.length;u++){var p=r[u];p.data.transition=o,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?c.push(p):d.push(p)}this.kept=n(e,null,c),this.removed=d}return n(e,null,i)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Pa),n.forEach(Sa),n.forEach(Ia),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;Yr(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(Gr,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(Gr,n),t._moveCb=null,Xr(t,e))})}})))},methods:{hasMove:function(n,e){if(!Hr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){Nr(t,n)})),qr(t,e),t.style.display="none",this.$el.appendChild(t);var r=ta(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};_t.config.mustUseProp=function(n,e,t){return"value"===t&&Lt(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},_t.config.isReservedTag=Vt,_t.config.isReservedAttr=jt,_t.config.getTagNamespace=function(n){return Wt(n)?"svg":"math"===n?"math":void 0},_t.config.isUnknownElement=function(n){if(!Q)return!0;if(Vt(n))return!1;if(n=n.toLowerCase(),null!=Zt[n])return Zt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Zt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Zt[n]=/HTMLUnknownElement/.test(e.toString())},S(_t.options.directives,ya),S(_t.options.components,Oa),_t.prototype.__patch__=Q?da:O,_t.prototype.$mount=function(n,e){return function(n,e,t){var r;return n.$el=e,n.$options.render||(n.$options.render=En),tt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new ft(n,r,O,{before:function(){n._isMounted&&!n._isDestroyed&&tt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,tt(n,"mounted")),n}(this,n=n&&Q?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},Q&&setTimeout((function(){M.devtools&&on&&on.emit("init",_t)}),0);var ja=_t;
/*!
  * vue-router v3.5.3
  * (c) 2021 Evan You
  * @license MIT
  */function La(n,e){for(var t in e)n[t]=e[t];return n}var Da=/[!'()*]/g,za=function(n){return"%"+n.charCodeAt(0).toString(16)},Fa=/%2C/g,Ra=function(n){return encodeURIComponent(n).replace(Da,za).replace(Fa,",")};function Ua(n){try{return decodeURIComponent(n)}catch(n){0}return n}var Ma=function(n){return null==n||"object"==typeof n?n:String(n)};function qa(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=Ua(t.shift()),a=t.length>0?Ua(t.join("=")):null;void 0===e[r]?e[r]=a:Array.isArray(e[r])?e[r].push(a):e[r]=[e[r],a]})),e):e}function Na(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return Ra(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(Ra(e)):r.push(Ra(e)+"="+Ra(n)))})),r.join("&")}return Ra(e)+"="+Ra(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var Ka=/\/?$/;function $a(n,e,t,r){var a=r&&r.options.stringifyQuery,i=e.query||{};try{i=Ha(i)}catch(n){}var o={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:Wa(e,a),matched:n?Ga(n):[]};return t&&(o.redirectedFrom=Wa(t,a)),Object.freeze(o)}function Ha(n){if(Array.isArray(n))return n.map(Ha);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=Ha(n[t]);return e}return n}var Qa=$a(null,{path:"/"});function Ga(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function Wa(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var a=n.hash;return void 0===a&&(a=""),(t||"/")+(e||Na)(r)+a}function Va(n,e,t){return e===Qa?n===e:!!e&&(n.path&&e.path?n.path.replace(Ka,"")===e.path.replace(Ka,"")&&(t||n.hash===e.hash&&Za(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&Za(n.query,e.query)&&Za(n.params,e.params))))}function Za(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,a){var i=n[t];if(r[a]!==t)return!1;var o=e[t];return null==i||null==o?i===o:"object"==typeof i&&"object"==typeof o?Za(i,o):String(i)===String(o)}))}function Ja(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var a=t.instances[r],i=t.enteredCbs[r];if(a&&i){delete t.enteredCbs[r];for(var o=0;o<i.length;o++)a._isBeingDestroyed||i[o](a)}}}}var Ya={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,a=e.parent,i=e.data;i.routerView=!0;for(var o=a.$createElement,s=t.name,l=a.$route,c=a._routerViewCache||(a._routerViewCache={}),d=0,u=!1;a&&a._routerRoot!==a;){var p=a.$vnode?a.$vnode.data:{};p.routerView&&d++,p.keepAlive&&a._directInactive&&a._inactive&&(u=!0),a=a.$parent}if(i.routerViewDepth=d,u){var h=c[s],f=h&&h.component;return f?(h.configProps&&Xa(f,i,h.route,h.configProps),o(f,i,r)):o()}var m=l.matched[d],g=m&&m.components[s];if(!m||!g)return c[s]=null,o();c[s]={component:g},i.registerRouteInstance=function(n,e){var t=m.instances[s];(e&&t!==n||!e&&t===n)&&(m.instances[s]=e)},(i.hook||(i.hook={})).prepatch=function(n,e){m.instances[s]=e.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==m.instances[s]&&(m.instances[s]=n.componentInstance),Ja(l)};var v=m.props&&m.props[s];return v&&(La(c[s],{route:l,configProps:v}),Xa(g,i,l,v)),o(g,i,r)}};function Xa(n,e,t,r){var a=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(a){a=e.props=La({},a);var i=e.attrs=e.attrs||{};for(var o in a)n.props&&o in n.props||(i[o]=a[o],delete a[o])}}function ni(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function ei(n){return n.replace(/\/+/g,"/")}var ti=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},ri=vi,ai=ci,ii=function(n,e){return ui(ci(n,e),e)},oi=ui,si=gi,li=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function ci(n,e){for(var t,r=[],a=0,i=0,o="",s=e&&e.delimiter||"/";null!=(t=li.exec(n));){var l=t[0],c=t[1],d=t.index;if(o+=n.slice(i,d),i=d+l.length,c)o+=c[1];else{var u=n[i],p=t[2],h=t[3],f=t[4],m=t[5],g=t[6],v=t[7];o&&(r.push(o),o="");var E=null!=p&&null!=u&&u!==p,b="+"===g||"*"===g,y="?"===g||"*"===g,A=t[2]||s,k=f||m;r.push({name:h||a++,prefix:p||"",delimiter:A,optional:y,repeat:b,partial:E,asterisk:!!v,pattern:k?hi(k):v?".*":"[^"+pi(A)+"]+?"})}}return i<n.length&&(o+=n.substr(i)),o&&r.push(o),r}function di(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function ui(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",mi(e)));return function(e,r){for(var a="",i=e||{},o=(r||{}).pretty?di:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var c,d=i[l.name];if(null==d){if(l.optional){l.partial&&(a+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(ti(d)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var u=0;u<d.length;u++){if(c=o(d[u]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===u?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(d).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):o(d),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');a+=l.prefix+c}}else a+=l}return a}}function pi(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function hi(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function fi(n,e){return n.keys=e,n}function mi(n){return n&&n.sensitive?"":"i"}function gi(n,e,t){ti(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,a=!1!==t.end,i="",o=0;o<n.length;o++){var s=n[o];if("string"==typeof s)i+=pi(s);else{var l=pi(s.prefix),c="(?:"+s.pattern+")";e.push(s),s.repeat&&(c+="(?:"+l+c+")*"),i+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var d=pi(t.delimiter||"/"),u=i.slice(-d.length)===d;return r||(i=(u?i.slice(0,-d.length):i)+"(?:"+d+"(?=$))?"),i+=a?"$":r&&u?"":"(?="+d+"|$)",fi(new RegExp("^"+i,mi(t)),e)}function vi(n,e,t){return ti(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return fi(n,e)}(n,e):ti(n)?function(n,e,t){for(var r=[],a=0;a<n.length;a++)r.push(vi(n[a],e,t).source);return fi(new RegExp("(?:"+r.join("|")+")",mi(t)),e)}(n,e,t):function(n,e,t){return gi(ci(n,t),e,t)}(n,e,t)}ri.parse=ai,ri.compile=ii,ri.tokensToFunction=oi,ri.tokensToRegExp=si;var Ei=Object.create(null);function bi(n,e,t){e=e||{};try{var r=Ei[n]||(Ei[n]=ri.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function yi(n,e,t,r){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var i=(a=La({},n)).params;return i&&"object"==typeof i&&(a.params=La({},i)),a}if(!a.path&&a.params&&e){(a=La({},a))._normalized=!0;var o=La(La({},e.params),a.params);if(e.name)a.name=e.name,a.params=o;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;a.path=bi(s,o,e.path)}else 0;return a}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var a=n.indexOf("?");return a>=0&&(t=n.slice(a+1),n=n.slice(0,a)),{path:n,query:t,hash:e}}(a.path||""),c=e&&e.path||"/",d=l.path?ni(l.path,c,t||a.append):c,u=function(n,e,t){void 0===e&&(e={});var r,a=t||qa;try{r=a(n||"")}catch(n){r={}}for(var i in e){var o=e[i];r[i]=Array.isArray(o)?o.map(Ma):Ma(o)}return r}(l.query,a.query,r&&r.options.parseQuery),p=a.hash||l.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:d,query:u,hash:p}}var Ai,ki=function(){},xi={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,a=t.resolve(this.to,r,this.append),i=a.location,o=a.route,s=a.href,l={},c=t.options.linkActiveClass,d=t.options.linkExactActiveClass,u=null==c?"router-link-active":c,p=null==d?"router-link-exact-active":d,h=null==this.activeClass?u:this.activeClass,f=null==this.exactActiveClass?p:this.exactActiveClass,m=o.redirectedFrom?$a(null,yi(o.redirectedFrom),null,t):o;l[f]=Va(r,m,this.exactPath),l[h]=this.exact||this.exactPath?l[f]:function(n,e){return 0===n.path.replace(Ka,"/").indexOf(e.path.replace(Ka,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,m);var g=l[f]?this.ariaCurrentValue:null,v=function(n){Bi(n)&&(e.replace?t.replace(i,ki):t.push(i,ki))},E={click:Bi};Array.isArray(this.event)?this.event.forEach((function(n){E[n]=v})):E[this.event]=v;var b={class:l},y=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:o,navigate:v,isActive:l[h],isExactActive:l[f]});if(y){if(1===y.length)return y[0];if(y.length>1||!y.length)return 0===y.length?n():n("span",{},y)}if("a"===this.tag)b.on=E,b.attrs={href:s,"aria-current":g};else{var A=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(A){A.isStatic=!1;var k=A.data=La({},A.data);for(var x in k.on=k.on||{},k.on){var B=k.on[x];x in E&&(k.on[x]=Array.isArray(B)?B:[B])}for(var _ in E)_ in k.on?k.on[_].push(E[_]):k.on[_]=v;var T=A.data.attrs=La({},A.data.attrs);T.href=s,T["aria-current"]=g}else b.on=E}return n(this.tag,b,this.$slots.default)}};function Bi(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var _i="undefined"!=typeof window;function Ti(n,e,t,r,a){var i=e||[],o=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,a,i,o){var s=a.path,l=a.name;0;var c=a.pathToRegexpOptions||{},d=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ei(e.path+"/"+n)}(s,i,c.strict);"boolean"==typeof a.caseSensitive&&(c.sensitive=a.caseSensitive);var u={path:d,regex:wi(d,c),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:l,parent:i,matchAs:o,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var i=o?ei(o+"/"+a.path):void 0;n(e,t,r,a,u,i)}));t[u.path]||(e.push(u.path),t[u.path]=u);if(void 0!==a.alias)for(var p=Array.isArray(a.alias)?a.alias:[a.alias],h=0;h<p.length;++h){0;var f={path:p[h],children:a.children};n(e,t,r,f,i,u.path||"/")}l&&(r[l]||(r[l]=u))}(i,o,s,n,a)}));for(var l=0,c=i.length;l<c;l++)"*"===i[l]&&(i.push(i.splice(l,1)[0]),c--,l--);return{pathList:i,pathMap:o,nameMap:s}}function wi(n,e){return ri(n,[],e)}function Ci(n,e){var t=Ti(n),r=t.pathList,a=t.pathMap,i=t.nameMap;function o(n,t,o){var s=yi(n,t,!1,e),c=s.name;if(c){var d=i[c];if(!d)return l(null,s);var u=d.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&u.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=bi(d.path,s.params),l(d,s,o)}if(s.path){s.params={};for(var h=0;h<r.length;h++){var f=r[h],m=a[f];if(Pi(m.regex,s.path,s.params))return l(m,s,o)}}return l(null,s)}function s(n,t){var r=n.redirect,a="function"==typeof r?r($a(n,t,null,e)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return l(null,t);var s=a,c=s.name,d=s.path,u=t.query,p=t.hash,h=t.params;if(u=s.hasOwnProperty("query")?s.query:u,p=s.hasOwnProperty("hash")?s.hash:p,h=s.hasOwnProperty("params")?s.params:h,c){i[c];return o({_normalized:!0,name:c,query:u,hash:p,params:h},void 0,t)}if(d){var f=function(n,e){return ni(n,e.parent?e.parent.path:"/",!0)}(d,n);return o({_normalized:!0,path:bi(f,h),query:u,hash:p},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=o({_normalized:!0,path:bi(t,e.params)});if(r){var a=r.matched,i=a[a.length-1];return e.params=r.params,l(i,e)}return l(null,e)}(0,t,n.matchAs):$a(n,t,r,e)}return{match:o,addRoute:function(n,e){var t="object"!=typeof n?i[n]:void 0;Ti([e||n],r,a,i,t),t&&t.alias.length&&Ti(t.alias.map((function(n){return{path:n,children:[e]}})),r,a,i,t)},getRoutes:function(){return r.map((function(n){return a[n]}))},addRoutes:function(n){Ti(n,r,a,i)}}}function Pi(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var a=1,i=r.length;a<i;++a){var o=n.keys[a-1];o&&(t[o.name||"pathMatch"]="string"==typeof r[a]?Ua(r[a]):r[a])}return!0}var Si=_i&&window.performance&&window.performance.now?window.performance:Date;function Ii(){return Si.now().toFixed(3)}var Oi=Ii();function ji(){return Oi}function Li(n){return Oi=n}var Di=Object.create(null);function zi(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=La({},window.history.state);return t.key=ji(),window.history.replaceState(t,"",e),window.addEventListener("popstate",Ui),function(){window.removeEventListener("popstate",Ui)}}function Fi(n,e,t,r){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var i=function(){var n=ji();if(n)return Di[n]}(),o=a.call(n,e,t,r?i:null);o&&("function"==typeof o.then?o.then((function(n){$i(n,i)})).catch((function(n){0})):$i(o,i))}))}}function Ri(){var n=ji();n&&(Di[n]={x:window.pageXOffset,y:window.pageYOffset})}function Ui(n){Ri(),n.state&&n.state.key&&Li(n.state.key)}function Mi(n){return Ni(n.x)||Ni(n.y)}function qi(n){return{x:Ni(n.x)?n.x:window.pageXOffset,y:Ni(n.y)?n.y:window.pageYOffset}}function Ni(n){return"number"==typeof n}var Ki=/^#\d/;function $i(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var a=Ki.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var i=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(a,i={x:Ni((t=i).x)?t.x:0,y:Ni(t.y)?t.y:0})}else Mi(n)&&(e=qi(n))}else r&&Mi(n)&&(e=qi(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var Hi,Qi=_i&&((-1===(Hi=window.navigator.userAgent).indexOf("Android 2.")&&-1===Hi.indexOf("Android 4.0")||-1===Hi.indexOf("Mobile Safari")||-1!==Hi.indexOf("Chrome")||-1!==Hi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Gi(n,e){Ri();var t=window.history;try{if(e){var r=La({},t.state);r.key=ji(),t.replaceState(r,"",n)}else t.pushState({key:Li(Ii())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function Wi(n){Gi(n,!0)}function Vi(n,e,t){var r=function(a){a>=n.length?t():n[a]?e(n[a],(function(){r(a+1)})):r(a+1)};r(0)}var Zi={redirected:2,aborted:4,cancelled:8,duplicated:16};function Ji(n,e){return Xi(n,e,Zi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return no.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function Yi(n,e){return Xi(n,e,Zi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function Xi(n,e,t,r){var a=new Error(r);return a._isRouter=!0,a.from=n,a.to=e,a.type=t,a}var no=["params","query","hash"];function eo(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function to(n,e){return eo(n)&&n._isRouter&&(null==e||n.type===e)}function ro(n){return function(e,t,r){var a=!1,i=0,o=null;ao(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){a=!0,i++;var l,c=so((function(e){var a;((a=e).__esModule||oo&&"Module"===a[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Ai.extend(e),t.components[s]=e,--i<=0&&r()})),d=so((function(n){var e="Failed to resolve async component "+s+": "+n;o||(o=eo(n)?n:new Error(e),r(o))}));try{l=n(c,d)}catch(n){d(n)}if(l)if("function"==typeof l.then)l.then(c,d);else{var u=l.component;u&&"function"==typeof u.then&&u.then(c,d)}}})),a||r()}}function ao(n,e){return io(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function io(n){return Array.prototype.concat.apply([],n)}var oo="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function so(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var lo=function(n,e){this.router=n,this.base=function(n){if(!n)if(_i){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=Qa,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function co(n,e,t,r){var a=ao(n,(function(n,r,a,i){var o=function(n,e){"function"!=typeof n&&(n=Ai.extend(n));return n.options[e]}(n,e);if(o)return Array.isArray(o)?o.map((function(n){return t(n,r,a,i)})):t(o,r,a,i)}));return io(r?a.reverse():a)}function uo(n,e){if(e)return function(){return n.apply(e,arguments)}}lo.prototype.listen=function(n){this.cb=n},lo.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},lo.prototype.onError=function(n){this.errorCbs.push(n)},lo.prototype.transitionTo=function(n,e,t){var r,a=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var i=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),e&&e(r),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(r,i)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!a.ready&&(to(n,Zi.redirected)&&i===Qa||(a.ready=!0,a.readyErrorCbs.forEach((function(e){e(n)}))))}))},lo.prototype.confirmTransition=function(n,e,t){var r=this,a=this.current;this.pending=n;var i,o,s=function(n){!to(n)&&eo(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=a.matched.length-1;if(Va(n,a)&&l===c&&n.matched[l]===a.matched[c])return this.ensureURL(),n.hash&&Fi(this.router,a,n,!1),s(((o=Xi(i=a,n,Zi.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",o));var d=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),u=d.updated,p=d.deactivated,h=d.activated,f=[].concat(function(n){return co(n,"beforeRouteLeave",uo,!0)}(p),this.router.beforeHooks,function(n){return co(n,"beforeRouteUpdate",uo)}(u),h.map((function(n){return n.beforeEnter})),ro(h)),m=function(e,t){if(r.pending!==n)return s(Yi(a,n));try{e(n,a,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return Xi(n,e,Zi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(a,n))):eo(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(Ji(a,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Vi(f,m,(function(){Vi(function(n){return co(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,a,i){return n(r,a,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),i(n)}))}}(n,t,r)}))}(h).concat(r.router.resolveHooks),m,(function(){if(r.pending!==n)return s(Yi(a,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){Ja(n)}))}))}))},lo.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},lo.prototype.setupListeners=function(){},lo.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=Qa,this.pending=null};var po=function(n){function e(e,t){n.call(this,e,t),this._startLocation=ho(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=Qi&&t;r&&this.listeners.push(zi());var a=function(){var t=n.current,a=ho(n.base);n.current===Qa&&a===n._startLocation||n.transitionTo(a,(function(n){r&&Fi(e,n,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Gi(ei(r.base+n.fullPath)),Fi(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Wi(ei(r.base+n.fullPath)),Fi(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(ho(this.base)!==this.current.fullPath){var e=ei(this.base+this.current.fullPath);n?Gi(e):Wi(e)}},e.prototype.getCurrentLocation=function(){return ho(this.base)},e}(lo);function ho(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ei(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var fo=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=ho(n);if(!/^\/#/.test(e))return window.location.replace(ei(n+"/#"+e)),!0}(this.base)||mo()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=Qi&&e;t&&this.listeners.push(zi());var r=function(){var e=n.current;mo()&&n.transitionTo(go(),(function(r){t&&Fi(n.router,r,e,!0),Qi||bo(r.fullPath)}))},a=Qi?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Eo(n.fullPath),Fi(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){bo(n.fullPath),Fi(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;go()!==e&&(n?Eo(e):bo(e))},e.prototype.getCurrentLocation=function(){return go()},e}(lo);function mo(){var n=go();return"/"===n.charAt(0)||(bo("/"+n),!1)}function go(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function vo(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Eo(n){Qi?Gi(vo(n)):window.location.hash=n}function bo(n){Qi?Wi(vo(n)):window.location.replace(vo(n))}var yo=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){to(n,Zi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(lo),Ao=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ci(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!Qi&&!1!==n.fallback,this.fallback&&(e="hash"),_i||(e="abstract"),this.mode=e,e){case"history":this.history=new po(this,n.base);break;case"hash":this.history=new fo(this,n.base,this.fallback);break;case"abstract":this.history=new yo(this,n.base);break;default:0}},ko={currentRoute:{configurable:!0}};function xo(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Ao.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},ko.currentRoute.get=function(){return this.history&&this.history.current},Ao.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof po||t instanceof fo){var r=function(n){t.setupListeners(),function(n){var r=t.current,a=e.options.scrollBehavior;Qi&&a&&"fullPath"in n&&Fi(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Ao.prototype.beforeEach=function(n){return xo(this.beforeHooks,n)},Ao.prototype.beforeResolve=function(n){return xo(this.resolveHooks,n)},Ao.prototype.afterEach=function(n){return xo(this.afterHooks,n)},Ao.prototype.onReady=function(n,e){this.history.onReady(n,e)},Ao.prototype.onError=function(n){this.history.onError(n)},Ao.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Ao.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Ao.prototype.go=function(n){this.history.go(n)},Ao.prototype.back=function(){this.go(-1)},Ao.prototype.forward=function(){this.go(1)},Ao.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Ao.prototype.resolve=function(n,e,t){var r=yi(n,e=e||this.history.current,t,this),a=this.match(r,e),i=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ei(n+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:a}},Ao.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ao.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==Qa&&this.history.transitionTo(this.history.getCurrentLocation())},Ao.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==Qa&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ao.prototype,ko),Ao.install=function n(e){if(!n.installed||Ai!==e){n.installed=!0,Ai=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",Ya),e.component("RouterLink",xi);var a=e.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},Ao.version="3.5.3",Ao.isNavigationFailure=to,Ao.NavigationFailureType=Zi,Ao.START_LOCATION=Qa,_i&&window.Vue&&window.Vue.use(Ao);var Bo=Ao;t(172),t(173),t(250),t(71),t(174),t(26),t(27),t(252);function _o(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}t(66),t(89),t(121);function To(n){return(To="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var wo=t(68),Co=(t(183),t(20),t(44),t(225),t(226),{NotFound:function(){return Promise.all([t.e(0),t.e(4)]).then(t.bind(null,474))},Layout:function(){return Promise.all([t.e(0),t.e(2)]).then(t.bind(null,473))}}),Po={"v-ebfe00f4":function(){return t.e(8).then(t.bind(null,475))},"v-3a4e04c8":function(){return t.e(9).then(t.bind(null,476))},"v-490bfb71":function(){return t.e(6).then(t.bind(null,477))},"v-1b6a3146":function(){return t.e(10).then(t.bind(null,478))},"v-0cfd1384":function(){return t.e(7).then(t.bind(null,479))},"v-558f5374":function(){return t.e(11).then(t.bind(null,480))},"v-8ed93d90":function(){return t.e(12).then(t.bind(null,481))},"v-67084c61":function(){return t.e(14).then(t.bind(null,482))},"v-1350d48d":function(){return t.e(13).then(t.bind(null,483))},"v-64a6b56c":function(){return t.e(16).then(t.bind(null,484))},"v-f7d3f5ec":function(){return t.e(17).then(t.bind(null,485))},"v-60d325ec":function(){return t.e(15).then(t.bind(null,486))},"v-0d49bda2":function(){return t.e(18).then(t.bind(null,487))},"v-282efb17":function(){return t.e(20).then(t.bind(null,488))},"v-50c5a537":function(){return t.e(19).then(t.bind(null,489))},"v-d7a76ed8":function(){return t.e(21).then(t.bind(null,490))},"v-8583f28a":function(){return t.e(23).then(t.bind(null,491))},"v-004b7197":function(){return t.e(22).then(t.bind(null,492))},"v-41310865":function(){return t.e(24).then(t.bind(null,493))},"v-3b96a73e":function(){return t.e(25).then(t.bind(null,494))},"v-0fc6e384":function(){return t.e(26).then(t.bind(null,495))},"v-08ba378c":function(){return t.e(28).then(t.bind(null,496))},"v-1627a188":function(){return t.e(27).then(t.bind(null,497))},"v-12287d73":function(){return t.e(30).then(t.bind(null,498))},"v-32ae209b":function(){return t.e(29).then(t.bind(null,499))},"v-79bce858":function(){return t.e(31).then(t.bind(null,500))},"v-1f9b39d1":function(){return t.e(32).then(t.bind(null,501))},"v-72cadb78":function(){return t.e(33).then(t.bind(null,502))},"v-71032d64":function(){return t.e(34).then(t.bind(null,503))},"v-1b7cfb8f":function(){return t.e(35).then(t.bind(null,504))},"v-30576858":function(){return t.e(36).then(t.bind(null,505))},"v-4e9681db":function(){return t.e(37).then(t.bind(null,506))},"v-201a461e":function(){return t.e(38).then(t.bind(null,507))},"v-27748560":function(){return t.e(40).then(t.bind(null,508))},"v-7556b5c7":function(){return t.e(39).then(t.bind(null,509))},"v-31a6d9b6":function(){return t.e(41).then(t.bind(null,510))},"v-1b1c130a":function(){return t.e(42).then(t.bind(null,511))},"v-26b6e625":function(){return t.e(43).then(t.bind(null,512))},"v-9663e336":function(){return t.e(44).then(t.bind(null,513))},"v-35584b30":function(){return t.e(45).then(t.bind(null,514))},"v-3baa47ac":function(){return t.e(46).then(t.bind(null,515))},"v-9a699648":function(){return t.e(47).then(t.bind(null,516))},"v-3d0f0b4e":function(){return t.e(48).then(t.bind(null,517))},"v-28850768":function(){return t.e(50).then(t.bind(null,518))},"v-7d92da14":function(){return t.e(51).then(t.bind(null,519))},"v-061b6052":function(){return t.e(49).then(t.bind(null,520))},"v-54ed71f9":function(){return t.e(52).then(t.bind(null,521))},"v-6d9bafd5":function(){return t.e(53).then(t.bind(null,522))},"v-0c4d7672":function(){return t.e(54).then(t.bind(null,523))},"v-0975a803":function(){return t.e(55).then(t.bind(null,524))},"v-67d086b3":function(){return t.e(56).then(t.bind(null,525))},"v-8672caaa":function(){return t.e(58).then(t.bind(null,526))},"v-061ae64c":function(){return t.e(57).then(t.bind(null,527))},"v-41163b04":function(){return t.e(60).then(t.bind(null,528))},"v-53c133a4":function(){return t.e(59).then(t.bind(null,529))},"v-0b14e908":function(){return t.e(61).then(t.bind(null,530))},"v-bab82fcc":function(){return t.e(62).then(t.bind(null,531))},"v-ba1f1340":function(){return t.e(64).then(t.bind(null,532))},"v-1dd4318e":function(){return t.e(63).then(t.bind(null,533))},"v-57237f40":function(){return t.e(65).then(t.bind(null,534))},"v-02e2bf18":function(){return t.e(66).then(t.bind(null,535))},"v-a869ad28":function(){return t.e(68).then(t.bind(null,536))},"v-5d829516":function(){return t.e(69).then(t.bind(null,537))},"v-8a321d32":function(){return t.e(67).then(t.bind(null,538))},"v-f4693658":function(){return t.e(70).then(t.bind(null,539))},"v-6bb3d765":function(){return t.e(71).then(t.bind(null,540))},"v-591a4f31":function(){return t.e(73).then(t.bind(null,541))},"v-ceb6f044":function(){return t.e(74).then(t.bind(null,542))},"v-61164b86":function(){return t.e(75).then(t.bind(null,543))},"v-6f343e3c":function(){return t.e(76).then(t.bind(null,544))},"v-d18c0768":function(){return t.e(77).then(t.bind(null,545))},"v-6cde0ab2":function(){return t.e(72).then(t.bind(null,546))},"v-2744b25f":function(){return t.e(78).then(t.bind(null,547))},"v-2869af78":function(){return t.e(79).then(t.bind(null,548))},"v-2f0df8ba":function(){return t.e(81).then(t.bind(null,549))},"v-43501259":function(){return t.e(82).then(t.bind(null,550))},"v-3cecfe90":function(){return t.e(83).then(t.bind(null,551))},"v-4260d978":function(){return t.e(80).then(t.bind(null,552))},"v-03230f20":function(){return t.e(85).then(t.bind(null,553))},"v-396373ac":function(){return t.e(84).then(t.bind(null,554))},"v-10ca27bc":function(){return t.e(86).then(t.bind(null,555))},"v-655da745":function(){return t.e(87).then(t.bind(null,556))},"v-37895d39":function(){return t.e(89).then(t.bind(null,557))},"v-3978ada8":function(){return t.e(88).then(t.bind(null,558))},"v-51154125":function(){return t.e(90).then(t.bind(null,559))},"v-221fcdfb":function(){return t.e(91).then(t.bind(null,560))},"v-7e8625ae":function(){return t.e(92).then(t.bind(null,561))},"v-6ead5257":function(){return t.e(93).then(t.bind(null,562))},"v-65411ac6":function(){return t.e(94).then(t.bind(null,563))},"v-17cecf4f":function(){return t.e(97).then(t.bind(null,564))},"v-9b3d3fe6":function(){return t.e(95).then(t.bind(null,565))},"v-21fb9fb2":function(){return t.e(98).then(t.bind(null,566))},"v-366e77f1":function(){return t.e(99).then(t.bind(null,567))},"v-1ea96ed7":function(){return t.e(100).then(t.bind(null,568))},"v-498b12ca":function(){return t.e(101).then(t.bind(null,569))},"v-7df21b81":function(){return t.e(102).then(t.bind(null,570))},"v-4e03753c":function(){return t.e(96).then(t.bind(null,571))},"v-16f5ccf4":function(){return t.e(103).then(t.bind(null,572))},"v-d1276644":function(){return t.e(104).then(t.bind(null,573))},"v-45ee571f":function(){return t.e(105).then(t.bind(null,574))},"v-1d86706e":function(){return t.e(106).then(t.bind(null,575))},"v-6f9f7890":function(){return t.e(107).then(t.bind(null,576))},"v-05fefde8":function(){return t.e(109).then(t.bind(null,577))},"v-9ee6d582":function(){return t.e(110).then(t.bind(null,578))},"v-02220e54":function(){return t.e(108).then(t.bind(null,579))},"v-0270cf64":function(){return t.e(111).then(t.bind(null,580))},"v-2179a924":function(){return t.e(112).then(t.bind(null,581))},"v-afa14018":function(){return t.e(113).then(t.bind(null,582))},"v-13cfffa8":function(){return t.e(115).then(t.bind(null,583))},"v-1eb0ecd1":function(){return t.e(117).then(t.bind(null,584))},"v-7ddc0294":function(){return t.e(114).then(t.bind(null,585))},"v-80fba4b0":function(){return t.e(116).then(t.bind(null,586))},"v-cbbdbbf0":function(){return t.e(120).then(t.bind(null,587))},"v-341bddf7":function(){return t.e(118).then(t.bind(null,588))},"v-19ada824":function(){return t.e(119).then(t.bind(null,589))},"v-4c3539d6":function(){return t.e(121).then(t.bind(null,590))},"v-05a5f534":function(){return t.e(122).then(t.bind(null,591))},"v-a5868bbe":function(){return t.e(123).then(t.bind(null,592))},"v-6569389a":function(){return t.e(125).then(t.bind(null,593))},"v-8dc2d6dc":function(){return t.e(124).then(t.bind(null,594))},"v-41e962fb":function(){return t.e(126).then(t.bind(null,595))},"v-04fb6bbd":function(){return t.e(127).then(t.bind(null,596))},"v-c95b003e":function(){return t.e(128).then(t.bind(null,597))},"v-1b28ac1d":function(){return t.e(129).then(t.bind(null,598))},"v-070a859d":function(){return t.e(130).then(t.bind(null,599))},"v-701a569a":function(){return t.e(132).then(t.bind(null,600))},"v-36683b8b":function(){return t.e(131).then(t.bind(null,601))},"v-59797b30":function(){return t.e(133).then(t.bind(null,602))},"v-164c8fec":function(){return t.e(134).then(t.bind(null,603))},"v-5aecbf42":function(){return t.e(135).then(t.bind(null,604))},"v-afcdc2ac":function(){return t.e(136).then(t.bind(null,605))},"v-559e6528":function(){return t.e(137).then(t.bind(null,606))},"v-45ad0624":function(){return t.e(139).then(t.bind(null,607))},"v-68f58b64":function(){return t.e(140).then(t.bind(null,608))},"v-46361b41":function(){return t.e(142).then(t.bind(null,609))},"v-ae82e742":function(){return t.e(143).then(t.bind(null,610))},"v-21b382ce":function(){return t.e(147).then(t.bind(null,611))},"v-5e4f50f7":function(){return t.e(145).then(t.bind(null,612))},"v-03fd5b0f":function(){return t.e(146).then(t.bind(null,613))},"v-7eda0003":function(){return t.e(144).then(t.bind(null,614))},"v-222b3d16":function(){return t.e(141).then(t.bind(null,615))},"v-7724aeba":function(){return t.e(148).then(t.bind(null,616))},"v-6413e9de":function(){return t.e(149).then(t.bind(null,617))},"v-dd2b1d86":function(){return t.e(138).then(t.bind(null,618))},"v-263d1f18":function(){return t.e(150).then(t.bind(null,619))},"v-e3e2bb2c":function(){return Promise.all([t.e(0),t.e(5)]).then(t.bind(null,620))},"v-8461995e":function(){return t.e(151).then(t.bind(null,621))}};function So(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var Io=/-(\w)/g,Oo=So((function(n){return n.replace(Io,(function(n,e){return e?e.toUpperCase():""}))})),jo=/\B([A-Z])/g,Lo=So((function(n){return n.replace(jo,"-$1").toLowerCase()})),Do=So((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function zo(n,e){if(e)return n(e)?n(e):e.includes("-")?n(Do(Oo(e))):n(Do(e))||n(Lo(e))}var Fo=Object.assign({},Co,Po),Ro=function(n){return Fo[n]},Uo=function(n){return Po[n]},Mo=function(n){return Co[n]},qo=function(n){return ja.component(n)};function No(n){return zo(Uo,n)}function Ko(n){return zo(Mo,n)}function $o(n){return zo(Ro,n)}function Ho(n){return zo(qo,n)}function Qo(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(Ho(e)||!$o(e)){n.next=5;break}return n.next=3,$o(e)();case 3:t=n.sent,ja.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function Go(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var Wo=t(133),Vo=(t(184),t(106),t(51),t(213)),Zo=t.n(Vo),Jo=t(214),Yo=t.n(Jo),Xo={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(Wo.a)(n,1)[0]})).map((function(n){var e=Object(Wo.a)(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(Yo()(n[t]),'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=es(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(wo.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=ts(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return Zo()([{name:"description",content:this.$description}],n,this.siteMeta,rs)},updateCanonicalLink:function(){ns(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",es(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){ts(null,this.currentMetaTags),ns()}};function ns(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function es(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function ts(n,e){if(e&&Object(wo.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function rs(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var r=t[e];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}t(135);var as=t(146),is={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(as)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+r,o=0;o<t.length;o++){var s=t[o],l=t[o+1],c=0===o&&0===r||r>=s.parentElement.offsetTop+10&&(!l||r<l.parentElement.offsetTop-10),d=decodeURIComponent(this.$route.hash);if(c&&d!==decodeURIComponent(s.hash)){var u=s;if(i===a)for(var p=o+1;p<t.length;p++)if(d===decodeURIComponent(t[p].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(u.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},os=(t(74),t(98)),ss=t.n(os),ls={mounted:function(){var n=this;ss.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||ja.component(n.name)||ss.a.start(),t()})),this.$router.afterEach((function(){ss.a.done(),n.isSidebarOpen=!1}))}};t(70),t(41),t(73),t(354);function cs(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(96);function ds(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function us(n,e,t){return e&&ds(n.prototype,e),t&&ds(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}t(355);var ps=function(){function n(){cs(this,n);this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}return us(n,[{key:"show",value:function(n){var e=this,t=n.text,r=void 0===t?"":t,a=n.duration,i=void 0===a?3e3:a,o=document.createElement("div");o.className="message move-in",o.innerHTML='\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">'.concat(r,"</div>\n    "),this.containerEl.appendChild(o),i>0&&setTimeout((function(){e.close(o)}),i)}},{key:"close",value:function(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",(function(){n.remove()}))}}]),n}(),hs={mounted:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated:function(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy:function(){var n=this;setTimeout((function(){(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach((function(e){document.querySelectorAll(e).forEach(n.generateCopyButton)}))}),1e3)},generateCopyButton:function(n){var e=this;if(!n.classList.contains("codecopy-enabled")){var t=document.createElement("i");t.className="code-copy",t.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',t.title="Copy to clipboard",t.addEventListener("click",(function(){e.copyToClipboard(n.innerText)})),n.appendChild(t),n.classList.add("codecopy-enabled")}},copyToClipboard:function(n){var e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);var t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy"),(new ps).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};t(228),t(100),t(134),t(136),t(357);!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css","top"===t&&r.firstChild?r.insertBefore(a,r.firstChild):r.appendChild(a),a.styleSheet?a.styleSheet.cssText=n:a.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var fs={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},ms={},gs=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},vs=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:fs[n]},Es=function n(e,t,r){var a=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))a[n]=t[n];else{var e=n.replace("data","");a.dataset[e]=t[n]}})),r&&r.forEach((function(e){var t=e.tag,r=e.attrs,i=e.children;a.appendChild(n(t,r,i))})),a},bs=function(n,e,t){var r,a=(r=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==a.length||t?a:a[0]},ys=function(n,e){var t,r,a=n.match(/<style>([\s\S]+)<\/style>/),i=n.match(/<template>([\s\S]+)<\/template>/),o=n.match(/<script>([\s\S]+)<\/script>/),s={css:a&&a[1].replace(/^\n|\n$/g,""),html:i&&i[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=gs(s.html),s.jsTpl=(t=s.js,r=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),r="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),a=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,i=[eval][0](a);return i.template=e,i}(s.js,s.html);var l=vs("vue");return s.jsLib.unshift(l),s},As=function(n,e){var t,r=n.match(/<style>([\s\S]+)<\/style>/),a=n.match(/<html>([\s\S]+)<\/html>/),i=n.match(/<script>([\s\S]+)<\/script>/),o={css:r&&r[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return o.htmlTpl=o.html,o.jsTpl=o.js,o.script=(t=o.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),o},ks=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function xs(){var n=bs(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=bs(n,"vuepress-plugin-demo-block__code"),t=bs(n,"vuepress-plugin-demo-block__display"),r=bs(n,"vuepress-plugin-demo-block__footer"),a=bs(t,"vuepress-plugin-demo-block__app"),i=decodeURIComponent(n.dataset.code),o=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);o=o?JSON.parse(o):{};var l=e.querySelector("div").clientHeight,c="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),a=new Function("return ".concat(r))(),i={js:a,css:a.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:ks(n),htmlTpl:gs("")},o=vs("react"),s=vs("reactDOM");return i.jsLib.unshift(o,s),i}(i,o):"vanilla"===s?As(i,o):ys(i,o),d=Es("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(d),d.addEventListener("click",Bs.bind(null,d,l,e,r)),vs("jsfiddle")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,o=a.concat(i).concat(vs("cssLib")).concat(vs("jsLib")).join(",");return Es("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:o}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),vs("codepen")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,o=JSON.stringify({css:e,html:t,js:r,js_external:a.concat(vs("jsLib")).join(";"),css_external:i.concat(vs("cssLib")).join(";"),layout:vs("codepenLayout"),js_pre_processor:vs("codepenJsProcessor"),editors:vs("codepenEditors")});return Es("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:o}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==o.horizontal?o.horizontal:vs("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var u=e.firstChild.cloneNode(!0);u.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(u)}if(c.css&&function(n){if(!ms[n]){var e=Es("style",{innerHTML:n});document.body.appendChild(e),ms[n]=!0}}(c.css),"react"===s)ReactDOM.render(React.createElement(c.js),a);else if("vue"===s){var p=(new(Vue.extend(c.script))).$mount();a.appendChild(p.$el)}else"vanilla"===s&&(a.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){xs()}),300)}function Bs(n,e,t,r){var a="1"!==n.dataset.isExpand;t.style.height=a?"".concat(e,"px"):0,a?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=a?"1":"0"}var _s={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},xs()},updated:function(){xs()}},Ts=(t(218),"auto"),ws="zoom-in",Cs="zoom-out",Ps="grab",Ss="move";function Is(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a={passive:!1};r?n.addEventListener(e,t,a):n.removeEventListener(e,t,a)}function Os(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function js(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Ls(n,e,t){!function(n){var e=Ds,t=zs;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var a=n.transform;delete n.transform,n[t]=a}}(e);var r=n.style,a={};for(var i in e)t&&(a[i]=r[i]||""),r[i]=e[i];return a}var Ds="transition",zs="transform",Fs="transform",Rs="transitionend";var Us=function(){},Ms={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Us,onClose:Us,onGrab:Us,onMove:Us,onRelease:Us,onBeforeOpen:Us,onBeforeClose:Us,onBeforeGrab:Us,onBeforeRelease:Us,onImageLoading:Us,onImageLoaded:Us},qs={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Ks(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,a=this.lastScrollPosition.y-t,i=this.options.scrollThreshold;(Math.abs(a)>=i||Math.abs(r)>=i)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Ns(n)&&!Ks(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Ns(n)&&!Ks(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Ns(n){return 0===n.button}function Ks(n){return n.metaKey||n.ctrlKey}var $s={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Ls(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Is(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Ls(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Hs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Qs=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Gs=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Ws={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=js(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,a=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Ps:Cs,transition:Fs+"\n        "+r+"s\n        "+a,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Ls(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Ls(this.el,{transform:"none"})},grab:function(n,e,t){var r=Vs(),a=r.x-n,i=r.y-e;Ls(this.el,{cursor:Ss,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=Vs(),a=r.x-n,i=r.y-e;Ls(this.el,{transition:Fs,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Ls(this.el,this.styleClose)},restoreOpenStyle:function(){Ls(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=Vs(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,a=r.customSize,i=r.scaleBase;if(!a&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(a&&"object"===(void 0===a?"undefined":Hs(a)))return{x:a.width/this.rect.width,y:a.height/this.rect.height};var o=this.rect.width/2,s=this.rect.height/2,l=Vs(),c={x:l.x-o,y:l.y-s},d=c.x/o,u=c.y/s,p=i+Math.min(d,u);if(a&&"string"==typeof a){var h=t||this.el.naturalWidth,f=e||this.el.naturalHeight,m=parseFloat(a)*h/(100*this.rect.width),g=parseFloat(a)*f/(100*this.rect.height);if(p>m||p>g)return{x:m,y:g}}return{x:p,y:p}}};function Vs(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Zs(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Is(n,r,e[r],t)}))}var Js=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Ws),this.overlay=Object.create($s),this.handler=Object.create(qs),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Gs({},Ms,e),this.overlay.init(this),this.handler.init(this)}return Qs(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=ws,Is(n,"click",this.handler.click),this.options.preloadImage&&Os(js(n)));return this}},{key:"config",value:function(n){return n?(Gs(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var a=this.target.srcOriginal;null!=a&&(this.options.onImageLoading(r),Os(a,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Is(document,"scroll",this.handler.scroll),Is(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Is(window,"resize",this.handler.resizeWindow);var i=function n(){Is(r,Rs,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Zs(document,e.handler,!0),t(r)};return Is(r,Rs,i),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Ts,this.overlay.fadeOut(),this.target.zoomOut(),Is(document,"scroll",this.handler.scroll,!1),Is(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Is(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Is(t,Rs,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Zs(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Is(t,Rs,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var a=this.target.el;this.options.onBeforeGrab(a),this.released=!1,this.target.grab(n,e,t);var i=function n(){Is(a,Rs,n,!1),r(a)};return Is(a,Rs,i),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Ss,this.target.move(n,e,t);var a=this.target.el,i=function n(){Is(a,Rs,n,!1),r(a)};return Is(a,Rs,i),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Ts,this.target.restoreOpenStyle();var r=function r(){Is(t,Rs,r,!1),n.lock=!1,n.released=!0,e(t)};return Is(t,Rs,r),this}}}]),n}(),Ys=".theme-vdoing-content img:not(.no-zoom)",Xs=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),nl=Number("500"),el=function(){function n(){cs(this,n),this.instance=new Js(Xs)}return us(n,[{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ys;"undefined"!=typeof window&&this.instance.listen(n)}},{key:"updateDelay",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ys,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:nl;setTimeout((function(){return n.update(e)}),t)}}]),n}(),tl=[Xo,is,ls,hs,_s,{watch:{"$page.path":function(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted:function(){this.$vuepress.zooming=new el,this.$vuepress.zooming.updateDelay()}}],rl={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Go("layout",n),ja.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},al=t(19),il=Object(al.a)(rl,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){var r;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(r=n[e]).push.apply(r,Object(wo.a)(t));break;default:throw new Error("Unknown option name.")}}(il,"mixins",tl);var ol=[{name:"v-ebfe00f4",path:"/pages/e9c909/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-ebfe00f4").then(t)}},{path:"/pages/e9c909/index.html",redirect:"/pages/e9c909/"},{path:"/10.后端开发/100.监控告警/10. Skywalking/10.概要.html",redirect:"/pages/e9c909/"},{name:"v-3a4e04c8",path:"/pages/2a1bb9/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-3a4e04c8").then(t)}},{path:"/pages/2a1bb9/index.html",redirect:"/pages/2a1bb9/"},{path:"/10.后端开发/100.监控告警/10. Skywalking/20.插件自动化测试.html",redirect:"/pages/2a1bb9/"},{name:"v-490bfb71",path:"/pages/f380dd/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-490bfb71").then(t)}},{path:"/pages/f380dd/index.html",redirect:"/pages/f380dd/"},{path:"/05.个人使用说明书/10.个人使用说明书.html",redirect:"/pages/f380dd/"},{name:"v-1b6a3146",path:"/pages/8ac9f6/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1b6a3146").then(t)}},{path:"/pages/8ac9f6/index.html",redirect:"/pages/8ac9f6/"},{path:"/10.后端开发/100.监控告警/10. Skywalking/30. SkyWalking ClickHouse 存储插件开发.html",redirect:"/pages/8ac9f6/"},{name:"v-0cfd1384",path:"/pages/19aee3/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-0cfd1384").then(t)}},{path:"/pages/19aee3/index.html",redirect:"/pages/19aee3/"},{path:"/10.后端开发/10.概要.html",redirect:"/pages/19aee3/"},{name:"v-558f5374",path:"/pages/609888/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-558f5374").then(t)}},{path:"/pages/609888/index.html",redirect:"/pages/609888/"},{path:"/10.后端开发/100.监控告警/30.后端可观测性体系架构设计.html",redirect:"/pages/609888/"},{name:"v-8ed93d90",path:"/pages/56c88e/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-8ed93d90").then(t)}},{path:"/pages/56c88e/index.html",redirect:"/pages/56c88e/"},{path:"/10.后端开发/110.防爬风控/10.如何应对爬虫的流量并进行有效狙击？.html",redirect:"/pages/56c88e/"},{name:"v-67084c61",path:"/pages/1d9f9a/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-67084c61").then(t)}},{path:"/pages/1d9f9a/index.html",redirect:"/pages/1d9f9a/"},{path:"/10.后端开发/120.稳定性 checklist/10.MySQL  故障 Checklist.html",redirect:"/pages/1d9f9a/"},{name:"v-1350d48d",path:"/pages/0b8f06/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1350d48d").then(t)}},{path:"/pages/0b8f06/index.html",redirect:"/pages/0b8f06/"},{path:"/10.后端开发/120.稳定性 checklist/05.常见 Java 编码故障 Checklist.html",redirect:"/pages/0b8f06/"},{name:"v-64a6b56c",path:"/pages/13ebf7/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-64a6b56c").then(t)}},{path:"/pages/13ebf7/index.html",redirect:"/pages/13ebf7/"},{path:"/10.后端开发/120.稳定性 checklist/30.Kafka 故障 Checklist.html",redirect:"/pages/13ebf7/"},{name:"v-f7d3f5ec",path:"/pages/64a589/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-f7d3f5ec").then(t)}},{path:"/pages/64a589/index.html",redirect:"/pages/64a589/"},{path:"/10.后端开发/120.稳定性 checklist/40.Elasticsearch 故障 Checklist.html",redirect:"/pages/64a589/"},{name:"v-60d325ec",path:"/pages/14973a/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-60d325ec").then(t)}},{path:"/pages/14973a/index.html",redirect:"/pages/14973a/"},{path:"/10.后端开发/120.稳定性 checklist/20.Redis 故障 Checklist.html",redirect:"/pages/14973a/"},{name:"v-0d49bda2",path:"/pages/cf2bd0/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-0d49bda2").then(t)}},{path:"/pages/cf2bd0/index.html",redirect:"/pages/cf2bd0/"},{path:"/10.后端开发/130.效能工具/10.Jacoco.html",redirect:"/pages/cf2bd0/"},{name:"v-282efb17",path:"/pages/1c8450/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-282efb17").then(t)}},{path:"/pages/1c8450/index.html",redirect:"/pages/1c8450/"},{path:"/10.后端开发/130.效能工具/30.Sonar.html",redirect:"/pages/1c8450/"},{name:"v-50c5a537",path:"/pages/09d86f/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-50c5a537").then(t)}},{path:"/pages/09d86f/index.html",redirect:"/pages/09d86f/"},{path:"/10.后端开发/130.效能工具/20.Autogit.html",redirect:"/pages/09d86f/"},{name:"v-d7a76ed8",path:"/pages/759e84/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-d7a76ed8").then(t)}},{path:"/pages/759e84/index.html",redirect:"/pages/759e84/"},{path:"/10.后端开发/130.效能工具/40.代码CheckList.html",redirect:"/pages/759e84/"},{name:"v-8583f28a",path:"/pages/e54383/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-8583f28a").then(t)}},{path:"/pages/e54383/index.html",redirect:"/pages/e54383/"},{path:"/10.后端开发/130.效能工具/60.规则引擎Drools.html",redirect:"/pages/e54383/"},{name:"v-004b7197",path:"/pages/100d77/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-004b7197").then(t)}},{path:"/pages/100d77/index.html",redirect:"/pages/100d77/"},{path:"/10.后端开发/130.效能工具/50.Arthas.html",redirect:"/pages/100d77/"},{name:"v-41310865",path:"/pages/40647d/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-41310865").then(t)}},{path:"/pages/40647d/index.html",redirect:"/pages/40647d/"},{path:"/10.后端开发/130.效能工具/70.模板引擎FreeMarker.html",redirect:"/pages/40647d/"},{name:"v-3b96a73e",path:"/pages/68c4f4/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-3b96a73e").then(t)}},{path:"/pages/68c4f4/index.html",redirect:"/pages/68c4f4/"},{path:"/10.后端开发/20.面试八股文/10.概要.html",redirect:"/pages/68c4f4/"},{name:"v-0fc6e384",path:"/pages/b9c58a/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-0fc6e384").then(t)}},{path:"/pages/b9c58a/index.html",redirect:"/pages/b9c58a/"},{path:"/10.后端开发/20.面试八股文/20.共享变量在线程中的可见性问题分析.html",redirect:"/pages/b9c58a/"},{name:"v-08ba378c",path:"/pages/96528a/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-08ba378c").then(t)}},{path:"/pages/96528a/index.html",redirect:"/pages/96528a/"},{path:"/10.后端开发/20.面试八股文/50.草稿.html",redirect:"/pages/96528a/"},{name:"v-1627a188",path:"/pages/ccdab3/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1627a188").then(t)}},{path:"/pages/ccdab3/index.html",redirect:"/pages/ccdab3/"},{path:"/10.后端开发/20.面试八股文/30.如何设计延时消息.html",redirect:"/pages/ccdab3/"},{name:"v-12287d73",path:"/pages/87518c/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-12287d73").then(t)}},{path:"/pages/87518c/index.html",redirect:"/pages/87518c/"},{path:"/10.后端开发/40.服务端小技巧合集/05.业务线程池不丢 traceId 的方法.html",redirect:"/pages/87518c/"},{name:"v-32ae209b",path:"/pages/909b0e/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-32ae209b").then(t)}},{path:"/pages/909b0e/index.html",redirect:"/pages/909b0e/"},{path:"/10.后端开发/40.服务端小技巧合集/03.byte buddy 实现链路上所有方法耗时打印.html",redirect:"/pages/909b0e/"},{name:"v-79bce858",path:"/pages/69dde0/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-79bce858").then(t)}},{path:"/pages/69dde0/index.html",redirect:"/pages/69dde0/"},{path:"/10.后端开发/40.服务端小技巧合集/10.让你的java业务代码并发的调用，并正确的处理返回结果.html",redirect:"/pages/69dde0/"},{name:"v-1f9b39d1",path:"/pages/81e5c5/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1f9b39d1").then(t)}},{path:"/pages/81e5c5/index.html",redirect:"/pages/81e5c5/"},{path:"/10.后端开发/40.服务端小技巧合集/20.服务端常见线上问题整理与解决措施.html",redirect:"/pages/81e5c5/"},{name:"v-72cadb78",path:"/pages/bfad5e/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-72cadb78").then(t)}},{path:"/pages/bfad5e/index.html",redirect:"/pages/bfad5e/"},{path:"/10.后端开发/40.服务端小技巧合集/30.服务端日志打印最佳实践.html",redirect:"/pages/bfad5e/"},{name:"v-71032d64",path:"/pages/72847a/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-71032d64").then(t)}},{path:"/pages/72847a/index.html",redirect:"/pages/72847a/"},{path:"/10.后端开发/40.服务端小技巧合集/40.轻松正确理解并上手RESTful.html",redirect:"/pages/72847a/"},{name:"v-1b7cfb8f",path:"/pages/344010/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1b7cfb8f").then(t)}},{path:"/pages/344010/index.html",redirect:"/pages/344010/"},{path:"/10.后端开发/40.服务端小技巧合集/50.服务端业务线程池优雅使用.html",redirect:"/pages/344010/"},{name:"v-30576858",path:"/pages/b901a4/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-30576858").then(t)}},{path:"/pages/b901a4/index.html",redirect:"/pages/b901a4/"},{path:"/10.后端开发/40.服务端小技巧合集/60.服务端如何正确优雅使用流控平台.html",redirect:"/pages/b901a4/"},{name:"v-4e9681db",path:"/pages/3e5740/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-4e9681db").then(t)}},{path:"/pages/3e5740/index.html",redirect:"/pages/3e5740/"},{path:"/10.后端开发/40.服务端小技巧合集/70.服务端如何正确的使用分布式锁防止缓存击穿.html",redirect:"/pages/3e5740/"},{name:"v-201a461e",path:"/pages/e66200/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-201a461e").then(t)}},{path:"/pages/e66200/index.html",redirect:"/pages/e66200/"},{path:"/10.后端开发/40.服务端小技巧合集/80.服务端接口设计最佳实践.html",redirect:"/pages/e66200/"},{name:"v-27748560",path:"/pages/480b10/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-27748560").then(t)}},{path:"/pages/480b10/index.html",redirect:"/pages/480b10/"},{path:"/10.后端开发/50.MySQL 相关/45.MySQL 建表的一些规范.html",redirect:"/pages/480b10/"},{name:"v-7556b5c7",path:"/pages/d7e1e9/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-7556b5c7").then(t)}},{path:"/pages/d7e1e9/index.html",redirect:"/pages/d7e1e9/"},{path:"/10.后端开发/50.MySQL 相关/10.MySQL 索引概要.html",redirect:"/pages/d7e1e9/"},{name:"v-31a6d9b6",path:"/pages/ea7be2/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-31a6d9b6").then(t)}},{path:"/pages/ea7be2/index.html",redirect:"/pages/ea7be2/"},{path:"/10.后端开发/50.MySQL 相关/50.MySQL 调优手册.html",redirect:"/pages/ea7be2/"},{name:"v-1b1c130a",path:"/pages/3343c6/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1b1c130a").then(t)}},{path:"/pages/3343c6/index.html",redirect:"/pages/3343c6/"},{path:"/10.后端开发/70.文本搜索Elasticsearch/10.垂直电商搜索注意点.html",redirect:"/pages/3343c6/"},{name:"v-26b6e625",path:"/pages/dcbb80/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-26b6e625").then(t)}},{path:"/pages/dcbb80/index.html",redirect:"/pages/dcbb80/"},{path:"/10.后端开发/70.文本搜索Elasticsearch/20.关于搜索建议词的分析以及相应的优化方案.html",redirect:"/pages/dcbb80/"},{name:"v-9663e336",path:"/pages/e0e231/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-9663e336").then(t)}},{path:"/pages/e0e231/index.html",redirect:"/pages/e0e231/"},{path:"/10.后端开发/70.文本搜索Elasticsearch/30.ElasticSearch 临时.html",redirect:"/pages/e0e231/"},{name:"v-35584b30",path:"/pages/88d53b/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-35584b30").then(t)}},{path:"/pages/88d53b/index.html",redirect:"/pages/88d53b/"},{path:"/10.后端开发/80.Kafka 最佳实践指南/10. Kafka 必知问题.html",redirect:"/pages/88d53b/"},{name:"v-3baa47ac",path:"/pages/0c7472/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-3baa47ac").then(t)}},{path:"/pages/0c7472/index.html",redirect:"/pages/0c7472/"},{path:"/10.后端开发/80.Kafka 最佳实践指南/20.Kafka 正确的使用姿势.html",redirect:"/pages/0c7472/"},{name:"v-9a699648",path:"/pages/109cde/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-9a699648").then(t)}},{path:"/pages/109cde/index.html",redirect:"/pages/109cde/"},{path:"/10.后端开发/85.网络相关/10.HTTP 各个版本区别.html",redirect:"/pages/109cde/"},{name:"v-3d0f0b4e",path:"/pages/b700b8/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-3d0f0b4e").then(t)}},{path:"/pages/b700b8/index.html",redirect:"/pages/b700b8/"},{path:"/10.后端开发/90.架构相关/100.浅谈高并发架构设计.html",redirect:"/pages/b700b8/"},{name:"v-28850768",path:"/pages/d086a2/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-28850768").then(t)}},{path:"/pages/d086a2/index.html",redirect:"/pages/d086a2/"},{path:"/10.后端开发/90.架构相关/200.聊一聊MySQL大表数据异构的方案.html",redirect:"/pages/d086a2/"},{name:"v-7d92da14",path:"/pages/d00ad7/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-7d92da14").then(t)}},{path:"/pages/d00ad7/index.html",redirect:"/pages/d00ad7/"},{path:"/20.前端开发/10.概要.html",redirect:"/pages/d00ad7/"},{name:"v-061b6052",path:"/pages/4e98ab/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-061b6052").then(t)}},{path:"/pages/4e98ab/index.html",redirect:"/pages/4e98ab/"},{path:"/10.后端开发/90.架构相关/110.浅谈高可用架构设计.html",redirect:"/pages/4e98ab/"},{name:"v-54ed71f9",path:"/pages/884001/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-54ed71f9").then(t)}},{path:"/pages/884001/index.html",redirect:"/pages/884001/"},{path:"/20.前端开发/100.草稿.html",redirect:"/pages/884001/"},{name:"v-6d9bafd5",path:"/pages/ca725f/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-6d9bafd5").then(t)}},{path:"/pages/ca725f/index.html",redirect:"/pages/ca725f/"},{path:"/22.测试开发/10.概要.html",redirect:"/pages/ca725f/"},{name:"v-0c4d7672",path:"/pages/157465/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-0c4d7672").then(t)}},{path:"/pages/157465/index.html",redirect:"/pages/157465/"},{path:"/22.测试开发/20.精通性能测试.html",redirect:"/pages/157465/"},{name:"v-0975a803",path:"/pages/227545/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-0975a803").then(t)}},{path:"/pages/227545/index.html",redirect:"/pages/227545/"},{path:"/25.运维开发/01.docker 命令.html",redirect:"/pages/227545/"},{name:"v-67d086b3",path:"/pages/df4369/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-67d086b3").then(t)}},{path:"/pages/df4369/index.html",redirect:"/pages/df4369/"},{path:"/25.运维开发/10.概要.html",redirect:"/pages/df4369/"},{name:"v-8672caaa",path:"/pages/7c75c6/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-8672caaa").then(t)}},{path:"/pages/7c75c6/index.html",redirect:"/pages/7c75c6/"},{path:"/27.大数据开发/04.用户画像.html",redirect:"/pages/7c75c6/"},{name:"v-061ae64c",path:"/pages/aa09ae/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-061ae64c").then(t)}},{path:"/pages/aa09ae/index.html",redirect:"/pages/aa09ae/"},{path:"/27.大数据开发/01.概要.html",redirect:"/pages/aa09ae/"},{name:"v-41163b04",path:"/pages/af7f35/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-41163b04").then(t)}},{path:"/pages/af7f35/index.html",redirect:"/pages/af7f35/"},{path:"/27.大数据开发/120.flink.html",redirect:"/pages/af7f35/"},{name:"v-53c133a4",path:"/pages/c7a395/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-53c133a4").then(t)}},{path:"/pages/c7a395/index.html",redirect:"/pages/c7a395/"},{path:"/27.大数据开发/110.数据分析万能法则.html",redirect:"/pages/c7a395/"},{name:"v-0b14e908",path:"/pages/5b4bcd/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-0b14e908").then(t)}},{path:"/pages/5b4bcd/index.html",redirect:"/pages/5b4bcd/"},{path:"/40.产品&UI交互/10.概要.html",redirect:"/pages/5b4bcd/"},{name:"v-bab82fcc",path:"/pages/b124a5/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-bab82fcc").then(t)}},{path:"/pages/b124a5/index.html",redirect:"/pages/b124a5/"},{path:"/40.产品&UI交互/20.设计价值观.html",redirect:"/pages/b124a5/"},{name:"v-ba1f1340",path:"/pages/d20b3e/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-ba1f1340").then(t)}},{path:"/pages/d20b3e/index.html",redirect:"/pages/d20b3e/"},{path:"/40.产品&UI交互/40.设计的四大原则.html",redirect:"/pages/d20b3e/"},{name:"v-1dd4318e",path:"/pages/28fad7/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1dd4318e").then(t)}},{path:"/pages/28fad7/index.html",redirect:"/pages/28fad7/"},{path:"/40.产品&UI交互/30.设计原则 Element.html",redirect:"/pages/28fad7/"},{name:"v-57237f40",path:"/pages/2781f1/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-57237f40").then(t)}},{path:"/pages/2781f1/index.html",redirect:"/pages/2781f1/"},{path:"/40.产品&UI交互/50.色彩的秘密.html",redirect:"/pages/2781f1/"},{name:"v-02e2bf18",path:"/pages/603711/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-02e2bf18").then(t)}},{path:"/pages/603711/index.html",redirect:"/pages/603711/"},{path:"/40.产品&UI交互/60.原型图工具.html",redirect:"/pages/603711/"},{name:"v-a869ad28",path:"/pages/7ba30c/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-a869ad28").then(t)}},{path:"/pages/7ba30c/index.html",redirect:"/pages/7ba30c/"},{path:"/50.团队管理/10.概要.html",redirect:"/pages/7ba30c/"},{name:"v-5d829516",path:"/pages/a6ba54/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-5d829516").then(t)}},{path:"/pages/a6ba54/index.html",redirect:"/pages/a6ba54/"},{path:"/50.团队管理/100.规范&模板/01.概要.html",redirect:"/pages/a6ba54/"},{name:"v-8a321d32",path:"/pages/438b60/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-8a321d32").then(t)}},{path:"/pages/438b60/index.html",redirect:"/pages/438b60/"},{path:"/40.产品&UI交互/70.设计资源.html",redirect:"/pages/438b60/"},{name:"v-f4693658",path:"/pages/8acb94/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-f4693658").then(t)}},{path:"/pages/8acb94/index.html",redirect:"/pages/8acb94/"},{path:"/50.团队管理/100.规范&模板/10.服务端发布 CheckList 模板.html",redirect:"/pages/8acb94/"},{name:"v-6bb3d765",path:"/pages/814a15/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-6bb3d765").then(t)}},{path:"/pages/814a15/index.html",redirect:"/pages/814a15/"},{path:"/50.团队管理/100.规范&模板/30.Case Study 模板.html",redirect:"/pages/814a15/"},{name:"v-591a4f31",path:"/pages/97392b/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-591a4f31").then(t)}},{path:"/pages/97392b/index.html",redirect:"/pages/97392b/"},{path:"/50.团队管理/100.规范&模板/50.性能测试报告 模板.html",redirect:"/pages/97392b/"},{name:"v-ceb6f044",path:"/pages/f0afeb/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-ceb6f044").then(t)}},{path:"/pages/f0afeb/index.html",redirect:"/pages/f0afeb/"},{path:"/50.团队管理/100.规范&模板/60.日报格式 模板.html",redirect:"/pages/f0afeb/"},{name:"v-61164b86",path:"/pages/2da3b0/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-61164b86").then(t)}},{path:"/pages/2da3b0/index.html",redirect:"/pages/2da3b0/"},{path:"/50.团队管理/100.规范&模板/70.月报格式 模板.html",redirect:"/pages/2da3b0/"},{name:"v-6f343e3c",path:"/pages/c976cf/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-6f343e3c").then(t)}},{path:"/pages/c976cf/index.html",redirect:"/pages/c976cf/"},{path:"/50.团队管理/100.规范&模板/80.Git 提交 message 规范.html",redirect:"/pages/c976cf/"},{name:"v-d18c0768",path:"/pages/80270d/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-d18c0768").then(t)}},{path:"/pages/80270d/index.html",redirect:"/pages/80270d/"},{path:"/50.团队管理/120.如何做好技术规划.html",redirect:"/pages/80270d/"},{name:"v-6cde0ab2",path:"/pages/5700d1/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-6cde0ab2").then(t)}},{path:"/pages/5700d1/index.html",redirect:"/pages/5700d1/"},{path:"/50.团队管理/100.规范&模板/40.服务端系统设计 模板.html",redirect:"/pages/5700d1/"},{name:"v-2744b25f",path:"/pages/472d9e/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-2744b25f").then(t)}},{path:"/pages/472d9e/index.html",redirect:"/pages/472d9e/"},{path:"/50.团队管理/130.张一鸣精选微博55条.html",redirect:"/pages/472d9e/"},{name:"v-2869af78",path:"/pages/e96615/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-2869af78").then(t)}},{path:"/pages/e96615/index.html",redirect:"/pages/e96615/"},{path:"/50.团队管理/140.项目理念与愿景.html",redirect:"/pages/e96615/"},{name:"v-2f0df8ba",path:"/pages/971682/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-2f0df8ba").then(t)}},{path:"/pages/971682/index.html",redirect:"/pages/971682/"},{path:"/50.团队管理/150.项目版本号.html",redirect:"/pages/971682/"},{name:"v-43501259",path:"/pages/143f32/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-43501259").then(t)}},{path:"/pages/143f32/index.html",redirect:"/pages/143f32/"},{path:"/50.团队管理/18. 团队奖优罚劣14条军规.html",redirect:"/pages/143f32/"},{name:"v-3cecfe90",path:"/pages/a3aa7e/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-3cecfe90").then(t)}},{path:"/pages/a3aa7e/index.html",redirect:"/pages/a3aa7e/"},{path:"/50.团队管理/20. OKR 最佳实践.html",redirect:"/pages/a3aa7e/"},{name:"v-4260d978",path:"/pages/cab062/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-4260d978").then(t)}},{path:"/pages/cab062/index.html",redirect:"/pages/cab062/"},{path:"/50.团队管理/15.成为会带团队的技术人.html",redirect:"/pages/cab062/"},{name:"v-03230f20",path:"/pages/b7ec49/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-03230f20").then(t)}},{path:"/pages/b7ec49/index.html",redirect:"/pages/b7ec49/"},{path:"/50.团队管理/35.技术人员如何准备晋升答辩？.html",redirect:"/pages/b7ec49/"},{name:"v-396373ac",path:"/pages/d6973a/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-396373ac").then(t)}},{path:"/pages/d6973a/index.html",redirect:"/pages/d6973a/"},{path:"/50.团队管理/30.超实用网址大全.html",redirect:"/pages/d6973a/"},{name:"v-10ca27bc",path:"/pages/91c182/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-10ca27bc").then(t)}},{path:"/pages/91c182/index.html",redirect:"/pages/91c182/"},{path:"/50.团队管理/40.番茄工作法（简单易行的时间管理方法）.html",redirect:"/pages/91c182/"},{name:"v-655da745",path:"/pages/356a91/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-655da745").then(t)}},{path:"/pages/356a91/index.html",redirect:"/pages/356a91/"},{path:"/50.团队管理/60.电商常见名词.html",redirect:"/pages/356a91/"},{name:"v-37895d39",path:"/pages/2b0da9/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-37895d39").then(t)}},{path:"/pages/2b0da9/index.html",redirect:"/pages/2b0da9/"},{path:"/60.软技能/06.如何一键生成项目树形结构.html",redirect:"/pages/2b0da9/"},{name:"v-3978ada8",path:"/pages/92a016/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-3978ada8").then(t)}},{path:"/pages/92a016/index.html",redirect:"/pages/92a016/"},{path:"/60.软技能/01.概要.html",redirect:"/pages/92a016/"},{name:"v-51154125",path:"/pages/f1c5a2/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-51154125").then(t)}},{path:"/pages/f1c5a2/index.html",redirect:"/pages/f1c5a2/"},{path:"/60.软技能/15.Markdown书写利器Typora最佳实践指南.html",redirect:"/pages/f1c5a2/"},{name:"v-221fcdfb",path:"/pages/023a9d/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-221fcdfb").then(t)}},{path:"/pages/023a9d/index.html",redirect:"/pages/023a9d/"},{path:"/60.软技能/20. 浅谈如何提升职场晋升力.html",redirect:"/pages/023a9d/"},{name:"v-7e8625ae",path:"/pages/de968f/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-7e8625ae").then(t)}},{path:"/pages/de968f/index.html",redirect:"/pages/de968f/"},{path:"/60.软技能/30.复盘的技巧：深度复盘的三个步骤【转载】.html",redirect:"/pages/de968f/"},{name:"v-6ead5257",path:"/pages/92a7c4/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-6ead5257").then(t)}},{path:"/pages/92a7c4/index.html",redirect:"/pages/92a7c4/"},{path:"/60.软技能/40.好文档最佳实践/03.中文技术文档写作规范.html",redirect:"/pages/92a7c4/"},{name:"v-65411ac6",path:"/pages/b5407d/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-65411ac6").then(t)}},{path:"/pages/b5407d/index.html",redirect:"/pages/b5407d/"},{path:"/60.软技能/40.好文档最佳实践/04.如何坚持写出一份合格的技术文档.html",redirect:"/pages/b5407d/"},{name:"v-17cecf4f",path:"/pages/e0044f/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-17cecf4f").then(t)}},{path:"/pages/e0044f/index.html",redirect:"/pages/e0044f/"},{path:"/60.软技能/40.好文档最佳实践/20.软件手册范例.html",redirect:"/pages/e0044f/"},{name:"v-9b3d3fe6",path:"/pages/514c10/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-9b3d3fe6").then(t)}},{path:"/pages/514c10/index.html",redirect:"/pages/514c10/"},{path:"/60.软技能/40.好文档最佳实践/05.字节跳动优秀文档 8 大秘籍.html",redirect:"/pages/514c10/"},{name:"v-21fb9fb2",path:"/pages/df3516/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-21fb9fb2").then(t)}},{path:"/pages/df3516/index.html",redirect:"/pages/df3516/"},{path:"/65.他山之石/10.他山之石.html",redirect:"/pages/df3516/"},{name:"v-366e77f1",path:"/pages/0f9acf/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-366e77f1").then(t)}},{path:"/pages/0f9acf/index.html",redirect:"/pages/0f9acf/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/01. 开篇词  跳出单点思维模式，才能真正理解架构设计.html",redirect:"/pages/0f9acf/"},{name:"v-1ea96ed7",path:"/pages/0c2e8b/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1ea96ed7").then(t)}},{path:"/pages/0c2e8b/index.html",redirect:"/pages/0c2e8b/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/02. 为什么不同类型的业务后台架构模式是通用的？.html",redirect:"/pages/0c2e8b/"},{name:"v-498b12ca",path:"/pages/909a7c/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-498b12ca").then(t)}},{path:"/pages/909a7c/index.html",redirect:"/pages/909a7c/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/03. 如何利用“拆分”降低架构复杂度？.html",redirect:"/pages/909a7c/"},{name:"v-7df21b81",path:"/pages/935af1/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-7df21b81").then(t)}},{path:"/pages/935af1/index.html",redirect:"/pages/935af1/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/04. 如何使用简洁的架构实现高性能读服务？.html",redirect:"/pages/935af1/"},{name:"v-4e03753c",path:"/pages/bed5b4/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-4e03753c").then(t)}},{path:"/pages/bed5b4/index.html",redirect:"/pages/bed5b4/"},{path:"/60.软技能/40.好文档最佳实践/10.写好文档检查清单.html",redirect:"/pages/bed5b4/"},{name:"v-16f5ccf4",path:"/pages/e69306/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-16f5ccf4").then(t)}},{path:"/pages/e69306/index.html",redirect:"/pages/e69306/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/05. 如何利用全量缓存打造毫秒级的读服务？.html",redirect:"/pages/e69306/"},{name:"v-d1276644",path:"/pages/6746e1/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-d1276644").then(t)}},{path:"/pages/6746e1/index.html",redirect:"/pages/6746e1/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/06.  如何做到异构数据的同步一致性？.html",redirect:"/pages/6746e1/"},{name:"v-45ee571f",path:"/pages/078442/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-45ee571f").then(t)}},{path:"/pages/078442/index.html",redirect:"/pages/078442/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/07. 如何应对热点数据的查询？.html",redirect:"/pages/078442/"},{name:"v-1d86706e",path:"/pages/2847ee/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1d86706e").then(t)}},{path:"/pages/2847ee/index.html",redirect:"/pages/2847ee/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/08. 如何基于流量回放实现读服务的自动化测试回归？.html",redirect:"/pages/2847ee/"},{name:"v-6f9f7890",path:"/pages/0a30c5/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-6f9f7890").then(t)}},{path:"/pages/0a30c5/index.html",redirect:"/pages/0a30c5/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/09. 如何使用分库分表支持海量数据的写入？.html",redirect:"/pages/0a30c5/"},{name:"v-05fefde8",path:"/pages/e2f528/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-05fefde8").then(t)}},{path:"/pages/e2f528/index.html",redirect:"/pages/e2f528/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/11. 如何利用依赖管控来提升写服务的性能和可用性？.html",redirect:"/pages/e2f528/"},{name:"v-9ee6d582",path:"/pages/8afe37/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-9ee6d582").then(t)}},{path:"/pages/8afe37/index.html",redirect:"/pages/8afe37/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/12. 分库分表化后如何满足多维度查询？.html",redirect:"/pages/8afe37/"},{name:"v-02220e54",path:"/pages/c5fbbe/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-02220e54").then(t)}},{path:"/pages/c5fbbe/index.html",redirect:"/pages/c5fbbe/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/10. 如何打造无状态的存储实现随时切库的写入服务？.html",redirect:"/pages/c5fbbe/"},{name:"v-0270cf64",path:"/pages/8adb6a/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-0270cf64").then(t)}},{path:"/pages/8adb6a/index.html",redirect:"/pages/8adb6a/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/13. 如何利用数据库实现并发扣减？.html",redirect:"/pages/8adb6a/"},{name:"v-2179a924",path:"/pages/958127/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-2179a924").then(t)}},{path:"/pages/958127/index.html",redirect:"/pages/958127/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/14. 如何利用缓存实现万级并发扣减？.html",redirect:"/pages/958127/"},{name:"v-afa14018",path:"/pages/674357/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-afa14018").then(t)}},{path:"/pages/674357/index.html",redirect:"/pages/674357/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/15. 如何利用缓存+数据库构建高可靠的扣减方案？.html",redirect:"/pages/674357/"},{name:"v-13cfffa8",path:"/pages/f989bd/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-13cfffa8").then(t)}},{path:"/pages/f989bd/index.html",redirect:"/pages/f989bd/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/17. 秒杀场景：热点扣减如何保证命中的存储分片不挂？.html",redirect:"/pages/f989bd/"},{name:"v-1eb0ecd1",path:"/pages/55ceda/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1eb0ecd1").then(t)}},{path:"/pages/55ceda/index.html",redirect:"/pages/55ceda/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/19. 如何设计微服务才能防止宕机？.html",redirect:"/pages/55ceda/"},{name:"v-7ddc0294",path:"/pages/72badb/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-7ddc0294").then(t)}},{path:"/pages/72badb/index.html",redirect:"/pages/72badb/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/16. 数据库与缓存的扩展升级与扣减返还.html",redirect:"/pages/72badb/"},{name:"v-80fba4b0",path:"/pages/dde1f0/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-80fba4b0").then(t)}},{path:"/pages/dde1f0/index.html",redirect:"/pages/dde1f0/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/18. 如何设计一锤子买卖的 SDK ？.html",redirect:"/pages/dde1f0/"},{name:"v-cbbdbbf0",path:"/pages/bbb73e/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-cbbdbbf0").then(t)}},{path:"/pages/bbb73e/index.html",redirect:"/pages/bbb73e/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/22. 如何进行高保真压测和服务扩容？.html",redirect:"/pages/bbb73e/"},{name:"v-341bddf7",path:"/pages/50b8d5/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-341bddf7").then(t)}},{path:"/pages/50b8d5/index.html",redirect:"/pages/50b8d5/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/20. 如何做好微服务间依赖的治理和分布式事务？.html",redirect:"/pages/50b8d5/"},{name:"v-19ada824",path:"/pages/8d2886/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-19ada824").then(t)}},{path:"/pages/8d2886/index.html",redirect:"/pages/8d2886/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/21. 如何通过监控快速发现问题？.html",redirect:"/pages/8d2886/"},{name:"v-4c3539d6",path:"/pages/baf91b/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-4c3539d6").then(t)}},{path:"/pages/baf91b/index.html",redirect:"/pages/baf91b/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/23. 重构：系统升级，如何实现不停服的数据迁移和用户切量？.html",redirect:"/pages/baf91b/"},{name:"v-05a5f534",path:"/pages/556538/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-05a5f534").then(t)}},{path:"/pages/556538/index.html",redirect:"/pages/556538/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/24. 重构：烟囱式、平台化、中台化的架构同与异.html",redirect:"/pages/556538/"},{name:"v-a5868bbe",path:"/pages/b987ac/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-a5868bbe").then(t)}},{path:"/pages/b987ac/index.html",redirect:"/pages/b987ac/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/25. 加餐  技术人如何准备晋升答辩？.html",redirect:"/pages/b987ac/"},{name:"v-6569389a",path:"/pages/9e818c/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-6569389a").then(t)}},{path:"/pages/9e818c/index.html",redirect:"/pages/9e818c/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/01. 开篇词  在管理艺术中寻找确定性的“工程逻辑”.html",redirect:"/pages/9e818c/"},{name:"v-8dc2d6dc",path:"/pages/8c029f/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-8dc2d6dc").then(t)}},{path:"/pages/8c029f/index.html",redirect:"/pages/8c029f/"},{path:"/65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/26. 结束语  抓住本质，是成为技术专家的不二法则.html",redirect:"/pages/8c029f/"},{name:"v-41e962fb",path:"/pages/a098c4/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-41e962fb").then(t)}},{path:"/pages/a098c4/index.html",redirect:"/pages/a098c4/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/02.  稳定性（一）：如何应对事故并做好复盘？.html",redirect:"/pages/a098c4/"},{name:"v-04fb6bbd",path:"/pages/f500e9/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-04fb6bbd").then(t)}},{path:"/pages/f500e9/index.html",redirect:"/pages/f500e9/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/03.  稳定性（二）：可用性治理的三个关键要点.html",redirect:"/pages/f500e9/"},{name:"v-c95b003e",path:"/pages/961c14/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-c95b003e").then(t)}},{path:"/pages/961c14/index.html",redirect:"/pages/961c14/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/04.  稳定性（三）：那些年源源不断的“红包”事故.html",redirect:"/pages/961c14/"},{name:"v-1b28ac1d",path:"/pages/c88807/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-1b28ac1d").then(t)}},{path:"/pages/c88807/index.html",redirect:"/pages/c88807/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/05.  技术债务：如何带领团队从困境中突围而出？.html",redirect:"/pages/c88807/"},{name:"v-070a859d",path:"/pages/86eda9/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-070a859d").then(t)}},{path:"/pages/86eda9/index.html",redirect:"/pages/86eda9/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/06.  大项目：把握关键点，谋定而后动.html",redirect:"/pages/86eda9/"},{name:"v-701a569a",path:"/pages/98e29e/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-701a569a").then(t)}},{path:"/pages/98e29e/index.html",redirect:"/pages/98e29e/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/08.  架构设计：治理好系统复杂度才最务实.html",redirect:"/pages/98e29e/"},{name:"v-36683b8b",path:"/pages/41e44b/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-36683b8b").then(t)}},{path:"/pages/41e44b/index.html",redirect:"/pages/41e44b/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/07.  业务理解：深入业务是做好架构的前提.html",redirect:"/pages/41e44b/"},{name:"v-59797b30",path:"/pages/658fc0/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-59797b30").then(t)}},{path:"/pages/658fc0/index.html",redirect:"/pages/658fc0/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/09.  定目标：让你的方向与公司的方向保持一致.html",redirect:"/pages/658fc0/"},{name:"v-164c8fec",path:"/pages/fb54bb/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-164c8fec").then(t)}},{path:"/pages/fb54bb/index.html",redirect:"/pages/fb54bb/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/10.  追过程：如何用 PDCA 做过程管理？.html",redirect:"/pages/fb54bb/"},{name:"v-5aecbf42",path:"/pages/2e6f7c/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-5aecbf42").then(t)}},{path:"/pages/2e6f7c/index.html",redirect:"/pages/2e6f7c/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/11.  奖优罚劣：怎样传递我们要什么与“不要什么”？.html",redirect:"/pages/2e6f7c/"},{name:"v-afcdc2ac",path:"/pages/cea021/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-afcdc2ac").then(t)}},{path:"/pages/cea021/index.html",redirect:"/pages/cea021/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/12.  勤沟通：在信任的基础上，让沟通简单且纯粹.html",redirect:"/pages/cea021/"},{name:"v-559e6528",path:"/pages/f74aaf/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-559e6528").then(t)}},{path:"/pages/f74aaf/index.html",redirect:"/pages/f74aaf/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/13.  建机制：规则流程越建越多，为何效果却越来越差？.html",redirect:"/pages/f74aaf/"},{name:"v-45ad0624",path:"/pages/34fb11/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-45ad0624").then(t)}},{path:"/pages/34fb11/index.html",redirect:"/pages/34fb11/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/15.  找到人：招聘是 Leader 的责任，不是 HR 的.html",redirect:"/pages/34fb11/"},{name:"v-68f58b64",path:"/pages/2c32ab/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-68f58b64").then(t)}},{path:"/pages/2c32ab/index.html",redirect:"/pages/2c32ab/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/16.  能落地：90 天试用期，转正时我们要考察什么？.html",redirect:"/pages/2c32ab/"},{name:"v-46361b41",path:"/pages/70eecd/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-46361b41").then(t)}},{path:"/pages/70eecd/index.html",redirect:"/pages/70eecd/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/18.  晋升：是不是技术到位、项目做好就够了？.html",redirect:"/pages/70eecd/"},{name:"v-ae82e742",path:"/pages/cfd14b/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-ae82e742").then(t)}},{path:"/pages/cfd14b/index.html",redirect:"/pages/cfd14b/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/19.  跨团队：没有汇报线的人和事就是推不动？.html",redirect:"/pages/cfd14b/"},{name:"v-21b382ce",path:"/pages/366b2d/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-21b382ce").then(t)}},{path:"/pages/366b2d/index.html",redirect:"/pages/366b2d/"},{path:"/70.开源产品/10.概要.html",redirect:"/pages/366b2d/"},{name:"v-5e4f50f7",path:"/pages/38ba4d/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-5e4f50f7").then(t)}},{path:"/pages/38ba4d/index.html",redirect:"/pages/38ba4d/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/21.  接手新团队：士气低、交付迟、事故多发，如何下手解决？.html",redirect:"/pages/38ba4d/"},{name:"v-03fd5b0f",path:"/pages/0dcb21/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-03fd5b0f").then(t)}},{path:"/pages/0dcb21/index.html",redirect:"/pages/0dcb21/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/22. 结束语  岁月静好，技术人依然要负重前行.html",redirect:"/pages/0dcb21/"},{name:"v-7eda0003",path:"/pages/4c68c8/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-7eda0003").then(t)}},{path:"/pages/4c68c8/index.html",redirect:"/pages/4c68c8/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/20.  做规划：除了交付和稳定性，还要规划什么？.html",redirect:"/pages/4c68c8/"},{name:"v-222b3d16",path:"/pages/dde270/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-222b3d16").then(t)}},{path:"/pages/dde270/index.html",redirect:"/pages/dde270/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/17.  升级汰换：“心要慈，刀要快”.html",redirect:"/pages/dde270/"},{name:"v-7724aeba",path:"/pages/e59367/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-7724aeba").then(t)}},{path:"/pages/e59367/index.html",redirect:"/pages/e59367/"},{path:"/70.开源产品/20.Dog 智能风控系统.html",redirect:"/pages/e59367/"},{name:"v-6413e9de",path:"/pages/fdeb84/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-6413e9de").then(t)}},{path:"/pages/fdeb84/index.html",redirect:"/pages/fdeb84/"},{path:"/80.敬请期待/10.概要.html",redirect:"/pages/fdeb84/"},{name:"v-dd2b1d86",path:"/pages/7841f5/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-dd2b1d86").then(t)}},{path:"/pages/7841f5/index.html",redirect:"/pages/7841f5/"},{path:"/65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/14.  知人善用：借事修人，借人成事.html",redirect:"/pages/7841f5/"},{name:"v-263d1f18",path:"/pages/990056/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-263d1f18").then(t)}},{path:"/pages/990056/index.html",redirect:"/pages/990056/"},{path:"/80.敬请期待/100.临时笔记.html",redirect:"/pages/990056/"},{name:"v-e3e2bb2c",path:"/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-e3e2bb2c").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-8461995e",path:"/archives/",component:il,beforeEnter:function(n,e,t){Qo("Layout","v-8461995e").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{path:"*",component:il}],sl={title:"Wow4j",description:"一个神奇的个人网站",base:"/wow4j/",headTags:[["link",{rel:"icon",href:"/wow4j/img/favicon.ico"}],["meta",{name:"keywords",content:"vuepress,theme,blog,vdoing"}],["meta",{name:"theme-color",content:"#11a8cd"}],["meta",{name:"wwads-cn-verify",content:"6c4b761a28b734fe93831e3fb400ce87"}],["script",{src:"https://cdn.wwads.cn/js/makemoney.js",type:"text/javascript"}]],pages:[{title:"概要",frontmatter:{title:"概要",date:"2023-03-17T17:07:26.000Z",permalink:"/pages/e9c909/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/100.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/10.%20Skywalking/10.%E6%A6%82%E8%A6%81.html",relativePath:"10.后端开发/100.监控告警/10. Skywalking/10.概要.md",key:"v-ebfe00f4",path:"/pages/e9c909/",headersStr:null,content:" 1.  checkstyle\n\n 2.  proto\n\n 3.  gRPC\n\n 4.  SPI\n\n 5.  ebpf\n\n 6.  docker\n\n 7.  etcd\n\n 8.  k8s\n\n 9.  istio\n\n 10. envoy\n\n 11. graphql\n\n 12. nacos 12。jacoco\n\n 13. jdk 11\n\n本地",normalizedContent:" 1.  checkstyle\n\n 2.  proto\n\n 3.  grpc\n\n 4.  spi\n\n 5.  ebpf\n\n 6.  docker\n\n 7.  etcd\n\n 8.  k8s\n\n 9.  istio\n\n 10. envoy\n\n 11. graphql\n\n 12. nacos 12。jacoco\n\n 13. jdk 11\n\n本地",charsets:{cjk:!0},lastUpdated:"2023/03/27, 10:53:20",lastUpdatedTimestamp:16798856e5},{title:"插件自动化测试",frontmatter:{title:"插件自动化测试",date:"2023-03-23T19:29:25.000Z",permalink:"/pages/2a1bb9/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/100.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/10.%20Skywalking/20.%E6%8F%92%E4%BB%B6%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95.html",relativePath:"10.后端开发/100.监控告警/10. Skywalking/20.插件自动化测试.md",key:"v-3a4e04c8",path:"/pages/2a1bb9/",headersStr:null,content:"插件测试框架",normalizedContent:"插件测试框架",charsets:{cjk:!0},lastUpdated:"2023/03/27, 10:53:20",lastUpdatedTimestamp:16798856e5},{title:"个人使用说明书",frontmatter:{title:"个人使用说明书",date:"2022-12-07T14:23:56.000Z",permalink:"/pages/f380dd/"},regularPath:"/05.%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E4%B9%A6/10.%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E4%B9%A6.html",relativePath:"05.个人使用说明书/10.个人使用说明书.md",key:"v-490bfb71",path:"/pages/f380dd/",headers:[{level:2,title:"引言",slug:"引言",normalizedTitle:"引言",charIndex:2},{level:2,title:"项目经验",slug:"项目经验",normalizedTitle:"项目经验",charIndex:75},{level:2,title:"从业经历的一些亮点",slug:"从业经历的一些亮点",normalizedTitle:"从业经历的一些亮点",charIndex:318}],headersStr:"引言 项目经验 从业经历的一些亮点",content:"# 引言\n\n长期从事一线后端研发相关工作，\n\n有管理15+人的经验\n\n目前，主要从事可观性监控告警APM相关工作，精通高可用、高并发等架构。\n\n\n# 项目经验\n\n 1. 目前，基于全链路追踪 SkyWalking结合公司内部业务，并对标竞品进行产品功能设计，提供给一线开发人员高效的可观测平台。\n 2. 负责过电商 APP 的搜索架构优化，提升系统稳定性；并对搜索效果进行优化，解决搜不准、搜不出等问题。\n 3. 从 0 到 1 自主研发反扒风控系统，对抗一线大厂的爬虫流量，并取得可见的效果。\n 4. 深度阅读过的项目源码: SkyWalking、Dubbo、Elasticsearch、Spring、Canal、JUC等。\n\n\n# 从业经历的一些亮点\n\n 1. 硕士 985\n 2. 大厂工作经历；\n 3. 主导并开源了 Dog 风控系统；\n 4. 在团队内部多次绩效优异；\n 5. 技术文档注重沉淀并且乐于分享，经常会有好的方法论在小组或公司进行推广。\n 6. 懂一些设计知识，并能够实际用于工作中，写出的文档或者PPT/Keynote优于一般人。\n 7. 做过 B 端产品的开发，也做过 C 端产品的架构设计，能够通过多种手段保证服务的稳定性。\n\n个性\n\n技术里面最懂产品，产品里面最懂技术。",normalizedContent:"# 引言\n\n长期从事一线后端研发相关工作，\n\n有管理15+人的经验\n\n目前，主要从事可观性监控告警apm相关工作，精通高可用、高并发等架构。\n\n\n# 项目经验\n\n 1. 目前，基于全链路追踪 skywalking结合公司内部业务，并对标竞品进行产品功能设计，提供给一线开发人员高效的可观测平台。\n 2. 负责过电商 app 的搜索架构优化，提升系统稳定性；并对搜索效果进行优化，解决搜不准、搜不出等问题。\n 3. 从 0 到 1 自主研发反扒风控系统，对抗一线大厂的爬虫流量，并取得可见的效果。\n 4. 深度阅读过的项目源码: skywalking、dubbo、elasticsearch、spring、canal、juc等。\n\n\n# 从业经历的一些亮点\n\n 1. 硕士 985\n 2. 大厂工作经历；\n 3. 主导并开源了 dog 风控系统；\n 4. 在团队内部多次绩效优异；\n 5. 技术文档注重沉淀并且乐于分享，经常会有好的方法论在小组或公司进行推广。\n 6. 懂一些设计知识，并能够实际用于工作中，写出的文档或者ppt/keynote优于一般人。\n 7. 做过 b 端产品的开发，也做过 c 端产品的架构设计，能够通过多种手段保证服务的稳定性。\n\n个性\n\n技术里面最懂产品，产品里面最懂技术。",charsets:{cjk:!0},lastUpdated:"2023/03/31, 10:49:48",lastUpdatedTimestamp:1680230988e3},{title:"SkyWalking ClickHouse 存储插件开发",frontmatter:{title:"SkyWalking ClickHouse 存储插件开发",date:"2023-03-23T19:49:58.000Z",permalink:"/pages/8ac9f6/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/100.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/10.%20Skywalking/30.%20SkyWalking%20ClickHouse%20%E5%AD%98%E5%82%A8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91.html",relativePath:"10.后端开发/100.监控告警/10. Skywalking/30. SkyWalking ClickHouse 存储插件开发.md",key:"v-1b6a3146",path:"/pages/8ac9f6/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/27, 10:53:20",lastUpdatedTimestamp:16798856e5},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:20:49.000Z",permalink:"/pages/19aee3/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/10.%E6%A6%82%E8%A6%81.html",relativePath:"10.后端开发/10.概要.md",key:"v-0cfd1384",path:"/pages/19aee3/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/22, 15:22:51",lastUpdatedTimestamp:1679469771e3},{title:"后端可观测性体系架构设计",frontmatter:{title:"后端可观测性体系架构设计",date:"2023-03-22T14:15:38.000Z",permalink:"/pages/609888/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/100.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/30.%E5%90%8E%E7%AB%AF%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html",relativePath:"10.后端开发/100.监控告警/30.后端可观测性体系架构设计.md",key:"v-558f5374",path:"/pages/609888/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"如何应对爬虫的流量并进行有效狙击？",frontmatter:{title:"如何应对爬虫的流量并进行有效狙击？",date:"2023-03-20T09:57:02.000Z",permalink:"/pages/56c88e/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/110.%E9%98%B2%E7%88%AC%E9%A3%8E%E6%8E%A7/10.%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E7%88%AC%E8%99%AB%E7%9A%84%E6%B5%81%E9%87%8F%E5%B9%B6%E8%BF%9B%E8%A1%8C%E6%9C%89%E6%95%88%E7%8B%99%E5%87%BB%EF%BC%9F.html",relativePath:"10.后端开发/110.防爬风控/10.如何应对爬虫的流量并进行有效狙击？.md",key:"v-8ed93d90",path:"/pages/56c88e/",headers:[{level:2,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:2},{level:2,title:"常规的爬虫手段",slug:"常规的爬虫手段",normalizedTitle:"常规的爬虫手段",charIndex:175},{level:2,title:"爬虫请求的特点",slug:"爬虫请求的特点",normalizedTitle:"爬虫请求的特点",charIndex:209},{level:2,title:"爬虫治理的难点",slug:"爬虫治理的难点",normalizedTitle:"爬虫治理的难点",charIndex:386},{level:2,title:"反扒的一些措施",slug:"反扒的一些措施",normalizedTitle:"反扒的一些措施",charIndex:800},{level:2,title:"推荐优秀的开源反扒风控系统",slug:"推荐优秀的开源反扒风控系统",normalizedTitle:"推荐优秀的开源反扒风控系统",charIndex:812},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:830}],headersStr:"背景 常规的爬虫手段 爬虫请求的特点 爬虫治理的难点 反扒的一些措施 推荐优秀的开源反扒风控系统 总结",content:"# 背景\n\n随着移动互联网的兴起，各大电商平台的竞争越来越激烈。主流电商通过爬虫技术来获取友商的信息，从而凭借信息时差来获取商业竞争的优势。在不断的进攻获取友商的数据，各大主流电商 也在尽力不让自身的数据被友商爬取（即反扒），从而达到我有人无，让自己占领制高点。本文主要跟大家介绍下，爬虫的常用手段以及我们该如何针对这些爬虫采取有效的措施。\n\n\n# 常规的爬虫手段\n\n常规的爬虫手段有：\n\n（1）直接通过接口\n\n\n# 爬虫请求的特点\n\n某个 ip，单位时间内总访问量\n某个 ip，单位时间内的关键页面访问总量\n某个 ip，单位时间内的 userAgent 种类统计\n某个 ip，单位时间内的关键页面最短访问间隔\n某个 ip，单位时间内小于最短访问间隔（自设）的关键页面查询次数\n某个 ip，单位时间内查询不同行程的次数\n某个 ip，单位时间内关键页面访问次数 \n\n\n\n# 爬虫治理的难点\n\n（1）业务对爬虫流量不铭感，只有系统出问题后，才发现爬虫流量影响系统\n（2）即使知道有爬虫流量，认为爬虫治理的投入和产出不成正比\n（3）能够肉眼识别出爬虫的流量，但是没办法用程序自动化手段将这部分流量自动识别出来\n（4）在反扒时，开发人员可能在Java应用层通过限制ip或者用户id频率，来限制非法流量，加大了系统的复杂度，也降低了系统的稳定性\n（5）在技术方案上，懂反爬虫技术的人，不懂实际一线爬虫场景，缺少业务驱动力；一线业务的人员由于涉及到不同领域的技术栈，又不好推进\n（6）爬虫的流量情况各有各的不同，相关人员在用一些离线统计分析的手段时，将反爬虫规则进行硬编码，导致每抓一只爬虫都要编写N次代码，抓取成本高\n（7）没有一个通用的平台能力，让业务方能够根据业务规则，通过平台能力，自动将爬虫抓取，并提供能力给业务方\n（8）反爬虫的治理，缺少长期对抗的心理准备，本质原因还是投入和产出不高\n\n\n\n\n\n# 反扒的一些措施\n\n\n# 推荐优秀的开源反扒风控系统\n\n\n# 总结",normalizedContent:"# 背景\n\n随着移动互联网的兴起，各大电商平台的竞争越来越激烈。主流电商通过爬虫技术来获取友商的信息，从而凭借信息时差来获取商业竞争的优势。在不断的进攻获取友商的数据，各大主流电商 也在尽力不让自身的数据被友商爬取（即反扒），从而达到我有人无，让自己占领制高点。本文主要跟大家介绍下，爬虫的常用手段以及我们该如何针对这些爬虫采取有效的措施。\n\n\n# 常规的爬虫手段\n\n常规的爬虫手段有：\n\n（1）直接通过接口\n\n\n# 爬虫请求的特点\n\n某个 ip，单位时间内总访问量\n某个 ip，单位时间内的关键页面访问总量\n某个 ip，单位时间内的 useragent 种类统计\n某个 ip，单位时间内的关键页面最短访问间隔\n某个 ip，单位时间内小于最短访问间隔（自设）的关键页面查询次数\n某个 ip，单位时间内查询不同行程的次数\n某个 ip，单位时间内关键页面访问次数 \n\n\n\n# 爬虫治理的难点\n\n（1）业务对爬虫流量不铭感，只有系统出问题后，才发现爬虫流量影响系统\n（2）即使知道有爬虫流量，认为爬虫治理的投入和产出不成正比\n（3）能够肉眼识别出爬虫的流量，但是没办法用程序自动化手段将这部分流量自动识别出来\n（4）在反扒时，开发人员可能在java应用层通过限制ip或者用户id频率，来限制非法流量，加大了系统的复杂度，也降低了系统的稳定性\n（5）在技术方案上，懂反爬虫技术的人，不懂实际一线爬虫场景，缺少业务驱动力；一线业务的人员由于涉及到不同领域的技术栈，又不好推进\n（6）爬虫的流量情况各有各的不同，相关人员在用一些离线统计分析的手段时，将反爬虫规则进行硬编码，导致每抓一只爬虫都要编写n次代码，抓取成本高\n（7）没有一个通用的平台能力，让业务方能够根据业务规则，通过平台能力，自动将爬虫抓取，并提供能力给业务方\n（8）反爬虫的治理，缺少长期对抗的心理准备，本质原因还是投入和产出不高\n\n\n\n\n\n# 反扒的一些措施\n\n\n# 推荐优秀的开源反扒风控系统\n\n\n# 总结",charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"MySQL  故障 Checklist",frontmatter:{title:"MySQL  故障 Checklist",date:"2023-03-22T15:11:17.000Z",permalink:"/pages/1d9f9a/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/120.%E7%A8%B3%E5%AE%9A%E6%80%A7%20checklist/10.MySQL%20%20%E6%95%85%E9%9A%9C%20Checklist.html",relativePath:"10.后端开发/120.稳定性 checklist/10.MySQL  故障 Checklist.md",key:"v-67084c61",path:"/pages/1d9f9a/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"常见 Java 编码故障 Checklist",frontmatter:{title:"常见 Java 编码故障 Checklist",date:"2023-03-22T15:13:11.000Z",permalink:"/pages/0b8f06/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/120.%E7%A8%B3%E5%AE%9A%E6%80%A7%20checklist/05.%E5%B8%B8%E8%A7%81%20Java%20%E7%BC%96%E7%A0%81%E6%95%85%E9%9A%9C%20Checklist.html",relativePath:"10.后端开发/120.稳定性 checklist/05.常见 Java 编码故障 Checklist.md",key:"v-1350d48d",path:"/pages/0b8f06/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"Kafka 故障 Checklist",frontmatter:{title:"Kafka 故障 Checklist",date:"2023-03-22T15:12:13.000Z",permalink:"/pages/13ebf7/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/120.%E7%A8%B3%E5%AE%9A%E6%80%A7%20checklist/30.Kafka%20%E6%95%85%E9%9A%9C%20Checklist.html",relativePath:"10.后端开发/120.稳定性 checklist/30.Kafka 故障 Checklist.md",key:"v-64a6b56c",path:"/pages/13ebf7/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"Elasticsearch 故障 Checklist",frontmatter:{title:"Elasticsearch 故障 Checklist",date:"2023-03-22T15:12:35.000Z",permalink:"/pages/64a589/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/120.%E7%A8%B3%E5%AE%9A%E6%80%A7%20checklist/40.Elasticsearch%20%E6%95%85%E9%9A%9C%20Checklist.html",relativePath:"10.后端开发/120.稳定性 checklist/40.Elasticsearch 故障 Checklist.md",key:"v-f7d3f5ec",path:"/pages/64a589/",headersStr:null,content:" 1. 报表导出，注意不要让ES CPU 和 内存密集",normalizedContent:" 1. 报表导出，注意不要让es cpu 和 内存密集",charsets:{cjk:!0},lastUpdated:"2023/03/27, 10:53:20",lastUpdatedTimestamp:16798856e5},{title:"Redis 故障 Checklist",frontmatter:{title:"Redis 故障 Checklist",date:"2023-03-22T15:11:41.000Z",permalink:"/pages/14973a/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/120.%E7%A8%B3%E5%AE%9A%E6%80%A7%20checklist/20.Redis%20%E6%95%85%E9%9A%9C%20Checklist.html",relativePath:"10.后端开发/120.稳定性 checklist/20.Redis 故障 Checklist.md",key:"v-60d325ec",path:"/pages/14973a/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"Jacoco",frontmatter:{title:"Jacoco",date:"2023-03-24T14:31:03.000Z",permalink:"/pages/cf2bd0/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/130.%E6%95%88%E8%83%BD%E5%B7%A5%E5%85%B7/10.Jacoco.html",relativePath:"10.后端开发/130.效能工具/10.Jacoco.md",key:"v-0d49bda2",path:"/pages/cf2bd0/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/27, 10:53:20",lastUpdatedTimestamp:16798856e5},{title:"Sonar",frontmatter:{title:"Sonar",date:"2023-03-27T11:44:07.000Z",permalink:"/pages/1c8450/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/130.%E6%95%88%E8%83%BD%E5%B7%A5%E5%85%B7/30.Sonar.html",relativePath:"10.后端开发/130.效能工具/30.Sonar.md",key:"v-282efb17",path:"/pages/1c8450/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/31, 10:49:48",lastUpdatedTimestamp:1680230988e3},{title:"Autogit",frontmatter:{title:"Autogit",date:"2023-03-27T11:42:11.000Z",permalink:"/pages/09d86f/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/130.%E6%95%88%E8%83%BD%E5%B7%A5%E5%85%B7/20.Autogit.html",relativePath:"10.后端开发/130.效能工具/20.Autogit.md",key:"v-50c5a537",path:"/pages/09d86f/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/31, 10:49:48",lastUpdatedTimestamp:1680230988e3},{title:"代码CheckList",frontmatter:{title:"代码CheckList",date:"2023-03-27T11:44:35.000Z",permalink:"/pages/759e84/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/130.%E6%95%88%E8%83%BD%E5%B7%A5%E5%85%B7/40.%E4%BB%A3%E7%A0%81CheckList.html",relativePath:"10.后端开发/130.效能工具/40.代码CheckList.md",key:"v-d7a76ed8",path:"/pages/759e84/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/31, 10:49:48",lastUpdatedTimestamp:1680230988e3},{title:"规则引擎Drools",frontmatter:{title:"规则引擎Drools",date:"2023-03-28T15:12:45.000Z",permalink:"/pages/e54383/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/130.%E6%95%88%E8%83%BD%E5%B7%A5%E5%85%B7/60.%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8EDrools.html",relativePath:"10.后端开发/130.效能工具/60.规则引擎Drools.md",key:"v-8583f28a",path:"/pages/e54383/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/31, 10:49:48",lastUpdatedTimestamp:1680230988e3},{title:"Arthas",frontmatter:{title:"Arthas",date:"2023-03-28T14:58:01.000Z",permalink:"/pages/100d77/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/130.%E6%95%88%E8%83%BD%E5%B7%A5%E5%85%B7/50.Arthas.html",relativePath:"10.后端开发/130.效能工具/50.Arthas.md",key:"v-004b7197",path:"/pages/100d77/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/31, 10:49:48",lastUpdatedTimestamp:1680230988e3},{title:"模板引擎FreeMarker",frontmatter:{title:"模板引擎FreeMarker",date:"2023-03-28T15:13:27.000Z",permalink:"/pages/40647d/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/130.%E6%95%88%E8%83%BD%E5%B7%A5%E5%85%B7/70.%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8EFreeMarker.html",relativePath:"10.后端开发/130.效能工具/70.模板引擎FreeMarker.md",key:"v-41310865",path:"/pages/40647d/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/31, 10:49:48",lastUpdatedTimestamp:1680230988e3},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:30:30.000Z",permalink:"/pages/68c4f4/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/20.%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/10.%E6%A6%82%E8%A6%81.html",relativePath:"10.后端开发/20.面试八股文/10.概要.md",key:"v-3b96a73e",path:"/pages/68c4f4/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/01/31, 09:21:58",lastUpdatedTimestamp:1675128118e3},{title:"共享变量在线程中的可见性问题分析",frontmatter:{title:"共享变量在线程中的可见性问题分析",date:"2023-02-01T10:13:13.000Z",permalink:"/pages/b9c58a/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/20.%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/20.%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E5%9C%A8%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90.html",relativePath:"10.后端开发/20.面试八股文/20.共享变量在线程中的可见性问题分析.md",key:"v-0fc6e384",path:"/pages/b9c58a/",headers:[{level:2,title:"导致共享变量在线程间不可见的原因：",slug:"导致共享变量在线程间不可见的原因",normalizedTitle:"导致共享变量在线程间不可见的原因：",charIndex:2},{level:3,title:"可见性-synchronized",slug:"可见性-synchronized",normalizedTitle:"可见性-synchronized",charIndex:81},{level:3,title:"可见性-volatile",slug:"可见性-volatile",normalizedTitle:"可见性-volatile",charIndex:221},{level:3,title:"问题：只利用volatile来修饰计数器，是否能够保证计数器是原子操作的了？答案是不能的。",slug:"问题-只利用volatile来修饰计数器-是否能够保证计数器是原子操作的了-答案是不能的。",normalizedTitle:"问题：只利用volatile来修饰计数器，是否能够保证计数器是原子操作的了？答案是不能的。",charIndex:408}],headersStr:"导致共享变量在线程间不可见的原因： 可见性-synchronized 可见性-volatile 问题：只利用volatile来修饰计数器，是否能够保证计数器是原子操作的了？答案是不能的。",content:'# 导致共享变量在线程间不可见的原因：\n\n 1. 线程交叉执行\n 2. 重排序结合线程交叉执行\n 3. 共享变量更新后的值没有在工作内存与主存间及时更新\n\n\n# 可见性-synchronized\n\nJVM中关于synchronized的两条规定：\n\n 1. 线程解锁前，必须把共享变量的最新值刷到主内存\n 2. 线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值（注意：加锁和解锁是同一把锁）\n\n\n# 可见性-volatile\n\n通过加入内存屏障和禁止重排序优化来实现（对于被volatile变量的操作都是直接针对主内存）\n\n 1. 对volatile变量写操作时，会在写操作后加入一条store屏障指令，将本地内存中的共享变量值刷新到主内存\n 2. 对volatile变量读操作时，会在读操作前加入一条load屏障指令，从主内存中读取共享变量\n\n图片未正常显示\n\n\n\n\n# 问题：只利用volatile来修饰计数器，是否能够保证计数器是原子操作的了？答案是不能的。\n\n比如如下代码：（在count前加入volatile修饰）\n\npublic class AtomicExample7 {\n\n    //  请求总数\n    public static int clientTotal = 5000;\n\n    // 同时并发执行的线程数\n    public static int threadTotal = 200;\n\n    public static volatile int count = 0;\n\n    public static void main(String[] args) throws InterruptedException {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        final Semaphore semaphore = new Semaphore(threadTotal);\n        final CountDownLatch countDownLatch = new CountDownLatch(clientTotal);\n        for (int i = 0; i< clientTotal; i ++) {\n            executorService.execute(()->{\n                try {\n                    semaphore.acquire();\n                    add();\n                    semaphore.release();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                countDownLatch.countDown();\n            });\n        }\n        countDownLatch.await();\n        executorService.shutdown();\n        log.info("count:{}", count);\n\n    }\n\n    private static void add() {\n        count ++;\n    }\n}\n\n\n输出：\n\n[main] INFO com.example.concurrent.example.count.AtomicExample7 - count:4977、\n\n分析：\n\n在上面的代码中的计数变量count前加入了volatile保证变量count的读和写能够及时的更新到内存中，但是运行出来的结果仍然是非线程安全的，原因是在cout++的操作，可以分为三步：\n\n 1. 取得count的值；\n 2. 对count进行加1操作；\n 3. 写count的值到主内存中；\n\n上面这三步合起来就不是线程安全的，比如，两个线程可能同时取得count的值，然后，同时进行加1操作，并写回主存，这样就丢掉了一次加1的操作。 即：voliatile不适用于计数的场景。',normalizedContent:'# 导致共享变量在线程间不可见的原因：\n\n 1. 线程交叉执行\n 2. 重排序结合线程交叉执行\n 3. 共享变量更新后的值没有在工作内存与主存间及时更新\n\n\n# 可见性-synchronized\n\njvm中关于synchronized的两条规定：\n\n 1. 线程解锁前，必须把共享变量的最新值刷到主内存\n 2. 线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值（注意：加锁和解锁是同一把锁）\n\n\n# 可见性-volatile\n\n通过加入内存屏障和禁止重排序优化来实现（对于被volatile变量的操作都是直接针对主内存）\n\n 1. 对volatile变量写操作时，会在写操作后加入一条store屏障指令，将本地内存中的共享变量值刷新到主内存\n 2. 对volatile变量读操作时，会在读操作前加入一条load屏障指令，从主内存中读取共享变量\n\n图片未正常显示\n\n\n\n\n# 问题：只利用volatile来修饰计数器，是否能够保证计数器是原子操作的了？答案是不能的。\n\n比如如下代码：（在count前加入volatile修饰）\n\npublic class atomicexample7 {\n\n    //  请求总数\n    public static int clienttotal = 5000;\n\n    // 同时并发执行的线程数\n    public static int threadtotal = 200;\n\n    public static volatile int count = 0;\n\n    public static void main(string[] args) throws interruptedexception {\n        executorservice executorservice = executors.newcachedthreadpool();\n        final semaphore semaphore = new semaphore(threadtotal);\n        final countdownlatch countdownlatch = new countdownlatch(clienttotal);\n        for (int i = 0; i< clienttotal; i ++) {\n            executorservice.execute(()->{\n                try {\n                    semaphore.acquire();\n                    add();\n                    semaphore.release();\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n                countdownlatch.countdown();\n            });\n        }\n        countdownlatch.await();\n        executorservice.shutdown();\n        log.info("count:{}", count);\n\n    }\n\n    private static void add() {\n        count ++;\n    }\n}\n\n\n输出：\n\n[main] info com.example.concurrent.example.count.atomicexample7 - count:4977、\n\n分析：\n\n在上面的代码中的计数变量count前加入了volatile保证变量count的读和写能够及时的更新到内存中，但是运行出来的结果仍然是非线程安全的，原因是在cout++的操作，可以分为三步：\n\n 1. 取得count的值；\n 2. 对count进行加1操作；\n 3. 写count的值到主内存中；\n\n上面这三步合起来就不是线程安全的，比如，两个线程可能同时取得count的值，然后，同时进行加1操作，并写回主存，这样就丢掉了一次加1的操作。 即：voliatile不适用于计数的场景。',charsets:{cjk:!0},lastUpdated:"2023/02/06, 09:35:40",lastUpdatedTimestamp:167564734e4},{title:"草稿",frontmatter:{title:"草稿",date:"2023-02-07T19:29:36.000Z",permalink:"/pages/96528a/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/20.%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/50.%E8%8D%89%E7%A8%BF.html",relativePath:"10.后端开发/20.面试八股文/50.草稿.md",key:"v-08ba378c",path:"/pages/96528a/",headersStr:null,content:" 1. 分布式\n\n * 分布式事务： TCC、saga at 模式\n * 分布式锁\n * 分布式 ID\n * CAP、2PC 理论知识\n\n 2. 延迟队列\n\n 3. Redis\n\n * Redis 跳表的实现原理\n * Redis ZSet 底层原理\n * Redis 分布式锁\n * 布隆过滤器\n * 集群、哨兵、主从\n * hyperlog\n * 缓存穿透\n * 空值方案\n * 延迟双删，保证缓存一致性\n * 缓存和数据库的一致性方案，先删后写，还是先写后删\n * GEO 存储经纬度、LRU 实现方案\n * Redis 单线程\n * Redisson 分布式锁\n * redis 大 key\n * Lua 脚本，保证事务性\n * 热点数据（热点读、热点写）\n * 集群模式下 Lua 脚本如何执行？\n\n 4. Java\n\n * JVM 调优的具体参数 大对象 Full GC OOM排查思路\n * JUC(并发容器)、synchronized 原理\n * G1 垃圾收集器\n * 堆外内存排查\n * CMS 退化的场景\n * 类加载机制\n * 动态代理有哪几种？\n * HashMap 数据结构\n * Java 线程池\n * 并发请求：CountDownLatch\n * Volatile Sychronized reentrantlock\n * ThreadLocal 软、弱引用、与线程池的关系\n * CyclicBarrier\n * CompletableFuture\n * ConcurrentHashMap\n * jmap、jstack\n * 双亲委派机制\n * 避免死锁\n * 内存泄漏、内存区域\n * AQS\n * 新生代可以设置比老年代大吗？\n * Jstack、Jmap\n * SPI\n\n 5. Spring\n\n * AOP、AOP 在什么场景下会失效。\n * IOC\n * 循环依赖、如何检测循环依赖\n * @Transaction 的传播属性\n * Spring Bean 的生命周期\n * SPI 机制\n\n 5. Dubbo\n\n * Dubbo 注册中心不可用，Dubbo 如何优化\n * Dubbo 超时、重试\n * Duboo 的注册机制\n\n 6. MySQL\n\n * 聚簇索引/非聚簇索引\n * B树、B+Tree原理\n * 联合索引\n * 隔离级别\n * 幻读、MVCC\n * 索引失效的场景\n * 最左匹配\n * 间隙锁、undo log、 redo log 的作用\n * InnoDB 与 MYISAM 的区别？\n * explain\n * 分布分表、分区表\n * 索引覆盖、索引下推\n * MySQL 死锁触发原因 Dead Lock\n * binlog 的三种数据格式：statement、row 及 mixed 格式。\n * MySQL 历史数据如何归档\n * 一条 SQL 语句在 MySQL 中的执行过程\n\n 7. 算法\n\n * 一次性 Hash 算法的原理\n * TOP N\n * 中位数查找\n * 检测链表有环\n\n 8. Kafka 消息队列\n\n * 消息投递和消费的可靠性以及顺序**\n * reblance\n * broker、partition、分区、副本、exactly once\n\n 9. ElasticSearch\n\n * 倒排索引\n * ES 分片和副本、深度分页、Lucence 文档更新流程\n * TF-IDF 的概念\n * ES 的节点类型分几种：Master节点、Data 节点、协调节点\n * Translog\n\n 10. 高可用与线上问题排查\n\n * 限流算法有哪些？集中式、单机式，漏桶算法、令牌桶算法\n * 内存泄漏、CPU 突增、CPU被打满的排查思路。\n * Arthas\n * 线上接口慢排查思路\n\n 11. Zookeeper\n\n * zk 的节点类型\n\n 12. 场景题\n\n * 订单号后几位查询\n * 日签到场景\n * 不同时间段不同配送时间\n * 日活场景：HyperLogLog\n * 商品库存批量扣减的方案（容易死锁）、Redis Lua脚本 脚本 批量扣减\n\n 13. 网络\n\n * TCP/IP 拥塞 滑动\n\n 14. 加密 非对称加密、AES 加密\n\n 15. 好的模式\n\n * DDD 领域驱动设计（行为、属性、聚合根）\n * 单点登录\n\n 16. Linux\n\n * Linux 常用排查命令\n\n 17. 设计模式\n\n 18. 场景\n\n * 一天的工作是如何安排的？\n * APM Skywalking 的源码深入的如何？\n * APM 的插件开发流程是怎么样的？\n * 聊一聊字节码增强技术？\n * 团队成员的工作是如何安排的？\n\nPOM与BOM的区别？",normalizedContent:" 1. 分布式\n\n * 分布式事务： tcc、saga at 模式\n * 分布式锁\n * 分布式 id\n * cap、2pc 理论知识\n\n 2. 延迟队列\n\n 3. redis\n\n * redis 跳表的实现原理\n * redis zset 底层原理\n * redis 分布式锁\n * 布隆过滤器\n * 集群、哨兵、主从\n * hyperlog\n * 缓存穿透\n * 空值方案\n * 延迟双删，保证缓存一致性\n * 缓存和数据库的一致性方案，先删后写，还是先写后删\n * geo 存储经纬度、lru 实现方案\n * redis 单线程\n * redisson 分布式锁\n * redis 大 key\n * lua 脚本，保证事务性\n * 热点数据（热点读、热点写）\n * 集群模式下 lua 脚本如何执行？\n\n 4. java\n\n * jvm 调优的具体参数 大对象 full gc oom排查思路\n * juc(并发容器)、synchronized 原理\n * g1 垃圾收集器\n * 堆外内存排查\n * cms 退化的场景\n * 类加载机制\n * 动态代理有哪几种？\n * hashmap 数据结构\n * java 线程池\n * 并发请求：countdownlatch\n * volatile sychronized reentrantlock\n * threadlocal 软、弱引用、与线程池的关系\n * cyclicbarrier\n * completablefuture\n * concurrenthashmap\n * jmap、jstack\n * 双亲委派机制\n * 避免死锁\n * 内存泄漏、内存区域\n * aqs\n * 新生代可以设置比老年代大吗？\n * jstack、jmap\n * spi\n\n 5. spring\n\n * aop、aop 在什么场景下会失效。\n * ioc\n * 循环依赖、如何检测循环依赖\n * @transaction 的传播属性\n * spring bean 的生命周期\n * spi 机制\n\n 5. dubbo\n\n * dubbo 注册中心不可用，dubbo 如何优化\n * dubbo 超时、重试\n * duboo 的注册机制\n\n 6. mysql\n\n * 聚簇索引/非聚簇索引\n * b树、b+tree原理\n * 联合索引\n * 隔离级别\n * 幻读、mvcc\n * 索引失效的场景\n * 最左匹配\n * 间隙锁、undo log、 redo log 的作用\n * innodb 与 myisam 的区别？\n * explain\n * 分布分表、分区表\n * 索引覆盖、索引下推\n * mysql 死锁触发原因 dead lock\n * binlog 的三种数据格式：statement、row 及 mixed 格式。\n * mysql 历史数据如何归档\n * 一条 sql 语句在 mysql 中的执行过程\n\n 7. 算法\n\n * 一次性 hash 算法的原理\n * top n\n * 中位数查找\n * 检测链表有环\n\n 8. kafka 消息队列\n\n * 消息投递和消费的可靠性以及顺序**\n * reblance\n * broker、partition、分区、副本、exactly once\n\n 9. elasticsearch\n\n * 倒排索引\n * es 分片和副本、深度分页、lucence 文档更新流程\n * tf-idf 的概念\n * es 的节点类型分几种：master节点、data 节点、协调节点\n * translog\n\n 10. 高可用与线上问题排查\n\n * 限流算法有哪些？集中式、单机式，漏桶算法、令牌桶算法\n * 内存泄漏、cpu 突增、cpu被打满的排查思路。\n * arthas\n * 线上接口慢排查思路\n\n 11. zookeeper\n\n * zk 的节点类型\n\n 12. 场景题\n\n * 订单号后几位查询\n * 日签到场景\n * 不同时间段不同配送时间\n * 日活场景：hyperloglog\n * 商品库存批量扣减的方案（容易死锁）、redis lua脚本 脚本 批量扣减\n\n 13. 网络\n\n * tcp/ip 拥塞 滑动\n\n 14. 加密 非对称加密、aes 加密\n\n 15. 好的模式\n\n * ddd 领域驱动设计（行为、属性、聚合根）\n * 单点登录\n\n 16. linux\n\n * linux 常用排查命令\n\n 17. 设计模式\n\n 18. 场景\n\n * 一天的工作是如何安排的？\n * apm skywalking 的源码深入的如何？\n * apm 的插件开发流程是怎么样的？\n * 聊一聊字节码增强技术？\n * 团队成员的工作是如何安排的？\n\npom与bom的区别？",charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"如何设计延时消息",frontmatter:{title:"如何设计延时消息",date:"2023-02-06T09:40:18.000Z",permalink:"/pages/ccdab3/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/20.%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87/30.%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%BB%B6%E6%97%B6%E6%B6%88%E6%81%AF.html",relativePath:"10.后端开发/20.面试八股文/30.如何设计延时消息.md",key:"v-1627a188",path:"/pages/ccdab3/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"业务线程池不丢 traceId 的方法",frontmatter:{title:"业务线程池不丢 traceId 的方法",date:"2022-03-26T15:52:38.000Z",permalink:"/pages/87518c/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/05.%E4%B8%9A%E5%8A%A1%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%8D%E4%B8%A2%20traceId%20%E7%9A%84%E6%96%B9%E6%B3%95.html",relativePath:"10.后端开发/40.服务端小技巧合集/05.业务线程池不丢 traceId 的方法.md",key:"v-12287d73",path:"/pages/87518c/",headers:[{level:2,title:"1 背景",slug:"_1-背景",normalizedTitle:"1 背景",charIndex:2},{level:2,title:"2 实现代码",slug:"_2-实现代码",normalizedTitle:"2 实现代码",charIndex:199},{level:2,title:"3 效果",slug:"_3-效果",normalizedTitle:"3 效果",charIndex:3165}],headersStr:"1 背景 2 实现代码 3 效果",content:'# 1 背景\n\n----------------------------------------\n\n通常，我们会在日志中，通过 traceId 来进行一次完整请求日志的定位，而 traceId 是保存在 MDC 的本地线程中，当主线程开启了一个异步线程时，traceId 就会丢失。本方案，通过线程池中的装饰器，来将父线程中的traceId传递给子线程，从而保证 traceId 不丢失。\n\n\n# 2 实现代码\n\n----------------------------------------\n\n/**\n * redis 操作线程池\n */\n@Bean(value = "redisOperatorThreadPoolTaskExecutor")\npublic ThreadPoolTaskExecutor redisOperatorThreadPoolTaskExecutor() {\n    // todo 监听线程池使用的情况\n\n    return getThreadPoolTaskExecutor(redisOperatorThreadPoolProperties);\n}\n\n/**\n * 根据线程池的属性值获取对应线程的设置\n *\n * @param baseThreadPoolProperties 线程池配置信息\n * @return 线程池\n */\nprivate ThreadPoolTaskExecutor getThreadPoolTaskExecutor(BaseThreadPoolProperties baseThreadPoolProperties) {\n    ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();\n    if (StringUtils.isNotBlank(baseThreadPoolProperties.getThreadGroupName())) {\n        threadPoolTaskExecutor.setThreadGroupName(baseThreadPoolProperties.getThreadGroupName());\n    }\n    if (StringUtils.isNotBlank(baseThreadPoolProperties.getThreadNamePrefix())) {\n        threadPoolTaskExecutor.setThreadNamePrefix(baseThreadPoolProperties.getThreadNamePrefix());\n    }\n    if (null != baseThreadPoolProperties.getCorePoolSize() && baseThreadPoolProperties.getCorePoolSize() > 0) {\n        threadPoolTaskExecutor.setCorePoolSize(baseThreadPoolProperties.getCorePoolSize());\n    }\n    if (null != baseThreadPoolProperties.getQueueCapacity() && baseThreadPoolProperties.getQueueCapacity() > 0) {\n        threadPoolTaskExecutor.setQueueCapacity(baseThreadPoolProperties.getQueueCapacity());\n    }\n    if (null != baseThreadPoolProperties.getMaxPoolSize() && baseThreadPoolProperties.getMaxPoolSize() > 0) {\n        threadPoolTaskExecutor.setMaxPoolSize(baseThreadPoolProperties.getMaxPoolSize());\n    }\n    if (null != baseThreadPoolProperties.getKeepAliveSeconds() && baseThreadPoolProperties.getKeepAliveSeconds() > 0) {\n        threadPoolTaskExecutor.setKeepAliveSeconds(baseThreadPoolProperties.getKeepAliveSeconds());\n    }\n    // 设置拒绝策略\n    if (StringUtils.isNotBlank(baseThreadPoolProperties.getRejectedPolicy())) {\n        ThreadPoolRejectedPolicyEnum threadPoolRejectedPolicyEnum = ThreadPoolRejectedPolicyEnum.toEnum(baseThreadPoolProperties.getRejectedPolicy());\n        if (null != threadPoolRejectedPolicyEnum) {\n            threadPoolTaskExecutor.setRejectedExecutionHandler(threadPoolRejectedPolicyEnum.getRejectedExecutionHandler());\n        } else {\n            log.warn("Not exist rejectedPolicy:{}, return threadPoolRejectedPolicyEnum null.", baseThreadPoolProperties.getRejectedPolicy());\n        }\n    }\n    // 设置MdcRunnable\n    threadPoolTaskExecutor.setTaskDecorator(new MdcTaskDecorator());\n    return threadPoolTaskExecutor;\n}\n\n/**\n * 主线程traceId传入到子线程（注意：线程池池化） 核心代码\n */\nprivate static class MdcTaskDecorator implements TaskDecorator {\n\n    @Override\n    public Runnable decorate(Runnable runnable) {\n        String traceId = MDC.get(TRACE_ID);\n        return () -> {\n            try {\n                MDC.put(TRACE_ID, traceId);\n                runnable.run();\n            } finally {\n                MDC.remove(TRACE_ID);\n            }\n        };\n    }\n}\n\n\n\n# 3 效果\n\n异步线程的traceId 和 主线程中的 traceId 一致，从而保证了业务在查看日志时，能够通过 traceId 完成串联一次完整请求的所有日志（包括异步线程中的日志）。',normalizedContent:'# 1 背景\n\n----------------------------------------\n\n通常，我们会在日志中，通过 traceid 来进行一次完整请求日志的定位，而 traceid 是保存在 mdc 的本地线程中，当主线程开启了一个异步线程时，traceid 就会丢失。本方案，通过线程池中的装饰器，来将父线程中的traceid传递给子线程，从而保证 traceid 不丢失。\n\n\n# 2 实现代码\n\n----------------------------------------\n\n/**\n * redis 操作线程池\n */\n@bean(value = "redisoperatorthreadpooltaskexecutor")\npublic threadpooltaskexecutor redisoperatorthreadpooltaskexecutor() {\n    // todo 监听线程池使用的情况\n\n    return getthreadpooltaskexecutor(redisoperatorthreadpoolproperties);\n}\n\n/**\n * 根据线程池的属性值获取对应线程的设置\n *\n * @param basethreadpoolproperties 线程池配置信息\n * @return 线程池\n */\nprivate threadpooltaskexecutor getthreadpooltaskexecutor(basethreadpoolproperties basethreadpoolproperties) {\n    threadpooltaskexecutor threadpooltaskexecutor = new threadpooltaskexecutor();\n    if (stringutils.isnotblank(basethreadpoolproperties.getthreadgroupname())) {\n        threadpooltaskexecutor.setthreadgroupname(basethreadpoolproperties.getthreadgroupname());\n    }\n    if (stringutils.isnotblank(basethreadpoolproperties.getthreadnameprefix())) {\n        threadpooltaskexecutor.setthreadnameprefix(basethreadpoolproperties.getthreadnameprefix());\n    }\n    if (null != basethreadpoolproperties.getcorepoolsize() && basethreadpoolproperties.getcorepoolsize() > 0) {\n        threadpooltaskexecutor.setcorepoolsize(basethreadpoolproperties.getcorepoolsize());\n    }\n    if (null != basethreadpoolproperties.getqueuecapacity() && basethreadpoolproperties.getqueuecapacity() > 0) {\n        threadpooltaskexecutor.setqueuecapacity(basethreadpoolproperties.getqueuecapacity());\n    }\n    if (null != basethreadpoolproperties.getmaxpoolsize() && basethreadpoolproperties.getmaxpoolsize() > 0) {\n        threadpooltaskexecutor.setmaxpoolsize(basethreadpoolproperties.getmaxpoolsize());\n    }\n    if (null != basethreadpoolproperties.getkeepaliveseconds() && basethreadpoolproperties.getkeepaliveseconds() > 0) {\n        threadpooltaskexecutor.setkeepaliveseconds(basethreadpoolproperties.getkeepaliveseconds());\n    }\n    // 设置拒绝策略\n    if (stringutils.isnotblank(basethreadpoolproperties.getrejectedpolicy())) {\n        threadpoolrejectedpolicyenum threadpoolrejectedpolicyenum = threadpoolrejectedpolicyenum.toenum(basethreadpoolproperties.getrejectedpolicy());\n        if (null != threadpoolrejectedpolicyenum) {\n            threadpooltaskexecutor.setrejectedexecutionhandler(threadpoolrejectedpolicyenum.getrejectedexecutionhandler());\n        } else {\n            log.warn("not exist rejectedpolicy:{}, return threadpoolrejectedpolicyenum null.", basethreadpoolproperties.getrejectedpolicy());\n        }\n    }\n    // 设置mdcrunnable\n    threadpooltaskexecutor.settaskdecorator(new mdctaskdecorator());\n    return threadpooltaskexecutor;\n}\n\n/**\n * 主线程traceid传入到子线程（注意：线程池池化） 核心代码\n */\nprivate static class mdctaskdecorator implements taskdecorator {\n\n    @override\n    public runnable decorate(runnable runnable) {\n        string traceid = mdc.get(trace_id);\n        return () -> {\n            try {\n                mdc.put(trace_id, traceid);\n                runnable.run();\n            } finally {\n                mdc.remove(trace_id);\n            }\n        };\n    }\n}\n\n\n\n# 3 效果\n\n异步线程的traceid 和 主线程中的 traceid 一致，从而保证了业务在查看日志时，能够通过 traceid 完成串联一次完整请求的所有日志（包括异步线程中的日志）。',charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"byte buddy 实现链路上所有方法耗时打印",frontmatter:{title:"byte buddy 实现链路上所有方法耗时打印",date:"2022-03-26T15:49:11.000Z",permalink:"/pages/909b0e/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/03.byte%20buddy%20%E5%AE%9E%E7%8E%B0%E9%93%BE%E8%B7%AF%E4%B8%8A%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95%E8%80%97%E6%97%B6%E6%89%93%E5%8D%B0.html",relativePath:"10.后端开发/40.服务端小技巧合集/03.byte buddy 实现链路上所有方法耗时打印.md",key:"v-32ae209b",path:"/pages/909b0e/",headers:[{level:2,title:"1. 需求背景",slug:"_1-需求背景",normalizedTitle:"1. 需求背景",charIndex:2},{level:2,title:"2. 实现思路",slug:"_2-实现思路",normalizedTitle:"2. 实现思路",charIndex:59},{level:2,title:"3. 基于 bytebuddy 实现",slug:"_3-基于-bytebuddy-实现",normalizedTitle:"3. 基于 bytebuddy 实现",charIndex:248},{level:3,title:"3.1  maven 项目java-agent-demo",slug:"_3-1-maven-项目java-agent-demo",normalizedTitle:"3.1  maven 项目java-agent-demo",charIndex:null},{level:3,title:"3.2  项目  java-agent-user 来进行验证",slug:"_3-2-项目-java-agent-user-来进行验证",normalizedTitle:"3.2  项目  java-agent-user 来进行验证",charIndex:null},{level:3,title:"3.3  在工程 java-agent-user 中执行命令",slug:"_3-3-在工程-java-agent-user-中执行命令",normalizedTitle:"3.3  在工程 java-agent-user 中执行命令",charIndex:null},{level:3,title:"3.4 执行效果",slug:"_3-4-执行效果",normalizedTitle:"3.4 执行效果",charIndex:5873},{level:2,title:"4. 总结",slug:"_4-总结",normalizedTitle:"4. 总结",charIndex:5939}],headersStr:"1. 需求背景 2. 实现思路 3. 基于 bytebuddy 实现 3.1  maven 项目java-agent-demo 3.2  项目  java-agent-user 来进行验证 3.3  在工程 java-agent-user 中执行命令 3.4 执行效果 4. 总结",content:'# 1. 需求背景\n\n业务上需要实现对指定包路径下，所有方法的请求耗时进行打印，要求尽量不要与核心业务耦合。\n\n\n# 2. 实现思路\n\n如果想实现对业务尽量无感，且打印每个方法的耗时，先排除掉：在业务中直接进行日志打印耗时。主要实现思路有：\n\n 1. 利用 AOP 切面来实现\n 2. 利用字节码 agent 来实现\n\n由于网络上对于使用 AOP 切面来实现该功能的例子比较多，这里重点介绍下如何利用 字节码 agent 来实现，具体的字节码相关的，用的是 bytebuddy 来实现。\n\n\n# 3. 基于 bytebuddy 实现\n\n基于 bytebuddy 实现的步骤：\n\n\n# 3.1 maven 项目java-agent-demo\n\n 1. 项目的 pom.xml 的文件如下：\n\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n\n    <groupId>com.tim</groupId>\n    <version>1.0.0-SNAPSHOT</version>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>java-agent-demo</artifactId>\n\n    <dependencies>\n        <dependency>\n            <groupId>net.bytebuddy</groupId>\n            <artifactId>byte-buddy</artifactId>\n            <version>1.9.2</version>\n        </dependency>\n        <dependency>\n            <groupId>net.bytebuddy</groupId>\n            <artifactId>byte-buddy-agent</artifactId>\n            <version>1.9.2</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-assembly-plugin</artifactId>\n                <configuration>\n                    <appendAssemblyId>false</appendAssemblyId>\n                    <descriptorRefs>\n                        <descriptorRef>jar-with-dependencies</descriptorRef>\n                    </descriptorRefs>\n                    <archive>\n                        \x3c!-- 自动添加 META-INF/MAINFEST.MF --\x3e\n                        <manifest>\n                            <addClasspath>true</addClasspath>\n                        </manifest>\n                        <manifestEntries>\n                            <Premain-Class>PreMainAgent</Premain-Class>\n                            <Agent-Class>PreMainAgent</Agent-Class>\n                            <Can-Redefine-Classes>true</Can-Redefine-Classes>\n                            <Can-Retransform-Classes>true</Can-Retransform-Classes>\n                        </manifestEntries>\n                    </archive>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>make-assembly</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>single</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n    </properties>\n\n</project>\n\n\n 2. 新增一个类 PreMainAgent.java，里面添加静态方法 premain\n\nimport net.bytebuddy.agent.builder.AgentBuilder;\nimport net.bytebuddy.description.method.MethodDescription;\nimport net.bytebuddy.description.type.TypeDescription;\nimport net.bytebuddy.dynamic.DynamicType;\nimport net.bytebuddy.implementation.MethodDelegation;\nimport net.bytebuddy.matcher.ElementMatchers;\nimport net.bytebuddy.utility.JavaModule;\n\nimport java.lang.instrument.Instrumentation;\n\npublic class PreMainAgent {\n\n    // 定义要拦截的包路径前缀\n    private static final String PACKAGE_NAME_PREFIX = "com.agent";\n\n    public static void premain(String agentparam, Instrumentation inst) {\n        AgentBuilder.Transformer transformer = new AgentBuilder.Transformer(){\n            public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDescription typeDescription, ClassLoader classLoader, JavaModule javaModule) {\n                // method 指定哪些方法需要被拦截，ElementMatchers.any 指定了所有的方法\n                // 声明 intercept 拦截器\n                return builder.method(ElementMatchers.<MethodDescription>any())\n                        .intercept(MethodDelegation.to(MyInterceptor.class));\n            }\n        };\n\n        // type 指定了 agent 拦截的包名，以com.agent 作为前缀\n        // 指定了 transformer\n        // 将配置安装到 Instrumentation\n        new AgentBuilder.Default().type(ElementMatchers.<TypeDescription>nameStartsWith("com.agent")).transform(transformer).installOn(inst);\n    }\n}\n\n\n 3. 新增一个拦截类 MyInterceptor.java\n\nimport net.bytebuddy.implementation.bind.annotation.Origin;\nimport net.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport net.bytebuddy.implementation.bind.annotation.SuperCall;\n\nimport java.lang.reflect.Method;\nimport java.util.concurrent.Callable;\n\npublic class MyInterceptor {\n\n    @RuntimeType\n    public static Object intercept(@Origin Method method,\n                                   @SuperCall Callable<?> callable) throws Exception {\n        Long start = System.currentTimeMillis();\n        try {\n            return callable.call();\n        } finally {\n            System.out.println(method.getName() + ":" + (System.currentTimeMillis() - start) + "ms");\n        }\n    }\n}\n\n\n 4. 执行 mvn clean、mvn compile、mvn deploy 或者通过 idea中的maven ui界面进行操作\n    \n    在 target 下生成一个 java-agent-demo-1.0.0-SNAPSHOT.jar\n\n\n# 3.2 项目 java-agent-user 来进行验证\n\n 1. 新建一个普通的 java 项目 java-agent-user\n 2. 在包路径 com.agent 下新建一个Main类下，代码如下：\n\npackage com.agent;\n\npublic class Main {\n\n    public static void main(String[] args) throws InterruptedException {\n        System.out.println("main 方法执行");\n        Thread.sleep(1000L);\n        hello();\n        Thread.sleep(10L);\n        hello2();\n    }\n\n    public static void hello() throws InterruptedException {\n        Thread.sleep(50L);\n        System.out.println("23");\n    }\n\n    public static void hello2() throws InterruptedException {\n        Thread.sleep(10L);\n        System.out.println("33");\n    }\n}\n\n\n\n\n# 3.3 在工程 java-agent-user 中执行命令\n\njava -javaagent:/${路径}/java-agent-demo-1.0.0-SNAPSHOT.jar -jar java-agent-user.jar\n\n\n或者直接在idea的VM options中执行如下命令：\n\n-javaagent:/%{路径}/java-agent-demo-1.0.0-SNAPSHOT.jar\n\n\n说明：${路径} 请换成实际打成 agent 的包路径。\n\n\n# 3.4 执行效果\n\nmain 方法执行\n23\nhello:52ms\n33\nhello2:12ms\nmain:1078ms\n\n\n\n# 4. 总结\n\n利用 bytebuddy 可以轻松的实现字节码的插砖技术，实现业务解耦打印每个方法的耗时。',normalizedContent:'# 1. 需求背景\n\n业务上需要实现对指定包路径下，所有方法的请求耗时进行打印，要求尽量不要与核心业务耦合。\n\n\n# 2. 实现思路\n\n如果想实现对业务尽量无感，且打印每个方法的耗时，先排除掉：在业务中直接进行日志打印耗时。主要实现思路有：\n\n 1. 利用 aop 切面来实现\n 2. 利用字节码 agent 来实现\n\n由于网络上对于使用 aop 切面来实现该功能的例子比较多，这里重点介绍下如何利用 字节码 agent 来实现，具体的字节码相关的，用的是 bytebuddy 来实现。\n\n\n# 3. 基于 bytebuddy 实现\n\n基于 bytebuddy 实现的步骤：\n\n\n# 3.1 maven 项目java-agent-demo\n\n 1. 项目的 pom.xml 的文件如下：\n\n<?xml version="1.0" encoding="utf-8"?>\n<project xmlns="http://maven.apache.org/pom/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n         xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n\n    <groupid>com.tim</groupid>\n    <version>1.0.0-snapshot</version>\n    <modelversion>4.0.0</modelversion>\n\n    <artifactid>java-agent-demo</artifactid>\n\n    <dependencies>\n        <dependency>\n            <groupid>net.bytebuddy</groupid>\n            <artifactid>byte-buddy</artifactid>\n            <version>1.9.2</version>\n        </dependency>\n        <dependency>\n            <groupid>net.bytebuddy</groupid>\n            <artifactid>byte-buddy-agent</artifactid>\n            <version>1.9.2</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <artifactid>maven-assembly-plugin</artifactid>\n                <configuration>\n                    <appendassemblyid>false</appendassemblyid>\n                    <descriptorrefs>\n                        <descriptorref>jar-with-dependencies</descriptorref>\n                    </descriptorrefs>\n                    <archive>\n                        \x3c!-- 自动添加 meta-inf/mainfest.mf --\x3e\n                        <manifest>\n                            <addclasspath>true</addclasspath>\n                        </manifest>\n                        <manifestentries>\n                            <premain-class>premainagent</premain-class>\n                            <agent-class>premainagent</agent-class>\n                            <can-redefine-classes>true</can-redefine-classes>\n                            <can-retransform-classes>true</can-retransform-classes>\n                        </manifestentries>\n                    </archive>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>make-assembly</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>single</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n    </properties>\n\n</project>\n\n\n 2. 新增一个类 premainagent.java，里面添加静态方法 premain\n\nimport net.bytebuddy.agent.builder.agentbuilder;\nimport net.bytebuddy.description.method.methoddescription;\nimport net.bytebuddy.description.type.typedescription;\nimport net.bytebuddy.dynamic.dynamictype;\nimport net.bytebuddy.implementation.methoddelegation;\nimport net.bytebuddy.matcher.elementmatchers;\nimport net.bytebuddy.utility.javamodule;\n\nimport java.lang.instrument.instrumentation;\n\npublic class premainagent {\n\n    // 定义要拦截的包路径前缀\n    private static final string package_name_prefix = "com.agent";\n\n    public static void premain(string agentparam, instrumentation inst) {\n        agentbuilder.transformer transformer = new agentbuilder.transformer(){\n            public dynamictype.builder<?> transform(dynamictype.builder<?> builder, typedescription typedescription, classloader classloader, javamodule javamodule) {\n                // method 指定哪些方法需要被拦截，elementmatchers.any 指定了所有的方法\n                // 声明 intercept 拦截器\n                return builder.method(elementmatchers.<methoddescription>any())\n                        .intercept(methoddelegation.to(myinterceptor.class));\n            }\n        };\n\n        // type 指定了 agent 拦截的包名，以com.agent 作为前缀\n        // 指定了 transformer\n        // 将配置安装到 instrumentation\n        new agentbuilder.default().type(elementmatchers.<typedescription>namestartswith("com.agent")).transform(transformer).installon(inst);\n    }\n}\n\n\n 3. 新增一个拦截类 myinterceptor.java\n\nimport net.bytebuddy.implementation.bind.annotation.origin;\nimport net.bytebuddy.implementation.bind.annotation.runtimetype;\nimport net.bytebuddy.implementation.bind.annotation.supercall;\n\nimport java.lang.reflect.method;\nimport java.util.concurrent.callable;\n\npublic class myinterceptor {\n\n    @runtimetype\n    public static object intercept(@origin method method,\n                                   @supercall callable<?> callable) throws exception {\n        long start = system.currenttimemillis();\n        try {\n            return callable.call();\n        } finally {\n            system.out.println(method.getname() + ":" + (system.currenttimemillis() - start) + "ms");\n        }\n    }\n}\n\n\n 4. 执行 mvn clean、mvn compile、mvn deploy 或者通过 idea中的maven ui界面进行操作\n    \n    在 target 下生成一个 java-agent-demo-1.0.0-snapshot.jar\n\n\n# 3.2 项目 java-agent-user 来进行验证\n\n 1. 新建一个普通的 java 项目 java-agent-user\n 2. 在包路径 com.agent 下新建一个main类下，代码如下：\n\npackage com.agent;\n\npublic class main {\n\n    public static void main(string[] args) throws interruptedexception {\n        system.out.println("main 方法执行");\n        thread.sleep(1000l);\n        hello();\n        thread.sleep(10l);\n        hello2();\n    }\n\n    public static void hello() throws interruptedexception {\n        thread.sleep(50l);\n        system.out.println("23");\n    }\n\n    public static void hello2() throws interruptedexception {\n        thread.sleep(10l);\n        system.out.println("33");\n    }\n}\n\n\n\n\n# 3.3 在工程 java-agent-user 中执行命令\n\njava -javaagent:/${路径}/java-agent-demo-1.0.0-snapshot.jar -jar java-agent-user.jar\n\n\n或者直接在idea的vm options中执行如下命令：\n\n-javaagent:/%{路径}/java-agent-demo-1.0.0-snapshot.jar\n\n\n说明：${路径} 请换成实际打成 agent 的包路径。\n\n\n# 3.4 执行效果\n\nmain 方法执行\n23\nhello:52ms\n33\nhello2:12ms\nmain:1078ms\n\n\n\n# 4. 总结\n\n利用 bytebuddy 可以轻松的实现字节码的插砖技术，实现业务解耦打印每个方法的耗时。',charsets:{cjk:!0},lastUpdated:"2023/01/31, 09:21:58",lastUpdatedTimestamp:1675128118e3},{title:"让你的java业务代码并发的调用，并正确的处理返回结果",frontmatter:{title:"让你的java业务代码并发的调用，并正确的处理返回结果",date:"2023-02-01T10:05:36.000Z",permalink:"/pages/69dde0/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/10.%E8%AE%A9%E4%BD%A0%E7%9A%84java%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E5%B9%B6%E5%8F%91%E7%9A%84%E8%B0%83%E7%94%A8%EF%BC%8C%E5%B9%B6%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C.html",relativePath:"10.后端开发/40.服务端小技巧合集/10.让你的java业务代码并发的调用，并正确的处理返回结果.md",key:"v-79bce858",path:"/pages/69dde0/",headers:[{level:2,title:"1 背景",slug:"_1-背景",normalizedTitle:"1 背景",charIndex:2},{level:2,title:"2 实现的demo",slug:"_2-实现的demo",normalizedTitle:"2 实现的demo",charIndex:162},{level:3,title:"2.1 工具类 ConcurrencyDataTagEnum.java",slug:"_2-1-工具类-concurrencydatatagenum-java",normalizedTitle:"2.1 工具类 concurrencydatatagenum.java",charIndex:176},{level:3,title:"2.2  ConcurrencyDataDTO.java",slug:"_2-2-concurrencydatadto-java",normalizedTitle:"2.2  concurrencydatadto.java",charIndex:null},{level:3,title:"2.3 ExecutorTemplate.java",slug:"_2-3-executortemplate-java",normalizedTitle:"2.3 executortemplate.java",charIndex:1504},{level:3,title:"2.4 核心业务代码",slug:"_2-4-核心业务代码",normalizedTitle:"2.4 核心业务代码",charIndex:3698}],headersStr:"1 背景 2 实现的demo 2.1 工具类 ConcurrencyDataTagEnum.java 2.2  ConcurrencyDataDTO.java 2.3 ExecutorTemplate.java 2.4 核心业务代码",content:'# 1 背景\n\n实际的java web开发过程中，在业务处理的过程中，需要调用多次外部的服务（可能是http服务，也可能是rpc服务），而这写调用是可以并行的。然而，目前网上能找到如何编写这类代码的资料极少，对于初学者来说想要实现起来会有一定的难度。因此，本篇文章将给出一个简单易用的并行处理代码，希望对你有帮助。\n\n\n# 2 实现的demo\n\n\n# 2.1 工具类 ConcurrencyDataTagEnum.java\n\n@Getter\n@AllArgsConstructor\npublic enum ConcurrencyDataTagEnum {\n\n    /**\n     * 商品id与商品的映射标记\n     */\n    PRODUCT_ID_PRODUCT_MAP_TAG("ProductIdProductMap", "商品id与商品的映射标记"),\n\n    /**\n     * 商品id与品牌的映射标记\n     */\n    PRODUCT_ID_BRAND_MAP_TAG("ProductIdBrandMap", "商品id与品牌的映射标记"),\n\n    /**\n     * 商品id与类别list的映射标记\n     */\n    PRODUCT_ID_CATEGORY_LIST_MAP_TAG("ProductIdCategoryListMap", "品id与类别list的映射标记"),\n\n    /**\n     * 商品id与区域id的映射标记\n     */\n    PRODUCT_ID_AREA_ZIP_AREA_MAP_TAG("ProductIdAreaZipAreaMap", "商品id与区域id的映射标记"),\n\n    /**\n     * 门店商品id与活动列表的映射标记\n     */\n    EFFECTIVE_STORE_PRODUCT_ID_ACTIVITY_ESO_MAP_TAG("EffectiveStoreProductIdActivityESOMap", "门店商品id与活动列表的映射标记");\n\n    private String key;\n\n    private String value;\n\n}\n\n\n\n# 2.2 ConcurrencyDataDTO.java\n\n@Data\npublic class ConcurrencyDataDTO<T> {\n\n    /**\n     * 数据的标签，便于后期在一堆并发数据中取得想要的数据\n     */\n    private ConcurrencyDataTagEnum concurrencyDataTagEnum;\n\n    private T data;\n\n    public static ConcurrencyDataDTO create(ConcurrencyDataTagEnum concurrencyDataTagEnum, Object data) {\n        ConcurrencyDataDTO concurrencyDataDTO = new ConcurrencyDataDTO();\n        concurrencyDataDTO.setConcurrencyDataTagEnum(concurrencyDataTagEnum);\n        concurrencyDataDTO.setData(data);\n        return concurrencyDataDTO;\n    }\n}\n\n\n\n# 2.3 ExecutorTemplate.java\n\n@Slf4j\npublic class ExecutorTemplate {\n\n    private volatile ThreadPoolTaskExecutor executor = null;\n    private volatile List<Future> futures = null;\n\n    public ExecutorTemplate(ThreadPoolTaskExecutor executor) {\n        this.futures = Collections.synchronizedList(new ArrayList<Future>());\n        this.executor = executor;\n    }\n\n    public void submit(Runnable task) {\n        Future future = executor.submit(task);\n        futures.add(future);\n        check(future);\n    }\n\n    public void submit(Callable<ConcurrencyDataDTO> task) {\n        Future future = executor.submit(task);\n        futures.add(future);\n        check(future);\n    }\n\n    private void check(Future future) {\n        if (future.isDone()) {\n            // 立即判断一次，因为使用了CallerRun可能当场跑出结果，针对异常时快速响应\n            try {\n                future.get();\n            } catch (Throwable e) {\n                // 取消完之后立马退出\n                cancelAllFutures();\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    public synchronized List<ConcurrencyDataDTO> waitForResult() {\n        List<ConcurrencyDataDTO> result = new ArrayList();\n        RuntimeException exception = null;\n        for (Future future : futures) {\n            try {\n                Object object = future.get();\n                if (object instanceof ConcurrencyDataDTO) {\n                    result.add((ConcurrencyDataDTO) object);\n                } else {\n                    log.warn("future.get result object type is\'nt ConcurrencyDTO, return object:{}.", JsonUtils.toJson(object));\n                }\n            } catch (Throwable e) {\n                exception = new RuntimeException(e);\n                // 如果一个future出现了异常，就退出\n                break;\n            }\n        }\n\n        if (exception != null) {\n            cancelAllFutures();\n            throw exception;\n        } else {\n            return result;\n        }\n    }\n\n    public void cancelAllFutures() {\n        for (Future future : futures) {\n            if (!future.isDone() && !future.isCancelled()) {\n                future.cancel(true);\n            }\n        }\n    }\n\n    public void clear() {\n        futures.clear();\n    }\n\n}\n\n\n\n# 2.4 核心业务代码\n\n我们将下述的4个本来想要串行的代码并行化：\n\n 1. storeProductRelativeService.getProductIdProductMap(productIdSet))\n 2. storeProductRelativeService.getProductIdBrandMap(productIdSet))\n 3. storeProductRelativeService.getProductIdCategoryListMap(productIdSet))\n 4. storeProductRelativeService.getProductIdAreaZipAreaMap(productIdSet))\n\n ...\n Map<String, ProductDTO> productIdProductMap = null;\n Map<String, BrandDTO> productIdBrandMap = null;\n Map<String, List<CategoryDTO>> productIdCategoryListMap = null;\n Map<String, AreaProductDTO> productIdAreaZipAreaMap = null;\n Map<String, List<ActivityDataESO>> storeProductIdActivityListMap = null;\ntry {\n            // 并发执行相关的rpc调用\n            if (!CollectionUtils.isEmpty(productIdSet)) {\n                executorTemplate.submit(() -> ConcurrencyDataDTO.create(ConcurrencyDataTagEnum.PRODUCT_ID_PRODUCT_MAP_TAG, storeProductRelativeService.getProductIdProductMap(productIdSet)));\n                executorTemplate.submit(() -> ConcurrencyDataDTO.create(ConcurrencyDataTagEnum.PRODUCT_ID_BRAND_MAP_TAG, storeProductRelativeService.getProductIdBrandMap(productIdSet)));\n                executorTemplate.submit(() -> ConcurrencyDataDTO.create(ConcurrencyDataTagEnum.PRODUCT_ID_CATEGORY_LIST_MAP_TAG, storeProductRelativeService.getProductIdCategoryListMap(productIdSet)));\n                executorTemplate.submit(() -> ConcurrencyDataDTO.create(ConcurrencyDataTagEnum.PRODUCT_ID_AREA_ZIP_AREA_MAP_TAG, storeProductRelativeService.getProductIdAreaZipAreaMap(productIdSet)));\n            }\n            if (!CollectionUtils.isEmpty(storeProductIdSet)) {\n                executorTemplate.submit(() -> ConcurrencyDataDTO.create(ConcurrencyDataTagEnum.EFFECTIVE_STORE_PRODUCT_ID_ACTIVITY_ESO_MAP_TAG, activityStoreProductMapsService.getEffectiveStoreProductIdActivityESOMap(storeProductIdSet)));\n            }\n            // 等待所有异步执行结果\n            List<ConcurrencyDataDTO> concurrencyDataDTOList = executorTemplate.waitForResult();\n\n            for (ConcurrencyDataDTO concurrencyDataDTO : concurrencyDataDTOList) {\n                ConcurrencyDataTagEnum concurrencyDataTagEnum = concurrencyDataDTO.getConcurrencyDataTagEnum();\n                switch (concurrencyDataTagEnum) {\n                    case PRODUCT_ID_PRODUCT_MAP_TAG:\n                        productIdProductMap = (Map<String, ProductDTO>) concurrencyDataDTO.getData();\n                        break;\n                    case PRODUCT_ID_BRAND_MAP_TAG:\n                        productIdBrandMap = (Map<String, BrandDTO>) concurrencyDataDTO.getData();\n                        break;\n                    case PRODUCT_ID_CATEGORY_LIST_MAP_TAG:\n                        productIdCategoryListMap = (Map<String, List<CategoryDTO>>) concurrencyDataDTO.getData();\n                        break;\n                    case PRODUCT_ID_AREA_ZIP_AREA_MAP_TAG:\n                        productIdAreaZipAreaMap = (Map<String, AreaProductDTO>) concurrencyDataDTO.getData();\n                        break;\n                    case EFFECTIVE_STORE_PRODUCT_ID_ACTIVITY_ESO_MAP_TAG:\n                        storeProductIdActivityListMap = (Map<String, List<ActivityDataESO>>) concurrencyDataDTO.getData();\n                        break;\n                    default:\n                        log.warn("concurrencyDataTagEnum[{}] is unknown, return data:{}.", concurrencyDataTagEnum, JsonUtils.toJson(concurrencyDataDTO));\n                        break;\n                }\n            }\n        } catch (Exception e) {\n            log.error("exception, error message:{}.", e.getMessage(), e);\n            throw e;\n        } finally {\n            // 注意：一定要添加这个，不然会导致内存泄漏\n            executorTemplate.clear();\n        }\n // 处理上述业务的返回值\n // todo\n ...      \n\n\n> executorTemplate 这里面的线程池的参数配置，可以根据业务进行显示的配置。',normalizedContent:'# 1 背景\n\n实际的java web开发过程中，在业务处理的过程中，需要调用多次外部的服务（可能是http服务，也可能是rpc服务），而这写调用是可以并行的。然而，目前网上能找到如何编写这类代码的资料极少，对于初学者来说想要实现起来会有一定的难度。因此，本篇文章将给出一个简单易用的并行处理代码，希望对你有帮助。\n\n\n# 2 实现的demo\n\n\n# 2.1 工具类 concurrencydatatagenum.java\n\n@getter\n@allargsconstructor\npublic enum concurrencydatatagenum {\n\n    /**\n     * 商品id与商品的映射标记\n     */\n    product_id_product_map_tag("productidproductmap", "商品id与商品的映射标记"),\n\n    /**\n     * 商品id与品牌的映射标记\n     */\n    product_id_brand_map_tag("productidbrandmap", "商品id与品牌的映射标记"),\n\n    /**\n     * 商品id与类别list的映射标记\n     */\n    product_id_category_list_map_tag("productidcategorylistmap", "品id与类别list的映射标记"),\n\n    /**\n     * 商品id与区域id的映射标记\n     */\n    product_id_area_zip_area_map_tag("productidareazipareamap", "商品id与区域id的映射标记"),\n\n    /**\n     * 门店商品id与活动列表的映射标记\n     */\n    effective_store_product_id_activity_eso_map_tag("effectivestoreproductidactivityesomap", "门店商品id与活动列表的映射标记");\n\n    private string key;\n\n    private string value;\n\n}\n\n\n\n# 2.2 concurrencydatadto.java\n\n@data\npublic class concurrencydatadto<t> {\n\n    /**\n     * 数据的标签，便于后期在一堆并发数据中取得想要的数据\n     */\n    private concurrencydatatagenum concurrencydatatagenum;\n\n    private t data;\n\n    public static concurrencydatadto create(concurrencydatatagenum concurrencydatatagenum, object data) {\n        concurrencydatadto concurrencydatadto = new concurrencydatadto();\n        concurrencydatadto.setconcurrencydatatagenum(concurrencydatatagenum);\n        concurrencydatadto.setdata(data);\n        return concurrencydatadto;\n    }\n}\n\n\n\n# 2.3 executortemplate.java\n\n@slf4j\npublic class executortemplate {\n\n    private volatile threadpooltaskexecutor executor = null;\n    private volatile list<future> futures = null;\n\n    public executortemplate(threadpooltaskexecutor executor) {\n        this.futures = collections.synchronizedlist(new arraylist<future>());\n        this.executor = executor;\n    }\n\n    public void submit(runnable task) {\n        future future = executor.submit(task);\n        futures.add(future);\n        check(future);\n    }\n\n    public void submit(callable<concurrencydatadto> task) {\n        future future = executor.submit(task);\n        futures.add(future);\n        check(future);\n    }\n\n    private void check(future future) {\n        if (future.isdone()) {\n            // 立即判断一次，因为使用了callerrun可能当场跑出结果，针对异常时快速响应\n            try {\n                future.get();\n            } catch (throwable e) {\n                // 取消完之后立马退出\n                cancelallfutures();\n                throw new runtimeexception(e);\n            }\n        }\n    }\n\n    public synchronized list<concurrencydatadto> waitforresult() {\n        list<concurrencydatadto> result = new arraylist();\n        runtimeexception exception = null;\n        for (future future : futures) {\n            try {\n                object object = future.get();\n                if (object instanceof concurrencydatadto) {\n                    result.add((concurrencydatadto) object);\n                } else {\n                    log.warn("future.get result object type is\'nt concurrencydto, return object:{}.", jsonutils.tojson(object));\n                }\n            } catch (throwable e) {\n                exception = new runtimeexception(e);\n                // 如果一个future出现了异常，就退出\n                break;\n            }\n        }\n\n        if (exception != null) {\n            cancelallfutures();\n            throw exception;\n        } else {\n            return result;\n        }\n    }\n\n    public void cancelallfutures() {\n        for (future future : futures) {\n            if (!future.isdone() && !future.iscancelled()) {\n                future.cancel(true);\n            }\n        }\n    }\n\n    public void clear() {\n        futures.clear();\n    }\n\n}\n\n\n\n# 2.4 核心业务代码\n\n我们将下述的4个本来想要串行的代码并行化：\n\n 1. storeproductrelativeservice.getproductidproductmap(productidset))\n 2. storeproductrelativeservice.getproductidbrandmap(productidset))\n 3. storeproductrelativeservice.getproductidcategorylistmap(productidset))\n 4. storeproductrelativeservice.getproductidareazipareamap(productidset))\n\n ...\n map<string, productdto> productidproductmap = null;\n map<string, branddto> productidbrandmap = null;\n map<string, list<categorydto>> productidcategorylistmap = null;\n map<string, areaproductdto> productidareazipareamap = null;\n map<string, list<activitydataeso>> storeproductidactivitylistmap = null;\ntry {\n            // 并发执行相关的rpc调用\n            if (!collectionutils.isempty(productidset)) {\n                executortemplate.submit(() -> concurrencydatadto.create(concurrencydatatagenum.product_id_product_map_tag, storeproductrelativeservice.getproductidproductmap(productidset)));\n                executortemplate.submit(() -> concurrencydatadto.create(concurrencydatatagenum.product_id_brand_map_tag, storeproductrelativeservice.getproductidbrandmap(productidset)));\n                executortemplate.submit(() -> concurrencydatadto.create(concurrencydatatagenum.product_id_category_list_map_tag, storeproductrelativeservice.getproductidcategorylistmap(productidset)));\n                executortemplate.submit(() -> concurrencydatadto.create(concurrencydatatagenum.product_id_area_zip_area_map_tag, storeproductrelativeservice.getproductidareazipareamap(productidset)));\n            }\n            if (!collectionutils.isempty(storeproductidset)) {\n                executortemplate.submit(() -> concurrencydatadto.create(concurrencydatatagenum.effective_store_product_id_activity_eso_map_tag, activitystoreproductmapsservice.geteffectivestoreproductidactivityesomap(storeproductidset)));\n            }\n            // 等待所有异步执行结果\n            list<concurrencydatadto> concurrencydatadtolist = executortemplate.waitforresult();\n\n            for (concurrencydatadto concurrencydatadto : concurrencydatadtolist) {\n                concurrencydatatagenum concurrencydatatagenum = concurrencydatadto.getconcurrencydatatagenum();\n                switch (concurrencydatatagenum) {\n                    case product_id_product_map_tag:\n                        productidproductmap = (map<string, productdto>) concurrencydatadto.getdata();\n                        break;\n                    case product_id_brand_map_tag:\n                        productidbrandmap = (map<string, branddto>) concurrencydatadto.getdata();\n                        break;\n                    case product_id_category_list_map_tag:\n                        productidcategorylistmap = (map<string, list<categorydto>>) concurrencydatadto.getdata();\n                        break;\n                    case product_id_area_zip_area_map_tag:\n                        productidareazipareamap = (map<string, areaproductdto>) concurrencydatadto.getdata();\n                        break;\n                    case effective_store_product_id_activity_eso_map_tag:\n                        storeproductidactivitylistmap = (map<string, list<activitydataeso>>) concurrencydatadto.getdata();\n                        break;\n                    default:\n                        log.warn("concurrencydatatagenum[{}] is unknown, return data:{}.", concurrencydatatagenum, jsonutils.tojson(concurrencydatadto));\n                        break;\n                }\n            }\n        } catch (exception e) {\n            log.error("exception, error message:{}.", e.getmessage(), e);\n            throw e;\n        } finally {\n            // 注意：一定要添加这个，不然会导致内存泄漏\n            executortemplate.clear();\n        }\n // 处理上述业务的返回值\n // todo\n ...      \n\n\n> executortemplate 这里面的线程池的参数配置，可以根据业务进行显示的配置。',charsets:{cjk:!0},lastUpdated:"2023/02/06, 09:35:40",lastUpdatedTimestamp:167564734e4},{title:"服务端常见线上问题整理与解决措施",frontmatter:{title:"服务端常见线上问题整理与解决措施",date:"2022-11-16T16:43:33.000Z",permalink:"/pages/81e5c5/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/20.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B8%B8%E8%A7%81%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%8E%AA%E6%96%BD.html",relativePath:"10.后端开发/40.服务端小技巧合集/20.服务端常见线上问题整理与解决措施.md",key:"v-1f9b39d1",path:"/pages/81e5c5/",headers:[{level:2,title:"案例 1",slug:"案例-1",normalizedTitle:"案例 1",charIndex:2},{level:2,title:"案例 2",slug:"案例-2",normalizedTitle:"案例 2",charIndex:402},{level:2,title:"案例 3",slug:"案例-3",normalizedTitle:"案例 3",charIndex:825},{level:2,title:"案例 4",slug:"案例-4",normalizedTitle:"案例 4",charIndex:1081},{level:2,title:"案例 5",slug:"案例-5",normalizedTitle:"案例 5",charIndex:1625},{level:2,title:"案例 6",slug:"案例-6",normalizedTitle:"案例 6",charIndex:1895},{level:2,title:"案例 7",slug:"案例-7",normalizedTitle:"案例 7",charIndex:2098},{level:2,title:"案例 8",slug:"案例-8",normalizedTitle:"案例 8",charIndex:2219},{level:2,title:"案例 9",slug:"案例-9",normalizedTitle:"案例 9",charIndex:2447},{level:2,title:"案例 10",slug:"案例-10",normalizedTitle:"案例 10",charIndex:2706},{level:2,title:"案例 11",slug:"案例-11",normalizedTitle:"案例 11",charIndex:2959},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:159}],headersStr:"案例 1 案例 2 案例 3 案例 4 案例 5 案例 6 案例 7 案例 8 案例 9 案例 10 案例 11 总结",content:"# 案例 1\n\n案发现场\n\n系统不断的查询某条特别慢 MySQL ，导致 MySQL CPU 密集，甚至飙到100%，直至整个 MySQL 集群不可用\n\n事故现场解决方式：\n\n 1. DBA 紧急用相应的工具 kill 该条查询请求\n 2. 业务重启服务\n 3. 业务在网关层（比如：kong），禁止该接口调用\n\n反思总结：\n\n 1. MySQL 慢查询日志告警，并且要不断治理\n 2. 定期治理 MySQL 的所有执行语句，时刻关注 MySQL 的大表（超过500万条），对大表的所有查询语句要检查下是否有加索引。\n 3. 引入 sentinel 流控平台，对 MySQL 的流量进行全局监控，每个 MySQL 方法都有设置默认超时、QPS以及相应的熔断机制\n 4. 引入 sentinel 流控平台，对 HTTP 请求进行流控配置，每个 HTTP 请求都有默认超时、QPS以及相应的熔断机制\n\n\n# 案例 2\n\n案发现场\n\nElasticsearch 中的查询语句，使用 terms （类似 MySQL 的 IN）查询大量的商品 ID （或者订单 ID），导致慢查询耗时十几秒，进而引发调用的 Dubbo 线程池被打满（也有可能极大的增加 CPU 使用率）\n\n事故现场解决方式：\n\n 1. 重启业务服务\n 2. 业务在网关层（比如：kong），禁止该接口调用\n\n反思总结：\n\n 1. 限制 terms 查询大量ID时，最大允许查询的ID个数\n 2. 推荐用 multiGet（直接走文档索引，速度快） 的优化思路进行优化\n 3. 每个 Dubbo 类级别设置默认的最大 dubbo 线程数（比如：30），Dubbo 整个线程池的默认大小是200，这样能够避免某个类的某个方法特别慢，导致整个 Dubbo 线程池被打满\n 4. 引入 sentinel 流控平台，设置每个 Dubbo 方法的默认超时以及QPS，当然这里也可以设置并发线程数\n\n\n# 案例 3\n\n案发现场\n\n业务依赖的非核心下沉服务挂掉了，导致业务一起抛异常\n\n事故现场解决方式：\n\n 1. 紧急修复代码，添加 try catch 逻辑，将异常捕获\n 2. 催促调用的下层服务马上解决\n\n反思总结：\n\n 1. 对第三方的依赖没有梳理出，哪些是主干流程，哪些是枝干，主干流程中依赖或者使用的任务服务只要一出问题，整个服务都不能用，而枝干流程出问题，可能会降低用户体验，但是整个服务还是可用的，另外枝干流程还可以通过降级服务来进一步增加业务的高可用\n 2. 引入 sentinel 流控平台\n\n\n# 案例 4\n\n案发现场\n\n缓存redis（备注：只是做缓存，并未持久化）挂掉，导致业务不可用抛异常。\n\n事故现场解决方式：\n\n 1. 运维紧急重启或者排查缓存 Redis 的问题\n\n反思总结：\n\n 1. Redis 没有做高可用架构。（比如：使用 集群 + 主从结合模式）\n 2. 业务设计上的缺陷，如果已经明确了Redis只是做为缓存使用，就应该在设计上要充分考虑缓存挂掉时，需要允许请求打到相应的持久层（比如：MySQL）\n 3. 请求打到持久层（比如：MySQL），为了避免高吞吐的请求打挂 MySQL，需要在调用 MySQL 的DAO层上，加上流控（设置 超时、QPS、并发），从而确保 MySQL 不会挂\n 4. 添加分布式锁保护持久层（注意：这里的分布式锁需要改造，大部分人容易严格按照超买超卖的逻辑实现，当出现较大并发时，并发中的后面的请求都超时了），正确的使用分布式锁的姿势：在并发过程中，当有一个线程持有该锁时，则去持久层获取数据，同时，其他的线程在锁超时前，不断的进行轮询缓存中是否有数据，一旦刚才那个持有锁的线程获取到持久层的数据，并且设置返回数据到缓存中，其他线程轮询到缓存也有数据，则所有并发的线程都马上返回数据，从而极大的减少并发过程中的请求超时问题。\n\n\n# 案例 5\n\n案发现场\n\n利用canal 丢 binlog 到消息队列，业务消费消息队列，来更新业务缓存，业务强依赖缓存，当消息队列挂掉，业务的数据准确性马上出问题。\n\n事故现场解决方式：\n\n 1. 运维重启或者排查消息队列的问题，马上修复\n\n反思总结：\n\n 1. 运维这边需要重新评估消息队列的高可用方案\n 2. 业务的设计架构有问题，业务想通过缓存来支撑高并发的场景，却没有考虑到业务依赖的组件哪些是核心的哪些是非核心的\n 3. 添加动态开关，当消息队列挂掉后，将开关切换到，整个系统不使用缓存的状态（需要流控等对系统进行保护）\n\n\n# 案例 6\n\n案发现场\n\n业务开发过程中，直接修改了旧的 dubbo api 的入参或者返回参数，业务先发下层服务，导致项目发布瞬间，上层的服务调用dubbo api 出错。\n\n事故现场解决方式：\n\n 1. 开发人员马上回滚发布上一版本的代码\n\n反思总结：\n\n 1. 对外暴露的接口，禁止修改入参，包括方法上的参数顺序以及参数类型\n 2. 一般涉及到 dubbo api 的修改，都需要新增一个方法\n\n\n# 案例 7\n\n案发现场\n\n某个对外提供服务的dubbo api由于数据库等原因，导致接口特别慢，此时请求的 QPS 仍然较大，导致 dubbo 线程池被打满。\n\n事故现场解决方式： 与第一个案例类似。\n\n反思总结： 与第一个案例类似。\n\n\n# 案例 8\n\n案发现场\n\n更改了某个JAVA工程中缓存对象，并用这个缓存对象bean来设置和接收redis缓存，在发布服务的瞬间，由于线上的缓存还没过期，因此会用旧的缓存对象值来设置到相应的bean，导致数据不对。\n\n事故现场解决方式：\n\n 1. DBA 清理出问题的缓存 key 前缀\n\n反思总结：\n\n 1. 编码的时候，没有充分考虑线上的数据，以及上线的流程\n 2. 跟缓存相关的bean，禁止进行修改，只允许新增字段，或者添加一个新的bean\n\n\n# 案例 9\n\n案发现场\n\n某个dubo api 或者 http 对外暴露了一个整数值，正常情况下，业务只会传入小于100的值，系统正常，在某个时刻，业务突然传入1000000的值，导致系统cpu密集或者oom（这里面的数值：包括：分页等参数，以及一节对外暴露的数值参数）。\n\n事故现场解决方式：\n\n 1. 项目重启\n\n反思总结：\n\n 1. 本质问题，还是没有防御性编程的思想\n 2. 对于 HTTP 以及 Dubbo 等对外提供服务的接口，你根本不知道调用方的参数会如何传，因此要将无界的参数控制在有界的范围内\n\n\n# 案例 10\n\n案发现场\n\n某个dubo api 或者 http 对外暴露了一个字符串，正常情况下，业务只会传入小于5个字符，系统正常，在某个时刻，业务突然传入一个超过一万个字符的字符串，导致系统cpu密集或者oom（这里面的字符串：包括：名称、详细信息等）。\n\n事故现场解决方式：\n\n 1. 项目重启\n\n反思总结：\n\n 1. 本质问题，还是没有防御性编程的思想\n 2. 对于 HTTP 以及 Dubbo 等对外提供服务的接口，你根本不知道调用方的参数会如何传，因此要将无界的参数控制在有界的范围内\n\n\n# 案例 11\n\n案发现场\n\n某个核心业务由于线上的配置错误，比如把false 配置成fasle，导致Java代码层读取到的配置出错，进而引发线上事故。\n\n事故现场解决方式：\n\n 1. 将配置错误的 fasle 改成 false\n\n反思总结：\n\n 1. 核心重要的业务的发布流程一定要规范，任何细微的变更，都要在灰度环境（或者预上线环境）进行验证，然后才能在生产环境进行发布\n\n\n# 总结\n\n如何保证稳定\n\n当一切不可控的时候，稳定性就无法保证。\n\n一个稳定的系统，绝不是一蹴而就，而是不断地推销打磨，想尽各种可能地异常情况，自己给自己找问题，然后针对问题梳理出各种应对措施，要做到如何正确的处理这些问题，需要做到以下几点：\n\n 1. 明确整个系统的各个业务的重要程度。\n\n比如：订单系统中只有下单接口、下单日志接口两个接口，则下单接口重要程度 高于 单日志接口。在明确了重要程度后，需要通过各种措施保证，下单日志接口一定不要影响到下单接口，当系统要挂的时候，我们会让下单日志接口先挂掉。\n\n 2. 明确项目中各个组件的重要程度。\n\n比如：项目中有使用到 MySQL、ElasticSearch、Redis、Kafka，按照最小系统原则，我们明确了项目中只要 MySQL 不挂，只要我们能够确保在MySQL能够承受的流量范围内，此时，我们系统应该还是局部可用。",normalizedContent:"# 案例 1\n\n案发现场\n\n系统不断的查询某条特别慢 mysql ，导致 mysql cpu 密集，甚至飙到100%，直至整个 mysql 集群不可用\n\n事故现场解决方式：\n\n 1. dba 紧急用相应的工具 kill 该条查询请求\n 2. 业务重启服务\n 3. 业务在网关层（比如：kong），禁止该接口调用\n\n反思总结：\n\n 1. mysql 慢查询日志告警，并且要不断治理\n 2. 定期治理 mysql 的所有执行语句，时刻关注 mysql 的大表（超过500万条），对大表的所有查询语句要检查下是否有加索引。\n 3. 引入 sentinel 流控平台，对 mysql 的流量进行全局监控，每个 mysql 方法都有设置默认超时、qps以及相应的熔断机制\n 4. 引入 sentinel 流控平台，对 http 请求进行流控配置，每个 http 请求都有默认超时、qps以及相应的熔断机制\n\n\n# 案例 2\n\n案发现场\n\nelasticsearch 中的查询语句，使用 terms （类似 mysql 的 in）查询大量的商品 id （或者订单 id），导致慢查询耗时十几秒，进而引发调用的 dubbo 线程池被打满（也有可能极大的增加 cpu 使用率）\n\n事故现场解决方式：\n\n 1. 重启业务服务\n 2. 业务在网关层（比如：kong），禁止该接口调用\n\n反思总结：\n\n 1. 限制 terms 查询大量id时，最大允许查询的id个数\n 2. 推荐用 multiget（直接走文档索引，速度快） 的优化思路进行优化\n 3. 每个 dubbo 类级别设置默认的最大 dubbo 线程数（比如：30），dubbo 整个线程池的默认大小是200，这样能够避免某个类的某个方法特别慢，导致整个 dubbo 线程池被打满\n 4. 引入 sentinel 流控平台，设置每个 dubbo 方法的默认超时以及qps，当然这里也可以设置并发线程数\n\n\n# 案例 3\n\n案发现场\n\n业务依赖的非核心下沉服务挂掉了，导致业务一起抛异常\n\n事故现场解决方式：\n\n 1. 紧急修复代码，添加 try catch 逻辑，将异常捕获\n 2. 催促调用的下层服务马上解决\n\n反思总结：\n\n 1. 对第三方的依赖没有梳理出，哪些是主干流程，哪些是枝干，主干流程中依赖或者使用的任务服务只要一出问题，整个服务都不能用，而枝干流程出问题，可能会降低用户体验，但是整个服务还是可用的，另外枝干流程还可以通过降级服务来进一步增加业务的高可用\n 2. 引入 sentinel 流控平台\n\n\n# 案例 4\n\n案发现场\n\n缓存redis（备注：只是做缓存，并未持久化）挂掉，导致业务不可用抛异常。\n\n事故现场解决方式：\n\n 1. 运维紧急重启或者排查缓存 redis 的问题\n\n反思总结：\n\n 1. redis 没有做高可用架构。（比如：使用 集群 + 主从结合模式）\n 2. 业务设计上的缺陷，如果已经明确了redis只是做为缓存使用，就应该在设计上要充分考虑缓存挂掉时，需要允许请求打到相应的持久层（比如：mysql）\n 3. 请求打到持久层（比如：mysql），为了避免高吞吐的请求打挂 mysql，需要在调用 mysql 的dao层上，加上流控（设置 超时、qps、并发），从而确保 mysql 不会挂\n 4. 添加分布式锁保护持久层（注意：这里的分布式锁需要改造，大部分人容易严格按照超买超卖的逻辑实现，当出现较大并发时，并发中的后面的请求都超时了），正确的使用分布式锁的姿势：在并发过程中，当有一个线程持有该锁时，则去持久层获取数据，同时，其他的线程在锁超时前，不断的进行轮询缓存中是否有数据，一旦刚才那个持有锁的线程获取到持久层的数据，并且设置返回数据到缓存中，其他线程轮询到缓存也有数据，则所有并发的线程都马上返回数据，从而极大的减少并发过程中的请求超时问题。\n\n\n# 案例 5\n\n案发现场\n\n利用canal 丢 binlog 到消息队列，业务消费消息队列，来更新业务缓存，业务强依赖缓存，当消息队列挂掉，业务的数据准确性马上出问题。\n\n事故现场解决方式：\n\n 1. 运维重启或者排查消息队列的问题，马上修复\n\n反思总结：\n\n 1. 运维这边需要重新评估消息队列的高可用方案\n 2. 业务的设计架构有问题，业务想通过缓存来支撑高并发的场景，却没有考虑到业务依赖的组件哪些是核心的哪些是非核心的\n 3. 添加动态开关，当消息队列挂掉后，将开关切换到，整个系统不使用缓存的状态（需要流控等对系统进行保护）\n\n\n# 案例 6\n\n案发现场\n\n业务开发过程中，直接修改了旧的 dubbo api 的入参或者返回参数，业务先发下层服务，导致项目发布瞬间，上层的服务调用dubbo api 出错。\n\n事故现场解决方式：\n\n 1. 开发人员马上回滚发布上一版本的代码\n\n反思总结：\n\n 1. 对外暴露的接口，禁止修改入参，包括方法上的参数顺序以及参数类型\n 2. 一般涉及到 dubbo api 的修改，都需要新增一个方法\n\n\n# 案例 7\n\n案发现场\n\n某个对外提供服务的dubbo api由于数据库等原因，导致接口特别慢，此时请求的 qps 仍然较大，导致 dubbo 线程池被打满。\n\n事故现场解决方式： 与第一个案例类似。\n\n反思总结： 与第一个案例类似。\n\n\n# 案例 8\n\n案发现场\n\n更改了某个java工程中缓存对象，并用这个缓存对象bean来设置和接收redis缓存，在发布服务的瞬间，由于线上的缓存还没过期，因此会用旧的缓存对象值来设置到相应的bean，导致数据不对。\n\n事故现场解决方式：\n\n 1. dba 清理出问题的缓存 key 前缀\n\n反思总结：\n\n 1. 编码的时候，没有充分考虑线上的数据，以及上线的流程\n 2. 跟缓存相关的bean，禁止进行修改，只允许新增字段，或者添加一个新的bean\n\n\n# 案例 9\n\n案发现场\n\n某个dubo api 或者 http 对外暴露了一个整数值，正常情况下，业务只会传入小于100的值，系统正常，在某个时刻，业务突然传入1000000的值，导致系统cpu密集或者oom（这里面的数值：包括：分页等参数，以及一节对外暴露的数值参数）。\n\n事故现场解决方式：\n\n 1. 项目重启\n\n反思总结：\n\n 1. 本质问题，还是没有防御性编程的思想\n 2. 对于 http 以及 dubbo 等对外提供服务的接口，你根本不知道调用方的参数会如何传，因此要将无界的参数控制在有界的范围内\n\n\n# 案例 10\n\n案发现场\n\n某个dubo api 或者 http 对外暴露了一个字符串，正常情况下，业务只会传入小于5个字符，系统正常，在某个时刻，业务突然传入一个超过一万个字符的字符串，导致系统cpu密集或者oom（这里面的字符串：包括：名称、详细信息等）。\n\n事故现场解决方式：\n\n 1. 项目重启\n\n反思总结：\n\n 1. 本质问题，还是没有防御性编程的思想\n 2. 对于 http 以及 dubbo 等对外提供服务的接口，你根本不知道调用方的参数会如何传，因此要将无界的参数控制在有界的范围内\n\n\n# 案例 11\n\n案发现场\n\n某个核心业务由于线上的配置错误，比如把false 配置成fasle，导致java代码层读取到的配置出错，进而引发线上事故。\n\n事故现场解决方式：\n\n 1. 将配置错误的 fasle 改成 false\n\n反思总结：\n\n 1. 核心重要的业务的发布流程一定要规范，任何细微的变更，都要在灰度环境（或者预上线环境）进行验证，然后才能在生产环境进行发布\n\n\n# 总结\n\n如何保证稳定\n\n当一切不可控的时候，稳定性就无法保证。\n\n一个稳定的系统，绝不是一蹴而就，而是不断地推销打磨，想尽各种可能地异常情况，自己给自己找问题，然后针对问题梳理出各种应对措施，要做到如何正确的处理这些问题，需要做到以下几点：\n\n 1. 明确整个系统的各个业务的重要程度。\n\n比如：订单系统中只有下单接口、下单日志接口两个接口，则下单接口重要程度 高于 单日志接口。在明确了重要程度后，需要通过各种措施保证，下单日志接口一定不要影响到下单接口，当系统要挂的时候，我们会让下单日志接口先挂掉。\n\n 2. 明确项目中各个组件的重要程度。\n\n比如：项目中有使用到 mysql、elasticsearch、redis、kafka，按照最小系统原则，我们明确了项目中只要 mysql 不挂，只要我们能够确保在mysql能够承受的流量范围内，此时，我们系统应该还是局部可用。",charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"服务端日志打印最佳实践",frontmatter:{title:"服务端日志打印最佳实践",date:"2022-07-13T11:05:59.000Z",permalink:"/pages/bfad5e/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/30.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html",relativePath:"10.后端开发/40.服务端小技巧合集/30.服务端日志打印最佳实践.md",key:"v-72cadb78",path:"/pages/bfad5e/",headers:[{level:2,title:"1. 为什么要打印日志",slug:"_1-为什么要打印日志",normalizedTitle:"1. 为什么要打印日志",charIndex:2},{level:2,title:"2. 日志级别的种类",slug:"_2-日志级别的种类",normalizedTitle:"2. 日志级别的种类",charIndex:83},{level:2,title:"3.  各种日志级别的使用场景",slug:"_3-各种日志级别的使用场景",normalizedTitle:"3.  各种日志级别的使用场景",charIndex:null},{level:2,title:"4. 不同环境使用级别",slug:"_4-不同环境使用级别",normalizedTitle:"4. 不同环境使用级别",charIndex:849},{level:2,title:"5. 线上日志如何监控",slug:"_5-线上日志如何监控",normalizedTitle:"5. 线上日志如何监控",charIndex:957},{level:2,title:"6. 持续的日志优化",slug:"_6-持续的日志优化",normalizedTitle:"6. 持续的日志优化",charIndex:1052}],headersStr:"1. 为什么要打印日志 2. 日志级别的种类 3.  各种日志级别的使用场景 4. 不同环境使用级别 5. 线上日志如何监控 6. 持续的日志优化",content:'# 1. 为什么要打印日志\n\n在后端开发中，日志的打印具有重要的意义，当系统在线下调试时，能够详细输出过程参数，以及上线后，系统出问题时，能够有记录可查看。\n\n\n# 2. 日志级别的种类\n\n日志级别种类总共为 4 类，如下所示（不允许再添加其他级别的日志，比如：trace）：\n\n> ERROR > WARN > INFO > DEBUG 日志级别依次递减。\n\n\n# 3. 各种日志级别的使用场景\n\n * ERROR 日志级别使用场景（本质： 系统出现严重错误、或者未知的错误，需要马上处理!!! ）\n   \n   * 所有的异常相关的日志，都应该用 ERROR 级别日志来打印，除非后面，这类日志觉得不重要，可以降级为 WARN 级别。\n   * 如果代码中确定某种流程或者分支一定不会出现，也可以打印为ERROR级别的日志（特别是在 if/else 分支的场景）。\n\n * WARN 日志级别使用场景（本质： 系统出现问题，但是不足以影响主流程，可在当天内处理掉!!！）\n   \n   * 参数校验异常一般用 WARN 级别打印日志。\n   * 重试时，打印中间的状态过程，使用 WARN 级别日志。\n   * 某些场景（不影响主流程） ERROR 级别日志降级为 WARN\n\n * INFO 日志级别使用场景（本质： 记录状态的日志，用于了解系统的运行情况!!!）\n   \n   * 定时任务运行时，开始和结束的打印日志使用 INFO 级别日志。\n   * 项目启动成功时，一些参数的打印使用 INFO 级别日志。\n   * apollo配置的变更，使用 INFO 级别日志，记录状态的变更。\n   * 初始化任务，使用 INFO 级别日志，就初始化日志的开始和结束时间\n   * 慢日志的打印，使用 INFO 级别打印。\n\n * DEBUG 日志级别使用场景（本质： 用户线下环境进行调试时的中间过程打印，线上一般不开启!!!）\n   \n   * 线下环境的入参以及返回值的打印。\n\n\n# 4. 不同环境使用级别\n\n * 线下环境使用（最低级别 DEBUG）：ERROR > WARN > INFO > DEBUG\n * 线上环境使用（最低级别 INFO）：ERROR > WARN > INFO\n\n\n# 5. 线上日志如何监控\n\n线上的日志级别监控分为两大类：\n\n 1. ERROR 日志监控告警，告警发送到企业微信小组群。\n 2. WARN 日志监控告警，告警发送到企业微信小组群。\n\n\n# 6. 持续的日志优化\n\n【重要】 打印日志好比写一篇文章，不可能一开始就把一篇文章写好。一份高效、质量高的日志，需要大家持续的优化。比如：好的日志能够在出问题的时候，清楚的知道什么人在什么时间做了什么事，以及出错的时候能够串联尽可能的上下文信息（即4H+1W）。\n\n实践准则：\n\n 1. 遵循上面的日志级别输出准则\n 2. 开发的时候要时刻反复推销线上可能出现的问题，出问题时，我的日志是否能够清晰的反应当时的问题\n 3. 至少要在线上的环境，完整的看下自己打印的日志是否合理，是否有效\n 4. 上线后，观察线上的日志是否该打的都打了，不该打的没有打，如果有不合理的地方，即时发版更新下（修改和添加日志不会影响业务功能），在之后发现不合理的时候，可以单独发掉或者跟着新的需求一起发布掉\n 5. 线上的 ERROR 级别日志要达到分钟级或者至少小时级别处理\n 6. 线上的 WARN 级别日志要在天级别内处理掉\n 7. 持续的关注线上的日志是否合理，罗马不是一天建成的\n\n小技巧\n\n如何让日志在控制台打印的更优雅？\n\n\'%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) ${PID} %X{traceId} --- "%thread" "%F:%L" "%cyan(%logger{50})" : "%msg"##%n\'',normalizedContent:'# 1. 为什么要打印日志\n\n在后端开发中，日志的打印具有重要的意义，当系统在线下调试时，能够详细输出过程参数，以及上线后，系统出问题时，能够有记录可查看。\n\n\n# 2. 日志级别的种类\n\n日志级别种类总共为 4 类，如下所示（不允许再添加其他级别的日志，比如：trace）：\n\n> error > warn > info > debug 日志级别依次递减。\n\n\n# 3. 各种日志级别的使用场景\n\n * error 日志级别使用场景（本质： 系统出现严重错误、或者未知的错误，需要马上处理!!! ）\n   \n   * 所有的异常相关的日志，都应该用 error 级别日志来打印，除非后面，这类日志觉得不重要，可以降级为 warn 级别。\n   * 如果代码中确定某种流程或者分支一定不会出现，也可以打印为error级别的日志（特别是在 if/else 分支的场景）。\n\n * warn 日志级别使用场景（本质： 系统出现问题，但是不足以影响主流程，可在当天内处理掉!!！）\n   \n   * 参数校验异常一般用 warn 级别打印日志。\n   * 重试时，打印中间的状态过程，使用 warn 级别日志。\n   * 某些场景（不影响主流程） error 级别日志降级为 warn\n\n * info 日志级别使用场景（本质： 记录状态的日志，用于了解系统的运行情况!!!）\n   \n   * 定时任务运行时，开始和结束的打印日志使用 info 级别日志。\n   * 项目启动成功时，一些参数的打印使用 info 级别日志。\n   * apollo配置的变更，使用 info 级别日志，记录状态的变更。\n   * 初始化任务，使用 info 级别日志，就初始化日志的开始和结束时间\n   * 慢日志的打印，使用 info 级别打印。\n\n * debug 日志级别使用场景（本质： 用户线下环境进行调试时的中间过程打印，线上一般不开启!!!）\n   \n   * 线下环境的入参以及返回值的打印。\n\n\n# 4. 不同环境使用级别\n\n * 线下环境使用（最低级别 debug）：error > warn > info > debug\n * 线上环境使用（最低级别 info）：error > warn > info\n\n\n# 5. 线上日志如何监控\n\n线上的日志级别监控分为两大类：\n\n 1. error 日志监控告警，告警发送到企业微信小组群。\n 2. warn 日志监控告警，告警发送到企业微信小组群。\n\n\n# 6. 持续的日志优化\n\n【重要】 打印日志好比写一篇文章，不可能一开始就把一篇文章写好。一份高效、质量高的日志，需要大家持续的优化。比如：好的日志能够在出问题的时候，清楚的知道什么人在什么时间做了什么事，以及出错的时候能够串联尽可能的上下文信息（即4h+1w）。\n\n实践准则：\n\n 1. 遵循上面的日志级别输出准则\n 2. 开发的时候要时刻反复推销线上可能出现的问题，出问题时，我的日志是否能够清晰的反应当时的问题\n 3. 至少要在线上的环境，完整的看下自己打印的日志是否合理，是否有效\n 4. 上线后，观察线上的日志是否该打的都打了，不该打的没有打，如果有不合理的地方，即时发版更新下（修改和添加日志不会影响业务功能），在之后发现不合理的时候，可以单独发掉或者跟着新的需求一起发布掉\n 5. 线上的 error 级别日志要达到分钟级或者至少小时级别处理\n 6. 线上的 warn 级别日志要在天级别内处理掉\n 7. 持续的关注线上的日志是否合理，罗马不是一天建成的\n\n小技巧\n\n如何让日志在控制台打印的更优雅？\n\n\'%d{yyyy-mm-dd hh:mm:ss.sss} %highlight(%-5level) ${pid} %x{traceid} --- "%thread" "%f:%l" "%cyan(%logger{50})" : "%msg"##%n\'',charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"轻松正确理解并上手RESTful",frontmatter:{title:"轻松正确理解并上手RESTful",date:"2022-07-13T11:18:33.000Z",permalink:"/pages/72847a/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/40.%E8%BD%BB%E6%9D%BE%E6%AD%A3%E7%A1%AE%E7%90%86%E8%A7%A3%E5%B9%B6%E4%B8%8A%E6%89%8BRESTful.html",relativePath:"10.后端开发/40.服务端小技巧合集/40.轻松正确理解并上手RESTful.md",key:"v-71032d64",path:"/pages/72847a/",headers:[{level:2,title:"1. RESTful 的概念",slug:"_1-restful-的概念",normalizedTitle:"1. restful 的概念",charIndex:24},{level:2,title:"2. CRUD 与 RESTful 对应的操作",slug:"_2-crud-与-restful-对应的操作",normalizedTitle:"2. crud 与 restful 对应的操作",charIndex:424},{level:2,title:"3. RESTful 的规范",slug:"_3-restful-的规范",normalizedTitle:"3. restful 的规范",charIndex:1116},{level:2,title:"4. 异步任务",slug:"_4-异步任务",normalizedTitle:"4. 异步任务",charIndex:1215},{level:2,title:"5.  避免层级过深的 URI",slug:"_5-避免层级过深的-uri",normalizedTitle:"5.  避免层级过深的 uri",charIndex:null},{level:2,title:"6. 举例说明",slug:"_6-举例说明",normalizedTitle:"6. 举例说明",charIndex:2079},{level:3,title:"6.1 C端的项目名称叫做 client-user-behavior",slug:"_6-1-c端的项目名称叫做-client-user-behavior",normalizedTitle:"6.1 c端的项目名称叫做 client-user-behavior",charIndex:2121},{level:3,title:"6.2 A 端的项目名称叫做  admin-questionnaire",slug:"_6-2-a-端的项目名称叫做-admin-questionnaire",normalizedTitle:"6.2 a 端的项目名称叫做  admin-questionnaire",charIndex:null}],headersStr:"1. RESTful 的概念 2. CRUD 与 RESTful 对应的操作 3. RESTful 的规范 4. 异步任务 5.  避免层级过深的 URI 6. 举例说明 6.1 C端的项目名称叫做 client-user-behavior 6.2 A 端的项目名称叫做  admin-questionnaire",content:'> 指导准则：类似电脑里面的文件夹位置\n\n\n# 1. RESTful 的概念\n\nREST 的英文全称 Representational State Transfer，即“表现层状态转移”。\n\nREST 的名称“表现层状态转化”中，省略了主语，“表现层”其实指的是“资源”（Resources）的“表现层”。\n\n**所谓“资源”，就是网络上的一个实体，或者说是网络上的一个一个具体信息。**它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。\n\nHTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。他们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源（也可以用来更新资源），PUT 用来更新资源，DELETE 用来删除资源。\n\n最常见的一种设计错误，就是 URI 包含动词。因为“资源”表示一种实体，所以应该是名词，URI 不应该有动词，动词应该放在 HTTP 协议中。\n\n\n# 2. CRUD 与 RESTful 对应的操作\n\n在 REST风格中，对于增删改查 CRUD（即：create、read、update、delete），分别对应如下：\n\n操作                      RESTFUL\ncreate                  POST\nread                    GET\nupdate                  PUT\ndelete                  DELETE\n各种 HTTP 方法成功处理后的数据格式：   \n\n请求方式        RESPONSE格式\nGET         单个对象、集合\nPOST        新增成功的对象\nPUT/PATCH   更新成功的对象\nDELETE      空\n\n常用的http状态码及使用场景：\n\n状态码                         使用场景\n400 bad request             常用在参数校验\n401 unauthorized            未验证的用户，常见于未登录。如果经过验证后依然没权限，应该403（即authentication和authorization的区别）\n403 forbiden                无权限\n404 not found               资源不存在\n500 internal server error   非业务类异常\n503 service unavalibale     有容器抛出，自己的代码不要抛出这个异常\n\n\n# 3. RESTful 的规范\n\n 1. 不能出现动词\n 2. URI 中的名词根据对应的名词是否存在单个还是多个进行确定是否是单数还是复数\n 3. 可以用中杠-或者下杠_,更加推荐用中杠-\n\n\n# 4. 异步任务\n\n对耗时的异步任务，服务器接受客户端传递的参数后，应返回成功的任务资源，其中包含了任务的执行状态。科幻可以轮询改任务获得最新的执行进度。\n\n提交任务：\n\nPOST /batch-publish-msg\n[{"from":0, "to": 1, "text": "abc"}, {}, {{}}]\n\n\n返回：\n\n{"taskId": 3, "createBy": "Anonymous", "status": "running"}\n\n\n让客户端查询该任务的状态的接口：\n\nGET /task/3\n{"taskId": 3, "createBy": "Anonymous", "status": "success"}\n\n\n如果任务的执行状态包括较多信息，可以把"执行状态"抽象成组合资源，客户端查询该状态资源了解任务的还行情况。\n\nGET /task/3/status\n{"progress": "50%", "total": 18, "success": 8, "fail": 1}\n\n\n\n# 5. 避免层级过深的 URI\n\n在 url 中表达层级，用于按实体关系进行对象导航，过度的导航容易导致 url 膨胀，\n\n错误：\n\nGET /zoos/1/areas/3/animals/4\n\n\n尽量使用查询参数代替路径中的实体导航，如：\n\nGET /animals?zoo=1&area=3\n\n\n组合实体不是 first-class 的实体，它的生命周期完全依赖父实体，无法独立存在，在实际上通常是数据库表中某些抽象，不直接对应表，也无 id。一个常见的例子是 User-Address，Address 是User 表中 zipCode/country/city 三个字段的简单抽象，无法独立于 User 存在，必须通过 User 索引到 Address，如：\n\nGET /user/1/addresses\n\n\n资源的地址推荐用嵌套结构。比如：\n\nGET /friends/10375923/profile\n\n\n\n# 6. 举例说明\n\n在我们项目中，有个同事这么设计问卷系统的 API 设计：\n\n\n# 6.1 C端的项目名称叫做 client-user-behavior\n\n通常 url 的前缀是带上项目的（因为项目名称具有特定的含义且具有唯一性）\n\n1. 用户获取问卷信息 GET /client/questionnaire/paper/{paper_id}\n\n> 优化为：GET /client-user-behavior/questionnaire/papers/{paper_id} ** 说明：** 最好加上项目维度，项目的子模块questionnaire用单数，因为只存在一个，papers用复数，因为问卷不止一个\n\n2. 用户提交问卷答案信息 POST /client/questionnaire/answer\n\n> 优化为：POST /client-user-behavior/questionnaire/papers **说明：**用户提交问卷的主体应该是问卷，answer是附属的信息\n\n\n# 6.2 A 端的项目名称叫做 admin-questionnaire\n\n1. 分页查询问卷列表 GET /admin/questionnaire/paper\n\n> 优化为：GET /admin-questionnaire/questionnaire/papers ** 说明**：这个是业内共识，RESTful风格获取列表信息都这么写\n\n2. 查看问卷详情（包含问卷基本信息和问题配置） GET /admin/questionnaire/paper/{id}\n\n> 优化为：GET /admin-questionnaire/questionnaire/papers/{paper_id} **说明：**查看问卷详情中的{id}推荐用{paper_id}，可以简洁明了的知道是哪个id\n\n3. 复制问卷 POST /admin/questionnaire/paper/copy\n\n> 这个接口可以和查看问卷详情公用，有特殊需要一定要写新的接口，也应该是GET方式\n\n4. 编辑问卷题目 PUT /admin/questionnaire/paper/{id}/question\n\n> 优化为：PUT /admin-questionnaire/questionnaire/papers/{paper_id}/questions/{question_id}\n\n5. 新增问卷基本信息 POST /admin/questionnaire/paper\n\n> 优化为：POST /admin-questionnaire/questionnaire/papers/base_info\n\n6. 编辑问卷基本信息 PUT /admin/questionnaire/paper/{id}\n\n> 优化为：PUT /admin-questionnaire/questionnaire/papers/{paper_id}/base_info\n\n7. 删除问卷 DELETE /admin/questionnaire/{id}\n\n> 优化为：DELETE /admin-questionnaire/questionnaire/papers/{paper_id}\n\n8. 问卷启用禁用 PUT /admin/questionnaire/{id}/status\n\n> 优化为：PUT /admin-questionnaire/questionnaire/papers/{paper_id}/statuses/{status}\n\n9. 查看问卷答题明细列表动态表头 GET /admin/questionnaire/{id}/question_title\n\n> 优化为：GET /admin-questionnaire/questionnaire/papers/{paper_id}/question_titles\n\n10. 问卷答题明细导出 GET /admin/questionnaire/{id}/answer_record_export\n\n> 优化为：GET /admin-questionnaire/questionnaire/papers/{paper_id}/export',normalizedContent:'> 指导准则：类似电脑里面的文件夹位置\n\n\n# 1. restful 的概念\n\nrest 的英文全称 representational state transfer，即“表现层状态转移”。\n\nrest 的名称“表现层状态转化”中，省略了主语，“表现层”其实指的是“资源”（resources）的“表现层”。\n\n**所谓“资源”，就是网络上的一个实体，或者说是网络上的一个一个具体信息。**它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。\n\nhttp 协议里面，四个表示操作方式的动词：get、post、put、delete。他们分别对应四种基本操作：get 用来获取资源，post 用来新建资源（也可以用来更新资源），put 用来更新资源，delete 用来删除资源。\n\n最常见的一种设计错误，就是 uri 包含动词。因为“资源”表示一种实体，所以应该是名词，uri 不应该有动词，动词应该放在 http 协议中。\n\n\n# 2. crud 与 restful 对应的操作\n\n在 rest风格中，对于增删改查 crud（即：create、read、update、delete），分别对应如下：\n\n操作                      restful\ncreate                  post\nread                    get\nupdate                  put\ndelete                  delete\n各种 http 方法成功处理后的数据格式：   \n\n请求方式        response格式\nget         单个对象、集合\npost        新增成功的对象\nput/patch   更新成功的对象\ndelete      空\n\n常用的http状态码及使用场景：\n\n状态码                         使用场景\n400 bad request             常用在参数校验\n401 unauthorized            未验证的用户，常见于未登录。如果经过验证后依然没权限，应该403（即authentication和authorization的区别）\n403 forbiden                无权限\n404 not found               资源不存在\n500 internal server error   非业务类异常\n503 service unavalibale     有容器抛出，自己的代码不要抛出这个异常\n\n\n# 3. restful 的规范\n\n 1. 不能出现动词\n 2. uri 中的名词根据对应的名词是否存在单个还是多个进行确定是否是单数还是复数\n 3. 可以用中杠-或者下杠_,更加推荐用中杠-\n\n\n# 4. 异步任务\n\n对耗时的异步任务，服务器接受客户端传递的参数后，应返回成功的任务资源，其中包含了任务的执行状态。科幻可以轮询改任务获得最新的执行进度。\n\n提交任务：\n\npost /batch-publish-msg\n[{"from":0, "to": 1, "text": "abc"}, {}, {{}}]\n\n\n返回：\n\n{"taskid": 3, "createby": "anonymous", "status": "running"}\n\n\n让客户端查询该任务的状态的接口：\n\nget /task/3\n{"taskid": 3, "createby": "anonymous", "status": "success"}\n\n\n如果任务的执行状态包括较多信息，可以把"执行状态"抽象成组合资源，客户端查询该状态资源了解任务的还行情况。\n\nget /task/3/status\n{"progress": "50%", "total": 18, "success": 8, "fail": 1}\n\n\n\n# 5. 避免层级过深的 uri\n\n在 url 中表达层级，用于按实体关系进行对象导航，过度的导航容易导致 url 膨胀，\n\n错误：\n\nget /zoos/1/areas/3/animals/4\n\n\n尽量使用查询参数代替路径中的实体导航，如：\n\nget /animals?zoo=1&area=3\n\n\n组合实体不是 first-class 的实体，它的生命周期完全依赖父实体，无法独立存在，在实际上通常是数据库表中某些抽象，不直接对应表，也无 id。一个常见的例子是 user-address，address 是user 表中 zipcode/country/city 三个字段的简单抽象，无法独立于 user 存在，必须通过 user 索引到 address，如：\n\nget /user/1/addresses\n\n\n资源的地址推荐用嵌套结构。比如：\n\nget /friends/10375923/profile\n\n\n\n# 6. 举例说明\n\n在我们项目中，有个同事这么设计问卷系统的 api 设计：\n\n\n# 6.1 c端的项目名称叫做 client-user-behavior\n\n通常 url 的前缀是带上项目的（因为项目名称具有特定的含义且具有唯一性）\n\n1. 用户获取问卷信息 get /client/questionnaire/paper/{paper_id}\n\n> 优化为：get /client-user-behavior/questionnaire/papers/{paper_id} ** 说明：** 最好加上项目维度，项目的子模块questionnaire用单数，因为只存在一个，papers用复数，因为问卷不止一个\n\n2. 用户提交问卷答案信息 post /client/questionnaire/answer\n\n> 优化为：post /client-user-behavior/questionnaire/papers **说明：**用户提交问卷的主体应该是问卷，answer是附属的信息\n\n\n# 6.2 a 端的项目名称叫做 admin-questionnaire\n\n1. 分页查询问卷列表 get /admin/questionnaire/paper\n\n> 优化为：get /admin-questionnaire/questionnaire/papers ** 说明**：这个是业内共识，restful风格获取列表信息都这么写\n\n2. 查看问卷详情（包含问卷基本信息和问题配置） get /admin/questionnaire/paper/{id}\n\n> 优化为：get /admin-questionnaire/questionnaire/papers/{paper_id} **说明：**查看问卷详情中的{id}推荐用{paper_id}，可以简洁明了的知道是哪个id\n\n3. 复制问卷 post /admin/questionnaire/paper/copy\n\n> 这个接口可以和查看问卷详情公用，有特殊需要一定要写新的接口，也应该是get方式\n\n4. 编辑问卷题目 put /admin/questionnaire/paper/{id}/question\n\n> 优化为：put /admin-questionnaire/questionnaire/papers/{paper_id}/questions/{question_id}\n\n5. 新增问卷基本信息 post /admin/questionnaire/paper\n\n> 优化为：post /admin-questionnaire/questionnaire/papers/base_info\n\n6. 编辑问卷基本信息 put /admin/questionnaire/paper/{id}\n\n> 优化为：put /admin-questionnaire/questionnaire/papers/{paper_id}/base_info\n\n7. 删除问卷 delete /admin/questionnaire/{id}\n\n> 优化为：delete /admin-questionnaire/questionnaire/papers/{paper_id}\n\n8. 问卷启用禁用 put /admin/questionnaire/{id}/status\n\n> 优化为：put /admin-questionnaire/questionnaire/papers/{paper_id}/statuses/{status}\n\n9. 查看问卷答题明细列表动态表头 get /admin/questionnaire/{id}/question_title\n\n> 优化为：get /admin-questionnaire/questionnaire/papers/{paper_id}/question_titles\n\n10. 问卷答题明细导出 get /admin/questionnaire/{id}/answer_record_export\n\n> 优化为：get /admin-questionnaire/questionnaire/papers/{paper_id}/export',charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"服务端业务线程池优雅使用",frontmatter:{title:"服务端业务线程池优雅使用",date:"2022-11-16T16:48:40.000Z",permalink:"/pages/344010/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/50.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%9A%E5%8A%A1%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8.html",relativePath:"10.后端开发/40.服务端小技巧合集/50.服务端业务线程池优雅使用.md",key:"v-1b7cfb8f",path:"/pages/344010/",headersStr:null,content:'\n/**\n * 线程池配置\n *\n * @author chenjintian\n * @date 2019/9/27\n */\n@Configuration\n@EnableAsync\n@Slf4j\npublic class ThreadPoolConfig {\n\n    private static final String TRACE_ID = "traceId";\n    private CommonThreadPoolProperties commonThreadPoolProperties;\n    private RedisOperatorThreadPoolProperties redisOperatorThreadPoolProperties;\n\n    @Autowired\n    public ThreadPoolConfig(CommonThreadPoolProperties commonThreadPoolProperties, RedisOperatorThreadPoolProperties redisOperatorThreadPoolProperties) {\n        this.commonThreadPoolProperties = commonThreadPoolProperties;\n        this.redisOperatorThreadPoolProperties = redisOperatorThreadPoolProperties;\n    }\n\n    /**\n     * 公共线程池\n     *\n     * <p> 如果觉得不是很重要的服务可以统一用一个线程池\n     */\n    @Bean(value = "commonThreadPoolTaskExecutor")\n    public ThreadPoolTaskExecutor commonThreadPoolTaskExecutor() {\n        return getThreadPoolTaskExecutor(commonThreadPoolProperties);\n    }\n\n    /**\n     * redis 操作线程池\n     */\n    @Bean(value = "redisOperatorThreadPoolTaskExecutor")\n    public ThreadPoolTaskExecutor redisOperatorThreadPoolTaskExecutor() {\n        // todo 监听线程池使用的情况\n\n        return getThreadPoolTaskExecutor(redisOperatorThreadPoolProperties);\n    }\n\n    /**\n     * 根据线程池的属性值获取对应线程的设置\n     *\n     * @param baseThreadPoolProperties 线程池配置信息\n     * @return 线程池\n     */\n    private ThreadPoolTaskExecutor getThreadPoolTaskExecutor(BaseThreadPoolProperties baseThreadPoolProperties) {\n        ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();\n        if (StringUtils.isNotBlank(baseThreadPoolProperties.getThreadGroupName())) {\n            threadPoolTaskExecutor.setThreadGroupName(baseThreadPoolProperties.getThreadGroupName());\n        }\n        if (StringUtils.isNotBlank(baseThreadPoolProperties.getThreadNamePrefix())) {\n            threadPoolTaskExecutor.setThreadNamePrefix(baseThreadPoolProperties.getThreadNamePrefix());\n        }\n        if (null != baseThreadPoolProperties.getCorePoolSize() && baseThreadPoolProperties.getCorePoolSize() > 0) {\n            threadPoolTaskExecutor.setCorePoolSize(baseThreadPoolProperties.getCorePoolSize());\n        }\n        if (null != baseThreadPoolProperties.getQueueCapacity() && baseThreadPoolProperties.getQueueCapacity() > 0) {\n            threadPoolTaskExecutor.setQueueCapacity(baseThreadPoolProperties.getQueueCapacity());\n        }\n        if (null != baseThreadPoolProperties.getMaxPoolSize() && baseThreadPoolProperties.getMaxPoolSize() > 0) {\n            threadPoolTaskExecutor.setMaxPoolSize(baseThreadPoolProperties.getMaxPoolSize());\n        }\n        if (null != baseThreadPoolProperties.getKeepAliveSeconds() && baseThreadPoolProperties.getKeepAliveSeconds() > 0) {\n            threadPoolTaskExecutor.setKeepAliveSeconds(baseThreadPoolProperties.getKeepAliveSeconds());\n        }\n        // 设置拒绝策略\n        if (StringUtils.isNotBlank(baseThreadPoolProperties.getRejectedPolicy())) {\n            ThreadPoolRejectedPolicyEnum threadPoolRejectedPolicyEnum = ThreadPoolRejectedPolicyEnum.toEnum(baseThreadPoolProperties.getRejectedPolicy());\n            if (null != threadPoolRejectedPolicyEnum) {\n                threadPoolTaskExecutor.setRejectedExecutionHandler(threadPoolRejectedPolicyEnum.getRejectedExecutionHandler());\n            } else {\n                log.warn("Not exist rejectedPolicy:{}, return threadPoolRejectedPolicyEnum null.", baseThreadPoolProperties.getRejectedPolicy());\n            }\n        }\n        // 设置MdcRunnable\n        threadPoolTaskExecutor.setTaskDecorator(new MdcTaskDecorator());\n        return threadPoolTaskExecutor;\n    }\n\n    /**\n     * 主线程traceId传入到子线程（注意：线程池池化）\n     */\n    private static class MdcTaskDecorator implements TaskDecorator {\n\n        @Override\n        public Runnable decorate(Runnable runnable) {\n            String traceId = MDC.get(TRACE_ID);\n            return () -> {\n                try {\n                    MDC.put(TRACE_ID, traceId);\n                    runnable.run();\n                } finally {\n                    MDC.remove(TRACE_ID);\n                }\n            };\n        }\n    }\n}\n',normalizedContent:'\n/**\n * 线程池配置\n *\n * @author chenjintian\n * @date 2019/9/27\n */\n@configuration\n@enableasync\n@slf4j\npublic class threadpoolconfig {\n\n    private static final string trace_id = "traceid";\n    private commonthreadpoolproperties commonthreadpoolproperties;\n    private redisoperatorthreadpoolproperties redisoperatorthreadpoolproperties;\n\n    @autowired\n    public threadpoolconfig(commonthreadpoolproperties commonthreadpoolproperties, redisoperatorthreadpoolproperties redisoperatorthreadpoolproperties) {\n        this.commonthreadpoolproperties = commonthreadpoolproperties;\n        this.redisoperatorthreadpoolproperties = redisoperatorthreadpoolproperties;\n    }\n\n    /**\n     * 公共线程池\n     *\n     * <p> 如果觉得不是很重要的服务可以统一用一个线程池\n     */\n    @bean(value = "commonthreadpooltaskexecutor")\n    public threadpooltaskexecutor commonthreadpooltaskexecutor() {\n        return getthreadpooltaskexecutor(commonthreadpoolproperties);\n    }\n\n    /**\n     * redis 操作线程池\n     */\n    @bean(value = "redisoperatorthreadpooltaskexecutor")\n    public threadpooltaskexecutor redisoperatorthreadpooltaskexecutor() {\n        // todo 监听线程池使用的情况\n\n        return getthreadpooltaskexecutor(redisoperatorthreadpoolproperties);\n    }\n\n    /**\n     * 根据线程池的属性值获取对应线程的设置\n     *\n     * @param basethreadpoolproperties 线程池配置信息\n     * @return 线程池\n     */\n    private threadpooltaskexecutor getthreadpooltaskexecutor(basethreadpoolproperties basethreadpoolproperties) {\n        threadpooltaskexecutor threadpooltaskexecutor = new threadpooltaskexecutor();\n        if (stringutils.isnotblank(basethreadpoolproperties.getthreadgroupname())) {\n            threadpooltaskexecutor.setthreadgroupname(basethreadpoolproperties.getthreadgroupname());\n        }\n        if (stringutils.isnotblank(basethreadpoolproperties.getthreadnameprefix())) {\n            threadpooltaskexecutor.setthreadnameprefix(basethreadpoolproperties.getthreadnameprefix());\n        }\n        if (null != basethreadpoolproperties.getcorepoolsize() && basethreadpoolproperties.getcorepoolsize() > 0) {\n            threadpooltaskexecutor.setcorepoolsize(basethreadpoolproperties.getcorepoolsize());\n        }\n        if (null != basethreadpoolproperties.getqueuecapacity() && basethreadpoolproperties.getqueuecapacity() > 0) {\n            threadpooltaskexecutor.setqueuecapacity(basethreadpoolproperties.getqueuecapacity());\n        }\n        if (null != basethreadpoolproperties.getmaxpoolsize() && basethreadpoolproperties.getmaxpoolsize() > 0) {\n            threadpooltaskexecutor.setmaxpoolsize(basethreadpoolproperties.getmaxpoolsize());\n        }\n        if (null != basethreadpoolproperties.getkeepaliveseconds() && basethreadpoolproperties.getkeepaliveseconds() > 0) {\n            threadpooltaskexecutor.setkeepaliveseconds(basethreadpoolproperties.getkeepaliveseconds());\n        }\n        // 设置拒绝策略\n        if (stringutils.isnotblank(basethreadpoolproperties.getrejectedpolicy())) {\n            threadpoolrejectedpolicyenum threadpoolrejectedpolicyenum = threadpoolrejectedpolicyenum.toenum(basethreadpoolproperties.getrejectedpolicy());\n            if (null != threadpoolrejectedpolicyenum) {\n                threadpooltaskexecutor.setrejectedexecutionhandler(threadpoolrejectedpolicyenum.getrejectedexecutionhandler());\n            } else {\n                log.warn("not exist rejectedpolicy:{}, return threadpoolrejectedpolicyenum null.", basethreadpoolproperties.getrejectedpolicy());\n            }\n        }\n        // 设置mdcrunnable\n        threadpooltaskexecutor.settaskdecorator(new mdctaskdecorator());\n        return threadpooltaskexecutor;\n    }\n\n    /**\n     * 主线程traceid传入到子线程（注意：线程池池化）\n     */\n    private static class mdctaskdecorator implements taskdecorator {\n\n        @override\n        public runnable decorate(runnable runnable) {\n            string traceid = mdc.get(trace_id);\n            return () -> {\n                try {\n                    mdc.put(trace_id, traceid);\n                    runnable.run();\n                } finally {\n                    mdc.remove(trace_id);\n                }\n            };\n        }\n    }\n}\n',charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"服务端如何正确优雅使用流控平台",frontmatter:{title:"服务端如何正确优雅使用流控平台",date:"2022-11-16T16:57:05.000Z",permalink:"/pages/b901a4/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/60.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8%E6%B5%81%E6%8E%A7%E5%B9%B3%E5%8F%B0.html",relativePath:"10.后端开发/40.服务端小技巧合集/60.服务端如何正确优雅使用流控平台.md",key:"v-30576858",path:"/pages/b901a4/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"服务端如何正确的使用分布式锁防止缓存击穿",frontmatter:{title:"服务端如何正确的使用分布式锁防止缓存击穿",date:"2022-11-16T16:58:01.000Z",permalink:"/pages/3e5740/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/70.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E9%98%B2%E6%AD%A2%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF.html",relativePath:"10.后端开发/40.服务端小技巧合集/70.服务端如何正确的使用分布式锁防止缓存击穿.md",key:"v-4e9681db",path:"/pages/3e5740/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"服务端接口设计最佳实践",frontmatter:{title:"服务端接口设计最佳实践",date:"2022-11-16T11:36:07.000Z",permalink:"/pages/e66200/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%90%88%E9%9B%86/80.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html",relativePath:"10.后端开发/40.服务端小技巧合集/80.服务端接口设计最佳实践.md",key:"v-201a461e",path:"/pages/e66200/",headers:[{level:2,title:"1. 接口参数校验",slug:"_1-接口参数校验",normalizedTitle:"1. 接口参数校验",charIndex:2},{level:2,title:"2. 修改老接口时，注意接口的兼容条件",slug:"_2-修改老接口时-注意接口的兼容条件",normalizedTitle:"2. 修改老接口时，注意接口的兼容条件",charIndex:308},{level:2,title:"3. 设计接口时，充分考虑接口的可扩展性",slug:"_3-设计接口时-充分考虑接口的可扩展性",normalizedTitle:"3. 设计接口时，充分考虑接口的可扩展性",charIndex:406},{level:2,title:"4. 考虑接口是否需要防重处理",slug:"_4-考虑接口是否需要防重处理",normalizedTitle:"4. 考虑接口是否需要防重处理",charIndex:597},{level:2,title:"5. 重点接口，考虑线程池隔离",slug:"_5-重点接口-考虑线程池隔离",normalizedTitle:"5. 重点接口，考虑线程池隔离",charIndex:795},{level:2,title:"6. 调用第三方接口要考虑异常和超时处理",slug:"_6-调用第三方接口要考虑异常和超时处理",normalizedTitle:"6. 调用第三方接口要考虑异常和超时处理",charIndex:934},{level:2,title:"7. 接口实现考虑熔断和降级",slug:"_7-接口实现考虑熔断和降级",normalizedTitle:"7. 接口实现考虑熔断和降级",charIndex:1207},{level:2,title:"8. 日志打印好，接口的关键代码，要有日志保价护航",slug:"_8-日志打印好-接口的关键代码-要有日志保价护航",normalizedTitle:"8. 日志打印好，接口的关键代码，要有日志保价护航",charIndex:1535},{level:2,title:"9. 接口的功能定义要具备单一性",slug:"_9-接口的功能定义要具备单一性",normalizedTitle:"9. 接口的功能定义要具备单一性",charIndex:1659},{level:2,title:"10. 接口有些场景，使用异步更合理",slug:"_10-接口有些场景-使用异步更合理",normalizedTitle:"10. 接口有些场景，使用异步更合理",charIndex:1859},{level:2,title:"11. 优化接口耗时，远程串行考虑改并行调用",slug:"_11-优化接口耗时-远程串行考虑改并行调用",normalizedTitle:"11. 优化接口耗时，远程串行考虑改并行调用",charIndex:2045},{level:2,title:"12. 接口合并或者说考虑批量处理思想",slug:"_12-接口合并或者说考虑批量处理思想",normalizedTitle:"12. 接口合并或者说考虑批量处理思想",charIndex:2328},{level:2,title:"13. 接口实现过程中，恰当使用缓存",slug:"_13-接口实现过程中-恰当使用缓存",normalizedTitle:"13. 接口实现过程中，恰当使用缓存",charIndex:2384},{level:2,title:"14. 接口考虑热点数据隔离性",slug:"_14-接口考虑热点数据隔离性",normalizedTitle:"14. 接口考虑热点数据隔离性",charIndex:2597},{level:2,title:"15. 可变参数配置化，比如红包皮肤切换等",slug:"_15-可变参数配置化-比如红包皮肤切换等",normalizedTitle:"15. 可变参数配置化，比如红包皮肤切换等",charIndex:2845},{level:2,title:"16. 接口考虑幂等性",slug:"_16-接口考虑幂等性",normalizedTitle:"16. 接口考虑幂等性",charIndex:2960},{level:2,title:"17. 读写分离，优先考虑读从库，注意主从延迟问题",slug:"_17-读写分离-优先考虑读从库-注意主从延迟问题",normalizedTitle:"17. 读写分离，优先考虑读从库，注意主从延迟问题",charIndex:3200},{level:2,title:"18. 接口返回的数据量，如果数据量大需要分页",slug:"_18-接口返回的数据量-如果数据量大需要分页",normalizedTitle:"18. 接口返回的数据量，如果数据量大需要分页",charIndex:3345},{level:2,title:"19. 好的接口实现，离不开 SQL 优化",slug:"_19-好的接口实现-离不开-sql-优化",normalizedTitle:"19. 好的接口实现，离不开 sql 优化",charIndex:3465},{level:2,title:"20. 代码锁的粒度控制好",slug:"_20-代码锁的粒度控制好",normalizedTitle:"20. 代码锁的粒度控制好",charIndex:3764},{level:2,title:"21. 接口状态和错误需要统一明确",slug:"_21-接口状态和错误需要统一明确",normalizedTitle:"21. 接口状态和错误需要统一明确",charIndex:4029},{level:2,title:"22. 接口要考虑异常处理",slug:"_22-接口要考虑异常处理",normalizedTitle:"22. 接口要考虑异常处理",charIndex:4198},{level:2,title:"23. 优化程序逻辑",slug:"_23-优化程序逻辑",normalizedTitle:"23. 优化程序逻辑",charIndex:4678},{level:2,title:"24. 接口实现过程中，注意大文件、大事务、大对象",slug:"_24-接口实现过程中-注意大文件、大事务、大对象",normalizedTitle:"24. 接口实现过程中，注意大文件、大事务、大对象",charIndex:4910},{level:2,title:"25. 你的接口，需要考虑限流",slug:"_25-你的接口-需要考虑限流",normalizedTitle:"25. 你的接口，需要考虑限流",charIndex:5099},{level:2,title:"26. 代码实现时，注意运行是异常（比如空指针、下标越界等）",slug:"_26-代码实现时-注意运行是异常-比如空指针、下标越界等",normalizedTitle:"26. 代码实现时，注意运行是异常（比如空指针、下标越界等）",charIndex:5373},{level:2,title:"27. 保证接口安全性",slug:"_27-保证接口安全性",normalizedTitle:"27. 保证接口安全性",charIndex:5648},{level:2,title:"28. 分布式事务，如何保证",slug:"_28-分布式事务-如何保证",normalizedTitle:"28. 分布式事务，如何保证",charIndex:5717},{level:2,title:"29. 事务失效的一些经典场景",slug:"_29-事务失效的一些经典场景",normalizedTitle:"29. 事务失效的一些经典场景",charIndex:5936},{level:2,title:"30. 掌握常见的设计模式",slug:"_30-掌握常见的设计模式",normalizedTitle:"30. 掌握常见的设计模式",charIndex:6229},{level:2,title:"31. 写代码时，考虑线程安全问题",slug:"_31-写代码时-考虑线程安全问题",normalizedTitle:"31. 写代码时，考虑线程安全问题",charIndex:6347},{level:2,title:"32. 接口定义清晰易懂，命名规范",slug:"_32-接口定义清晰易懂-命名规范",normalizedTitle:"32. 接口定义清晰易懂，命名规范",charIndex:6574},{level:2,title:"33. 接口的版本控制",slug:"_33-接口的版本控制",normalizedTitle:"33. 接口的版本控制",charIndex:6672},{level:2,title:"34. 注意代码规范问题",slug:"_34-注意代码规范问题",normalizedTitle:"34. 注意代码规范问题",charIndex:6829},{level:2,title:"35. 保证接口正确性，其实就是保证更少的 bug",slug:"_35-保证接口正确性-其实就是保证更少的-bug",normalizedTitle:"35. 保证接口正确性，其实就是保证更少的 bug",charIndex:6979},{level:2,title:"36. 学会沟通，跟前端沟通，跟产品沟通",slug:"_36-学会沟通-跟前端沟通-跟产品沟通",normalizedTitle:"36. 学会沟通，跟前端沟通，跟产品沟通",charIndex:7181}],headersStr:"1. 接口参数校验 2. 修改老接口时，注意接口的兼容条件 3. 设计接口时，充分考虑接口的可扩展性 4. 考虑接口是否需要防重处理 5. 重点接口，考虑线程池隔离 6. 调用第三方接口要考虑异常和超时处理 7. 接口实现考虑熔断和降级 8. 日志打印好，接口的关键代码，要有日志保价护航 9. 接口的功能定义要具备单一性 10. 接口有些场景，使用异步更合理 11. 优化接口耗时，远程串行考虑改并行调用 12. 接口合并或者说考虑批量处理思想 13. 接口实现过程中，恰当使用缓存 14. 接口考虑热点数据隔离性 15. 可变参数配置化，比如红包皮肤切换等 16. 接口考虑幂等性 17. 读写分离，优先考虑读从库，注意主从延迟问题 18. 接口返回的数据量，如果数据量大需要分页 19. 好的接口实现，离不开 SQL 优化 20. 代码锁的粒度控制好 21. 接口状态和错误需要统一明确 22. 接口要考虑异常处理 23. 优化程序逻辑 24. 接口实现过程中，注意大文件、大事务、大对象 25. 你的接口，需要考虑限流 26. 代码实现时，注意运行是异常（比如空指针、下标越界等） 27. 保证接口安全性 28. 分布式事务，如何保证 29. 事务失效的一些经典场景 30. 掌握常见的设计模式 31. 写代码时，考虑线程安全问题 32. 接口定义清晰易懂，命名规范 33. 接口的版本控制 34. 注意代码规范问题 35. 保证接口正确性，其实就是保证更少的 bug 36. 学会沟通，跟前端沟通，跟产品沟通",content:"# 1. 接口参数校验\n\n入参出参校验是每个程序员必备的基本素质，你设计的接口，必须先校验参数，比如入参是否允许为空，入参长度是否符合你的预期长度。这个要养成习惯，日常开发中， 很多低级 bug 都是不校验参数导致的。\n\n> 比如：你的数据库表字段设置为varchar(16)，对方传了一个 32 位的字符串过来。如果你不校验参数，插入数据库就直接异常了。\n\n出参也是，比如你定义的接口报文，参数是不为空的，但是你的接口返回参数，没有做校验，因为程序某些原因，直接返回别人一个 null 值。\n\n注意： 在前端有对参数进行校验的前提下，服务端的接口也要进行校验，避免爬虫或者前端漏校验，导致一些低级的错误。\n\n\n# 2. 修改老接口时，注意接口的兼容条件\n\n很多 bug 都是因为修改了对外接口，但是却不做兼容导致的，关键这个问题多数是比较严重的，可能直接导致系统发版失败，新手程序员很容易犯这个错误。\n\n\n# 3. 设计接口时，充分考虑接口的可扩展性\n\n要根据实际业务场景设计接口，充分考虑接口的可扩展性。\n\n比如你接到一个需求：是用户添加或修改员工时，需要刷脸，那你是反手提供一个员工管理的提交刷脸信息接口？还是先思考，提交刷脸流程是不是通用流程？比如转账或者一键贴需要接入刷脸的话， 你是否需要重新实现一个接口呢？还是当前业务类型划分模块，复用这个接口就好，保留接口的可扩展性。\n\n\n# 4. 考虑接口是否需要防重处理\n\n如果前端重复请求，你的逻辑如何处理？是不是考虑接口去重处理。\n\n当然，如果是查询类的请求，其实不用防重。如果是更新修改类的话，尤其金融转账类的，就要过滤重复请求了。简单点，你可以 使用 Redis 防重复请求，同样请求方，一定时间间隔内的相同请求，考虑是否过滤。当然，转账类接口，并发不高的话， 推荐使用数据库防重表，已唯一流水号作为主键或者唯一索引。\n\n\n# 5. 重点接口，考虑线程池隔离\n\n一些登录、转账交易、下单等重要接口，考虑线程池隔离。如果你所有业务都共用一个线程池，有些业务出 bug 导致线程池阻塞打满的话， 那就悲剧了，所有业务都受影响了。因此，进行线程池隔离，重要业务独立一个线程池，就能更更好的保护重要业务。\n\n\n# 6. 调用第三方接口要考虑异常和超时处理\n\n如果你调用第三方接口，或者分布式远程服务的话，需要考虑。\n\n * 异常处理\n\n> 比如：你调别人的接口，如果异常了，怎么处理，是重试还是当做失败还是告警处理。\n\n * 接口超时\n\n> 没法预估对方接口一般多久超时，一般设置个超时断开时间，以保护你的接口。之前见过一个生产问题， 就是 http 调用不设置超时时间，最后响应方进程假死，请求一直占着线程不释放，当请求量不断打进来，进而拖垮线程池。\n\n * 重试次数\n\n> 你的接口调失败，需不需要重试？重试几次？需要站在业务角度上思考这个问题。\n\n\n# 7. 接口实现考虑熔断和降级\n\n当前互联网系统一般是分布式部署的。而分布式系统中，经常会出现某个基础服务不可用，最终导致整个系统不可用的情况。这种现象被称为服务雪崩效应。\n\n> A->B->C...中，如果服务C出现问题，比如是因为慢SQL导致调用缓慢，那将导致B也会延迟，从而A也会延迟，堵住的A请求会消耗占用系统的线程、IO等资源，当请求 A 的服务 越来越多，占用的计算机资源也越来越多，最终会导致系统瓶颈出现，造成其他的请求同样不可用，最后导致业务系统奔溃。\n\n为了应对服务雪崩，常见的做法是 熔断和降级，最简单就是加开关控制，当下游系统出问题时， 开关降级，不在调用下游系统，推荐用：阿里开源的 sentinel 或者 Hystrix。\n\n\n# 8. 日志打印好，接口的关键代码，要有日志保价护航\n\n关键业务代码无论身处何地，都应该有足够的日志保驾护航。比如：你实时转账业务，转个几百万，然后转失败了， 接着客户投诉，然后你还没有打印到日志，想想哪种水中火热的困境下，你却毫无办法……\n\n\n# 9. 接口的功能定义要具备单一性\n\n单一性是指接口做的事情比较单一、专一。比如一个登陆接口，它做的事情就只是校验账户名密码， 然后返回登录成功以及userId即可。但是如果你为了减少接口交互，把一些注册、一些配置查询等全放到登录接口，就不太妥。\n\n其实，这也是微服务一些思想，接口的功能单一、明确。比如订单服务、积分、商品信息相关的接口都是划分开的。将来拆分微服务的话，是不是就比较简便啦。\n\n\n# 10. 接口有些场景，使用异步更合理\n\n举个简单的例子，比如你实现一个用户注册的接口。用户注册成功时，发个邮件或者短信去通知用户。这个邮件或者发短信，就更适合异步处理，因为总不能一个通知类的失败，导致注册失败吧。\n\n至于做异步的方式，简单的就是用线程池。还可以使用消息队列，就是用户注册成功后，生产者产生一个注册成功的消息，消费者拉到注册成功的消息，就发送通知。\n\n\n# 11. 优化接口耗时，远程串行考虑改并行调用\n\n假设我们设计一个 APP 首页的接口，它需要查用户信息，需要查 banner 信息，需要查弹窗信息等等。那你是一个一个接口串行调，还是并行调呢？\n\n如果是串行一个一个查，比如查用户信息 200ms，查 banner 信息 100ms，查弹窗信息 50ms，那一共就耗时 350ms。如果还查其他信息， 那耗时就更大了。这种场景是可以改为并行调用，也就是说查用户信息、查banner信息、查弹窗信息，可以同时发起。\n\n在Java中有个异步编程利器：CompletableFuture，就可以很好的实现这个功能。\n\n\n# 12. 接口合并或者说考虑批量处理思想\n\n数据库操作或者是远程调用时，能批量操作就不要for循环调用。\n\n\n# 13. 接口实现过程中，恰当使用缓存\n\n哪些场景适合使用缓存？读多写少且数据时效性要求越低的场景。\n\n缓存用的好，可以承载更多的请求，提升查询效率，减少数据库的压力。\n\n> 比如一些平时变动很小或者几乎不会变的商品信息，可以放到缓存，请求过来时，先查询缓存，如果没有再查询数据库，并且把数据库的数据更新到缓存。但是 使用缓存增加了需要考虑这些点：缓存和数据库一致性如何保证、集群、缓存击穿、缓存雪崩、缓存穿透等问题。\n\n\n# 14. 接口考虑热点数据隔离性\n\n瞬时间的高并发，可能会打垮你的系统。可以做一些热点数据的隔离。比如业务隔离、系统隔离、用户隔离、数据隔离等。\n\n * 业务隔离：比如12306的分时段售票，将热点数据分散处理，降低系统负载压力；\n * 系统隔离：比如把系统分成了用户、商品、社区三个板块，这三个板块分别使用不同的域名、服务器和数据库，做到从接入层到应用层再到数据层三层完全隔离。\n * 用户隔离：重点用户请求到配置更好的机器。\n * 数据隔离：使用单独的缓存集群或者数据库服务热点数据。\n\n\n# 15. 可变参数配置化，比如红包皮肤切换等\n\n例如产品经理提了个红包需求，圣诞节的时候，红包皮肤为圣诞节相关。春节的时候，为春节红包皮肤等。\n\n可变配置，可以通过维护一张配置表，或者通过一些统一配置中心（支持动态更新）。\n\n\n# 16. 接口考虑幂等性\n\n接口是需要考虑幂等性的，尤其是抢红包、转账这些重要接口。最直观的业务场景，就是用户连续点击两次，你的接口有没hold住，或者消息队列出现重复消费的情况，你的业务逻辑怎么控制？\n\n接口幂等实现方案只要有 8 种：\n\n 1. select + insert + 主键/唯一索引冲突\n 2. 直接 insert + 主键/唯一索引冲突\n 3. 状态机幂等\n 4. 抽取防重表\n 5. token 令牌\n 6. 悲观锁\n 7. 乐观锁\n 8. 分布式锁\n\n\n# 17. 读写分离，优先考虑读从库，注意主从延迟问题\n\n我们的数据库都是集群部署的，有主库也有从库，当前一般都是读写分离的。比如你写入数据，肯定是写入主库，但是针对读取实时性要求不高的数据，则优先考虑从库，因为可以分担主库的压力。\n\n注意：如果读取从库的话，需要考虑主从延迟的问题。\n\n\n# 18. 接口返回的数据量，如果数据量大需要分页\n\n一个接口返回报文，不应该包含过多的数据量，过多的数据量不仅处理复杂，并且数据量传输的压力也非常大。因此，数据量实在太大，可以分页返回，如果是功能不相关的报文， 那应该考虑接口拆分。\n\n\n# 19. 好的接口实现，离不开 SQL 优化\n\n我们做后端的，写好一个接口，离不开 SQL 优化。\n\nSQL 优化从这几个维度思考：\n\n * explain 分析 SQL 查询计划（重点关注 type、extra、filtered 字段）\n * show profile 分析，了解 SQL 执行的线程的状态以及消耗的时间\n * 索引优化（覆盖索引、最左前缀原则、隐式转换、order by 以及 group by的优化、join优化）\n * 大分页问题优化（延迟关联、记录上一页最大 ID）\n * 数据量太大（分库分表、同步到Elasticsearch、用Elasticsearch查询）\n\n\n# 20. 代码锁的粒度控制好\n\n什么是加锁粒度呢?\n\n> 其实就是你要锁住的范围是多大，比如你在家上卫生间，你只要锁住卫生间就可以了吧， 不需要将整个家都锁起来不让家人进门吧，卫生间就是你的加锁粒度。\n\n我们写代码时，如果不涉及共享资源，就没必要锁住的。这就好像你上卫生间，不用把整个家都锁住， 锁住卫生间门就可以了。\n\n比如，在业务代码中，有一个 ArrayList 因为涉及到多线程操作，所以需要加锁操作，假设刚好又有 一段比较耗时的操作（代码中的 slowNotShare 方法）不涉及线程安全问题，你会如何加锁呢？\n\n\n# 21. 接口状态和错误需要统一明确\n\n提供必要的接口调用状态信息。比如你的一个转账接口调用是成功、失败，处理中还是受理成功等，需要明确告诉客户端。如果结果失败，那么具体失败的原因是什么。 这些必要的信息都必须要告诉给客户端，因此需要明确的错误码和对应的描述。同时，尽量对报错信息封装一下， 不要把后端的异常信息完全抛出到客户端。\n\n\n# 22. 接口要考虑异常处理\n\n实现一个好的接口，离不开优雅的异常处理。对于异常处理，提十个小建议吧。\n\n * 尽量不要使用 e.printStackTrace()，而是使用 log 打印。因为 e.printStackTrace() 语句可能会导致内存占满。\n * catch 住异常时，建议尽量打印出具体的 exception，有利于更好定位问题。\n * 不要用一个 Exception 捕获所有可能的异常\n * 记得使用 finally 关闭流资源或者直接使用 try-with-resource\n * 捕获异常与抛出异常必须是完全匹配，或者捕获异常是抛出异常的父类。\n * 捕获到的异常，不要忽略它，至少打点日志吧。\n * 注意异常对你的代码层次结构的侵染。\n * 自定义封装异常，不要丢弃原始异常的信息 Throwable cause。\n * 运行时异常 RuntimeException，不应该通过 catch 的方式处理，而是预先检查，比如：NullPointerException 处理。\n * 注意异常匹配的顺序，优先捕获具体的异常。\n\n\n# 23. 优化程序逻辑\n\n优化程序逻辑这块还是挺重要的，也就是说，你实现的业务代码，如果是比较复杂的话，建议把注释写清楚。 还有，代码逻辑尽量清晰，代码尽量高效。\n\n> 比如，你要使用用户信息的属性，你根据session已经获取到userId了，然后就把用户信息从数据库查询出来， 使用完后，后面可能又要用到用户信息的属性，有些小伙伴没太想太多， 反手就是把userId再传进去，再查一次数据库……我在项目中，坚果这种代码……直接把用户对象传下来不好嘛……\n\n\n# 24. 接口实现过程中，注意大文件、大事务、大对象\n\n * 读取大文件时，不要 Files.readAllBytes 直接读取到内存中，这样会 OOM 的，建议使用 BufferedReader 一行一行来。\n * 大事务导致死锁、回滚时间长、主从延迟等问题，开发中尽量避免大事务。\n * 注意一些大对象的使用，因为大对象是直接进入老年代的，可能会触犯 fullGC。\n\n\n# 25. 你的接口，需要考虑限流\n\n如果你的系统每秒抗住的请求是 1000，如果一秒钟来了十万请求呢？换个角度来说，高并发的时候， 流量洪峰来了，超过系统的承载能力，怎么办呢？\n\n如果不采取措施，所有的请求打过来，系统 CPU、内存、Load 负载飚的很高，最后请求处理不过来，所有的请求都无法正常响应。\n\n针对这种场景，我们可以采用限流方案。就是为了保护系统，多余的请求，直接丢弃。\n\n常见的限流方案有：\n\n * Guava 的 RateLimiter 单机版限流\n * Redis 分布式限流\n * 阿里开源组件 sentinel 限流\n\n\n# 26. 代码实现时，注意运行是异常（比如空指针、下标越界等）\n\n日常开发中，我们需要采取措施规避数组越界，被零整除，空指针等运行时错误。\n\n不严谨的代码有：\n\nString name = list.get(1).getName(); // list 可能越界，因为不一定有 2 个元素\n\n\n应该采取措施，预防一下数组边界溢出。正例如下：\n\nif(CollectionsUtil.isNotEmpty(list) && list.size() > 1){\n    String name = list.get(1).getName();\n}\n\n\n\n# 27. 保证接口安全性\n\n如果你的 API 接口是对外提供的，需要保证接口的安全性。保证接口的安全性有token机制和接口签名。\n\n\n# 28. 分布式事务，如何保证\n\n> 分布式事务，就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点上。简单来说， 分布式事务指的就是分布式系统中的事务，它的存在就是为了保证不同数据库节点的数据一致性。\n\n分布式事务的几种解决方案：\n\n * 2PC(二阶段提交)方案、3PC\n * TCC(Try、Confirm、Cancel)\n * 本地消息表\n * 最大努力通知\n * seata\n\n\n# 29. 事务失效的一些经典场景\n\n我们的接口开发过程中，经常需要使用到事务。所以需要避开事务失效的一些经典场景。\n\n * 方法的访问权限必须是 public，其他 private 等权限事务失效。\n * 方法被定义成 final 的，这样会导致事务失效。\n * 在同一个类中的方法直接给内部调用，会导致事务失效。\n * 一个方法如果没交给 Spring 管理，就不会生成 Spring 事务。\n * 多线程调用，两个方法不在同一个线程中，获取到的数据库连接不一样的。\n * 表的存储引擎不支持事务。\n * 如果自己try……catch误吞了异常，事务失效\n * 错误的传播特性\n\n\n# 30. 掌握常见的设计模式\n\n把代码写好，还是需要熟练常用的设计模式，比如策略模式、工厂模式、模板方法模式、观察者模式等等。 设计模式，是代码设计经验的总结。使用设计模式可以可重用代码、让代码更容易被他人理解、保证代码可靠性。\n\n\n# 31. 写代码时，考虑线程安全问题\n\n在高并发情况下，HashMap 可能出现死循环。因为它是非线程安全的，可以考虑使用使用 ConcurrentHashMap。 所以这个也尽量养成习惯，不要上来反手就是一个new HashMap()；\n\n>  * HashMap、ArrayList、LinkedList、TreeMap 等都是线程不安全的；\n>  * Vector、Hashtable、ConcurrentHashMap 等都是线程安全的。\n\n\n# 32. 接口定义清晰易懂，命名规范\n\n我们写代码，不仅仅是为了实现当前的功能，也要有利于后的维护。说到维护，代码不仅仅是写给自己看的， 也是给别人看的。所以接口定义要清晰易懂，命名规范。\n\n\n# 33. 接口的版本控制\n\n接口要做好版本控制。就是说，请求基础报文，应该包含version接口版本号字段，方便未来做接口兼容。 其实这个点也算接口扩展性的一个体现点吧。\n\n比如客户端APP某个功能优化了，新老版本会共存，这时候我们的version版本号就派上用场了，对version做升级，做好版本控制。\n\n\n# 34. 注意代码规范问题\n\n注意一些常见的代码坏味道：\n\n * 大量重复代码（抽共用代码，设计模式）\n * 方法参数过多（可封装成一个 DTO 对象）\n * 方法过长（抽小函数）\n * 判断条件太多（优化 if……else）\n * 不处理没用的代码\n * 不注重代码格式\n * 避免过度设计\n\n\n# 35. 保证接口正确性，其实就是保证更少的 bug\n\n保证接口的正确性，换个角度讲，就是保证更少的 bug。所以接口开发完后，一般需要开发自测一下。 然后的话，接口的正确还体现在，多线程并发的时候，保证数据的正确性等等。比如你做一笔转账交易，扣除余额的时候，可以通过CAS乐观锁的方式保证余额扣减的正确。\n\n如果你是实现秒杀接口，得防止超卖问题吧。你可以使用 Redis 分布式锁防止超卖问题。\n\n\n# 36. 学会沟通，跟前端沟通，跟产品沟通\n\n我把这一点放到最后，最后沟通是非常非常重要的。比如你开发定义接口时，一定不能上来就自己埋头把接口定义完了， 需要跟客户端先对齐接口，遇到一些难点时，跟技术 Leader 对齐方案。实现需求过程中，有什么问题，及时跟产品沟通。\n\n总之就是，开发接口过程中，一定要沟通好~",normalizedContent:"# 1. 接口参数校验\n\n入参出参校验是每个程序员必备的基本素质，你设计的接口，必须先校验参数，比如入参是否允许为空，入参长度是否符合你的预期长度。这个要养成习惯，日常开发中， 很多低级 bug 都是不校验参数导致的。\n\n> 比如：你的数据库表字段设置为varchar(16)，对方传了一个 32 位的字符串过来。如果你不校验参数，插入数据库就直接异常了。\n\n出参也是，比如你定义的接口报文，参数是不为空的，但是你的接口返回参数，没有做校验，因为程序某些原因，直接返回别人一个 null 值。\n\n注意： 在前端有对参数进行校验的前提下，服务端的接口也要进行校验，避免爬虫或者前端漏校验，导致一些低级的错误。\n\n\n# 2. 修改老接口时，注意接口的兼容条件\n\n很多 bug 都是因为修改了对外接口，但是却不做兼容导致的，关键这个问题多数是比较严重的，可能直接导致系统发版失败，新手程序员很容易犯这个错误。\n\n\n# 3. 设计接口时，充分考虑接口的可扩展性\n\n要根据实际业务场景设计接口，充分考虑接口的可扩展性。\n\n比如你接到一个需求：是用户添加或修改员工时，需要刷脸，那你是反手提供一个员工管理的提交刷脸信息接口？还是先思考，提交刷脸流程是不是通用流程？比如转账或者一键贴需要接入刷脸的话， 你是否需要重新实现一个接口呢？还是当前业务类型划分模块，复用这个接口就好，保留接口的可扩展性。\n\n\n# 4. 考虑接口是否需要防重处理\n\n如果前端重复请求，你的逻辑如何处理？是不是考虑接口去重处理。\n\n当然，如果是查询类的请求，其实不用防重。如果是更新修改类的话，尤其金融转账类的，就要过滤重复请求了。简单点，你可以 使用 redis 防重复请求，同样请求方，一定时间间隔内的相同请求，考虑是否过滤。当然，转账类接口，并发不高的话， 推荐使用数据库防重表，已唯一流水号作为主键或者唯一索引。\n\n\n# 5. 重点接口，考虑线程池隔离\n\n一些登录、转账交易、下单等重要接口，考虑线程池隔离。如果你所有业务都共用一个线程池，有些业务出 bug 导致线程池阻塞打满的话， 那就悲剧了，所有业务都受影响了。因此，进行线程池隔离，重要业务独立一个线程池，就能更更好的保护重要业务。\n\n\n# 6. 调用第三方接口要考虑异常和超时处理\n\n如果你调用第三方接口，或者分布式远程服务的话，需要考虑。\n\n * 异常处理\n\n> 比如：你调别人的接口，如果异常了，怎么处理，是重试还是当做失败还是告警处理。\n\n * 接口超时\n\n> 没法预估对方接口一般多久超时，一般设置个超时断开时间，以保护你的接口。之前见过一个生产问题， 就是 http 调用不设置超时时间，最后响应方进程假死，请求一直占着线程不释放，当请求量不断打进来，进而拖垮线程池。\n\n * 重试次数\n\n> 你的接口调失败，需不需要重试？重试几次？需要站在业务角度上思考这个问题。\n\n\n# 7. 接口实现考虑熔断和降级\n\n当前互联网系统一般是分布式部署的。而分布式系统中，经常会出现某个基础服务不可用，最终导致整个系统不可用的情况。这种现象被称为服务雪崩效应。\n\n> a->b->c...中，如果服务c出现问题，比如是因为慢sql导致调用缓慢，那将导致b也会延迟，从而a也会延迟，堵住的a请求会消耗占用系统的线程、io等资源，当请求 a 的服务 越来越多，占用的计算机资源也越来越多，最终会导致系统瓶颈出现，造成其他的请求同样不可用，最后导致业务系统奔溃。\n\n为了应对服务雪崩，常见的做法是 熔断和降级，最简单就是加开关控制，当下游系统出问题时， 开关降级，不在调用下游系统，推荐用：阿里开源的 sentinel 或者 hystrix。\n\n\n# 8. 日志打印好，接口的关键代码，要有日志保价护航\n\n关键业务代码无论身处何地，都应该有足够的日志保驾护航。比如：你实时转账业务，转个几百万，然后转失败了， 接着客户投诉，然后你还没有打印到日志，想想哪种水中火热的困境下，你却毫无办法……\n\n\n# 9. 接口的功能定义要具备单一性\n\n单一性是指接口做的事情比较单一、专一。比如一个登陆接口，它做的事情就只是校验账户名密码， 然后返回登录成功以及userid即可。但是如果你为了减少接口交互，把一些注册、一些配置查询等全放到登录接口，就不太妥。\n\n其实，这也是微服务一些思想，接口的功能单一、明确。比如订单服务、积分、商品信息相关的接口都是划分开的。将来拆分微服务的话，是不是就比较简便啦。\n\n\n# 10. 接口有些场景，使用异步更合理\n\n举个简单的例子，比如你实现一个用户注册的接口。用户注册成功时，发个邮件或者短信去通知用户。这个邮件或者发短信，就更适合异步处理，因为总不能一个通知类的失败，导致注册失败吧。\n\n至于做异步的方式，简单的就是用线程池。还可以使用消息队列，就是用户注册成功后，生产者产生一个注册成功的消息，消费者拉到注册成功的消息，就发送通知。\n\n\n# 11. 优化接口耗时，远程串行考虑改并行调用\n\n假设我们设计一个 app 首页的接口，它需要查用户信息，需要查 banner 信息，需要查弹窗信息等等。那你是一个一个接口串行调，还是并行调呢？\n\n如果是串行一个一个查，比如查用户信息 200ms，查 banner 信息 100ms，查弹窗信息 50ms，那一共就耗时 350ms。如果还查其他信息， 那耗时就更大了。这种场景是可以改为并行调用，也就是说查用户信息、查banner信息、查弹窗信息，可以同时发起。\n\n在java中有个异步编程利器：completablefuture，就可以很好的实现这个功能。\n\n\n# 12. 接口合并或者说考虑批量处理思想\n\n数据库操作或者是远程调用时，能批量操作就不要for循环调用。\n\n\n# 13. 接口实现过程中，恰当使用缓存\n\n哪些场景适合使用缓存？读多写少且数据时效性要求越低的场景。\n\n缓存用的好，可以承载更多的请求，提升查询效率，减少数据库的压力。\n\n> 比如一些平时变动很小或者几乎不会变的商品信息，可以放到缓存，请求过来时，先查询缓存，如果没有再查询数据库，并且把数据库的数据更新到缓存。但是 使用缓存增加了需要考虑这些点：缓存和数据库一致性如何保证、集群、缓存击穿、缓存雪崩、缓存穿透等问题。\n\n\n# 14. 接口考虑热点数据隔离性\n\n瞬时间的高并发，可能会打垮你的系统。可以做一些热点数据的隔离。比如业务隔离、系统隔离、用户隔离、数据隔离等。\n\n * 业务隔离：比如12306的分时段售票，将热点数据分散处理，降低系统负载压力；\n * 系统隔离：比如把系统分成了用户、商品、社区三个板块，这三个板块分别使用不同的域名、服务器和数据库，做到从接入层到应用层再到数据层三层完全隔离。\n * 用户隔离：重点用户请求到配置更好的机器。\n * 数据隔离：使用单独的缓存集群或者数据库服务热点数据。\n\n\n# 15. 可变参数配置化，比如红包皮肤切换等\n\n例如产品经理提了个红包需求，圣诞节的时候，红包皮肤为圣诞节相关。春节的时候，为春节红包皮肤等。\n\n可变配置，可以通过维护一张配置表，或者通过一些统一配置中心（支持动态更新）。\n\n\n# 16. 接口考虑幂等性\n\n接口是需要考虑幂等性的，尤其是抢红包、转账这些重要接口。最直观的业务场景，就是用户连续点击两次，你的接口有没hold住，或者消息队列出现重复消费的情况，你的业务逻辑怎么控制？\n\n接口幂等实现方案只要有 8 种：\n\n 1. select + insert + 主键/唯一索引冲突\n 2. 直接 insert + 主键/唯一索引冲突\n 3. 状态机幂等\n 4. 抽取防重表\n 5. token 令牌\n 6. 悲观锁\n 7. 乐观锁\n 8. 分布式锁\n\n\n# 17. 读写分离，优先考虑读从库，注意主从延迟问题\n\n我们的数据库都是集群部署的，有主库也有从库，当前一般都是读写分离的。比如你写入数据，肯定是写入主库，但是针对读取实时性要求不高的数据，则优先考虑从库，因为可以分担主库的压力。\n\n注意：如果读取从库的话，需要考虑主从延迟的问题。\n\n\n# 18. 接口返回的数据量，如果数据量大需要分页\n\n一个接口返回报文，不应该包含过多的数据量，过多的数据量不仅处理复杂，并且数据量传输的压力也非常大。因此，数据量实在太大，可以分页返回，如果是功能不相关的报文， 那应该考虑接口拆分。\n\n\n# 19. 好的接口实现，离不开 sql 优化\n\n我们做后端的，写好一个接口，离不开 sql 优化。\n\nsql 优化从这几个维度思考：\n\n * explain 分析 sql 查询计划（重点关注 type、extra、filtered 字段）\n * show profile 分析，了解 sql 执行的线程的状态以及消耗的时间\n * 索引优化（覆盖索引、最左前缀原则、隐式转换、order by 以及 group by的优化、join优化）\n * 大分页问题优化（延迟关联、记录上一页最大 id）\n * 数据量太大（分库分表、同步到elasticsearch、用elasticsearch查询）\n\n\n# 20. 代码锁的粒度控制好\n\n什么是加锁粒度呢?\n\n> 其实就是你要锁住的范围是多大，比如你在家上卫生间，你只要锁住卫生间就可以了吧， 不需要将整个家都锁起来不让家人进门吧，卫生间就是你的加锁粒度。\n\n我们写代码时，如果不涉及共享资源，就没必要锁住的。这就好像你上卫生间，不用把整个家都锁住， 锁住卫生间门就可以了。\n\n比如，在业务代码中，有一个 arraylist 因为涉及到多线程操作，所以需要加锁操作，假设刚好又有 一段比较耗时的操作（代码中的 slownotshare 方法）不涉及线程安全问题，你会如何加锁呢？\n\n\n# 21. 接口状态和错误需要统一明确\n\n提供必要的接口调用状态信息。比如你的一个转账接口调用是成功、失败，处理中还是受理成功等，需要明确告诉客户端。如果结果失败，那么具体失败的原因是什么。 这些必要的信息都必须要告诉给客户端，因此需要明确的错误码和对应的描述。同时，尽量对报错信息封装一下， 不要把后端的异常信息完全抛出到客户端。\n\n\n# 22. 接口要考虑异常处理\n\n实现一个好的接口，离不开优雅的异常处理。对于异常处理，提十个小建议吧。\n\n * 尽量不要使用 e.printstacktrace()，而是使用 log 打印。因为 e.printstacktrace() 语句可能会导致内存占满。\n * catch 住异常时，建议尽量打印出具体的 exception，有利于更好定位问题。\n * 不要用一个 exception 捕获所有可能的异常\n * 记得使用 finally 关闭流资源或者直接使用 try-with-resource\n * 捕获异常与抛出异常必须是完全匹配，或者捕获异常是抛出异常的父类。\n * 捕获到的异常，不要忽略它，至少打点日志吧。\n * 注意异常对你的代码层次结构的侵染。\n * 自定义封装异常，不要丢弃原始异常的信息 throwable cause。\n * 运行时异常 runtimeexception，不应该通过 catch 的方式处理，而是预先检查，比如：nullpointerexception 处理。\n * 注意异常匹配的顺序，优先捕获具体的异常。\n\n\n# 23. 优化程序逻辑\n\n优化程序逻辑这块还是挺重要的，也就是说，你实现的业务代码，如果是比较复杂的话，建议把注释写清楚。 还有，代码逻辑尽量清晰，代码尽量高效。\n\n> 比如，你要使用用户信息的属性，你根据session已经获取到userid了，然后就把用户信息从数据库查询出来， 使用完后，后面可能又要用到用户信息的属性，有些小伙伴没太想太多， 反手就是把userid再传进去，再查一次数据库……我在项目中，坚果这种代码……直接把用户对象传下来不好嘛……\n\n\n# 24. 接口实现过程中，注意大文件、大事务、大对象\n\n * 读取大文件时，不要 files.readallbytes 直接读取到内存中，这样会 oom 的，建议使用 bufferedreader 一行一行来。\n * 大事务导致死锁、回滚时间长、主从延迟等问题，开发中尽量避免大事务。\n * 注意一些大对象的使用，因为大对象是直接进入老年代的，可能会触犯 fullgc。\n\n\n# 25. 你的接口，需要考虑限流\n\n如果你的系统每秒抗住的请求是 1000，如果一秒钟来了十万请求呢？换个角度来说，高并发的时候， 流量洪峰来了，超过系统的承载能力，怎么办呢？\n\n如果不采取措施，所有的请求打过来，系统 cpu、内存、load 负载飚的很高，最后请求处理不过来，所有的请求都无法正常响应。\n\n针对这种场景，我们可以采用限流方案。就是为了保护系统，多余的请求，直接丢弃。\n\n常见的限流方案有：\n\n * guava 的 ratelimiter 单机版限流\n * redis 分布式限流\n * 阿里开源组件 sentinel 限流\n\n\n# 26. 代码实现时，注意运行是异常（比如空指针、下标越界等）\n\n日常开发中，我们需要采取措施规避数组越界，被零整除，空指针等运行时错误。\n\n不严谨的代码有：\n\nstring name = list.get(1).getname(); // list 可能越界，因为不一定有 2 个元素\n\n\n应该采取措施，预防一下数组边界溢出。正例如下：\n\nif(collectionsutil.isnotempty(list) && list.size() > 1){\n    string name = list.get(1).getname();\n}\n\n\n\n# 27. 保证接口安全性\n\n如果你的 api 接口是对外提供的，需要保证接口的安全性。保证接口的安全性有token机制和接口签名。\n\n\n# 28. 分布式事务，如何保证\n\n> 分布式事务，就是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布式系统的不同节点上。简单来说， 分布式事务指的就是分布式系统中的事务，它的存在就是为了保证不同数据库节点的数据一致性。\n\n分布式事务的几种解决方案：\n\n * 2pc(二阶段提交)方案、3pc\n * tcc(try、confirm、cancel)\n * 本地消息表\n * 最大努力通知\n * seata\n\n\n# 29. 事务失效的一些经典场景\n\n我们的接口开发过程中，经常需要使用到事务。所以需要避开事务失效的一些经典场景。\n\n * 方法的访问权限必须是 public，其他 private 等权限事务失效。\n * 方法被定义成 final 的，这样会导致事务失效。\n * 在同一个类中的方法直接给内部调用，会导致事务失效。\n * 一个方法如果没交给 spring 管理，就不会生成 spring 事务。\n * 多线程调用，两个方法不在同一个线程中，获取到的数据库连接不一样的。\n * 表的存储引擎不支持事务。\n * 如果自己try……catch误吞了异常，事务失效\n * 错误的传播特性\n\n\n# 30. 掌握常见的设计模式\n\n把代码写好，还是需要熟练常用的设计模式，比如策略模式、工厂模式、模板方法模式、观察者模式等等。 设计模式，是代码设计经验的总结。使用设计模式可以可重用代码、让代码更容易被他人理解、保证代码可靠性。\n\n\n# 31. 写代码时，考虑线程安全问题\n\n在高并发情况下，hashmap 可能出现死循环。因为它是非线程安全的，可以考虑使用使用 concurrenthashmap。 所以这个也尽量养成习惯，不要上来反手就是一个new hashmap()；\n\n>  * hashmap、arraylist、linkedlist、treemap 等都是线程不安全的；\n>  * vector、hashtable、concurrenthashmap 等都是线程安全的。\n\n\n# 32. 接口定义清晰易懂，命名规范\n\n我们写代码，不仅仅是为了实现当前的功能，也要有利于后的维护。说到维护，代码不仅仅是写给自己看的， 也是给别人看的。所以接口定义要清晰易懂，命名规范。\n\n\n# 33. 接口的版本控制\n\n接口要做好版本控制。就是说，请求基础报文，应该包含version接口版本号字段，方便未来做接口兼容。 其实这个点也算接口扩展性的一个体现点吧。\n\n比如客户端app某个功能优化了，新老版本会共存，这时候我们的version版本号就派上用场了，对version做升级，做好版本控制。\n\n\n# 34. 注意代码规范问题\n\n注意一些常见的代码坏味道：\n\n * 大量重复代码（抽共用代码，设计模式）\n * 方法参数过多（可封装成一个 dto 对象）\n * 方法过长（抽小函数）\n * 判断条件太多（优化 if……else）\n * 不处理没用的代码\n * 不注重代码格式\n * 避免过度设计\n\n\n# 35. 保证接口正确性，其实就是保证更少的 bug\n\n保证接口的正确性，换个角度讲，就是保证更少的 bug。所以接口开发完后，一般需要开发自测一下。 然后的话，接口的正确还体现在，多线程并发的时候，保证数据的正确性等等。比如你做一笔转账交易，扣除余额的时候，可以通过cas乐观锁的方式保证余额扣减的正确。\n\n如果你是实现秒杀接口，得防止超卖问题吧。你可以使用 redis 分布式锁防止超卖问题。\n\n\n# 36. 学会沟通，跟前端沟通，跟产品沟通\n\n我把这一点放到最后，最后沟通是非常非常重要的。比如你开发定义接口时，一定不能上来就自己埋头把接口定义完了， 需要跟客户端先对齐接口，遇到一些难点时，跟技术 leader 对齐方案。实现需求过程中，有什么问题，及时跟产品沟通。\n\n总之就是，开发接口过程中，一定要沟通好~",charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"MySQL 建表的一些规范",frontmatter:{title:"MySQL 建表的一些规范",date:"2022-07-18T13:58:40.000Z",permalink:"/pages/480b10/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/50.MySQL%20%E7%9B%B8%E5%85%B3/45.MySQL%20%E5%BB%BA%E8%A1%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%84%E8%8C%83.html",relativePath:"10.后端开发/50.MySQL 相关/45.MySQL 建表的一些规范.md",key:"v-27748560",path:"/pages/480b10/",headers:[{level:2,title:"1. 添加必要的冗余字段",slug:"_1-添加必要的冗余字段",normalizedTitle:"1. 添加必要的冗余字段",charIndex:20},{level:2,title:"2. 基于MyBatis-Plus 的冗余字段设置",slug:"_2-基于mybatis-plus-的冗余字段设置",normalizedTitle:"2. 基于mybatis-plus 的冗余字段设置",charIndex:1914},{level:3,title:"2.1 配置定义 ID 生成器",slug:"_2-1-配置定义-id-生成器",normalizedTitle:"2.1 配置定义 id 生成器",charIndex:2011},{level:3,title:"2.2 配置乐观锁和分页插件",slug:"_2-2-配置乐观锁和分页插件",normalizedTitle:"2.2 配置乐观锁和分页插件",charIndex:2711},{level:3,title:"2.3  配置 更新人、更新时间、创建人、创建时间",slug:"_2-3-配置-更新人、更新时间、创建人、创建时间",normalizedTitle:"2.3  配置 更新人、更新时间、创建人、创建时间",charIndex:null},{level:3,title:"2.4 配置逻辑删除",slug:"_2-4-配置逻辑删除",normalizedTitle:"2.4 配置逻辑删除",charIndex:5297},{level:2,title:"3.  总结",slug:"_3-总结",normalizedTitle:"3.  总结",charIndex:null}],headersStr:"1. 添加必要的冗余字段 2. 基于MyBatis-Plus 的冗余字段设置 2.1 配置定义 ID 生成器 2.2 配置乐观锁和分页插件 2.3  配置 更新人、更新时间、创建人、创建时间 2.4 配置逻辑删除 3.  总结",content:'MySQL 建表规范（补充版）\n\n\n# 1. 添加必要的冗余字段\n\n除了默认的业务表，额外必添加以下6个字段：\n\n * id 主键id\n\n> ** MySQL 数据库格式：**\n\n`id` BIGINT UNSIGNED NOT NULL COMMENT "主键i",\nPRIMARY KEY(\'id\')\n\n\n** Java 代码格式：**\n\nprivate Long id;\n\n\n * version 版本号\n\n>  * * MySQL 数据库格式：**\n\n`version` INT UNSIGNED NOT NULL DEFAULT 1 COMMENT "版本号",` \n\n\n** Java 代码格式：**\n\n private Integer version;\n\n\n * deleted 删除标记（逻辑删除） => 对用户透明\n\n> ** MySQL 数据库格式：**\n\n`deleted` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT "逻辑删除 0=>未删除  1=>删除",\n\n\n** Java 代码格式：**\n\nprivate Integer deleted;\n\n\n * user_id_update 更新人\n\n> ** MySQL 数据库格式：**\n\n`user_id_update` CHAR(36) NOT NULL COMMENT "更新人id",\n\n\n** Java 代码格式：\n\nprivate String userIdUpdate;\n\n\n * time_update 更新时间\n\n> ** MySQL 数据库格式：**\n\n`time_update` BIGINT UNSIGNED NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "更新时间戳",\n\n\n** Java 代码格式：**\n\nprivate Long timeUpdate;\n\n\n * user_id_create 创建人\n\n> ** MySQL 数据库格式：**\n\n`user_id_create\\` CHAR(36) NOT NULL COMMENT "创建人",\n\n\n** Java 代码格式：**\n\nprivate String userIdCreate;\n\n\n * time_create 创建时间\n\n> ** MySQL 数据库格式：**\n\n`time_create` BIGINT UNSIGNED NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "创建时间戳",\n\n\n** Java 代码格式：**\n\nprivate Long timeCreate;\n\n\n根据上述的字段规范，Demo 如下：\n\n------------------------------------------\n-- 创建 user 表\n------------------------------------------\nDROP TABLE IF EXISTS user;\nCREATE TABLE user\n(\n `id` BIGINT UNSIGNED NOT NULL COMMENT "主键id",\n `name` VARCHAR(255) NOT NULL COMMENT "姓名",\n `age` TINYINT UNSIGNED COMMENT \'年龄\',\n `version` INT UNSIGNED NOT NULL DEFAULT 1 COMMENT "版本号",\n `deleted` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT "逻辑删除 0=>未删除  1=>删除",\n `user_id_update` CHAR(36) NOT NULL COMMENT "更新人id",\n `time_update` BIGINT UNSIGNED NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "更新时间戳",\n `user_id_create` CHAR(36) NOT NULL COMMENT "创建人",\n `time_create` BIGINT UNSIGNED NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "创建时间戳",\nPRIMARY KEY(`id`)\n)engine=innodb default charset=utf8 COMMENT "用户表";\n\n\n\n# 2. 基于MyBatis-Plus 的冗余字段设置\n\nMyBatis-Plus 的官方地址：https://baomidou.com/guide/#%E7%89%B9%E6%80%A7\n\n\n# 2.1 配置定义 ID 生成器\n\n/**\n * MyBatis-plus 配置 自定义 ID 生成器\n *\n * @author chenjintian\n */\n@Component\n@Slf4j\npublic class CustomIdGenerator implements IdentifierGenerator {\n  private LeafSnowflakeApiWrapper leafSnowflakeApiWrapper;\n  \n  @Autowired\n  public CustomIdGenerator (LeafSnowflakeApiWrapper leafSnowflakeApiWrapper) {\n     this.leafSnowflakeApiWrapper = leafSnowflakeApiWrapper;\n  }\n  @Override\n  public Number nextId(Object entity) {\n    long id = leafSnowflakeApiWrapper.getId();\n    if (log.isDebugEnabled()) {\n        log.debug("CustomIdGenerator id:{}.", id);\n    }\n    return id;\n  }\n}\n\npublic class User {\n  /**\n  * 对应数据库的主键id\n  */\n  @TableId(type = IdType.ASSIGN_ID)\n  private Long id;\n}\n\n\n\n# 2.2 配置乐观锁和分页插件\n\n@MapperScan("com.ip.profile.service.dao.mapper")\n@EnableTransactionManagement\n@Configuration\npublic class MyBatisPlusConfig {\n  // 注册乐观锁插件\n  @Bean\n  public OptimisticLockerInterceptor optimisticLockerInterceptor() {\n    return new OptimisticLockerInterceptor();\n  }\n\n  // 分页插件\n  @Bean\n  public PaginationInterceptor paginationInterceptor() {\n    PaginationInterceptor paginationInterceptor = new PaginationInterceptor();\n    // 设置单页最大的条数为500条\n    paginationInterceptor.setLimit(500);\n    return paginationInterceptor;\n  }\n}\n\npublic class User {\n   /**\n  * 版本号（乐观锁） =》对用户透明\n   */\n  @Version\n   private Integer version;\n}\n\n\n\n# 2.3 配置 更新人、更新时间、创建人、创建时间\n\n@Slf4j\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n\n    // 插入时的填充策略\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        if (log.isDebugEnabled()) {\n            log.debug("start insert fill ...");\n        }\n\n        long currentTimeStamp = System.currentTimeMillis();\n        this.setFieldValByName("userIdCreate", UserUtil.getCurrentUserId(), metaObject);\n        this.setFieldValByName("timeCreate", currentTimeStamp, metaObject);\n        this.setFieldValByName("userIdUpdate", UserUtil.getCurrentUserId(), metaObject);\n        this.setFieldValByName("timeUpdate", currentTimeStamp, metaObject);\n\n        if (log.isDebugEnabled()) {\n            log.debug("end insert fill, userIdCreate:{}, timeCreate:{}, userIdUpdate:{}, timeUpdate:{}.",\n                    UserUtil.getCurrentUserId(), currentTimeStamp, UserUtil.getCurrentUserId(), currentTimeStamp);\n        }\n    }\n\n    // 更新时的填充策略\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        if (log.isDebugEnabled()) {\n            log.debug("start update fill ...");\n        }\n\n        long currentTimeStamp = System.currentTimeMillis();\n        this.setFieldValByName("userIdUpdate", UserUtil.getCurrentUserId(), metaObject);\n        this.setFieldValByName("timeUpdate", currentTimeStamp, metaObject);\n\n        if (log.isDebugEnabled()) {\n            log.debug("end update fill, userIdUpdate:{}, timeUpdate:{}.", UserUtil.getCurrentUserId(), currentTimeStamp);\n        }\n    }\n}\n\npublic class User {\n\t/**\n\t * 更新人 ID\n\t */\n\t@TableField(fill = FieldFill.INSERT_UPDATE)\n\tprivate String userIdUpdate;\n\n\t/**\n\t * 更新时间（自动填充）=》对用户透明\n\t */\n\t@TableField(fill = FieldFill.INSERT_UPDATE)\n\tprivate Long timeUpdate;\n\n\t/**\n\t * 创建人 ID\n\t */\n\t@TableField(fill = FieldFill.INSERT)\n\tprivate String userIdCreate;\n\n\t/**\n\t * 创建时间（自动填充）=》对用户透明\n\t */\n\t@TableField(fill = FieldFill.INSERT)\n\tprivate Long timeCreate;\n}\n\n\n\n# 2.4 配置逻辑删除\n\n# 逻辑删除\nmybatis-plus.global-config.db-config.logic-delete-field=deleted\nmybatis-plus.global-config.db-config.logic-delete-value=1\nmybatis-plus.global-config.db-config.logic-not-delete-value=0\n\npublic class User {\n  /**\n  * 删除标记（逻辑删除）=> 对用户透明\n  */\n  @TableLogic\n  private Integer deleted;\n}\n\n\n\n# 3. 总结\n\nMyBatis-Plus 帮助开发人员创建主键id，版本号，以及插入时的填充内容（更新人、更新时间、创建人、创建时间），这些工作MyBatis-Plus自动完成，极大的节省开发人员的时间，而且代码会更规范。\n\n补充：添加的Maven的依赖如下：\n\n\x3c!-- MySQL 驱动 + MyBatis-Plus --\x3e\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.baomidou</groupId>\n    <artifactId>mybatis-plus-boot-starter</artifactId>\n    <version>3.3.1</version>\n</dependency>\n<dependency>\n    <groupId>p6spy</groupId>\n    <artifactId>p6spy</artifactId>\n    <version>3.9.1</version>\n</dependency>\n',normalizedContent:'mysql 建表规范（补充版）\n\n\n# 1. 添加必要的冗余字段\n\n除了默认的业务表，额外必添加以下6个字段：\n\n * id 主键id\n\n> ** mysql 数据库格式：**\n\n`id` bigint unsigned not null comment "主键i",\nprimary key(\'id\')\n\n\n** java 代码格式：**\n\nprivate long id;\n\n\n * version 版本号\n\n>  * * mysql 数据库格式：**\n\n`version` int unsigned not null default 1 comment "版本号",` \n\n\n** java 代码格式：**\n\n private integer version;\n\n\n * deleted 删除标记（逻辑删除） => 对用户透明\n\n> ** mysql 数据库格式：**\n\n`deleted` tinyint unsigned not null default 0 comment "逻辑删除 0=>未删除  1=>删除",\n\n\n** java 代码格式：**\n\nprivate integer deleted;\n\n\n * user_id_update 更新人\n\n> ** mysql 数据库格式：**\n\n`user_id_update` char(36) not null comment "更新人id",\n\n\n** java 代码格式：\n\nprivate string useridupdate;\n\n\n * time_update 更新时间\n\n> ** mysql 数据库格式：**\n\n`time_update` bigint unsigned not null default current_timestamp comment "更新时间戳",\n\n\n** java 代码格式：**\n\nprivate long timeupdate;\n\n\n * user_id_create 创建人\n\n> ** mysql 数据库格式：**\n\n`user_id_create\\` char(36) not null comment "创建人",\n\n\n** java 代码格式：**\n\nprivate string useridcreate;\n\n\n * time_create 创建时间\n\n> ** mysql 数据库格式：**\n\n`time_create` bigint unsigned not null default current_timestamp comment "创建时间戳",\n\n\n** java 代码格式：**\n\nprivate long timecreate;\n\n\n根据上述的字段规范，demo 如下：\n\n------------------------------------------\n-- 创建 user 表\n------------------------------------------\ndrop table if exists user;\ncreate table user\n(\n `id` bigint unsigned not null comment "主键id",\n `name` varchar(255) not null comment "姓名",\n `age` tinyint unsigned comment \'年龄\',\n `version` int unsigned not null default 1 comment "版本号",\n `deleted` tinyint unsigned not null default 0 comment "逻辑删除 0=>未删除  1=>删除",\n `user_id_update` char(36) not null comment "更新人id",\n `time_update` bigint unsigned not null default current_timestamp comment "更新时间戳",\n `user_id_create` char(36) not null comment "创建人",\n `time_create` bigint unsigned not null default current_timestamp comment "创建时间戳",\nprimary key(`id`)\n)engine=innodb default charset=utf8 comment "用户表";\n\n\n\n# 2. 基于mybatis-plus 的冗余字段设置\n\nmybatis-plus 的官方地址：https://baomidou.com/guide/#%e7%89%b9%e6%80%a7\n\n\n# 2.1 配置定义 id 生成器\n\n/**\n * mybatis-plus 配置 自定义 id 生成器\n *\n * @author chenjintian\n */\n@component\n@slf4j\npublic class customidgenerator implements identifiergenerator {\n  private leafsnowflakeapiwrapper leafsnowflakeapiwrapper;\n  \n  @autowired\n  public customidgenerator (leafsnowflakeapiwrapper leafsnowflakeapiwrapper) {\n     this.leafsnowflakeapiwrapper = leafsnowflakeapiwrapper;\n  }\n  @override\n  public number nextid(object entity) {\n    long id = leafsnowflakeapiwrapper.getid();\n    if (log.isdebugenabled()) {\n        log.debug("customidgenerator id:{}.", id);\n    }\n    return id;\n  }\n}\n\npublic class user {\n  /**\n  * 对应数据库的主键id\n  */\n  @tableid(type = idtype.assign_id)\n  private long id;\n}\n\n\n\n# 2.2 配置乐观锁和分页插件\n\n@mapperscan("com.ip.profile.service.dao.mapper")\n@enabletransactionmanagement\n@configuration\npublic class mybatisplusconfig {\n  // 注册乐观锁插件\n  @bean\n  public optimisticlockerinterceptor optimisticlockerinterceptor() {\n    return new optimisticlockerinterceptor();\n  }\n\n  // 分页插件\n  @bean\n  public paginationinterceptor paginationinterceptor() {\n    paginationinterceptor paginationinterceptor = new paginationinterceptor();\n    // 设置单页最大的条数为500条\n    paginationinterceptor.setlimit(500);\n    return paginationinterceptor;\n  }\n}\n\npublic class user {\n   /**\n  * 版本号（乐观锁） =》对用户透明\n   */\n  @version\n   private integer version;\n}\n\n\n\n# 2.3 配置 更新人、更新时间、创建人、创建时间\n\n@slf4j\n@component\npublic class mymetaobjecthandler implements metaobjecthandler {\n\n    // 插入时的填充策略\n    @override\n    public void insertfill(metaobject metaobject) {\n        if (log.isdebugenabled()) {\n            log.debug("start insert fill ...");\n        }\n\n        long currenttimestamp = system.currenttimemillis();\n        this.setfieldvalbyname("useridcreate", userutil.getcurrentuserid(), metaobject);\n        this.setfieldvalbyname("timecreate", currenttimestamp, metaobject);\n        this.setfieldvalbyname("useridupdate", userutil.getcurrentuserid(), metaobject);\n        this.setfieldvalbyname("timeupdate", currenttimestamp, metaobject);\n\n        if (log.isdebugenabled()) {\n            log.debug("end insert fill, useridcreate:{}, timecreate:{}, useridupdate:{}, timeupdate:{}.",\n                    userutil.getcurrentuserid(), currenttimestamp, userutil.getcurrentuserid(), currenttimestamp);\n        }\n    }\n\n    // 更新时的填充策略\n    @override\n    public void updatefill(metaobject metaobject) {\n        if (log.isdebugenabled()) {\n            log.debug("start update fill ...");\n        }\n\n        long currenttimestamp = system.currenttimemillis();\n        this.setfieldvalbyname("useridupdate", userutil.getcurrentuserid(), metaobject);\n        this.setfieldvalbyname("timeupdate", currenttimestamp, metaobject);\n\n        if (log.isdebugenabled()) {\n            log.debug("end update fill, useridupdate:{}, timeupdate:{}.", userutil.getcurrentuserid(), currenttimestamp);\n        }\n    }\n}\n\npublic class user {\n\t/**\n\t * 更新人 id\n\t */\n\t@tablefield(fill = fieldfill.insert_update)\n\tprivate string useridupdate;\n\n\t/**\n\t * 更新时间（自动填充）=》对用户透明\n\t */\n\t@tablefield(fill = fieldfill.insert_update)\n\tprivate long timeupdate;\n\n\t/**\n\t * 创建人 id\n\t */\n\t@tablefield(fill = fieldfill.insert)\n\tprivate string useridcreate;\n\n\t/**\n\t * 创建时间（自动填充）=》对用户透明\n\t */\n\t@tablefield(fill = fieldfill.insert)\n\tprivate long timecreate;\n}\n\n\n\n# 2.4 配置逻辑删除\n\n# 逻辑删除\nmybatis-plus.global-config.db-config.logic-delete-field=deleted\nmybatis-plus.global-config.db-config.logic-delete-value=1\nmybatis-plus.global-config.db-config.logic-not-delete-value=0\n\npublic class user {\n  /**\n  * 删除标记（逻辑删除）=> 对用户透明\n  */\n  @tablelogic\n  private integer deleted;\n}\n\n\n\n# 3. 总结\n\nmybatis-plus 帮助开发人员创建主键id，版本号，以及插入时的填充内容（更新人、更新时间、创建人、创建时间），这些工作mybatis-plus自动完成，极大的节省开发人员的时间，而且代码会更规范。\n\n补充：添加的maven的依赖如下：\n\n\x3c!-- mysql 驱动 + mybatis-plus --\x3e\n<dependency>\n    <groupid>mysql</groupid>\n    <artifactid>mysql-connector-java</artifactid>\n</dependency>\n<dependency>\n    <groupid>com.baomidou</groupid>\n    <artifactid>mybatis-plus-boot-starter</artifactid>\n    <version>3.3.1</version>\n</dependency>\n<dependency>\n    <groupid>p6spy</groupid>\n    <artifactid>p6spy</artifactid>\n    <version>3.9.1</version>\n</dependency>\n',charsets:{cjk:!0},lastUpdated:"2023/02/06, 09:35:40",lastUpdatedTimestamp:167564734e4},{title:"MySQL 索引概要",frontmatter:{title:"MySQL 索引概要",date:"2023-02-01T10:07:45.000Z",permalink:"/pages/d7e1e9/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/50.MySQL%20%E7%9B%B8%E5%85%B3/10.MySQL%20%E7%B4%A2%E5%BC%95%E6%A6%82%E8%A6%81.html",relativePath:"10.后端开发/50.MySQL 相关/10.MySQL 索引概要.md",key:"v-7556b5c7",path:"/pages/d7e1e9/",headers:[{level:2,title:"1. 什么是索引？",slug:"_1-什么是索引",normalizedTitle:"1. 什么是索引？",charIndex:2},{level:2,title:"2. 索引的分类",slug:"_2-索引的分类",normalizedTitle:"2. 索引的分类",charIndex:102},{level:3,title:"2.1 数据结构",slug:"_2-1-数据结构",normalizedTitle:"2.1 数据结构",charIndex:218},{level:2,title:"3. 类型对比",slug:"_3-类型对比",normalizedTitle:"3. 类型对比",charIndex:378},{level:2,title:"4. 物理存储",slug:"_4-物理存储",normalizedTitle:"4. 物理存储",charIndex:944}],headersStr:"1. 什么是索引？ 2. 索引的分类 2.1 数据结构 3. 类型对比 4. 物理存储",content:"# 1. 什么是索引？\n\n客户端-》【缓存-》语法解析器-》查询优化器-》查询执行引擎】-》索引和数据\n\n索引是辅助存储引擎高效获取数据的一种数据结构，索引是数据的目录，便于搜索引擎快速定位数据\n\n\n# 2. 索引的分类\n\n数据结构: B+ tree、Hash、Full-text索引\n\n物理存储：聚簇索引和二级索引（辅助索引）\n\n字段特性：主键索引、唯一索引、普通索引、前缀索引\n\n字段个数： 单列索引和联合索引（复合索引）\n\n\n# 2.1 数据结构\n\n              INNODB   MYISAM   MEMORY\nB+tree 索引     Yes      Yes      Yes\nHash索引        No       No       Yes\nFull-text索引   Yes      Yes      No\n\n\n# 3. 类型对比\n\n# 3.1 B+树与B-tree的区别？\n\n相对于B-tree，B+tree只在叶子节点存储数据，而B-tree的非叶子节点也存储数据，索引B+tree单个节点的数据量更小，在相同的磁盘I/O次数下，能查询更多的节点，另外我们注意到B+tree叶子节点采用单链表连接，适合MySQL中常见的基于范围的顺序检索场景，而B-tree无法做到这一点。\n\n# 3.2 B+树和红黑树的对比？\n\n对于有N个叶子节点的B+tree，其搜索复杂度为O(logdN)，其中d(degree)为B+tree的度，表示节点允许的最大子节点个数为d个，在实际的运用过程中d值是大于100的，即时数据达到千万级别时B+tree的高度依然维持在3-4左右，保证了3-4次磁盘I/O操作就能查询到目标数据，而从红黑树的示意图中，可以看到红黑树是二叉树，节点的子节点个数为两个，意味着其搜索复杂度为O(logN)，比B+tree树高出不少，因此红黑树检索到目标数据所需的磁盘I/O次数更多。\n\n# 3.3 B+树相对于Hash表\n\n范围查询是MySQL中常见的场景，Hash表不适合做范围查询，它更适合做等值查询，另外Hash表还存在Hash函数选择和Hash值冲突等问题（因为这些原因，B+树索引要比Hash表索引有更广的适用场景）\n\n\n# 4. 物理存储\n\nInnoDB表的索引按叶子节点存储，是否为完整表数据分为聚餐索引和二级索引，全表数据就是存储在聚簇索引中的，聚簇索引以外的索引叫做二级索引，我们结合实际的例子来介绍下这两类索引，在测试数据库中创建一个包含销售员信息的测试表workers。\n\nCREATE TABLE `workers` (\n\t`id` int(11) NOT NULL AUTO_INCREMENT COMMENT '员工工号',\n\t`name` varchar(36) NOT NULL COMMENT '员工名字',\n\t`sales` int(11) DEFAULT NULL COMMENT '员工销售业绩',\n\tPRIMARY KEY(`id`)\n) ENGINE = INNODB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;\n\n\n插入数据：\n\ninsert into workers(id, name, sales) values (1, 'Georgi', 12744);\n...\n\n\n在这个例子中workers表的聚簇索引建立在字段id上的，它的B+tree的示意图是这样的。聚簇索引的每个叶子节点存储了一行完整的表数据，叶子节点间采用单向链表按id列递增连接，可以方便的进行顺序检索。（InnoDB表必须要有聚簇索引，默认在主键字段上建立聚簇索引，在没有主键字段情况下，表的第一个NOT NULL的唯一索引被建立为聚簇索引，在前两者都没有的情况下，InnoDB将自动生成一个隐式递增id并在此列上建立聚簇索引）。\n\n在name字段上添加二级索引：\n\nALTER TABLE `workers` ADD INDEX index_name(`name`);\n\n\n二级索引的示意图可以看出，二级索引的叶子节点并不存储一行完整的表数据，而是存储了聚簇索引所在的列的值，业务就是workders表中的id列的值。\n\n# 回表查询\n\n由于二级索引的叶子节点不存储完整的表数据，索引当通过二级索引查询到聚簇索引列值后，还需要回到聚簇索引也就是进一步获取数据。\n\nselect * from workers where name='Parto'\n\n\n这条语句中，在二级索引index_name中查询到主键id=3，接着需要带着id=3这个条件，进一步回到聚簇索引查询后获取到完整的数据，很显然回表需要额外的B+tree搜索过程，必然增大查询耗时。需要注意的是，通过二级索引查询时，回表不是必须的过程，当query的所有字段在二级索引中能够查找到时，就不需要回表。MySQL称此时的二级索引为覆盖索引或者触发了索引覆盖。\n\n# 覆盖索引\n\nselect id, name from workers where name='Parto';\n\n\n通过explain命令查看这条SQL的执行计划，可以看到Extra中使用了Using index，表名查询触发了二级索引index_name的索引覆盖。\n\n对比如下语句：\n\nexplain select id, name, sales from workers where name='Parto';\n\n\n可以看到Extra中显示的是NULL，并没有Using index，表明没有触发索引覆盖，需要回表查询。\n\n# 前缀索引\n\n对字符类型字段的前几个字符或对二进制类型字段的前几个bytes字段建立的索引而不是在整个字段上建立索引。\n\ncreate index index_name on persons (name(5)) comment '前缀索引';\n\n\n例如可以对persons表中的name(varchar(16))字段，name字段的前5个字段建立索引，通过命令show index from persons，可以看到索引信息中的索引key的Sub_part中的长度为5。前缀索引可以建立的类型有：char、varchar、binary、varbinary的列上，可以大大减少索引占用的存储空间，也能提升索引的查询效率。\n\n# MyISAM介绍\n\nMyISAM中不存在聚簇索引的表，MyISAM中的主键索引和非主键索引的结构是一样的，从图中可以看出他们的叶子节点是不存储数据的，存放的是表数据的地址，索引MyISAM表可以没有主键，MyISAM表的数据和索引是分开的，是单独存放的。\n\nMyISAM表中的主键索引和非主键索引的区别，仅在于主键索引B+tree上的key必须符合主键的限制，非主键索引B+tree上的key只要符合相应字段的特性就可以了。",normalizedContent:"# 1. 什么是索引？\n\n客户端-》【缓存-》语法解析器-》查询优化器-》查询执行引擎】-》索引和数据\n\n索引是辅助存储引擎高效获取数据的一种数据结构，索引是数据的目录，便于搜索引擎快速定位数据\n\n\n# 2. 索引的分类\n\n数据结构: b+ tree、hash、full-text索引\n\n物理存储：聚簇索引和二级索引（辅助索引）\n\n字段特性：主键索引、唯一索引、普通索引、前缀索引\n\n字段个数： 单列索引和联合索引（复合索引）\n\n\n# 2.1 数据结构\n\n              innodb   myisam   memory\nb+tree 索引     yes      yes      yes\nhash索引        no       no       yes\nfull-text索引   yes      yes      no\n\n\n# 3. 类型对比\n\n# 3.1 b+树与b-tree的区别？\n\n相对于b-tree，b+tree只在叶子节点存储数据，而b-tree的非叶子节点也存储数据，索引b+tree单个节点的数据量更小，在相同的磁盘i/o次数下，能查询更多的节点，另外我们注意到b+tree叶子节点采用单链表连接，适合mysql中常见的基于范围的顺序检索场景，而b-tree无法做到这一点。\n\n# 3.2 b+树和红黑树的对比？\n\n对于有n个叶子节点的b+tree，其搜索复杂度为o(logdn)，其中d(degree)为b+tree的度，表示节点允许的最大子节点个数为d个，在实际的运用过程中d值是大于100的，即时数据达到千万级别时b+tree的高度依然维持在3-4左右，保证了3-4次磁盘i/o操作就能查询到目标数据，而从红黑树的示意图中，可以看到红黑树是二叉树，节点的子节点个数为两个，意味着其搜索复杂度为o(logn)，比b+tree树高出不少，因此红黑树检索到目标数据所需的磁盘i/o次数更多。\n\n# 3.3 b+树相对于hash表\n\n范围查询是mysql中常见的场景，hash表不适合做范围查询，它更适合做等值查询，另外hash表还存在hash函数选择和hash值冲突等问题（因为这些原因，b+树索引要比hash表索引有更广的适用场景）\n\n\n# 4. 物理存储\n\ninnodb表的索引按叶子节点存储，是否为完整表数据分为聚餐索引和二级索引，全表数据就是存储在聚簇索引中的，聚簇索引以外的索引叫做二级索引，我们结合实际的例子来介绍下这两类索引，在测试数据库中创建一个包含销售员信息的测试表workers。\n\ncreate table `workers` (\n\t`id` int(11) not null auto_increment comment '员工工号',\n\t`name` varchar(36) not null comment '员工名字',\n\t`sales` int(11) default null comment '员工销售业绩',\n\tprimary key(`id`)\n) engine = innodb auto_increment=10 default charset=utf8;\n\n\n插入数据：\n\ninsert into workers(id, name, sales) values (1, 'georgi', 12744);\n...\n\n\n在这个例子中workers表的聚簇索引建立在字段id上的，它的b+tree的示意图是这样的。聚簇索引的每个叶子节点存储了一行完整的表数据，叶子节点间采用单向链表按id列递增连接，可以方便的进行顺序检索。（innodb表必须要有聚簇索引，默认在主键字段上建立聚簇索引，在没有主键字段情况下，表的第一个not null的唯一索引被建立为聚簇索引，在前两者都没有的情况下，innodb将自动生成一个隐式递增id并在此列上建立聚簇索引）。\n\n在name字段上添加二级索引：\n\nalter table `workers` add index index_name(`name`);\n\n\n二级索引的示意图可以看出，二级索引的叶子节点并不存储一行完整的表数据，而是存储了聚簇索引所在的列的值，业务就是workders表中的id列的值。\n\n# 回表查询\n\n由于二级索引的叶子节点不存储完整的表数据，索引当通过二级索引查询到聚簇索引列值后，还需要回到聚簇索引也就是进一步获取数据。\n\nselect * from workers where name='parto'\n\n\n这条语句中，在二级索引index_name中查询到主键id=3，接着需要带着id=3这个条件，进一步回到聚簇索引查询后获取到完整的数据，很显然回表需要额外的b+tree搜索过程，必然增大查询耗时。需要注意的是，通过二级索引查询时，回表不是必须的过程，当query的所有字段在二级索引中能够查找到时，就不需要回表。mysql称此时的二级索引为覆盖索引或者触发了索引覆盖。\n\n# 覆盖索引\n\nselect id, name from workers where name='parto';\n\n\n通过explain命令查看这条sql的执行计划，可以看到extra中使用了using index，表名查询触发了二级索引index_name的索引覆盖。\n\n对比如下语句：\n\nexplain select id, name, sales from workers where name='parto';\n\n\n可以看到extra中显示的是null，并没有using index，表明没有触发索引覆盖，需要回表查询。\n\n# 前缀索引\n\n对字符类型字段的前几个字符或对二进制类型字段的前几个bytes字段建立的索引而不是在整个字段上建立索引。\n\ncreate index index_name on persons (name(5)) comment '前缀索引';\n\n\n例如可以对persons表中的name(varchar(16))字段，name字段的前5个字段建立索引，通过命令show index from persons，可以看到索引信息中的索引key的sub_part中的长度为5。前缀索引可以建立的类型有：char、varchar、binary、varbinary的列上，可以大大减少索引占用的存储空间，也能提升索引的查询效率。\n\n# myisam介绍\n\nmyisam中不存在聚簇索引的表，myisam中的主键索引和非主键索引的结构是一样的，从图中可以看出他们的叶子节点是不存储数据的，存放的是表数据的地址，索引myisam表可以没有主键，myisam表的数据和索引是分开的，是单独存放的。\n\nmyisam表中的主键索引和非主键索引的区别，仅在于主键索引b+tree上的key必须符合主键的限制，非主键索引b+tree上的key只要符合相应字段的特性就可以了。",charsets:{cjk:!0},lastUpdated:"2023/02/06, 09:35:40",lastUpdatedTimestamp:167564734e4},{title:"MySQL 调优手册",frontmatter:{title:"MySQL 调优手册",date:"2023-03-09T09:44:07.000Z",permalink:"/pages/ea7be2/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/50.MySQL%20%E7%9B%B8%E5%85%B3/50.MySQL%20%E8%B0%83%E4%BC%98%E6%89%8B%E5%86%8C.html",relativePath:"10.后端开发/50.MySQL 相关/50.MySQL 调优手册.md",key:"v-31a6d9b6",path:"/pages/ea7be2/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"垂直电商搜索注意点",frontmatter:{title:"垂直电商搜索注意点",date:"2023-02-01T10:01:42.000Z",permalink:"/pages/3343c6/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/70.%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2Elasticsearch/10.%E5%9E%82%E7%9B%B4%E7%94%B5%E5%95%86%E6%90%9C%E7%B4%A2%E6%B3%A8%E6%84%8F%E7%82%B9.html",relativePath:"10.后端开发/70.文本搜索Elasticsearch/10.垂直电商搜索注意点.md",key:"v-1b1c130a",path:"/pages/3343c6/",headers:[{level:2,title:"1. 搜索引擎分类",slug:"_1-搜索引擎分类",normalizedTitle:"1. 搜索引擎分类",charIndex:2},{level:2,title:"2. 搜索优化的目标",slug:"_2-搜索优化的目标",normalizedTitle:"2. 搜索优化的目标",charIndex:219},{level:2,title:"3. 搜索结果综合排序",slug:"_3-搜索结果综合排序",normalizedTitle:"3. 搜索结果综合排序",charIndex:353},{level:2,title:"4. 搜索的关键词抽取",slug:"_4-搜索的关键词抽取",normalizedTitle:"4. 搜索的关键词抽取",charIndex:950},{level:2,title:"5. 索引",slug:"_5-索引",normalizedTitle:"5. 索引",charIndex:1145},{level:2,title:"5. 技术难点",slug:"_5-技术难点",normalizedTitle:"5. 技术难点",charIndex:1344},{level:3,title:"1.  单字 较难解决的问题",slug:"_1-单字-较难解决的问题",normalizedTitle:"1.  单字 较难解决的问题",charIndex:null},{level:3,title:"2. 停用词的问题",slug:"_2-停用词的问题",normalizedTitle:"2. 停用词的问题",charIndex:1629},{level:3,title:"3. 组合词问题",slug:"_3-组合词问题",normalizedTitle:"3. 组合词问题",charIndex:1786},{level:3,title:"4. 输入错词的问题",slug:"_4-输入错词的问题",normalizedTitle:"4. 输入错词的问题",charIndex:2053},{level:3,title:"5. 命名实体识别",slug:"_5-命名实体识别",normalizedTitle:"5. 命名实体识别",charIndex:2245},{level:3,title:"6. 用户意图识别",slug:"_6-用户意图识别",normalizedTitle:"6. 用户意图识别",charIndex:2264},{level:3,title:"6. 冷启动数据问题",slug:"_6-冷启动数据问题",normalizedTitle:"6. 冷启动数据问题",charIndex:2283},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:2479}],headersStr:"1. 搜索引擎分类 2. 搜索优化的目标 3. 搜索结果综合排序 4. 搜索的关键词抽取 5. 索引 5. 技术难点 1.  单字 较难解决的问题 2. 停用词的问题 3. 组合词问题 4. 输入错词的问题 5. 命名实体识别 6. 用户意图识别 6. 冷启动数据问题 总结",content:'# 1. 搜索引擎分类\n\n当前的搜索引擎的分类主要分为：\n\n 1. 全网搜索引擎。比如：“百度”、“谷歌”对互联网的各种数据进行搜索。\n 2. 垂直搜索引擎。垂直搜索引擎的数据限定于垂直领域，垂直领域是针对某一个行业或者细分领域的，这些垂直领域是全网搜索引擎的子集。典型的垂直搜索有“电商搜索”。\n 3. 元搜索引擎。用户在输入搜索词之后，根据其他多个搜索引擎合理组织出新的数据，从而返回组织后的结果，元搜索引擎没有自己的爬虫。\n\n\n# 2. 搜索优化的目标\n\n关于搜索优化的目标，这里引用了电商系统中的使命：“多、快、好、省”：\n\n 1. 多 搜出符合的商品更多\n 2. 快 搜索接口的响应尽可能的快\n 3. 好 搜出的商品符合用户的需求越靠前，让用户觉得好用\n 4. 省 只搜出用户想要的商品\n\n\n# 3. 搜索结果综合排序\n\n搜索排序的依据：利用搜索词、文档质量、搜索行为日志反馈以及用户信息等方面对搜索结果的文档集合机型综合排序。\n\n 1. 利用搜索词进行排序。 该过程有称为相关性排序，是根据用户的搜索词与文档本身的相关程度进行排序，整个过程只考虑文档与用户搜索词的匹配程度。\n\n 2. 利用文档质量进行排序。 文档的质量是一个多方面的评价标准，它包括对文档链接权值、文档链接质量的分析，对文档内容真实性、文档内容权威等各方面等情况计算一个合理参考值，给与文档基于质量上的评分。\n\n 3. 利用搜索行为日志反馈进行排序。 用户的搜索行为日志，包括：用户点击了某个商品、在某个商品上的停留时间、加购了某些商品，这些行为可以通过相关日志或者客户端埋点获取，结合搜索行为日志来对排序进行干预。\n\n 4. 利用用户信息进行排序。 该过程又称为个性化排序，是根据用户搜索的历史记录、个性喜好、身份特征等方面为用户定制的搜索结果，即可能导致不同用户使用相同搜索词看到的搜索结果不一致。\n\n> 说明：文档质量、行为日志反馈等在数据分析过程中已经完成（并不需要用户在搜索过程中进行文档质量评分），利用搜索词和用户信息的排序方式采用分布式实时计算。\n\n换个角度看搜索排序，除对搜索结果排序结果有很高的要求之外，对排序完成的时间也具有很高的要求，在极短的时间内完成排序也是搜索体验的重要影响因素之一。\n\n\n# 4. 搜索的关键词抽取\n\n搜索的关键词抽取技术主要如下：\n\n 1. 手动标注文档的额关键词。 keywords = "青年，可持续发展，发展"\n\n 2. 手动标注文档的标签。 标签：政府债券 俄罗斯联邦 Anton\n\n 3. 系统自动抽取。 常见的自动化抽取方法是利用TF-IDF算法。大致思想如果一个关键词在某网页中出现频率很高，在其他网页中很少出现，则认为它是该网页的关键词。\n\n\n# 5. 索引\n\n索引可以分为两类：\n\n 1. 字索引\n 2. 词索引\n\n词索引又涉及到中文分词，中文分词分为以下两种：\n\n 1. 基于词库分词（比如：ik分词、jieba分词）\n 2. 基于机器学习的方式\n\n> 利用机器学习的方式，采用基于上下文信息的分词技术，目前公认的机器学习方式能够达到的较好效果是基于条件随机场模型（Conditional Random Fields）的中文分词技术\n\n\n# 5. 技术难点\n\n\n# 1. 单字 较难解决的问题\n\n存在问题：\n\n * 搜索“花”时，出现“花生”\n * 搜索“瓜”时，出现“瓜子”\n * 搜索“水”时，出现“水壶”\n * ......\n\n常见的原子词有如下：\n\n> 虾、葱、鱼、水、米、面、油、肉、鸡、姜、盐、梨、花、蟹、蒜、菇等等\n\n解决方式： 将原子词放在原子表atomwords.txt中，保护原子词的filter，即维护各个原子词对应的类目code。 比如：我们的商品相关的索引中每个商品都会维护对应的类目code，因此，搜索单字的时候只要带上单字对应的code进行filter过滤掉不相关的商品。\n\n\n# 2. 停用词的问题\n\n在电商商品中经常出现如下词：\n\n袋、g、L、片、/、支、盒\n\n\n另外有以下几个词注意不能被用作停用词：\n\n米、被\n\n\nIK默认自带的停用词有（30个）：\n\n也、了、仍、从、以、使、则、却、又、及、对、就、并、很、或、把、是、的、着、给、而、被、让、在、还、\n比、等、当、与、于、但\n\n\n\n# 3. 组合词问题\n\n在上面的索引的分类中，我们除了分出词索引，为什么还需要字索引，看下下面这个例子：\n\n> 假如：现在词库中有词“大学生”、“活动”、“中心”，因此，当文档中包括“大学生互动中心”，根据词切分 为“大学生/活动/中心”。此时，如果我们用“大学”去搜索文本，将无法查找到该条记录 当加上字索引“大/学/生/活/动/中/心”，用户输入大学用如下语句“（大AND学）OR 大学”,即可把组合词的问题解决了（即查询的时候使用字词混合查询），当然做的更细一点，可以在匹配的时候加上约束，单字“大”必须在单字“学”前面。\n\n\n# 4. 输入错词的问题\n\n关于输入错词的问题，对应的业内有专门的技术文本纠错 对于搜索框搜索的词的纠错。\n\n主要有以下两种情况：\n\n 1. 拼音纠错。这种一般是针对拼音输入法的用户输入的错误的词进行纠正。比如：用户输入“皇上皇”，系统会自动纠为“煌上煌”\n 2. 字形纠错。这种一般针对五笔或者手写的用户输入的错误词进行纠正。比如：用户输入“囗罩”，系统纠成正确的“口罩”等。\n\n\n# 5. 命名实体识别\n\n待补充\n\n\n# 6. 用户意图识别\n\n待补充\n\n\n# 6. 冷启动数据问题\n\n在搜索引擎系统中，通过用户行为日志或者用户信息来对搜索的商品权重进行加权，从而提升用户体验。 但是，对于新用户或者新开的城市门店来说，是没有这方面的数据。因此，这里提出了一种权重加权的方法：\n\n最终权重 = 0.3 * 系统平均权重 + 0.7 * 用户行为权重\n\n\n这种方式，在一开始用户行为权重值较小的时候，让系统的平均权重较大，从而避免了冷数据的问题。\n\n\n# 总结\n\n垂直电商搜索涉及的技术领域较多，其本质是自然语言处理的实际应用。',normalizedContent:'# 1. 搜索引擎分类\n\n当前的搜索引擎的分类主要分为：\n\n 1. 全网搜索引擎。比如：“百度”、“谷歌”对互联网的各种数据进行搜索。\n 2. 垂直搜索引擎。垂直搜索引擎的数据限定于垂直领域，垂直领域是针对某一个行业或者细分领域的，这些垂直领域是全网搜索引擎的子集。典型的垂直搜索有“电商搜索”。\n 3. 元搜索引擎。用户在输入搜索词之后，根据其他多个搜索引擎合理组织出新的数据，从而返回组织后的结果，元搜索引擎没有自己的爬虫。\n\n\n# 2. 搜索优化的目标\n\n关于搜索优化的目标，这里引用了电商系统中的使命：“多、快、好、省”：\n\n 1. 多 搜出符合的商品更多\n 2. 快 搜索接口的响应尽可能的快\n 3. 好 搜出的商品符合用户的需求越靠前，让用户觉得好用\n 4. 省 只搜出用户想要的商品\n\n\n# 3. 搜索结果综合排序\n\n搜索排序的依据：利用搜索词、文档质量、搜索行为日志反馈以及用户信息等方面对搜索结果的文档集合机型综合排序。\n\n 1. 利用搜索词进行排序。 该过程有称为相关性排序，是根据用户的搜索词与文档本身的相关程度进行排序，整个过程只考虑文档与用户搜索词的匹配程度。\n\n 2. 利用文档质量进行排序。 文档的质量是一个多方面的评价标准，它包括对文档链接权值、文档链接质量的分析，对文档内容真实性、文档内容权威等各方面等情况计算一个合理参考值，给与文档基于质量上的评分。\n\n 3. 利用搜索行为日志反馈进行排序。 用户的搜索行为日志，包括：用户点击了某个商品、在某个商品上的停留时间、加购了某些商品，这些行为可以通过相关日志或者客户端埋点获取，结合搜索行为日志来对排序进行干预。\n\n 4. 利用用户信息进行排序。 该过程又称为个性化排序，是根据用户搜索的历史记录、个性喜好、身份特征等方面为用户定制的搜索结果，即可能导致不同用户使用相同搜索词看到的搜索结果不一致。\n\n> 说明：文档质量、行为日志反馈等在数据分析过程中已经完成（并不需要用户在搜索过程中进行文档质量评分），利用搜索词和用户信息的排序方式采用分布式实时计算。\n\n换个角度看搜索排序，除对搜索结果排序结果有很高的要求之外，对排序完成的时间也具有很高的要求，在极短的时间内完成排序也是搜索体验的重要影响因素之一。\n\n\n# 4. 搜索的关键词抽取\n\n搜索的关键词抽取技术主要如下：\n\n 1. 手动标注文档的额关键词。 keywords = "青年，可持续发展，发展"\n\n 2. 手动标注文档的标签。 标签：政府债券 俄罗斯联邦 anton\n\n 3. 系统自动抽取。 常见的自动化抽取方法是利用tf-idf算法。大致思想如果一个关键词在某网页中出现频率很高，在其他网页中很少出现，则认为它是该网页的关键词。\n\n\n# 5. 索引\n\n索引可以分为两类：\n\n 1. 字索引\n 2. 词索引\n\n词索引又涉及到中文分词，中文分词分为以下两种：\n\n 1. 基于词库分词（比如：ik分词、jieba分词）\n 2. 基于机器学习的方式\n\n> 利用机器学习的方式，采用基于上下文信息的分词技术，目前公认的机器学习方式能够达到的较好效果是基于条件随机场模型（conditional random fields）的中文分词技术\n\n\n# 5. 技术难点\n\n\n# 1. 单字 较难解决的问题\n\n存在问题：\n\n * 搜索“花”时，出现“花生”\n * 搜索“瓜”时，出现“瓜子”\n * 搜索“水”时，出现“水壶”\n * ......\n\n常见的原子词有如下：\n\n> 虾、葱、鱼、水、米、面、油、肉、鸡、姜、盐、梨、花、蟹、蒜、菇等等\n\n解决方式： 将原子词放在原子表atomwords.txt中，保护原子词的filter，即维护各个原子词对应的类目code。 比如：我们的商品相关的索引中每个商品都会维护对应的类目code，因此，搜索单字的时候只要带上单字对应的code进行filter过滤掉不相关的商品。\n\n\n# 2. 停用词的问题\n\n在电商商品中经常出现如下词：\n\n袋、g、l、片、/、支、盒\n\n\n另外有以下几个词注意不能被用作停用词：\n\n米、被\n\n\nik默认自带的停用词有（30个）：\n\n也、了、仍、从、以、使、则、却、又、及、对、就、并、很、或、把、是、的、着、给、而、被、让、在、还、\n比、等、当、与、于、但\n\n\n\n# 3. 组合词问题\n\n在上面的索引的分类中，我们除了分出词索引，为什么还需要字索引，看下下面这个例子：\n\n> 假如：现在词库中有词“大学生”、“活动”、“中心”，因此，当文档中包括“大学生互动中心”，根据词切分 为“大学生/活动/中心”。此时，如果我们用“大学”去搜索文本，将无法查找到该条记录 当加上字索引“大/学/生/活/动/中/心”，用户输入大学用如下语句“（大and学）or 大学”,即可把组合词的问题解决了（即查询的时候使用字词混合查询），当然做的更细一点，可以在匹配的时候加上约束，单字“大”必须在单字“学”前面。\n\n\n# 4. 输入错词的问题\n\n关于输入错词的问题，对应的业内有专门的技术文本纠错 对于搜索框搜索的词的纠错。\n\n主要有以下两种情况：\n\n 1. 拼音纠错。这种一般是针对拼音输入法的用户输入的错误的词进行纠正。比如：用户输入“皇上皇”，系统会自动纠为“煌上煌”\n 2. 字形纠错。这种一般针对五笔或者手写的用户输入的错误词进行纠正。比如：用户输入“囗罩”，系统纠成正确的“口罩”等。\n\n\n# 5. 命名实体识别\n\n待补充\n\n\n# 6. 用户意图识别\n\n待补充\n\n\n# 6. 冷启动数据问题\n\n在搜索引擎系统中，通过用户行为日志或者用户信息来对搜索的商品权重进行加权，从而提升用户体验。 但是，对于新用户或者新开的城市门店来说，是没有这方面的数据。因此，这里提出了一种权重加权的方法：\n\n最终权重 = 0.3 * 系统平均权重 + 0.7 * 用户行为权重\n\n\n这种方式，在一开始用户行为权重值较小的时候，让系统的平均权重较大，从而避免了冷数据的问题。\n\n\n# 总结\n\n垂直电商搜索涉及的技术领域较多，其本质是自然语言处理的实际应用。',charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"关于搜索建议词的分析以及相应的优化方案",frontmatter:{title:"关于搜索建议词的分析以及相应的优化方案",date:"2023-02-01T10:03:32.000Z",permalink:"/pages/dcbb80/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/70.%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2Elasticsearch/20.%E5%85%B3%E4%BA%8E%E6%90%9C%E7%B4%A2%E5%BB%BA%E8%AE%AE%E8%AF%8D%E7%9A%84%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%BA%94%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88.html",relativePath:"10.后端开发/70.文本搜索Elasticsearch/20.关于搜索建议词的分析以及相应的优化方案.md",key:"v-26b6e625",path:"/pages/dcbb80/",headers:[{level:2,title:"1. 背景",slug:"_1-背景",normalizedTitle:"1. 背景",charIndex:2},{level:2,title:"2. 搜索建议器的指导原则",slug:"_2-搜索建议器的指导原则",normalizedTitle:"2. 搜索建议器的指导原则",charIndex:156},{level:2,title:"3.  搜索建议器实现功能",slug:"_3-搜索建议器实现功能",normalizedTitle:"3.  搜索建议器实现功能",charIndex:null},{level:2,title:"4.  搜索建议词需要考虑的因素",slug:"_4-搜索建议词需要考虑的因素",normalizedTitle:"4.  搜索建议词需要考虑的因素",charIndex:null},{level:2,title:"5. 基于ES 的搜索建议器的用法",slug:"_5-基于es-的搜索建议器的用法",normalizedTitle:"5. 基于es 的搜索建议器的用法",charIndex:1275},{level:2,title:"6.  自定义搜索建议器",slug:"_6-自定义搜索建议器",normalizedTitle:"6.  自定义搜索建议器",charIndex:null},{level:3,title:"优点",slug:"优点",normalizedTitle:"优点",charIndex:3313},{level:3,title:"缺点",slug:"缺点",normalizedTitle:"缺点",charIndex:3480},{level:2,title:"参考文献",slug:"参考文献",normalizedTitle:"参考文献",charIndex:8064}],headersStr:"1. 背景 2. 搜索建议器的指导原则 3.  搜索建议器实现功能 4.  搜索建议词需要考虑的因素 5. 基于ES 的搜索建议器的用法 6.  自定义搜索建议器 优点 缺点 参考文献",content:'# 1. 背景\n\n不管是全文搜索引擎，还是垂直搜索系统中，当用户在搜索🔍输入框中输入几个字的时候，会自动下来一些词去自动补全用户可能要搜的词语，这部分的功能，我们称作搜索建议器的功能（英文叫做"suggest"）。本文将介绍下目前主流的搜索建议器的做法，并且给出了一个我们认为更好的搜索建议器的做法。\n\n\n# 2. 搜索建议器的指导原则\n\n这里，我们给出如下搜索联想词指导原则：\n\n 1. 搜索联想词的个数是非常有限的，所以必须尽量有效\n 2. 搜索联想词应该是能够最贴近用户想要的结果\n 3. 搜索联想出来的词应该是能够**99%**搜索到商品\n 4. 搜索联想词能够帮用户纠正一些错误\n\n\n# 3. 搜索建议器实现功能\n\n在这部分我们给出了搜索建议器需要实现的功能，这部分功能不仅是程序员需要考虑能够实现的功能，也可以用于测试用于进行验证搜索建议器的功能是否能够满足基本的使用要求。\n\n具体例子如下：\n\n 1.  苹果 =》 在A市，不应该出现"苹果醋"，在深圳和广州应该出现“苹果醋”（ 因为“苹果醋”只在广州和深圳有卖）即搜索建议词具有区域性\n\n 2.  平果 =》 纠错成"苹果"，即拼音纠错\n\n 3.  PingGUO=> 出现苹果，即归一化输入词\n\n 4.  pinguo =》出现苹果，即后鼻音纠错\n\n 5.  pg => 出现pg开头的拼音的前缀，即首字母返回\n\n 6.  虾n =》不应该出现“鲜花”，即不能将虾n，转成xian去查询\n\n 7.  虾r =》 出现“虾仁”，即汉字和首字母可出现正确的词\n\n 8.  长f奶 => 不出现结果，这里不出现是因为要汉字和字母要连着，不能中间插入字母\n\n 9.  chanfu zhangfu=》应该可以出现“长富”，即支持多音字搜索\n\n 10. Kafeii =》 出现咖啡（基于编辑距离进行纠正，推荐大于5个字母才进行）\n\n 11. 白萝卜、白罗卜 =》 只出现白萝卜 皇上皇 煌上煌的问题，即建议词只出现正确的词\n\n 12. 囗=> 纠错成口`，出现口罩相关的名词，即把手写错误的词能够纠正过来\n     \n     祙 => 纠错成 袜\n\n 13. 牛奶 =》 深圳地区会出现"燕塘牛奶"相关，长沙地区出现"花园牛奶"\n\n 14. 蘋果 => 繁体字也能够搜索出结果，这个也是通过词归一化处理\n\n\n# 4. 搜索建议词需要考虑的因素\n\n 1. 建议词的来源可以是商品的分类名称、品牌名称、热搜词，也可以是一些组合词，还可以是一些自定义添加的词。\n 2. 搜索建议词需要考虑去重，比如：“QQ”和"qq"应该是相同的。\n 3. 搜索建议词每个词关联的商品个数，为了避免对用户搜索的影响。因此在凌晨执行，并且使用单线程调用。（使用Multi search 中的count，以及批量插入）\n 4. 搜索建议服务，思路还是先查缓存，是否匹配到缓存的记录，如果匹配则直接返回。否则去es中进行查询。\n 5. 返回结果为空的结果，此时需要增加拼写纠错的处理。(可以建一个纠错表)\n\n\n# 5. 基于ES 的搜索建议器的用法\n\n> suggester基本原理是将输入的文本分解为token，然后在索引的字典里查找相似的term并返回。根据使用场景的不同，在Elasticsearch里面涉及了4种类别的suggester，分别是：\n> \n>  1. Term Suggester\n>  2. Phrase Suggester\n>  3. Completion Suggester\n>  4. Context Suggester\n\n我们依次讲解下，上述4中类别的suggester的用法。\n\n 1. Term Suggester\n\n三种suggest_mode:\n\nmissing:如果词存在，则不给出相似项。\n\npopular :如果词存在，且有相似项，则给出。\n\nalways:不管token是否存在词典里，都给出相似项。\n\n尝试了下，貌似term suggester对于中文是不适用的\n\n下面这段是中文的代码：\n\nDELETE blogs\nPUT /blogs/\n{\n  "mappings": {\n    "tech": {\n      "properties": {\n        "body": {\n          "type": "text",\n          "analyzer": "ik_max_word",\n          "search_analyzer": "ik_smart"\n        }\n      }\n    }\n  }\n}\n\nPOST _bulk/?refresh=true\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "长富牛奶"}\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "长富奶"}\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "奶粉"}\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "牛奶"}\n\nPOST _bulk/?refresh=true\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "niunai"}\n\n\nPOST _analyze\n{\n  "analyzer": "ik_smart", \n  "text": [\n    "长富牛奶",\n    "长富奶",\n    "奶粉",\n    "牛奶"\n  ]\n}\n\nPOST /blogs/_search\n{ \n  "suggest": {\n    "my-suggestion": {\n      "text": "niunai",\n      "term": {\n        "suggest_mode": "popular",\n        "field": "body"\n      }\n    }\n  }\n}\n\n\n 2. Phrase Suggester\n\n在Term Suggester的基础之上，会考虑多个Term之间的关系，比如：是否同时出现在索引的原文中，相邻程度，以及词频，\n\n 3. Completion Suggester\n\n主要应用场景是自动自动补全，每输入一个字符，即时发送一次请求到服务端查询可能的匹配项，将数据变成FST，只能用于前缀匹配，这也是Completion Suggester的局限所在。为了使用Completion Suggester,字段的类型需要专门定义。\n\n有两个参数：\n\npreserve_separators：\n\npreserve_position_increments：\n\nrequest_cache=true 查询从5ms变成1ms\n\n\n# 6. 自定义搜索建议器\n\n基于ES suggester completion，内部用FST（Finite State Transducer）,只能用于前缀匹配，这也是Completion Suggester的局限所在。我们现在的搜索联想词可以中缀匹配，是因为使用了ngram（min_gram: 1, max_gram: 10），在入库的时候把所有的词进行拆分。\n\n> 比如：长富牛奶，会拆成“长、富、牛、奶、长富、富牛、牛奶、长富牛、富牛奶、长富牛奶”\n\n另外，使用了ES 的拼音分词器，支持用户输入拼音搜索相关的联想词，以及将输入的中文词也利用对应的拼音进行匹配。\n\n基于ES，不使用ES自带的搜索建议器Suggester，我们打算自己构建一个用于搜索联想词的索引，与旧有的搜索联想词对比如下：\n\n\n# 优点\n\n 1. 索引更轻量级。因为结构简单，同样的2万条数据，旧的搜索联想词索引占用70M，而 新的搜索联想词占用空间为15M\n 2. 排查问题更方便，对于入库的词如何进行拆分，是通过我们自身的应用程序代码进行控制，而且拆分结果直接可以在es中进行数据查看\n 3. 可操作空间更大，可以自主确定，怎样的词可以查找其他相关的词\n\n\n# 缺点\n\n 1. 有一定代码维护成本\n 2. 分词等原理与ES搜索引擎的分词等原理解耦，可能不利于维护\n 3. 与搜索联想词对比，数据不是放在缓存中(通过request 中cache进行解决)\n\n我们的方案，mapping构建如下：\n\nPUT search_suggester?include_type_name=false\n{\n  "aliases": {\n    "alias_search_suggester": {\n    }\n  },\n  "settings": {\n    "number_of_shards": 3,\n    "number_of_routing_shards": 9,\n    "number_of_replicas": 0,\n    "refresh_interval": "1s",\n    "index":{\n        "sort.field":["frequency", "sku_num"],\n        "sort.order":["desc", "desc"]\n    },\n    "index.search.slowlog.threshold.query.trace": "20ms",\n    "index.search.slowlog.threshold.query.debug": "100ms",\n    "index.search.slowlog.threshold.query.info": "250ms",\n    "index.search.slowlog.threshold.query.warn": "500ms",\n    "index.search.slowlog.threshold.fetch.trace": "20ms",\n    "index.search.slowlog.threshold.fetch.debug": "100ms",\n    "index.search.slowlog.threshold.fetch.info": "250ms",\n    "index.search.slowlog.threshold.fetch.warn": "500ms",\n    "index.indexing.slowlog.threshold.index.trace": "20ms",\n    "index.indexing.slowlog.threshold.index.debug": "100ms",\n    "index.indexing.slowlog.threshold.index.info": "250ms",\n    "index.indexing.slowlog.threshold.index.warn": "500ms"\n  },\n  "mappings": {\n    "_routing": {\n      "required": true\n    },\n    "dynamic":"strict",\n    "properties": {\n      "query": {\n        "type": "keyword",\n         "doc_values": false,\n         "norms": false \n      },\n      "city_zip": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false\n      },\n      "term_prefixs": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "term_pinyin": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "term_shouzimu": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "pinyin_prefixs": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "shouzimu_prefixs": {\n        "type": "keyword",\n        "doc_values": false,\n         "norms": false,\n         "copy_to": "search_suggester_all"\n      },\n      "frequency": {\n        "type": "long"\n      },\n      "sku_num": {\n        "type": "long"\n      },\n      "search_suggester_all": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false\n      }\n    }\n  }\n}\n\n\n说明：\n\n 1. term_prefixs : 中文词前缀\n 2. term_pinyin：中文词拼音\n 3. term_shouzimu：中文词首字母前缀\n 4. pinyin_prefixs：拼音前缀\n 5. shouzimu_prefixs：首字母前缀\n 6. ...\n\n将相应的词，ik拆词，拼音拆词，组合中文和拼音等，按照上述需要的规则，进行拆分，然后插入到索引中。\n\n查询的时候，对于ES的查询可以只查询search_suggester_all这个字段啦。\n\n查询DSL语句如下：\n\nGET alias_search_suggester/_search\n{\n    "from": 0,\n    "size": 10,\n    "query": {\n        "bool": {\n            "filter": [\n                {\n                    "term": {\n                        "city_zip": {\n                            "value": "400100",\n                            "boost": 1\n                        }\n                    }\n                },\n                {\n                    "term": {\n                        "search_suggester_all": {\n                            "value": "花园",\n                            "boost": 1\n                        }\n                    }\n                }\n            ],\n            "adjust_pure_negative": true,\n            "boost": 1\n        }\n    },\n    "_source": {\n        "includes": [\n            "query",\n            "sku_num"\n        ],\n        "excludes": []\n    },\n    "sort": [\n        {\n            "frequency": {\n                "order": "desc"\n            }\n        },\n        {\n            "sku_num": {\n                "order": "desc"\n            }\n        }\n    ],\n    "track_total_hits": false\n}\n\n\n使用到的工具包有：\n\n\x3c!-- ik分词 --\x3e\n<dependency>\n    <groupId>org.apache.lucene</groupId>\n    <artifactId>lucene-core</artifactId>\n    <version>8.0.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.lucene</groupId>\n    <artifactId>lucene-queryparser</artifactId>\n    <version>8.0.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.lucene</groupId>\n    <artifactId>lucene-analyzers-common</artifactId>\n    <version>8.0.0</version>\n</dependency>\n\n\x3c!-- 繁体转简体 --\x3e\n<dependency>\n\t\t<groupId>com.github.houbb</groupId>\n\t\t<artifactId>opencc4j</artifactId>\n\t<version>1.0.2</version>\n</dependency>\n\n\x3c!-- 汉字转拼音 --\x3e\n<dependency>\n\t\t<groupId>com.belerweb</groupId>\n\t\t<artifactId>pinyin4j</artifactId>\n\t\t<version>2.5.0</version>\n</dependency>\n\n\n\n# 参考文献\n\n 1. https://blog.csdn.net/wwd0501/article/details/80595201\n 2. https://www.jianshu.com/p/9e2c6a8e1b54 (该篇文档较详细的介绍搜索中文搜索建议词的实现方式)',normalizedContent:'# 1. 背景\n\n不管是全文搜索引擎，还是垂直搜索系统中，当用户在搜索🔍输入框中输入几个字的时候，会自动下来一些词去自动补全用户可能要搜的词语，这部分的功能，我们称作搜索建议器的功能（英文叫做"suggest"）。本文将介绍下目前主流的搜索建议器的做法，并且给出了一个我们认为更好的搜索建议器的做法。\n\n\n# 2. 搜索建议器的指导原则\n\n这里，我们给出如下搜索联想词指导原则：\n\n 1. 搜索联想词的个数是非常有限的，所以必须尽量有效\n 2. 搜索联想词应该是能够最贴近用户想要的结果\n 3. 搜索联想出来的词应该是能够**99%**搜索到商品\n 4. 搜索联想词能够帮用户纠正一些错误\n\n\n# 3. 搜索建议器实现功能\n\n在这部分我们给出了搜索建议器需要实现的功能，这部分功能不仅是程序员需要考虑能够实现的功能，也可以用于测试用于进行验证搜索建议器的功能是否能够满足基本的使用要求。\n\n具体例子如下：\n\n 1.  苹果 =》 在a市，不应该出现"苹果醋"，在深圳和广州应该出现“苹果醋”（ 因为“苹果醋”只在广州和深圳有卖）即搜索建议词具有区域性\n\n 2.  平果 =》 纠错成"苹果"，即拼音纠错\n\n 3.  pingguo=> 出现苹果，即归一化输入词\n\n 4.  pinguo =》出现苹果，即后鼻音纠错\n\n 5.  pg => 出现pg开头的拼音的前缀，即首字母返回\n\n 6.  虾n =》不应该出现“鲜花”，即不能将虾n，转成xian去查询\n\n 7.  虾r =》 出现“虾仁”，即汉字和首字母可出现正确的词\n\n 8.  长f奶 => 不出现结果，这里不出现是因为要汉字和字母要连着，不能中间插入字母\n\n 9.  chanfu zhangfu=》应该可以出现“长富”，即支持多音字搜索\n\n 10. kafeii =》 出现咖啡（基于编辑距离进行纠正，推荐大于5个字母才进行）\n\n 11. 白萝卜、白罗卜 =》 只出现白萝卜 皇上皇 煌上煌的问题，即建议词只出现正确的词\n\n 12. 囗=> 纠错成口`，出现口罩相关的名词，即把手写错误的词能够纠正过来\n     \n     祙 => 纠错成 袜\n\n 13. 牛奶 =》 深圳地区会出现"燕塘牛奶"相关，长沙地区出现"花园牛奶"\n\n 14. 蘋果 => 繁体字也能够搜索出结果，这个也是通过词归一化处理\n\n\n# 4. 搜索建议词需要考虑的因素\n\n 1. 建议词的来源可以是商品的分类名称、品牌名称、热搜词，也可以是一些组合词，还可以是一些自定义添加的词。\n 2. 搜索建议词需要考虑去重，比如：“qq”和"qq"应该是相同的。\n 3. 搜索建议词每个词关联的商品个数，为了避免对用户搜索的影响。因此在凌晨执行，并且使用单线程调用。（使用multi search 中的count，以及批量插入）\n 4. 搜索建议服务，思路还是先查缓存，是否匹配到缓存的记录，如果匹配则直接返回。否则去es中进行查询。\n 5. 返回结果为空的结果，此时需要增加拼写纠错的处理。(可以建一个纠错表)\n\n\n# 5. 基于es 的搜索建议器的用法\n\n> suggester基本原理是将输入的文本分解为token，然后在索引的字典里查找相似的term并返回。根据使用场景的不同，在elasticsearch里面涉及了4种类别的suggester，分别是：\n> \n>  1. term suggester\n>  2. phrase suggester\n>  3. completion suggester\n>  4. context suggester\n\n我们依次讲解下，上述4中类别的suggester的用法。\n\n 1. term suggester\n\n三种suggest_mode:\n\nmissing:如果词存在，则不给出相似项。\n\npopular :如果词存在，且有相似项，则给出。\n\nalways:不管token是否存在词典里，都给出相似项。\n\n尝试了下，貌似term suggester对于中文是不适用的\n\n下面这段是中文的代码：\n\ndelete blogs\nput /blogs/\n{\n  "mappings": {\n    "tech": {\n      "properties": {\n        "body": {\n          "type": "text",\n          "analyzer": "ik_max_word",\n          "search_analyzer": "ik_smart"\n        }\n      }\n    }\n  }\n}\n\npost _bulk/?refresh=true\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "长富牛奶"}\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "长富奶"}\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "奶粉"}\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "牛奶"}\n\npost _bulk/?refresh=true\n{ "index" : { "_index" : "blogs", "_type" : "tech" } }\n{ "body": "niunai"}\n\n\npost _analyze\n{\n  "analyzer": "ik_smart", \n  "text": [\n    "长富牛奶",\n    "长富奶",\n    "奶粉",\n    "牛奶"\n  ]\n}\n\npost /blogs/_search\n{ \n  "suggest": {\n    "my-suggestion": {\n      "text": "niunai",\n      "term": {\n        "suggest_mode": "popular",\n        "field": "body"\n      }\n    }\n  }\n}\n\n\n 2. phrase suggester\n\n在term suggester的基础之上，会考虑多个term之间的关系，比如：是否同时出现在索引的原文中，相邻程度，以及词频，\n\n 3. completion suggester\n\n主要应用场景是自动自动补全，每输入一个字符，即时发送一次请求到服务端查询可能的匹配项，将数据变成fst，只能用于前缀匹配，这也是completion suggester的局限所在。为了使用completion suggester,字段的类型需要专门定义。\n\n有两个参数：\n\npreserve_separators：\n\npreserve_position_increments：\n\nrequest_cache=true 查询从5ms变成1ms\n\n\n# 6. 自定义搜索建议器\n\n基于es suggester completion，内部用fst（finite state transducer）,只能用于前缀匹配，这也是completion suggester的局限所在。我们现在的搜索联想词可以中缀匹配，是因为使用了ngram（min_gram: 1, max_gram: 10），在入库的时候把所有的词进行拆分。\n\n> 比如：长富牛奶，会拆成“长、富、牛、奶、长富、富牛、牛奶、长富牛、富牛奶、长富牛奶”\n\n另外，使用了es 的拼音分词器，支持用户输入拼音搜索相关的联想词，以及将输入的中文词也利用对应的拼音进行匹配。\n\n基于es，不使用es自带的搜索建议器suggester，我们打算自己构建一个用于搜索联想词的索引，与旧有的搜索联想词对比如下：\n\n\n# 优点\n\n 1. 索引更轻量级。因为结构简单，同样的2万条数据，旧的搜索联想词索引占用70m，而 新的搜索联想词占用空间为15m\n 2. 排查问题更方便，对于入库的词如何进行拆分，是通过我们自身的应用程序代码进行控制，而且拆分结果直接可以在es中进行数据查看\n 3. 可操作空间更大，可以自主确定，怎样的词可以查找其他相关的词\n\n\n# 缺点\n\n 1. 有一定代码维护成本\n 2. 分词等原理与es搜索引擎的分词等原理解耦，可能不利于维护\n 3. 与搜索联想词对比，数据不是放在缓存中(通过request 中cache进行解决)\n\n我们的方案，mapping构建如下：\n\nput search_suggester?include_type_name=false\n{\n  "aliases": {\n    "alias_search_suggester": {\n    }\n  },\n  "settings": {\n    "number_of_shards": 3,\n    "number_of_routing_shards": 9,\n    "number_of_replicas": 0,\n    "refresh_interval": "1s",\n    "index":{\n        "sort.field":["frequency", "sku_num"],\n        "sort.order":["desc", "desc"]\n    },\n    "index.search.slowlog.threshold.query.trace": "20ms",\n    "index.search.slowlog.threshold.query.debug": "100ms",\n    "index.search.slowlog.threshold.query.info": "250ms",\n    "index.search.slowlog.threshold.query.warn": "500ms",\n    "index.search.slowlog.threshold.fetch.trace": "20ms",\n    "index.search.slowlog.threshold.fetch.debug": "100ms",\n    "index.search.slowlog.threshold.fetch.info": "250ms",\n    "index.search.slowlog.threshold.fetch.warn": "500ms",\n    "index.indexing.slowlog.threshold.index.trace": "20ms",\n    "index.indexing.slowlog.threshold.index.debug": "100ms",\n    "index.indexing.slowlog.threshold.index.info": "250ms",\n    "index.indexing.slowlog.threshold.index.warn": "500ms"\n  },\n  "mappings": {\n    "_routing": {\n      "required": true\n    },\n    "dynamic":"strict",\n    "properties": {\n      "query": {\n        "type": "keyword",\n         "doc_values": false,\n         "norms": false \n      },\n      "city_zip": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false\n      },\n      "term_prefixs": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "term_pinyin": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "term_shouzimu": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "pinyin_prefixs": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false,\n        "copy_to": "search_suggester_all"\n      },\n      "shouzimu_prefixs": {\n        "type": "keyword",\n        "doc_values": false,\n         "norms": false,\n         "copy_to": "search_suggester_all"\n      },\n      "frequency": {\n        "type": "long"\n      },\n      "sku_num": {\n        "type": "long"\n      },\n      "search_suggester_all": {\n        "type": "keyword",\n        "doc_values": false,\n        "norms": false\n      }\n    }\n  }\n}\n\n\n说明：\n\n 1. term_prefixs : 中文词前缀\n 2. term_pinyin：中文词拼音\n 3. term_shouzimu：中文词首字母前缀\n 4. pinyin_prefixs：拼音前缀\n 5. shouzimu_prefixs：首字母前缀\n 6. ...\n\n将相应的词，ik拆词，拼音拆词，组合中文和拼音等，按照上述需要的规则，进行拆分，然后插入到索引中。\n\n查询的时候，对于es的查询可以只查询search_suggester_all这个字段啦。\n\n查询dsl语句如下：\n\nget alias_search_suggester/_search\n{\n    "from": 0,\n    "size": 10,\n    "query": {\n        "bool": {\n            "filter": [\n                {\n                    "term": {\n                        "city_zip": {\n                            "value": "400100",\n                            "boost": 1\n                        }\n                    }\n                },\n                {\n                    "term": {\n                        "search_suggester_all": {\n                            "value": "花园",\n                            "boost": 1\n                        }\n                    }\n                }\n            ],\n            "adjust_pure_negative": true,\n            "boost": 1\n        }\n    },\n    "_source": {\n        "includes": [\n            "query",\n            "sku_num"\n        ],\n        "excludes": []\n    },\n    "sort": [\n        {\n            "frequency": {\n                "order": "desc"\n            }\n        },\n        {\n            "sku_num": {\n                "order": "desc"\n            }\n        }\n    ],\n    "track_total_hits": false\n}\n\n\n使用到的工具包有：\n\n\x3c!-- ik分词 --\x3e\n<dependency>\n    <groupid>org.apache.lucene</groupid>\n    <artifactid>lucene-core</artifactid>\n    <version>8.0.0</version>\n</dependency>\n<dependency>\n    <groupid>org.apache.lucene</groupid>\n    <artifactid>lucene-queryparser</artifactid>\n    <version>8.0.0</version>\n</dependency>\n<dependency>\n    <groupid>org.apache.lucene</groupid>\n    <artifactid>lucene-analyzers-common</artifactid>\n    <version>8.0.0</version>\n</dependency>\n\n\x3c!-- 繁体转简体 --\x3e\n<dependency>\n\t\t<groupid>com.github.houbb</groupid>\n\t\t<artifactid>opencc4j</artifactid>\n\t<version>1.0.2</version>\n</dependency>\n\n\x3c!-- 汉字转拼音 --\x3e\n<dependency>\n\t\t<groupid>com.belerweb</groupid>\n\t\t<artifactid>pinyin4j</artifactid>\n\t\t<version>2.5.0</version>\n</dependency>\n\n\n\n# 参考文献\n\n 1. https://blog.csdn.net/wwd0501/article/details/80595201\n 2. https://www.jianshu.com/p/9e2c6a8e1b54 (该篇文档较详细的介绍搜索中文搜索建议词的实现方式)',charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"ElasticSearch 临时",frontmatter:{title:"ElasticSearch 临时",date:"2023-03-24T10:59:33.000Z",permalink:"/pages/e0e231/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/70.%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2Elasticsearch/30.ElasticSearch%20%E4%B8%B4%E6%97%B6.html",relativePath:"10.后端开发/70.文本搜索Elasticsearch/30.ElasticSearch 临时.md",key:"v-9663e336",path:"/pages/e0e231/",headersStr:null,content:" 1. box_type",normalizedContent:" 1. box_type",charsets:{},lastUpdated:"2023/03/27, 10:53:20",lastUpdatedTimestamp:16798856e5},{title:"Kafka 必知问题",frontmatter:{title:"Kafka 必知问题",date:"2022-11-16T16:50:31.000Z",permalink:"/pages/88d53b/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/80.Kafka%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/10.%20Kafka%20%E5%BF%85%E7%9F%A5%E9%97%AE%E9%A2%98.html",relativePath:"10.后端开发/80.Kafka 最佳实践指南/10. Kafka 必知问题.md",key:"v-35584b30",path:"/pages/88d53b/",headersStr:null,content:"问题：\n\n 1.  kafka 消费的数据的时候，该采用单条拉取还是批量拉取？如何是批量拉取，每批次拉取的数量多少比较合适？\n 2.  kafka 消费时的 offset 提交，该采用自动提交还是手动提交？\n 3.  kafka 消费时，如果调用的下层服务报错，是直接报错，还是重试几次报错，然后丢弃消费该条消息；或者是通过一定的等待机制不断的重试，让消费卡在这条消息？\n 4.  kafka 消费时，每个消费组开启的消费线程的个数多大合适？消费线程和对应的 topic 的分区的关系是怎么样？\n 5.  kafka 的 topic 的分区个数设置多大合适？\n 6.  当 kafka 的消费组发生 lag 时，该如何处理？\n 7.  kafka 消费的时候，如何保证消费幂等？当我们是通过消费来累积次数时，对于重复消费的场景该如何处理？\n 8.  kafka 消费组消费的 topic，明明生产者有发送消息到指定的 topic，但是消费组却没有消费到消息，该如何排查处理？\n 9.  kafka 消费组如何动态开启和关闭？\n 10. kafka中的 topic 消息会丢失吗？\n 11. 发送消息到 kafka 的指定t opic，如何保证有序？发送消息时，还有哪些参数需要注意的？\n 12. 新起一个 kafka 的消费组，默认的 offset，是用 latest 还是 earliest，为什么？\n 13. kafka topic 中的消息体的 key 和 value 的序列化方式该如何选择，说出你的理由？\n\n第13点知识补充： kafka 默认的序列化方式是字符串，另外 kafka 还提供了整型和字节数组序列化器，当然用户还可以自定义序列化器，不建议使用自定义序列化器。\n\n第10点知识补充： 会丢失，kafka broker 默认的消息保留策略： 7天 或者 1GB。当消息超过上限或者过期时，旧消息就会被删除。另外，主题 topic 可以配置自己的保留策略。\n\n第5点补充知识： kafka 的分区个数默认参数为 num.partitions，该参数默认值为1，需要注意的是，分区个数只能增加，不能减少。 经验值：分区的大小限制在25GB以内，可以得到比较理想的结果。",normalizedContent:"问题：\n\n 1.  kafka 消费的数据的时候，该采用单条拉取还是批量拉取？如何是批量拉取，每批次拉取的数量多少比较合适？\n 2.  kafka 消费时的 offset 提交，该采用自动提交还是手动提交？\n 3.  kafka 消费时，如果调用的下层服务报错，是直接报错，还是重试几次报错，然后丢弃消费该条消息；或者是通过一定的等待机制不断的重试，让消费卡在这条消息？\n 4.  kafka 消费时，每个消费组开启的消费线程的个数多大合适？消费线程和对应的 topic 的分区的关系是怎么样？\n 5.  kafka 的 topic 的分区个数设置多大合适？\n 6.  当 kafka 的消费组发生 lag 时，该如何处理？\n 7.  kafka 消费的时候，如何保证消费幂等？当我们是通过消费来累积次数时，对于重复消费的场景该如何处理？\n 8.  kafka 消费组消费的 topic，明明生产者有发送消息到指定的 topic，但是消费组却没有消费到消息，该如何排查处理？\n 9.  kafka 消费组如何动态开启和关闭？\n 10. kafka中的 topic 消息会丢失吗？\n 11. 发送消息到 kafka 的指定t opic，如何保证有序？发送消息时，还有哪些参数需要注意的？\n 12. 新起一个 kafka 的消费组，默认的 offset，是用 latest 还是 earliest，为什么？\n 13. kafka topic 中的消息体的 key 和 value 的序列化方式该如何选择，说出你的理由？\n\n第13点知识补充： kafka 默认的序列化方式是字符串，另外 kafka 还提供了整型和字节数组序列化器，当然用户还可以自定义序列化器，不建议使用自定义序列化器。\n\n第10点知识补充： 会丢失，kafka broker 默认的消息保留策略： 7天 或者 1gb。当消息超过上限或者过期时，旧消息就会被删除。另外，主题 topic 可以配置自己的保留策略。\n\n第5点补充知识： kafka 的分区个数默认参数为 num.partitions，该参数默认值为1，需要注意的是，分区个数只能增加，不能减少。 经验值：分区的大小限制在25gb以内，可以得到比较理想的结果。",charsets:{cjk:!0},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"Kafka 正确的使用姿势（待完成）",frontmatter:{title:"Kafka 正确的使用姿势（待完成）",date:"2022-11-16T16:52:14.000Z",permalink:"/pages/0c7472/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/80.Kafka%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/20.Kafka%20%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF.html",relativePath:"10.后端开发/80.Kafka 最佳实践指南/20.Kafka 正确的使用姿势.md",key:"v-3baa47ac",path:"/pages/0c7472/",headersStr:null,content:"https://www.zhihu.com/question/456093354/answer/2754225999",normalizedContent:"https://www.zhihu.com/question/456093354/answer/2754225999",charsets:{},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"HTTP 各个版本区别",frontmatter:{title:"HTTP 各个版本区别",date:"2023-02-01T10:09:42.000Z",permalink:"/pages/109cde/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/85.%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/10.HTTP%20%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB.html",relativePath:"10.后端开发/85.网络相关/10.HTTP 各个版本区别.md",key:"v-9a699648",path:"/pages/109cde/",headers:[{level:2,title:"1. HTTP 基本知识",slug:"_1-http-基本知识",normalizedTitle:"1. http 基本知识",charIndex:2},{level:3,title:"1.1 HTTP是什么？",slug:"_1-1-http是什么",normalizedTitle:"1.1 http是什么？",charIndex:19},{level:3,title:"1.2 HTTP 常见的状态码有哪些？",slug:"_1-2-http-常见的状态码有哪些",normalizedTitle:"1.2 http 常见的状态码有哪些？",charIndex:132},{level:3,title:"1.3  HTTP常见字段有哪些？",slug:"_1-3-http常见字段有哪些",normalizedTitle:"1.3  http常见字段有哪些？",charIndex:null},{level:2,title:"2. GET和POST",slug:"_2-get和post",normalizedTitle:"2. get和post",charIndex:2276},{level:3,title:"2.1 含义",slug:"_2-1-含义",normalizedTitle:"2.1 含义",charIndex:2292},{level:3,title:"2.2 GET 和POST方法是安全和幂等的吗？",slug:"_2-2-get-和post方法是安全和幂等的吗",normalizedTitle:"2.2 get 和post方法是安全和幂等的吗？",charIndex:2391},{level:2,title:"3. HTTP特性",slug:"_3-http特性",normalizedTitle:"3. http特性",charIndex:2541},{level:2,title:"4. HTTP与HTTPS",slug:"_4-http与https",normalizedTitle:"4. http与https",charIndex:4181},{level:2,title:"5. HTTP/1.0、HTTP/1.1、HTTP/2、HTTP/3演变",slug:"_5-http-1-0、http-1-1、http-2、http-3演变",normalizedTitle:"5. http/1.0、http/1.1、http/2、http/3演变",charIndex:4582}],headersStr:"1. HTTP 基本知识 1.1 HTTP是什么？ 1.2 HTTP 常见的状态码有哪些？ 1.3  HTTP常见字段有哪些？ 2. GET和POST 2.1 含义 2.2 GET 和POST方法是安全和幂等的吗？ 3. HTTP特性 4. HTTP与HTTPS 5. HTTP/1.0、HTTP/1.1、HTTP/2、HTTP/3演变",content:"# 1. HTTP 基本知识\n\n\n# 1.1 HTTP是什么？\n\nHTTP是超文本传输协议，也就是HyperText Transfer Protocol。HTTP的名字「超文本传输协议」，它可以拆成三个部分：\n\n 1. 超文本\n 2. 传输\n 3. 协议\n\n\n# 1.2 HTTP 常见的状态码有哪些？\n\n五大类HTTP状态码\n\n大类    具体含义                          常见的状态码\n1××   提示信息，表示目前协议处理的中间状态，还需要后续的操作   \n2××   成功，报文已经收到并被正确处理               200、204、206\n3××   重定向，资源位置发生变动，需要客户端重新发送请求；     301、302、304\n4××   客户端错误，请求报文有误，服务器无法处理          400、403、404\n5××   服务器错误，服务器在处理请求时内部发生了错误        \n\n1××\n\n1××类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。\n\n2××\n\n2××类状态码表示服务器成功处理了客户端的请求，也就是我们最愿意看到的状态。\n\n「200 OK」是最常见的成功状态码，表示一切正常。如果是非HEAD请求，服务器返回的响应头都会有body数据。\n\n「204 No Content」也是常见的成功状态码，与200OK基本相同，但是响应头没有body数据。\n\n「206 Partial Content」是应用于HTTP分块下载或断电续传，表示响应返回的body数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。\n\n3××\n\n3××类状态状态码表示客户端请求的资源发生了变动，需要客户端用新的URL重新发送请求获取资源，也就是重定向。\n\n「301 Moved Permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的URL再次访问。\n\n「302 Moved Temporarily」表示临时重定向，说明请求的资源还在，但暂时需要用另一个URL来访问。\n\n301和302都会在响应头里面使用字段Location，指明后续需要跳转的URL,浏览器会自动重定向新的URL.\n\n「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。\n\n4××\n\n4××类状态码表示客户端发送的报文有误，服务器无法处理。\n\n「400 Bad Request」表示客户端请求的报文有错误，但只是个笼统的错误。\n\n「403 Forbidden」表示服务器禁止访问资源，并不是客户端的请求错误。\n\n「404 Not Found」表示请求的资源在服务器器上不存在或未找到，所以无法提供给客户端。\n\n5××\n\n5××类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。\n\n「500 Internal Server Error」与400类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。\n\n「501 Not Implemented」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。\n\n「502 Bad Gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。\n\n「503 Service Unavailabe」表示服务器当前很忙，暂时无法响应服务器，类似“网络服务很忙，请稍后重试”的意思。\n\n\n# 1.3 HTTP常见字段有哪些？\n\n * Host\n\n客户端发送请求时，用来指定服务器的域名。\n\n比如：Host:A.com\n\n * Content-Length\n\n服务器在返回数据时，会有Content-Length字段，表明本次回应的数据长度。\n\n比如：Content-Length: 1000\n\n表示本次服务器返回的数据长度是1000个字段。\n\n * Connection\n\nConnection字段最常用语客户端要求服务器使用TCP持久化连接，以便其他请求复用。\n\nHTTP/1.1 版本的默认连接都是持久连接，但为了兼容老版本的HTTP，需要指定Connection首部字段的值为Keep-Alive.\n\n比如：Connection:keep-alive\n\n一个可以复用的TCP连接就建立了，直到客户端或服务器主动关闭连接。\n\n * Content-Type\n\nContent-Type字段主要用于服务器回应时，告诉客户端，本次数据是什么格式。\n\n比如：Content-Type：text/html;charset=utf-8\n\n上面的类型表明，发送的是网页，而且编码是UTF-8。客户端请求的时候，可以使用Accept字段声明自己可以接受哪些数据格式。\n\nAccept: /\n\n上面代码中，客户端声明自己可以接受任何格式的数据。\n\n * Content-Encoding 字段\n\nContent-Encoding字段说明数据的压缩方法。表示服务器返回的数据使用什么压缩格式。\n\n比如：Content-Encoding：gzip\n\n上面表示服务器返回的数据采用gzip方式压缩，告知客户端需要用此方式解压。\n\n客户端在请求时，用Accept-Encoding字段说明自己可以接受哪些压缩方法。\n\nAccept-Encoding：gzip，deflate\n\n\n# 2. GET和POST\n\n\n# 2.1 含义\n\nGET方法的含义是请求从服务器获取资源，这个资源可以是静态的文本、页面、图片视频等。\n\nPOST方法则是相反操作，它向URI指定的资源提交数据，数据就放在报文的body里。\n\n\n# 2.2 GET 和POST方法是安全和幂等的吗？\n\n安全和幂等的概念：\n\n * 在HTTP协议中，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。\n * 所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。\n\nGET 方法是安全且幂等的\n\nPOST方法是不安全的也不是幂等的\n\n\n# 3. HTTP特性\n\n1996/5 HTTP/1.0\n\n1997/1 HTTP/1.1\n\n1.1 版本最大变化，就是引入了持久连接（persistent conncetion），即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive\n\n客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在最后一个请求时，发送Connection: close,明确要求服务器关闭连接。\n\nConnection: close\n\n\n目前，对于同一个域名，大多数浏览器允许同时建立6个持久连接。\n\n举例：\n\nGET / HTTP/1.0\n\nUser-Agent: Mozilla/5.0 (Machintosh; Intel Mac OS X 10_10_5)\n\nAccept: */*\n\n\n说明：第一行是请求命令，必须是在尾部添加协议版本（HTTPP/1.0）。后面是多行头信息，描述客户端的情况。\n\n服务器的响应格式：\n\nHTTP/1.O 200 OK\nContent-Type: text/plain\nContent-Length: 13784\nExpires: Thu, 05 DEC 1997 15:55:28 GMT\nServer: Apache 0.8.4\n\n<html>\n <body>Hello Word</body>\n</html>\n\n\n说明：第一行是“协议版本 + 状态码（status code） + 状态描述”\n\nHTTP 是「无状态、明文传输」\n\n * 对于无状态的问题，解决方案有很多种，其中比较简单的方式是用Cookie技术。Cookie通过再请求和响应报文中写入Cookie信息来控制客户端的状态。相当于，在客户端第一次请求后，服务器会下发一个装有客户信息的「小贴纸」，后续客户请求服务器的时候，带上「小贴纸」，服务器就知道了。\n * HTTP的安全问题，可以用HTTPS的方式解决，也就是通过引入SSL/TLS层。\n\n早期HTTP/1.0 性能上的一个很大问题，那就是每发起一个请求，都要建立一次TCP连接（三次握手），而且是串行请求，做了无畏的TCP连接建立和断开，增加了通信开销。\n\n为了解决上述TCP连接问题，HTTP/1.1提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了TCP连接的重复建立和断开造成的额外开销，减轻了服务器的负载。\n\n持久连接的特点是，只要任意一端没有明确剔除断开连接，则保持TCP连接状态。\n\nHTTP/1.1 版本引入了管道机制（pipelining）,即在同一个TCP连接里面，客户端可以同时发送多个请求。这样就进一步改进了HTTP协议的效率。\n\n举例来说，客户端需要请求两个资源。以前的做法是，在同一个TCP连接里面，发送A请求，然后等待服务器做出回应，收到后再发出B请求。管道机制是允许浏览器同时发出A请求和B请求，但是服务器还是按照顺序，先回应A请求，完成后再回应B请求。问题，要是前面的回应特别慢，后面就会有许多请求排毒等着。这称为「队头阻塞」。(注意：现代浏览器默认是不开启 HTTP Pipelining )\n\n「队头阻塞」的模式加剧了HTTP的性能问题。总之HTTP/1.1 的性能一般般，后续的HTTP/2 和HTTP/3 就是在优化HTTP的性能。\n\n容易混淆的概念\n\nTCP的keep alive和HTTP的Keep-alive是不同层次的概念：\n\n * TCP的keep alive是检查当前TCP连接是否活着；\n * HTTP的Keep-alive是要让一个TCP连接活久一点\n\nTCP keep alive的表现：\n\n当一个连接“一段时间”没有通讯数据时，一方会发出一个心跳包（Keep Alive包），如果对方有回应，则表明当前连接有效，继续监控。这个“一段时间”可以设置，具体做法google。如下：\n\n\n# 4. HTTP与HTTPS\n\n 1. HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS则解决HTTP不安全的缺陷，在TCP和HTTP网络层之间加入了SSL/TLS安全协议，使得报文能够加密传输。\n 2. HTTP连接建立相对简单，TCP三次握手之后便可进行HTTP的报文传输。HTTPS在TCP三次握手之后，还需要进行SSL/TLS的握手过程，才可以加密报文传输。\n 3. HTTP的端口号是80，HTTPS的端口号是443.\n 4. HTTPS协议需要向CA(证书权威机构)申请数字证书，来保证服务器的身份是可信的。\n\nHTTPS建立一个连接，要花费6次交互，先是建立三次握手，然后是TLS/1.3 的三次握手。QUIC直接把以往的TCP和TLS/1.3 的6次交互合并成3次，减少了交互次数。QUIC是在UDP之上的伪TCP+TLS+HTTP/2的多路复用协议。\n\n\n# 5. HTTP/1.0、HTTP/1.1、HTTP/2、HTTP/3演变\n\nHTTP/1.1相比HTTP/1.0性能上的改进：\n\n 1. 使用TCP长连接的方式改善了HTTP/1.0短连接造成性能开销\n 2. 支持管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间\n\nHTTP/1.1 自身的性能瓶颈：\n\n 1. 请求/响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩Body的部分\n 2. 发送冗长的首部。每次互相发送相同的首部造成的浪费较多\n 3. 服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞\n 4. 没有请求优先级控制\n 5. 请求只能从客户端开始，服务器只能被动响应\n\nHTTP/2协议是基于HTTPS的，所以HTTP/2的安全性是有保障的。\n\nHTTP/2相比HTTP/1.1性能上的改进：\n\n 1. HTTP/2会压缩头（Header），如果你同时发送多个请求，他们的头是一样的或者是相似的，那么协议会帮你消除重复的部分。\n\n 2. HTTP/2不再像HTTP/1.1里的纯文本的报文，而是全面采用了二进制格式。头信息和数据体都是二进制，并且统称为帧（frame）：头信息帧和数据帧。\n\n 3. HTTP/2的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。客户端还可以指定数据流的优先级。\n\n 4. HTTP/2的连接可以并发多个请求（多路复用），而不用按照顺序一一对应。移除了HTTP/1.1中的串行请求，不需要排队等待，不会再出现「队头阻塞」问题。\n    \n    比如：在一个TCP连接里，服务器收到了客户端A和B的两个请求，如果发现A处理过程非常耗时，于是就回应A请求已经处理好的部分，接着回应B请求，完成后，再回应A请求剩下的部分。\n\n 5. 服务器推送，HTTP/2在一定程度上改善了传统的「请求-应答」工作模式，服务不再是被动地响应，也可以主动向客户端发送消息。\n    \n    比如：在浏览器刚请求HTML的时候，就提前把可能用到的JS、CSS文件等静态资源主动发给客户端，减少延时的等待，也就是服务器推送（Server Push，也叫Cache Push）\n\nHTTP/2有哪些缺陷？HTTP/3做了哪些优化？\n\n 1. HTTP/2主要的问题在于：多个HTTP请求在复用一个TCP连接，下层的TCP协议是不知道有多少个HTTP请求。所以一旦发生了丢包现象，就会触发TCP的重传机制，这样在一个TCP连接中的所有的HTTP请求都必须等待这个丢了包被重传回来。（区别：HTTP/1.1 的管道传输中，如果有一个请求阻塞，那么队列请求也统统被阻塞住了）\n 2. HTTP/3 把HTTP下层的TCP协议改成了UDP",normalizedContent:"# 1. http 基本知识\n\n\n# 1.1 http是什么？\n\nhttp是超文本传输协议，也就是hypertext transfer protocol。http的名字「超文本传输协议」，它可以拆成三个部分：\n\n 1. 超文本\n 2. 传输\n 3. 协议\n\n\n# 1.2 http 常见的状态码有哪些？\n\n五大类http状态码\n\n大类    具体含义                          常见的状态码\n1××   提示信息，表示目前协议处理的中间状态，还需要后续的操作   \n2××   成功，报文已经收到并被正确处理               200、204、206\n3××   重定向，资源位置发生变动，需要客户端重新发送请求；     301、302、304\n4××   客户端错误，请求报文有误，服务器无法处理          400、403、404\n5××   服务器错误，服务器在处理请求时内部发生了错误        \n\n1××\n\n1××类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。\n\n2××\n\n2××类状态码表示服务器成功处理了客户端的请求，也就是我们最愿意看到的状态。\n\n「200 ok」是最常见的成功状态码，表示一切正常。如果是非head请求，服务器返回的响应头都会有body数据。\n\n「204 no content」也是常见的成功状态码，与200ok基本相同，但是响应头没有body数据。\n\n「206 partial content」是应用于http分块下载或断电续传，表示响应返回的body数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。\n\n3××\n\n3××类状态状态码表示客户端请求的资源发生了变动，需要客户端用新的url重新发送请求获取资源，也就是重定向。\n\n「301 moved permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的url再次访问。\n\n「302 moved temporarily」表示临时重定向，说明请求的资源还在，但暂时需要用另一个url来访问。\n\n301和302都会在响应头里面使用字段location，指明后续需要跳转的url,浏览器会自动重定向新的url.\n\n「304 not modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。\n\n4××\n\n4××类状态码表示客户端发送的报文有误，服务器无法处理。\n\n「400 bad request」表示客户端请求的报文有错误，但只是个笼统的错误。\n\n「403 forbidden」表示服务器禁止访问资源，并不是客户端的请求错误。\n\n「404 not found」表示请求的资源在服务器器上不存在或未找到，所以无法提供给客户端。\n\n5××\n\n5××类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。\n\n「500 internal server error」与400类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。\n\n「501 not implemented」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。\n\n「502 bad gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。\n\n「503 service unavailabe」表示服务器当前很忙，暂时无法响应服务器，类似“网络服务很忙，请稍后重试”的意思。\n\n\n# 1.3 http常见字段有哪些？\n\n * host\n\n客户端发送请求时，用来指定服务器的域名。\n\n比如：host:a.com\n\n * content-length\n\n服务器在返回数据时，会有content-length字段，表明本次回应的数据长度。\n\n比如：content-length: 1000\n\n表示本次服务器返回的数据长度是1000个字段。\n\n * connection\n\nconnection字段最常用语客户端要求服务器使用tcp持久化连接，以便其他请求复用。\n\nhttp/1.1 版本的默认连接都是持久连接，但为了兼容老版本的http，需要指定connection首部字段的值为keep-alive.\n\n比如：connection:keep-alive\n\n一个可以复用的tcp连接就建立了，直到客户端或服务器主动关闭连接。\n\n * content-type\n\ncontent-type字段主要用于服务器回应时，告诉客户端，本次数据是什么格式。\n\n比如：content-type：text/html;charset=utf-8\n\n上面的类型表明，发送的是网页，而且编码是utf-8。客户端请求的时候，可以使用accept字段声明自己可以接受哪些数据格式。\n\naccept: /\n\n上面代码中，客户端声明自己可以接受任何格式的数据。\n\n * content-encoding 字段\n\ncontent-encoding字段说明数据的压缩方法。表示服务器返回的数据使用什么压缩格式。\n\n比如：content-encoding：gzip\n\n上面表示服务器返回的数据采用gzip方式压缩，告知客户端需要用此方式解压。\n\n客户端在请求时，用accept-encoding字段说明自己可以接受哪些压缩方法。\n\naccept-encoding：gzip，deflate\n\n\n# 2. get和post\n\n\n# 2.1 含义\n\nget方法的含义是请求从服务器获取资源，这个资源可以是静态的文本、页面、图片视频等。\n\npost方法则是相反操作，它向uri指定的资源提交数据，数据就放在报文的body里。\n\n\n# 2.2 get 和post方法是安全和幂等的吗？\n\n安全和幂等的概念：\n\n * 在http协议中，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。\n * 所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。\n\nget 方法是安全且幂等的\n\npost方法是不安全的也不是幂等的\n\n\n# 3. http特性\n\n1996/5 http/1.0\n\n1997/1 http/1.1\n\n1.1 版本最大变化，就是引入了持久连接（persistent conncetion），即tcp连接默认不关闭，可以被多个请求复用，不用声明connection: keep-alive\n\n客户端和服务器发现对方一段时间没有活动，就可以主动关闭连接。不过，规范的做法是，客户端在最后一个请求时，发送connection: close,明确要求服务器关闭连接。\n\nconnection: close\n\n\n目前，对于同一个域名，大多数浏览器允许同时建立6个持久连接。\n\n举例：\n\nget / http/1.0\n\nuser-agent: mozilla/5.0 (machintosh; intel mac os x 10_10_5)\n\naccept: */*\n\n\n说明：第一行是请求命令，必须是在尾部添加协议版本（httpp/1.0）。后面是多行头信息，描述客户端的情况。\n\n服务器的响应格式：\n\nhttp/1.o 200 ok\ncontent-type: text/plain\ncontent-length: 13784\nexpires: thu, 05 dec 1997 15:55:28 gmt\nserver: apache 0.8.4\n\n<html>\n <body>hello word</body>\n</html>\n\n\n说明：第一行是“协议版本 + 状态码（status code） + 状态描述”\n\nhttp 是「无状态、明文传输」\n\n * 对于无状态的问题，解决方案有很多种，其中比较简单的方式是用cookie技术。cookie通过再请求和响应报文中写入cookie信息来控制客户端的状态。相当于，在客户端第一次请求后，服务器会下发一个装有客户信息的「小贴纸」，后续客户请求服务器的时候，带上「小贴纸」，服务器就知道了。\n * http的安全问题，可以用https的方式解决，也就是通过引入ssl/tls层。\n\n早期http/1.0 性能上的一个很大问题，那就是每发起一个请求，都要建立一次tcp连接（三次握手），而且是串行请求，做了无畏的tcp连接建立和断开，增加了通信开销。\n\n为了解决上述tcp连接问题，http/1.1提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了tcp连接的重复建立和断开造成的额外开销，减轻了服务器的负载。\n\n持久连接的特点是，只要任意一端没有明确剔除断开连接，则保持tcp连接状态。\n\nhttp/1.1 版本引入了管道机制（pipelining）,即在同一个tcp连接里面，客户端可以同时发送多个请求。这样就进一步改进了http协议的效率。\n\n举例来说，客户端需要请求两个资源。以前的做法是，在同一个tcp连接里面，发送a请求，然后等待服务器做出回应，收到后再发出b请求。管道机制是允许浏览器同时发出a请求和b请求，但是服务器还是按照顺序，先回应a请求，完成后再回应b请求。问题，要是前面的回应特别慢，后面就会有许多请求排毒等着。这称为「队头阻塞」。(注意：现代浏览器默认是不开启 http pipelining )\n\n「队头阻塞」的模式加剧了http的性能问题。总之http/1.1 的性能一般般，后续的http/2 和http/3 就是在优化http的性能。\n\n容易混淆的概念\n\ntcp的keep alive和http的keep-alive是不同层次的概念：\n\n * tcp的keep alive是检查当前tcp连接是否活着；\n * http的keep-alive是要让一个tcp连接活久一点\n\ntcp keep alive的表现：\n\n当一个连接“一段时间”没有通讯数据时，一方会发出一个心跳包（keep alive包），如果对方有回应，则表明当前连接有效，继续监控。这个“一段时间”可以设置，具体做法google。如下：\n\n\n# 4. http与https\n\n 1. http 是超文本传输协议，信息是明文传输，存在安全风险的问题。https则解决http不安全的缺陷，在tcp和http网络层之间加入了ssl/tls安全协议，使得报文能够加密传输。\n 2. http连接建立相对简单，tcp三次握手之后便可进行http的报文传输。https在tcp三次握手之后，还需要进行ssl/tls的握手过程，才可以加密报文传输。\n 3. http的端口号是80，https的端口号是443.\n 4. https协议需要向ca(证书权威机构)申请数字证书，来保证服务器的身份是可信的。\n\nhttps建立一个连接，要花费6次交互，先是建立三次握手，然后是tls/1.3 的三次握手。quic直接把以往的tcp和tls/1.3 的6次交互合并成3次，减少了交互次数。quic是在udp之上的伪tcp+tls+http/2的多路复用协议。\n\n\n# 5. http/1.0、http/1.1、http/2、http/3演变\n\nhttp/1.1相比http/1.0性能上的改进：\n\n 1. 使用tcp长连接的方式改善了http/1.0短连接造成性能开销\n 2. 支持管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间\n\nhttp/1.1 自身的性能瓶颈：\n\n 1. 请求/响应头部（header）未经压缩就发送，首部信息越多延迟越大。只能压缩body的部分\n 2. 发送冗长的首部。每次互相发送相同的首部造成的浪费较多\n 3. 服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞\n 4. 没有请求优先级控制\n 5. 请求只能从客户端开始，服务器只能被动响应\n\nhttp/2协议是基于https的，所以http/2的安全性是有保障的。\n\nhttp/2相比http/1.1性能上的改进：\n\n 1. http/2会压缩头（header），如果你同时发送多个请求，他们的头是一样的或者是相似的，那么协议会帮你消除重复的部分。\n\n 2. http/2不再像http/1.1里的纯文本的报文，而是全面采用了二进制格式。头信息和数据体都是二进制，并且统称为帧（frame）：头信息帧和数据帧。\n\n 3. http/2的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。客户端还可以指定数据流的优先级。\n\n 4. http/2的连接可以并发多个请求（多路复用），而不用按照顺序一一对应。移除了http/1.1中的串行请求，不需要排队等待，不会再出现「队头阻塞」问题。\n    \n    比如：在一个tcp连接里，服务器收到了客户端a和b的两个请求，如果发现a处理过程非常耗时，于是就回应a请求已经处理好的部分，接着回应b请求，完成后，再回应a请求剩下的部分。\n\n 5. 服务器推送，http/2在一定程度上改善了传统的「请求-应答」工作模式，服务不再是被动地响应，也可以主动向客户端发送消息。\n    \n    比如：在浏览器刚请求html的时候，就提前把可能用到的js、css文件等静态资源主动发给客户端，减少延时的等待，也就是服务器推送（server push，也叫cache push）\n\nhttp/2有哪些缺陷？http/3做了哪些优化？\n\n 1. http/2主要的问题在于：多个http请求在复用一个tcp连接，下层的tcp协议是不知道有多少个http请求。所以一旦发生了丢包现象，就会触发tcp的重传机制，这样在一个tcp连接中的所有的http请求都必须等待这个丢了包被重传回来。（区别：http/1.1 的管道传输中，如果有一个请求阻塞，那么队列请求也统统被阻塞住了）\n 2. http/3 把http下层的tcp协议改成了udp",charsets:{cjk:!0},lastUpdated:"2023/02/06, 09:35:40",lastUpdatedTimestamp:167564734e4},{title:"浅谈「高并发」架构设计",frontmatter:{title:"浅谈「高并发」架构设计",date:"2022-09-01T19:00:19.000Z",permalink:"/pages/b700b8/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/90.%E6%9E%B6%E6%9E%84%E7%9B%B8%E5%85%B3/100.%E6%B5%85%E8%B0%88%E9%AB%98%E5%B9%B6%E5%8F%91%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html",relativePath:"10.后端开发/90.架构相关/100.浅谈高并发架构设计.md",key:"v-3d0f0b4e",path:"/pages/b700b8/",headers:[{level:2,title:"机房部署",slug:"机房部署",normalizedTitle:"机房部署",charIndex:105},{level:2,title:"缓存",slug:"缓存",normalizedTitle:"缓存",charIndex:114},{level:2,title:"消息队列",slug:"消息队列",normalizedTitle:"消息队列",charIndex:154},{level:2,title:"分布式数据存储",slug:"分布式数据存储",normalizedTitle:"分布式数据存储",charIndex:235},{level:2,title:"微服务",slug:"微服务",normalizedTitle:"微服务",charIndex:253},{level:2,title:"高可用措施",slug:"高可用措施",normalizedTitle:"高可用措施",charIndex:306},{level:2,title:"性能测试&负载测试",slug:"性能测试-负载测试",normalizedTitle:"性能测试&amp;负载测试",charIndex:null},{level:2,title:"服务可观测性设计",slug:"服务可观测性设计",normalizedTitle:"服务可观测性设计",charIndex:356}],headersStr:"机房部署 缓存 消息队列 分布式数据存储 微服务 高可用措施 性能测试&负载测试 服务可观测性设计",content:"高并发系统设计要考虑是哪种高并发：\n\n * 只有高并发的读，写的频率相对低\n * 只有高并发的写，读的频率相对低\n * 既有高并发的读、也有高并发的写 上述不同的高并发场景，采用的解决策略是不一样的。\n\n\n# 机房部署\n\n\n# 缓存\n\nCDN 缓存 缓存又分为：本地缓存和分布式缓存。 缓存命中率：\n\n\n# 消息队列\n\n目前，主流的消息队列有：RabbitMQ、RocketMQ 和 Kafka。 消息队列：消息重复（如何保证消费幂等）、消息消费失败如何处理、\n\n\n# 分布式数据存储\n\n分库分表\n\n\n# 微服务\n\n分布式带来的问题： 分布式ID（UUID的缺点、美团 Leaf） 分布式事务 分布式锁\n\n\n# 高可用措施\n\n * 流控：Hystrix 和 Sentinel\n\n\n# 性能测试&负载测试\n\n\n# 服务可观测性设计\n\n * 告警",normalizedContent:"高并发系统设计要考虑是哪种高并发：\n\n * 只有高并发的读，写的频率相对低\n * 只有高并发的写，读的频率相对低\n * 既有高并发的读、也有高并发的写 上述不同的高并发场景，采用的解决策略是不一样的。\n\n\n# 机房部署\n\n\n# 缓存\n\ncdn 缓存 缓存又分为：本地缓存和分布式缓存。 缓存命中率：\n\n\n# 消息队列\n\n目前，主流的消息队列有：rabbitmq、rocketmq 和 kafka。 消息队列：消息重复（如何保证消费幂等）、消息消费失败如何处理、\n\n\n# 分布式数据存储\n\n分库分表\n\n\n# 微服务\n\n分布式带来的问题： 分布式id（uuid的缺点、美团 leaf） 分布式事务 分布式锁\n\n\n# 高可用措施\n\n * 流控：hystrix 和 sentinel\n\n\n# 性能测试&负载测试\n\n\n# 服务可观测性设计\n\n * 告警",charsets:{cjk:!0},lastUpdated:"2023/03/17, 17:04:14",lastUpdatedTimestamp:1679043854e3},{title:"聊一聊MySQL大表数据异构的方案",frontmatter:{title:"聊一聊MySQL大表数据异构的方案",date:"2023-03-22T14:48:00.000Z",permalink:"/pages/d086a2/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/90.%E6%9E%B6%E6%9E%84%E7%9B%B8%E5%85%B3/200.%E8%81%8A%E4%B8%80%E8%81%8AMySQL%E5%A4%A7%E8%A1%A8%E6%95%B0%E6%8D%AE%E5%BC%82%E6%9E%84%E7%9A%84%E6%96%B9%E6%A1%88.html",relativePath:"10.后端开发/90.架构相关/200.聊一聊MySQL大表数据异构的方案.md",key:"v-28850768",path:"/pages/d086a2/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:20:58.000Z",permalink:"/pages/d00ad7/"},regularPath:"/20.%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/10.%E6%A6%82%E8%A6%81.html",relativePath:"20.前端开发/10.概要.md",key:"v-7d92da14",path:"/pages/d00ad7/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"浅谈「高可用」架构设计",frontmatter:{title:"浅谈「高可用」架构设计",date:"2023-01-18T17:30:32.000Z",permalink:"/pages/4e98ab/"},regularPath:"/10.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/90.%E6%9E%B6%E6%9E%84%E7%9B%B8%E5%85%B3/110.%E6%B5%85%E8%B0%88%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html",relativePath:"10.后端开发/90.架构相关/110.浅谈高可用架构设计.md",key:"v-061b6052",path:"/pages/4e98ab/",headers:[{level:2,title:"1. 引言",slug:"_1-引言",normalizedTitle:"1. 引言",charIndex:2},{level:3,title:"1.1 墨菲定律",slug:"_1-1-墨菲定律",normalizedTitle:"1.1 墨菲定律",charIndex:372},{level:3,title:"1.2 康威定律",slug:"_1-2-康威定律",normalizedTitle:"1.2 康威定律",charIndex:533},{level:3,title:"1.3 业务关心的问题",slug:"_1-3-业务关心的问题",normalizedTitle:"1.3 业务关心的问题",charIndex:754},{level:2,title:"2. 可用性度量与故障分类",slug:"_2-可用性度量与故障分类",normalizedTitle:"2. 可用性度量与故障分类",charIndex:934},{level:3,title:"2.1 可用性度量",slug:"_2-1-可用性度量",normalizedTitle:"2.1 可用性度量",charIndex:952},{level:3,title:"2.2 故障分类",slug:"_2-2-故障分类",normalizedTitle:"2.2 故障分类",charIndex:2948},{level:2,title:"3. 系统可用性的挑战",slug:"_3-系统可用性的挑战",normalizedTitle:"3. 系统可用性的挑战",charIndex:3167},{level:2,title:"4. 高可用的有效手段",slug:"_4-高可用的有效手段",normalizedTitle:"4. 高可用的有效手段",charIndex:3554},{level:3,title:"4.1 深入理解业务",slug:"_4-1-深入理解业务",normalizedTitle:"4.1 深入理解业务",charIndex:3570},{level:3,title:"4.2 负载均衡",slug:"_4-2-负载均衡",normalizedTitle:"4.2 负载均衡",charIndex:4451},{level:3,title:"4.3 限流、降级、熔断",slug:"_4-3-限流、降级、熔断",normalizedTitle:"4.3 限流、降级、熔断",charIndex:4805},{level:3,title:"4.4 隔离",slug:"_4-4-隔离",normalizedTitle:"4.4 隔离",charIndex:5893},{level:3,title:"4.5 服务治理",slug:"_4-5-服务治理",normalizedTitle:"4.5 服务治理",charIndex:7173},{level:3,title:"4.6 数据治理",slug:"_4-6-数据治理",normalizedTitle:"4.6 数据治理",charIndex:7836},{level:3,title:"4.7 超时与重试",slug:"_4-7-超时与重试",normalizedTitle:"4.7 超时与重试",charIndex:8395},{level:3,title:"4.8 日志监控告警",slug:"_4-8-日志监控告警",normalizedTitle:"4.8 日志监控告警",charIndex:8926},{level:3,title:"4.9 预发布与灰度发布",slug:"_4-9-预发布与灰度发布",normalizedTitle:"4.9 预发布与灰度发布",charIndex:9559},{level:3,title:"4.10 回滚机制",slug:"_4-10-回滚机制",normalizedTitle:"4.10 回滚机制",charIndex:9830},{level:3,title:"4.11 组件高可用",slug:"_4-11-组件高可用",normalizedTitle:"4.11 组件高可用",charIndex:9884},{level:3,title:"4.12 架构冗余",slug:"_4-12-架构冗余",normalizedTitle:"4.12 架构冗余",charIndex:10055},{level:3,title:"4.13 性能分析与调优",slug:"_4-13-性能分析与调优",normalizedTitle:"4.13 性能分析与调优",charIndex:10533},{level:3,title:"4.14 性能测试与自动化测试回归",slug:"_4-14-性能测试与自动化测试回归",normalizedTitle:"4.14 性能测试与自动化测试回归",charIndex:12195},{level:3,title:"4.15 故障演练",slug:"_4-15-故障演练",normalizedTitle:"4.15 故障演练",charIndex:13159},{level:3,title:"4.16 故障处理原则",slug:"_4-16-故障处理原则",normalizedTitle:"4.16 故障处理原则",charIndex:13468},{level:3,title:"4.17 应急预案",slug:"_4-17-应急预案",normalizedTitle:"4.17 应急预案",charIndex:13934},{level:3,title:"4.18 CheckList 保驾护航",slug:"_4-18-checklist-保驾护航",normalizedTitle:"4.18 checklist 保驾护航",charIndex:14507},{level:2,title:"5. 总结",slug:"_5-总结",normalizedTitle:"5. 总结",charIndex:14664}],headersStr:"1. 引言 1.1 墨菲定律 1.2 康威定律 1.3 业务关心的问题 2. 可用性度量与故障分类 2.1 可用性度量 2.2 故障分类 3. 系统可用性的挑战 4. 高可用的有效手段 4.1 深入理解业务 4.2 负载均衡 4.3 限流、降级、熔断 4.4 隔离 4.5 服务治理 4.6 数据治理 4.7 超时与重试 4.8 日志监控告警 4.9 预发布与灰度发布 4.10 回滚机制 4.11 组件高可用 4.12 架构冗余 4.13 性能分析与调优 4.14 性能测试与自动化测试回归 4.15 故障演练 4.16 故障处理原则 4.17 应急预案 4.18 CheckList 保驾护航 5. 总结",content:'# 1. 引言\n\n> 坚守 Design For Failure 的架构理念。\n\n作为一个后端开发工程师，不同的岗位如：初级研发工程师、高级研发工程师或者架构师，负责的系统类型可能是：\n\n * 负责一个功能\n * 负责一个系统模块\n * 负责一个系统\n * 负责多个系统或业务条线\n\n即时是一个再小的系统，小到一个小小的功能模块，都对可用性有一定的要求，针对重要的功能模块，甚至还要求做到「高可用」。「高可用」这个概念，根据不同的可用性程度实现方案会有所不同。\n\n「如何设计一个高可用架构」，我比较认可 AWS 提出的"Design for failure and nothing will fail" 最佳实践，即面向失败进行系统设计，必须考虑系统所有可能发生故障或不可用的场景，并假设这些可能都会发生，倒逼自己设计足够健壮的系统。\n\n\n# 1.1 墨菲定律\n\n在系统设计时，应该多思考墨菲定律，即："如果事情有变坏的可能，不管这种可能有多小，它总会发生"，对应到系统设计时需要考虑的点：\n\n * 任何事情没有表面看起来那么简单。\n * 所有的事情都会比你预计的时间长。\n * 可能出错的事总会出错。\n * 如果你担心某种情况发生，那么它就更有可能发生。\n\n\n# 1.2 康威定律\n\n在系统划分时，也必须要思考康威定律，即："设计系统的架构受制于产生设计的组织的沟通结构"，通俗的说：\n\n * 软件架构是公司组织架构的反映。\n * 应该按照业务闭环进行系统拆分/组织架构划分，实现闭环/高内聚/低耦合，减少沟通成本。\n * 如果沟通出现问题，那么就应该考虑进行系统和组织架构的调整。\n * 在合适时机进行系统拆分，不要一开始就把系统/服务拆的非常细，虽然闭环，但是每个人维护的系统多，维护成本高。\n\n\n# 1.3 业务关心的问题\n\n如果我们想做成「高可用」系统，至少要解决以下业务关心的问题：\n\n * 如何评估系统高可用？\n * 如何监控系统高可用？\n * 如何保证系统高可用？\n\n简而言之，完成一个系统的设计、开发、交付的工作不难，难的是如何保证系统的高可用。\n\n本文和大家一起探讨目前主流的高可用的一些技术方案，探讨如何做到「永不消失的网站/APP」。\n\n\n# 2. 可用性度量与故障分类\n\n\n# 2.1 可用性度量\n\n根据谷歌 SRE 手册，给出了定义和简要说明。\n\n * SLI：Service Level Indicator，服务等级指标。\n   \n   > "对所提供的服务水平的某些方面进行仔细定义的定量测量"。比如：对于一个网站来说，一个常见的 SLI 就是请求正常响应的百分比。\n\n * SLO：Service Level Object，服务等级目标。\n   \n   > "由 SLI 衡量的服务水平的目标值或值范围"，是团队设置的。是围绕 SLI 构建的目标。通常是一个百分比，并与时间范围（比如：阅读、季度、年度等）挂钩。通常用一连串的 9 来度量。\n\n * SLA：Service Level Agreement，服务等级协议。\n   \n   > "与您的用户签订的明确或隐含的合同，其中包括满足（或过错）他们所包含的 SLO 的后果"，由业务而不是工程师、SRE或操作人员设定的。SLA 是一个外部指标,因此与 SLO 的目标不同。SLA 是与用户达成的业务协议,规定了一定程度的可用性。工程团队知道 SLA,但没有设置它们。相反,团队设置 SLO 比 SLA 更严格,给自己一个缓冲。是企业围绕 SLO 发布的协议，它要求在不满足 SLO 时，向客户补偿的协议。\n\n * MTBF：Mean Time Between Failture，平均故障间隔。\n   \n   > 表示两次故障的间隔时间，也就是系统「正常运行」的平均时间，这个时间越长，说明系统稳定性越高。\n\n * MTTR：Mean Time To Repair，故障恢复时间。\n   \n   > 表示系统发生故障后「恢复的时间」，这个值越小，故障对用户的影响越小。\n\nSLO 或者 SLA 的计算值\n\nSLO/SLA = (1 - 年度不可用时间/年度总时间) × 100% = MTBF / (MTBF + MTTR) * 100%\n\n从公式中可以看出，\n\n * SLA 等于 4 个 9，也就是可用时长达到 99.99%，不可用时长则为是 0.01%，一年是 365 天，8760 个小时，一年的不可用 时长就是 52.6 分钟。\n\n * SLA 等于 3 个 9，就相当于一年不可用时长等于 526 分钟。\n\n * SLA 等于 5 个 9，就相当于一年不可用时长等于 5.26 分钟。\n\n可以发现，用 SLA 等于 4 个 9 作为参照物，少个 9 相当于小数点往后移一位，多个 9 相当于小数点往前移一位。整理换算成年月天的表格如下。\n\n系统可用性 %        宕机时间/年   宕机时间/月   宕机时间/周   宕机时间/天\n90%(1个9)       36.5天    72小时     16.8小时   2.4小时\n99%（2个9）       3.65天    7.2小时    1.68小时   14.4分钟\n99.9%（3个9）     8.76小时   43.8分钟   10.1分钟   1.44分钟\n99.99%（4个9）    52.6分钟   4.38分钟   1.01分钟   8.66秒\n99.999%（5个9）   5.26分钟   25.9秒    6.05秒    0.87秒\n\n小贴士\n\n京东淘宝大部分是 4 个 9。\n\n举个例子\n\n假如我有一个网站：http://baidu.com，监控指标是请求正常响应数。\n\n时间：从 2022年1月1日 到 2022年3月18号，请求数据如下：\n\n月份           总请求数   错误数   故障宕机时长\n1 月份         500    20    0 min\n2 月份         600    10    10 min\n3月1号~3月18号   400    15    0 min\n\n那么对应的 SLI、SLO、SLA 是多少？\n\nSLI = 1-(20+10+15)/(500+600+400)=97%\n\nSLO = 1-(10/79天×24×60)=99.991%\n\nSLA：假设我们是给第三方做的网站，并签订了 SLO 达不到 99.99%，就要赔偿多少钱，可以根据上面的 SLO，再根据协议签订的 SLA 协议，算出补偿的金额，但是我们通常也把 SLA 值直接等于 SLO 的值，叫的比较多的是 SLA。\n\n在实际的业务中，要综合考虑 SLI 和 SLO，比如：流量的低峰期和高峰期业务不可用 1 分钟，对业务的影响评估完全不同，因此，又有了如下较好的高可用评估手段(某种情况下 SLI 可能被用来直接作为高可用评估手段)。\n\n高可用评估：基于一段时间（比如 1 年）的停机影响的请求量占比，进行评估，公式如下：\n\n> 高可用评估 = 停机时间影响请求量/总的请求量\n\n\n# 2.2 故障分类\n\n分类      描述                      权重\n事故级故障   严重故障，网站整体不可用            100\nA类故障    网站访问不顺畅或核心功能不可用         20\nB类故障    非核心功能不可用，或核心功能少数用户不可用   5\nC类故障    以上故障以外的其他故障             1\n\n故障分计算公式：\n\n> 故障分 = 故障时间 × 故障权重\n\n\n# 3. 系统可用性的挑战\n\n我们都知道，系统发生故障其实是不可避免的，尤其是越大的系统，发生问题的概率也越大。这些故障一般体现在 3 个方面：\n\n 1. 硬件故障：CPU、内存、磁盘、网卡、交换机、路由器\n 2. 软件问题：代码 Bug、版本迭代\n 3. 不可抗力：地震、水灾、火灾、战争\n\n具体常见的服务不可用的场景又有：\n\n * DNS 被劫持\n * CDN 服务不可用\n * 应用服务器及数据库服务器宕机\n * 网络交换机失效\n * 硬件故障：硬盘损坏、网卡松掉\n * 环境故障：机房停电、空调失灵、光缆被挖掘机挖断\n * 代码 bug\n * 黑客攻击\n * 促销引来大量用户访问\n * 第三方合作伙伴的服务不可用\n * 超时设置不合理导致系统奔溃\n * 限流措施不到位，导致负载过高时系统奔溃\n * 解耦不彻底，导致某个服务挂掉时所有服务受到影响\n * ……\n\n\n# 4. 高可用的有效手段\n\n\n# 4.1 深入理解业务\n\n技术人很容易犯的一个错误，「离代码很近，离用户很远！」，在高可用架构中，我认为要做好高可用架构设计，深入理解业务是重中之重。\n\n深入业务是做好高可用架构的前提\n\n架构设计与系统演进：架构要结合具体的业务场景来设计。\n\n理解业务这件事：\n\n * 产品需求不等于业务诉求\n   * 产品提出要实现的系统功能未必等于业务想要解决的问题\n   * 怎么在规定的时间内搞定这个需求\n\n举个例子\n\n产品需求是这样的：\n\n * 1 W 载客量\n * 200 km/h 速度\n * 10 级 抵抗风浪\n\n开发侧的理解：\n\n * 需要多少钢材\n * 多少工人、几个发动机\n * 船舱结构要如何设计\n\n实际上业务的诉求是："安全达到对岸"，业务其实不关心你是修船、造车、开车。实际的开发过程中很多人不关心需求的源头，不能真正理解业务。\n\n大部公司中，技术处于价值创造的末端。\n\n用户的真实需求 -> 业务 -> 运营 -> 产品 -> 技术,每一层信息都会被加工、处理、拆分，技术看到的问题距离最想解决的问题可能会很远，没有搞清楚问题的源头而去解决问题，结果会很糟糕。\n\n再举个例子\n\n订单作为交易的载体需要承载大量的数据：\n\n 1. 订单系统的演进完全跟着业务需求走。\n 2. 很难判断是否应该让这些数据落到订单上。（存储在一个无法管理的 JSON 字段中）\n\n表面上看，是系统设计和实现不够好，实际上是：没有在深度理解业务的基础上对交易系统进行建模，确定边界与能力范围。\n\n如何理解业务的小技巧：\n\n * 不要盲信产品 "永远不要试图用战术上的勤奋，去掩盖你战略上的懒惰"\n * 技术团队要建立走进业务的机制\n * 实际去体验业务会让你建立很强的认识感与同理心\n * 只有站在他们的角度你才能看到他们的痛点，才会思考技术是不是能解决你原本未必知道或者关注的问题\n\n不要让业务机制成为"一次性作秀"，必须明白，技术同学对业务的直观感受大多来自线上的产品和系统，这和直接接受用户有很大的差别。\n\n当我们理解了业务，还可以做以下架构设计来保证高可用。\n\n\n# 4.2 负载均衡\n\n * 应用服务器负载均衡：即将用户的请求通过负载均衡服务器分发到多个 web 服务器上，负载均衡服务器还可以保证单某个 web 服务器不可用（也包括应用程序发布）时，能够自动将该部分流量转发到其他web服务器上。\n   * HTTP 负载均衡：\n   * DNS 负载均衡：用户浏览器(用户请求域名解析) -> DNS 服务器 ->返回 IP 地址 -> 用户使用真实 IP 进行浏览器请求 -> Web 服务器集群\n   * 反向代理负载均衡：\n   * IP 层负载均衡：\n   * 数据链路层负载均衡：（用的最多的方案）\n\n大型互联网一般采用两级负载均衡，DNS 服务器解析出来的 IP 地址是负载均衡服务器的 IP 地址，这样就不会将真实的服务器的 IP 地址暴露出来。\n\n\n# 4.3 限流、降级、熔断\n\n案例\n\n网关系统 -》商品系统 -》促销系统/积分系统\n\n出现流量高峰时，虽然商品系统很容易扩容，但对于商品依赖的其他服务，就不会有实时性的响应。那么出校或积分系统就可能因为无法承担大流量，请求处理缓慢，直到所有线程资源被占满，无法处理后续的请求。\n\n此时，积分系统的响应时间变长，其他依赖服务的整体请求的响应时间也会因此变长，整体服务甚至会发生宕机。即服务雪崩。\n\n> 雪崩现象：即局部故障最终导致了全局故障。\n\n要怎么避免雪崩呢？对于系统可用性，你要通过三个方面来解决：分别是"评估"、"检测" 和 "保证"。\n\n解决的思路是：在分布式系统中，当检测到某一个系统或服务响应时长出现异常时，要想办法停止调用该服务，让服务的调用快速返回失败，从而释放此次请求持有的资源，这就是架构设计中经常提到的降级和熔断机制。\n\n熔断设计的原理：参考了电路中保险丝的保护原理。在微服务架构中，服务的熔断机制是指：在服务 A 调用服务 B 时，如果 B 返回错误或超时的次数超过一定阈值，服务 A 的后续请求将不再调用服务 B。这种设计方式就是断路器模式。\n\n降级设计的原理：降级设计是站在系统整体可用性上考虑问题：当资源和访问量出现矛盾时，在有限的资源下，放弃部分非核心功能或者服务，保证 整体的可用性，熔断也是降级的一种手段。\n\n * 限流：通过对并发访问进行限流，降级并发请求的数量来保护系统，避免过载。\n * 降级：关闭部分非核心功能，降低对系统的资源消耗，保证系统在高并发的情况下仍然保持可用。\n\n降级的最终目的是保证核心服务可用，即时是有损的。\n\n降级设计的一些原则\n\n * 服务降级\n   * 读操作降级：做数据兜底服务，将兜底数据提前存储在缓存中，当系统触发降级时，都操作直接降级到缓存，从缓存中读取兜底数据，如果此时缓存中也不存在查询数据，则返回默认值，不再请求数据库。\n   * 写操作降级：将之前直接同步调用写数据库的操作，降级为先写缓存，然后再异步写入数据库。\n * 功能降级： 就是在做产品功能上的取舍，既然在做服务降级时，已经舍掉了非核心的服务，那么同样的产品功能层面也要相应的进行简化。可以通过简化降级开关控制功能的可用或不可用。另外，在设计降级时，离不开降级开关的配置，一般是通过参数化配置的方式存储在配置中心，手动或自动开启开关，实现系统降级。\n\n在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅，从而梳理出那些必须誓死保护，哪些可降级。\n\n * 超时次数超过重试次数降级\n * 限流降级\n * 服务不可用降级\n\n\n# 4.4 隔离\n\n隔离是指将系统或资源分割开。\n\n * 系统隔离：是为了在系统发生故障时，能限定传播范围和影响范围，即故障发生后不会出现滚雪球效应，从而保证只有出问题的服务不可用，其他服务还是可用的。\n\n * 资源隔离：通过隔离来减少资源竞争，保证服务间的相互不影响和可用性，常用的隔离手段有：\n   \n   * 线程隔离：主要是指线程池隔离，在实际使用时，我们会把请求分类，然后交给不同的线程池处理。当一种业务的请求处理发生问题时，不会将故障扩散到其他线程池，从而保证其他服务可用。（我们可以在过滤器中，至少封装两个线程池：核心业务线程池、非核心业务线程池）\n   * 进程隔离：部署多实例，通过负载均衡进行路由转发，通过进程隔离使得某一个子系统出问题时不会影响到其他子系统。\n   * 集群隔离：部署多个服务形成集群，提升系统容量。比如：随着调用方的增多，当秒杀服务被刷会影响到其他服务的稳定性时，应该考虑为秒杀服务提供单独的服务集群。\n   * 机房隔离：每个机房的服务都有自己的服务分组，本机房的服务只调用本机房的服务，不进行跨机房调用。其中一个机房发生问题时，通过 DNS/负载均衡将请求全部切到另一个机房，或者考虑服务自动重试其他机房的服务，从而提升系统可用性。\n   * 读写隔离：通过主从模式将读和写集群分离，常见的读写隔离有 MySQL 读写隔离和 Redis 读写隔离。当主集群不可写的时候，从集群还可以用。当从集群大量读导致从集群挂掉，主集群还可以提供写的能力。\n   * 快慢隔离：有些请求和服务比较慢，会导致全部资源（如线程池被耗尽），因此需要对比较慢的操作限制资源的使用量。\n   * 动静隔离：将动内容和静态内容资源隔离，一般将静态资源(如：JS/CSS)放在 CDN 上。\n   * 爬虫隔离：在实际的一些业务中，爬虫比例和正常流量的比例可能超过一半，而一些系统会因为爬虫流量过大导致服务不可用。一种方法是通过限流解决，另一种方法是将爬虫引流到单独集群。\n   * 热点隔离：热点服务独立成系统或单独服务，对于读热点，我们常用多级缓存来搞定，对于写热点常用缓存+队列模式削锋。\n\n * 服务隔离：服务隔离的目的是防止因为某些服务抖动而造成整个应用内的所有服务不可用，可以分为：\n   \n   * 应用内线程池隔离：采用 Servlet 3 异步化，并为不同的请求按照重要级别分配线程池，这些线程池是相互隔离的，提供监控接口以便发现问题并及时进行动态调整。\n   * 部署/分组隔离：不同的消费方式提供不同的分组，不同的分组之间相互影响，避免某个分组某个应用乱用，导致整个分组服务不可用。\n   * 拆应用隔离：如果一个服务调用量巨大，那么我们应该把这个服务单独拆出去，做成一个应用，减少因其他服务上线或者重启导致影响该应用。\n\n * 消息队列隔离：通过消息队列来实现异步解耦。生产者和消费者通过消息队列进行解耦，当消费者发生故障的时候，生产者可以继续向消息队列发送数据，而不会影响生产者。另外，还可以进行削峰填谷的作用。\n\n\n# 4.5 服务治理\n\n * 服务分级：根据服务的重要程度来决策丢弃请求。如何为服务确定级别：\n   * 1 级：系统最关键的服务，如果出现故障会导致用户或业务产生重大损失，比如：登录服务、流媒体服务、权限服务、数专服务等。\n   * 2 级：对于业务非常重要，如果出现会导致用户体验受到影响，但是不会完全无法使用我们的系统，比如：排行版服务、评论服务等。\n   * 3 级：会对用户造成较小的影响，不容易注意或很难发现，比如：用户头像服务、弹窗服务等。\n   * 4 级：即使失败，也不会对用户体验造成影响，比如：红点服务等。\n\n> 服务分级的应用场景：\n> \n>  1. 核心接口运营质量周报。比如，每日邮件推送 1 级和 2 级的观测数据。\n>  2. SLA：针对 1 级服务和 2 级服务，制定 SLO。\n>  3. API 网关根据服务分级限流，优先确保 1 级服务通过。\n>  4. 重大项目参考服务重要程度制定优先级计划，如容灾演练，大型活动压测等。\n\n * 用户分级：根据用户的重要程度来决策丢弃请求。\n\n * 拆分系统：将系统拆分为多个子系统虽然增加了复杂性，但是却得到了跟多的好处，这里以商品服务为例。\n   \n   * 数据异构系统存储的数据是原子化数据，这样可以按照一些维度对外提供服务；\n   * 数据同步系统存储的是聚合数据，可以为前端展示提供高性能的读取；\n   * 前端展示系统分为商品详情页和商品介绍，可以减少相互影响。\n\n * 防御性编程（契约精神）：防备上游、做好自己、怀疑下游。\n\n\n# 4.6 数据治理\n\n# 4.6.1 数据闭环\n\n> 即数据的自我管理，或者说是数据都维护在自己的系统里，不依赖于任何其他系统，即去依赖化的好处是别人抖动不会影响到自身系统。数据闭环包括以下几个方面：\n\n * 数据异构：数据闭环的第一步，即将各个依赖系统的数据拿过来，按照自己的要求存储起来。\n * 数据原子化：原子化数据，这样未来我们可以对这些数据再加工处理，从而响应快速变化的需求。\n * 数据聚合：将多个原子数据聚合为一个大 JSON 数据，这样前端展示只需要一次获取。\n * 数据存储：选择合适的数据存储类型。\n\n# 4.6.2 数据维度化\n\n> 数据应该按照维度和作用进行维度化，这样可以分离存储，进行更有效地存储和使用。\n\n示例数据的维度比较简单，比如：\n\n * 商品基本信息：包括标题、扩展属性、特殊属性、图片、颜色尺码、规格参数等。\n * 商品介绍信息：包括商品维度商家模板、商品介绍等。\n * 非商品维度的其他信息：包括分类信息、商家信息、店铺信息、店铺头、品牌信息等。\n * 商品维度其他信息（异步加载）：包括价格、促销、配送至、广告词、推荐配件、最佳组合等。\n\n# 4.6.3 长期治理\n\n * MySQL 大表\n * Redis大 key\n * 冷热数据\n * 历史数据归档\n * ……\n\n\n# 4.7 超时与重试\n\n特别注意\n\n太多故障是因为没有设置超时或者设置得不对而造成的。而这些故障都是因为没有意识到超时设置的重要性而造成的。如果不设置超时，则可能会导致请求响应慢，慢请求累积导致连锁反应，甚至造成应用雪崩。\n\n有些中间件或者框架在超时时会进行重试（如设置超时重试两次），读服务天然适合重试，但写服务大多不能重试（如写订单，如果写服务是幂等的，则重试是允许的），重试次数太多会导致多倍请求流量，即模拟了 DDos 攻击，后果可能是灾难，因此，务必要设置合理的重试机制，并且应该和熔断、 快速失败机制配合。在进行代码 Review 时，一定要记得 Review 超时与重试机制。\n\n具体注意事项如下：\n\n * 哪些地方已经有了超时参数的设置？\n\n * 哪些地方需要我们自己显示的设置超时的参数？\n\n * 将超时时间设置为 TP999 和 Max 之间的值，但因此可能会带来 0.1% 的失败。如果搭配重试，可以将失败的比例降低到 0.0001%（即两次都失败，0.1%*0.1%）。即使使用了重试一次，你的接口性能也会较好。比如设置超时时间为大于上述 TP999 的值，比如 500ms，重试一次最大的耗时才为 1s，远比上述的 Max 低。\n\n\n# 4.8 日志监控告警\n\n# 4.8.1 日志\n\n常见的日志种类有：\n\n * 网关日志：比如 Kong或Nginx反向代理记录的请求日志。\n * WAF日志：如果整个网络拓扑中包括防火墙模块，也需要注意防火墙侧的日志，哪些请求被 WAF 拦截。\n * 服务端日志：实际服务运行时产生的日志，特别注意日志中包括warn级别以上的日志。\n * 中间件日志：这里主要关注中间件的包括warn级别以上的日志，特别是中间件的慢、延迟或者problem的日志，如：MySQL 慢日志、Redis 慢日志、ElasticSearch 慢日志、MySQL死锁日志。\n\n# 4.8.2 监控\n\n根据监控层次可以划分为：\n\n * 资源监控：服务器（容器、物理机）等，指标包括：CPU 使用率、内存使用率、健康状态等。\n * 中间件监控：Kafka、Redis、ElasticSearch、MySQL等，指标包括：使用率、容量、失败（堆积）等。\n * 服务监控：服务器请求量、失败率、耗时等，维度包括：集群、服务模块、接口等。\n * 业务监控：指标：在线人数、订单情况等。\n\n常用的监控工具有：\n\n * APM（如：Zipking、Skywalking、Cat 等）\n * Prometheus + Grafana\n\n# 4.8.3 告警\n\n针对上面的日志和监控的指标，需要配置预警或告警通知，当问题发生的时候，能够第一时间通知到责任人，需要特别注意对告警进行治理，减少告警风暴。\n\n\n# 4.9 预发布与灰度发布\n\n> 灰度就是在生产环境进行小范围测试 （这个观点是错误的），它本身是为了对抗"未知的不确定性"，需要更加谨慎地进行灰度，确保即使问题真的在生产环境出现，造成的影响也是可控的。\n\n * 预发布：比如有一台预发布服务器，不和域名解析和负载均衡服务器连接在一起，但是却有线上的机器的所有环境，只有内部的工程师才可以访问到。\n * 灰度发布：灰度就是在生产环境进行小范围测试 （这个观点是错误的），它本身是为了对抗"未知的不确定性"，需要更加谨慎地进行灰度，确保即使问题真的在生产环境出现，造成的影响也是可控的。\n\n\n# 4.10 回滚机制\n\n可回滚的设计：可回滚的本质是系统的兼容性设计与实现,比如常见的"只增不改"。\n\n\n# 4.11 组件高可用\n\n数据库的高可用\n\n读写分离：保证读和写的资源隔离。\n\n * 读高可用：通过数据库的主从模式，多个从服务器，当读操作读取的某个从服务器挂掉，会迁移到其他可用的从服务器上。\n * 写高可用：通过数据库的主主模式，即正常操作的时候写操作会写到主服务器 A，当主服务器 A 失效的时候，写操作会被发送到主服务器 B。\n\n\n# 4.12 架构冗余\n\n一般来说，建设一个机房的要求是非常高的，地理位置、温湿度控制、备用电源等等，机房厂商会在各方面做好防护。即时这样，我们每隔一段时间还会看到这样的新闻：\n\n * 2015年5月27日，杭州某地光纤被挖断，近 3 亿用户长达 5 小时无法访问支付宝\n * 2021年7月13日，B 站部分服务器机房发生故障，造成整站持续 3 小时无法访问\n * 2021年10月9日，富途证券服务器机房发生电力闪断故障，造成用户 2 个小时无法登录、交易\n * ……\n\n解决思路：\n\n * 冗余单节点：不仅是机器，还包括网络，比如：通信线路不仅要有移动的也要有联通的，再有异地多活等架构。\n * 水平扩展：无状态的计算节点容易扩展，而数据库则通过水平分库来实现。\n\n异地多活机房架构\n\n避免数据修改冲突，类似 MySQL 的主主模式。\n\n架构演进路线：👉 单机架构 -> 主从副本 -> 同城灾备 -> 同城双活 -> 两地三中心 -> 伪异地双活 -> 异地双活 -> 异地多活\n\n> 参考文献：两地三中心数据中心和同城双活数据中心的区别？\n\n\n# 4.13 性能分析与调优\n\n性能分析与调优旨在把系统打造成一个高可用、高可靠的系统；性能分析的目的是找出性能瓶颈与风险在哪里？性能调优就是用更少的资源提供更好的服务，成本利益最大化。\n\n性能调优场景的手段：\n\n 1. 空间换时间。内存、缓存就是典型的空间换取时间的例子。利用内存缓存从磁盘上取出的数据，CPU 请求数据直接从内存中获取，从而获取比从磁盘读取数据更高的效率。\n 2. 时间换空间。当空间称为瓶颈时，切分数据分批次处理，用更少的空间完成任务处理。上传大附件的时候经常用这种方式。\n 3. 分而治之。把任务切分，分开执行，也方便并行执行来提高效率，Hadoop 中的 HDFS、MapReduce 都是这个原理。\n 4. 异步处理。业务链路上有任务时间消耗较长，可以拆分业务，减少阻塞影响。常见的异步处理机制有 MQ（消息队列），目前在互联网应用中大量使用。\n 5. 并行。用多个进程或者线程同时处理业务，缩短业务处理时间，比如：我们在银行办业务时，如果排队人数较多时，银行会加开柜台。\n 6. 离用户更近一点。比如：CDN 技术，把用户请求的静态资源放在离用户更近的地方。\n 7. 一切可扩展。业务模块化、服务化（同时无状态化）、良好的水平扩展能力。\n\n性能分析方法：\n\n性能分析是一个大课题，不同的架构、不同的应用场景、不同的程序语言分析的方法若有差异，抽象一下大致分为两类：\n\n 1. 自底而上。通过监控硬件及操作系统性能指标（CPU、内存、磁盘、网络等硬件资源的性能指标）来分析性能问题（配置、程序等问题）。因为用户请求最终是由计算机硬件设备来完成的，做事的是 CPU。\n 2. 自顶而下。通过生成负载来观察被测试的系统性能，比如：响应时间、吞吐量；然后从请求点由外及里一层一层地分析，从而找到性能问题所在。\n\n系统性能关注点：\n\n系统资源包括 CPU、内存、存储介质等。一般硬件瓶颈的表现如下：\n\n 1. CPU 利用率高\n    \n    CPU 利用率又分为系统 CPU （Linux 系统为例，操作系统占用CPU）与用户 CPU （用户程序占用的CPU，比如我们运行的引用系统），过高原因常见有：\n    \n    * 计算量大。比如：运算、连接查询、数据统计。\n    * 非空闲等待。比如：IO 等待、资源竞争（统一资源被不同不同线程请求，而此资源又需要保持一致性，只能前一个释放后一个再访问，这样导致的等待）。\n    * 过多的系统调用系统调用，即调用操作系统提供的程序接口。比如：Java 项目中写日志，会调用系统接口进行日志操作，这样会导致系统 CPU 使用率比较高。\n    * 过多的打断。终端是 CPU 用来响应请求的机制，比如键盘的输入、鼠标的点击等都会产生中断，中断是通知 CPU 有任务需要响应，CPU 停下正在执行的程序来响应当前的中断。\n\n 2. 内存吃紧 内存吃紧的原因比 CPU 要简单的多，多数是过多的页交换与内存泄漏。 Java 程序运行在 JVM 之上，JVM 的内存设置也是有限制的，有时候 JVM 堆内存中有些对象无法回收，久而久之就没有空间来容纳新的对象，最后导致了 JVM 崩溃，这也就是内存溢出，回收不了的这种现象就是内存泄漏，这往往是由于程序原因硬引起的。\n\n 3. 磁盘繁忙 磁盘繁忙，即数据读写频繁。我们知道，磁盘介质的读写是物理动作，所以速度受限。如果频繁地对磁盘进行读写，因为磁盘的平均导致的 CPU 等待的情况会激增。虽然现在有了 SSD，但 SSD 相当昂贵，所以磁盘的瓶颈问题是相对突出的问题。数据玩笑话，不做任何分析也可以说磁盘瓶颈是系统性能风险。\n\n 4. 网络流量过大 高并发系统由于访问量大，带宽需求会比较大，导致网络拥堵。比如：一个PV（访问一个页面的单位）100K，同一时刻 10 万用户在访问，那么此时占用带宽大约就是：100K * 100000 = 977MB，换算成 bit/s 就是 7.8Gbit/s。\n\n\n# 4.14 性能测试与自动化测试回归\n\n# 4.14.1 性能测试\n\n性能测试的首要任务在于一定要明白性能测试的背景和目的（比如：你是为了找到系统的瓶颈，还是为了验证系统在指定流量下能否扛得住），而不是直接认为 C 端接口就要进行性能测试，背景和目标不明确会导致整个性能测试沦为一次业务秀，达不到预期要保证线上高可用的目的。\n\n性能测试的难点在于，如果用线下的测试环境去仿真线上的环境，你的报告中需要让人信服「测试环境的压测报告可以用来反馈线上环境」，比如：报告中要给出线上环境的机器情况、主数据等，线下环境的机器是怎么去匹配这些。\n\n性能测试至少包括以下几种类型的测试：\n\n * 基准测试：一般是单业务场景、单用户的场景来执行脚本，同时设置合理的用户思考时间如200m\n * 配置测试：设计业务的场景来进行配置的优化，并给出配置测试的目标方向，即：主要优化哪些配置（比如：JVM、Tomcat、MySQL 连接池等）。\n * 稳定性测试：稳定性测试的目的是验证在当前软硬件环境下，长时间运行一定负载，确定系统在满足性能指标的前提下是否运行稳定。\n * 负载测试：负载测试的目的是版主我们找出性能问题与风险，对系统进行定容定量；为系统优化、性能调整提供数据支撑。\n\n特别提醒的是，性能测试的报告中一定会有一项：「系统风险」。这个也是性能测试报告最重要的内容之一。\n\n> 比如：给出随着系统的规模增加，首要风险在哪里？第二瓶颈又是什么？哪些情况的操作对系统会有重大的风险。本次性能分析报告是否能够合理的给生产环境的性能合理的建议，如不能，给出哪里有风险。。\n\n如何写一份合格的性能测试报告，可以参考这篇文档：待补充\n\n# 4.14.2 自动化测试回归\n\n在自动化测试领域一般会有两个层次的自动化：\n\n 1. 接口自动化\n 2. UI 自动化\n\n另外，这篇文章中给出了这一种针对读服务无状态的情况下，给出了一种《如何基于流量回放实现读服务的自动化测试回归》，感兴趣的可以去实验下。\n\n通过更长时间的回放尽可能地覆盖更多的业务场景，但也并没有足够的证据表明，一定不会出现漏测。对于此种问题，可以借助一些代码覆盖率的工具，如 Java 里的 JaCoCo，来统计一次回放后被测系统的代码覆盖率，通过数据来判断是否存在可能的漏测。\n\n\n# 4.15 故障演练\n\n针对故障演练，一般是通过混沌工程项目来实现的，比如：阿里开源的chaosblade是一款简单易用、功能强大的混沌实验注入工具。\n\n🎯 故障演练的目的：\n\n * 这些措施在故障发生时是否真的有效？\n * 处理流程与沟通协作是否通畅？\n\n技术 Leader 要化被动为主动，有意识地推进故障演练，不论是以注入还是回放的形式制造可控的故障，以此验证应急处理的机制流程和预先设计的灾备方案是否有效。\n\n演练的演化过程\n\n先在测试环境检验，后面才开始在生产环境进行有预案的演练，最后才有可能进行真正的随机故障演练。\n\n🛎 希望大家不要用一次次的重大事故来让团队成员慢慢理解系统稳定性的重要性。\n\n\n# 4.16 故障处理原则\n\n问题：如果线上出现告警问题，你会如何处理？ 对于线上故障，要有应急响应机制，具体包括：\n\n故障处理原则\n\n * 应急响应的目标：\n   * 线上故障发生时，以快速恢复服务为第一优先级，避免或减少故障带来的损失，避免或减少故障对客户的影响。\n   * 线上故障发生后，及时总结经验教训，提高团队的应急水平。\n   * 线上故障发生前，积极预防，尽可能避免或减少故障发生。\n * 应急响应的原则：\n   * 首要任务，应在第一时间恢复服务。\n   * 影响重大（比如受影响用户范围大，受损资金多，关键功能受阻等），应立即升级处理。\n   * 如果不能短时间解决问题，应及时升级处理并尽可能止损。\n * 应急响应流程：\n   * 事前预防、问题监控、事中应对、故障定位、故障解决、事后总结、故障回顾、改进措施\n\n故障处理流程：客户报告故障或监控系统发现故障（故障开始时间）-> 提交故障给相关部门接口人 -> 故障接手&处理 -> 故障处理完毕，故障归档（故障结束时间）-> 确认故障归属记入绩效考核。\n\n\n# 4.17 应急预案\n\n大型促销备战：\n\n * 成熟团队\n   * 运营提升设计能力\n   * 设计提升运营效率\n * 完善的流程和规范\n   * 事件分级与处理流程\n   * 系统分级与治理规范\n   * 系统变更流程与规范\n   * 值班与联络制度\n   * ……\n * 积极预防问题\n   * 系统评估\n     * 吞吐能力\n     * 容量/流量\n     * 响应速度\n   * 系统升级\n     * 扩展/拆分\n     * 异步化\n     * 使用缓存\n     * 跨机房部署\n   * SLA 规划与确认\n     * 吞吐能力\n     * 响应时间\n     * 可用性\n     * 降级方案\n   * 验证\n     * 线下压测\n     * 线上局部压测\n     * 线上军演\n   * 系统体检\n * 及时发现问题\n   * 监控/报警\n     * 系统整体指标\n     * 系统可用性\n     * 系统处理能力\n     * 系统负载\n     * 数据\n     * 主业务流程\n * 迅速决策/处理\n   * 应急预案\n     * 扩容\n     * 流控控制\n     * 降级\n     * 故障转移\n   * 培训\n   * 演练\n   * 现场值班\n   * 明确分工和绩效\n\n\n# 4.18 CheckList 保驾护航\n\n * 发布 CheckList 服务端这边给出了：服务端上线 CheckList 模板，大家可以参考一下。\n\n * 稳定性 CheckList\n\n> 历史是最好的老师，总结分析过去发生的事故，并沉淀相关的经验，以此梳理出围绕事故隐患的风险点 CheckList。\n\n\n# 5. 总结\n\n在写这篇文章前，我认真的整理了市面上大部分的高可用架构的文章，并根据自己的工作经验总结归纳出来，由于高可用设计的范围是在太广，因此每个模块的内容没办法面面俱到，大家有任何补充可以在评论里面评论。',normalizedContent:'# 1. 引言\n\n> 坚守 design for failure 的架构理念。\n\n作为一个后端开发工程师，不同的岗位如：初级研发工程师、高级研发工程师或者架构师，负责的系统类型可能是：\n\n * 负责一个功能\n * 负责一个系统模块\n * 负责一个系统\n * 负责多个系统或业务条线\n\n即时是一个再小的系统，小到一个小小的功能模块，都对可用性有一定的要求，针对重要的功能模块，甚至还要求做到「高可用」。「高可用」这个概念，根据不同的可用性程度实现方案会有所不同。\n\n「如何设计一个高可用架构」，我比较认可 aws 提出的"design for failure and nothing will fail" 最佳实践，即面向失败进行系统设计，必须考虑系统所有可能发生故障或不可用的场景，并假设这些可能都会发生，倒逼自己设计足够健壮的系统。\n\n\n# 1.1 墨菲定律\n\n在系统设计时，应该多思考墨菲定律，即："如果事情有变坏的可能，不管这种可能有多小，它总会发生"，对应到系统设计时需要考虑的点：\n\n * 任何事情没有表面看起来那么简单。\n * 所有的事情都会比你预计的时间长。\n * 可能出错的事总会出错。\n * 如果你担心某种情况发生，那么它就更有可能发生。\n\n\n# 1.2 康威定律\n\n在系统划分时，也必须要思考康威定律，即："设计系统的架构受制于产生设计的组织的沟通结构"，通俗的说：\n\n * 软件架构是公司组织架构的反映。\n * 应该按照业务闭环进行系统拆分/组织架构划分，实现闭环/高内聚/低耦合，减少沟通成本。\n * 如果沟通出现问题，那么就应该考虑进行系统和组织架构的调整。\n * 在合适时机进行系统拆分，不要一开始就把系统/服务拆的非常细，虽然闭环，但是每个人维护的系统多，维护成本高。\n\n\n# 1.3 业务关心的问题\n\n如果我们想做成「高可用」系统，至少要解决以下业务关心的问题：\n\n * 如何评估系统高可用？\n * 如何监控系统高可用？\n * 如何保证系统高可用？\n\n简而言之，完成一个系统的设计、开发、交付的工作不难，难的是如何保证系统的高可用。\n\n本文和大家一起探讨目前主流的高可用的一些技术方案，探讨如何做到「永不消失的网站/app」。\n\n\n# 2. 可用性度量与故障分类\n\n\n# 2.1 可用性度量\n\n根据谷歌 sre 手册，给出了定义和简要说明。\n\n * sli：service level indicator，服务等级指标。\n   \n   > "对所提供的服务水平的某些方面进行仔细定义的定量测量"。比如：对于一个网站来说，一个常见的 sli 就是请求正常响应的百分比。\n\n * slo：service level object，服务等级目标。\n   \n   > "由 sli 衡量的服务水平的目标值或值范围"，是团队设置的。是围绕 sli 构建的目标。通常是一个百分比，并与时间范围（比如：阅读、季度、年度等）挂钩。通常用一连串的 9 来度量。\n\n * sla：service level agreement，服务等级协议。\n   \n   > "与您的用户签订的明确或隐含的合同，其中包括满足（或过错）他们所包含的 slo 的后果"，由业务而不是工程师、sre或操作人员设定的。sla 是一个外部指标,因此与 slo 的目标不同。sla 是与用户达成的业务协议,规定了一定程度的可用性。工程团队知道 sla,但没有设置它们。相反,团队设置 slo 比 sla 更严格,给自己一个缓冲。是企业围绕 slo 发布的协议，它要求在不满足 slo 时，向客户补偿的协议。\n\n * mtbf：mean time between failture，平均故障间隔。\n   \n   > 表示两次故障的间隔时间，也就是系统「正常运行」的平均时间，这个时间越长，说明系统稳定性越高。\n\n * mttr：mean time to repair，故障恢复时间。\n   \n   > 表示系统发生故障后「恢复的时间」，这个值越小，故障对用户的影响越小。\n\nslo 或者 sla 的计算值\n\nslo/sla = (1 - 年度不可用时间/年度总时间) × 100% = mtbf / (mtbf + mttr) * 100%\n\n从公式中可以看出，\n\n * sla 等于 4 个 9，也就是可用时长达到 99.99%，不可用时长则为是 0.01%，一年是 365 天，8760 个小时，一年的不可用 时长就是 52.6 分钟。\n\n * sla 等于 3 个 9，就相当于一年不可用时长等于 526 分钟。\n\n * sla 等于 5 个 9，就相当于一年不可用时长等于 5.26 分钟。\n\n可以发现，用 sla 等于 4 个 9 作为参照物，少个 9 相当于小数点往后移一位，多个 9 相当于小数点往前移一位。整理换算成年月天的表格如下。\n\n系统可用性 %        宕机时间/年   宕机时间/月   宕机时间/周   宕机时间/天\n90%(1个9)       36.5天    72小时     16.8小时   2.4小时\n99%（2个9）       3.65天    7.2小时    1.68小时   14.4分钟\n99.9%（3个9）     8.76小时   43.8分钟   10.1分钟   1.44分钟\n99.99%（4个9）    52.6分钟   4.38分钟   1.01分钟   8.66秒\n99.999%（5个9）   5.26分钟   25.9秒    6.05秒    0.87秒\n\n小贴士\n\n京东淘宝大部分是 4 个 9。\n\n举个例子\n\n假如我有一个网站：http://baidu.com，监控指标是请求正常响应数。\n\n时间：从 2022年1月1日 到 2022年3月18号，请求数据如下：\n\n月份           总请求数   错误数   故障宕机时长\n1 月份         500    20    0 min\n2 月份         600    10    10 min\n3月1号~3月18号   400    15    0 min\n\n那么对应的 sli、slo、sla 是多少？\n\nsli = 1-(20+10+15)/(500+600+400)=97%\n\nslo = 1-(10/79天×24×60)=99.991%\n\nsla：假设我们是给第三方做的网站，并签订了 slo 达不到 99.99%，就要赔偿多少钱，可以根据上面的 slo，再根据协议签订的 sla 协议，算出补偿的金额，但是我们通常也把 sla 值直接等于 slo 的值，叫的比较多的是 sla。\n\n在实际的业务中，要综合考虑 sli 和 slo，比如：流量的低峰期和高峰期业务不可用 1 分钟，对业务的影响评估完全不同，因此，又有了如下较好的高可用评估手段(某种情况下 sli 可能被用来直接作为高可用评估手段)。\n\n高可用评估：基于一段时间（比如 1 年）的停机影响的请求量占比，进行评估，公式如下：\n\n> 高可用评估 = 停机时间影响请求量/总的请求量\n\n\n# 2.2 故障分类\n\n分类      描述                      权重\n事故级故障   严重故障，网站整体不可用            100\na类故障    网站访问不顺畅或核心功能不可用         20\nb类故障    非核心功能不可用，或核心功能少数用户不可用   5\nc类故障    以上故障以外的其他故障             1\n\n故障分计算公式：\n\n> 故障分 = 故障时间 × 故障权重\n\n\n# 3. 系统可用性的挑战\n\n我们都知道，系统发生故障其实是不可避免的，尤其是越大的系统，发生问题的概率也越大。这些故障一般体现在 3 个方面：\n\n 1. 硬件故障：cpu、内存、磁盘、网卡、交换机、路由器\n 2. 软件问题：代码 bug、版本迭代\n 3. 不可抗力：地震、水灾、火灾、战争\n\n具体常见的服务不可用的场景又有：\n\n * dns 被劫持\n * cdn 服务不可用\n * 应用服务器及数据库服务器宕机\n * 网络交换机失效\n * 硬件故障：硬盘损坏、网卡松掉\n * 环境故障：机房停电、空调失灵、光缆被挖掘机挖断\n * 代码 bug\n * 黑客攻击\n * 促销引来大量用户访问\n * 第三方合作伙伴的服务不可用\n * 超时设置不合理导致系统奔溃\n * 限流措施不到位，导致负载过高时系统奔溃\n * 解耦不彻底，导致某个服务挂掉时所有服务受到影响\n * ……\n\n\n# 4. 高可用的有效手段\n\n\n# 4.1 深入理解业务\n\n技术人很容易犯的一个错误，「离代码很近，离用户很远！」，在高可用架构中，我认为要做好高可用架构设计，深入理解业务是重中之重。\n\n深入业务是做好高可用架构的前提\n\n架构设计与系统演进：架构要结合具体的业务场景来设计。\n\n理解业务这件事：\n\n * 产品需求不等于业务诉求\n   * 产品提出要实现的系统功能未必等于业务想要解决的问题\n   * 怎么在规定的时间内搞定这个需求\n\n举个例子\n\n产品需求是这样的：\n\n * 1 w 载客量\n * 200 km/h 速度\n * 10 级 抵抗风浪\n\n开发侧的理解：\n\n * 需要多少钢材\n * 多少工人、几个发动机\n * 船舱结构要如何设计\n\n实际上业务的诉求是："安全达到对岸"，业务其实不关心你是修船、造车、开车。实际的开发过程中很多人不关心需求的源头，不能真正理解业务。\n\n大部公司中，技术处于价值创造的末端。\n\n用户的真实需求 -> 业务 -> 运营 -> 产品 -> 技术,每一层信息都会被加工、处理、拆分，技术看到的问题距离最想解决的问题可能会很远，没有搞清楚问题的源头而去解决问题，结果会很糟糕。\n\n再举个例子\n\n订单作为交易的载体需要承载大量的数据：\n\n 1. 订单系统的演进完全跟着业务需求走。\n 2. 很难判断是否应该让这些数据落到订单上。（存储在一个无法管理的 json 字段中）\n\n表面上看，是系统设计和实现不够好，实际上是：没有在深度理解业务的基础上对交易系统进行建模，确定边界与能力范围。\n\n如何理解业务的小技巧：\n\n * 不要盲信产品 "永远不要试图用战术上的勤奋，去掩盖你战略上的懒惰"\n * 技术团队要建立走进业务的机制\n * 实际去体验业务会让你建立很强的认识感与同理心\n * 只有站在他们的角度你才能看到他们的痛点，才会思考技术是不是能解决你原本未必知道或者关注的问题\n\n不要让业务机制成为"一次性作秀"，必须明白，技术同学对业务的直观感受大多来自线上的产品和系统，这和直接接受用户有很大的差别。\n\n当我们理解了业务，还可以做以下架构设计来保证高可用。\n\n\n# 4.2 负载均衡\n\n * 应用服务器负载均衡：即将用户的请求通过负载均衡服务器分发到多个 web 服务器上，负载均衡服务器还可以保证单某个 web 服务器不可用（也包括应用程序发布）时，能够自动将该部分流量转发到其他web服务器上。\n   * http 负载均衡：\n   * dns 负载均衡：用户浏览器(用户请求域名解析) -> dns 服务器 ->返回 ip 地址 -> 用户使用真实 ip 进行浏览器请求 -> web 服务器集群\n   * 反向代理负载均衡：\n   * ip 层负载均衡：\n   * 数据链路层负载均衡：（用的最多的方案）\n\n大型互联网一般采用两级负载均衡，dns 服务器解析出来的 ip 地址是负载均衡服务器的 ip 地址，这样就不会将真实的服务器的 ip 地址暴露出来。\n\n\n# 4.3 限流、降级、熔断\n\n案例\n\n网关系统 -》商品系统 -》促销系统/积分系统\n\n出现流量高峰时，虽然商品系统很容易扩容，但对于商品依赖的其他服务，就不会有实时性的响应。那么出校或积分系统就可能因为无法承担大流量，请求处理缓慢，直到所有线程资源被占满，无法处理后续的请求。\n\n此时，积分系统的响应时间变长，其他依赖服务的整体请求的响应时间也会因此变长，整体服务甚至会发生宕机。即服务雪崩。\n\n> 雪崩现象：即局部故障最终导致了全局故障。\n\n要怎么避免雪崩呢？对于系统可用性，你要通过三个方面来解决：分别是"评估"、"检测" 和 "保证"。\n\n解决的思路是：在分布式系统中，当检测到某一个系统或服务响应时长出现异常时，要想办法停止调用该服务，让服务的调用快速返回失败，从而释放此次请求持有的资源，这就是架构设计中经常提到的降级和熔断机制。\n\n熔断设计的原理：参考了电路中保险丝的保护原理。在微服务架构中，服务的熔断机制是指：在服务 a 调用服务 b 时，如果 b 返回错误或超时的次数超过一定阈值，服务 a 的后续请求将不再调用服务 b。这种设计方式就是断路器模式。\n\n降级设计的原理：降级设计是站在系统整体可用性上考虑问题：当资源和访问量出现矛盾时，在有限的资源下，放弃部分非核心功能或者服务，保证 整体的可用性，熔断也是降级的一种手段。\n\n * 限流：通过对并发访问进行限流，降级并发请求的数量来保护系统，避免过载。\n * 降级：关闭部分非核心功能，降低对系统的资源消耗，保证系统在高并发的情况下仍然保持可用。\n\n降级的最终目的是保证核心服务可用，即时是有损的。\n\n降级设计的一些原则\n\n * 服务降级\n   * 读操作降级：做数据兜底服务，将兜底数据提前存储在缓存中，当系统触发降级时，都操作直接降级到缓存，从缓存中读取兜底数据，如果此时缓存中也不存在查询数据，则返回默认值，不再请求数据库。\n   * 写操作降级：将之前直接同步调用写数据库的操作，降级为先写缓存，然后再异步写入数据库。\n * 功能降级： 就是在做产品功能上的取舍，既然在做服务降级时，已经舍掉了非核心的服务，那么同样的产品功能层面也要相应的进行简化。可以通过简化降级开关控制功能的可用或不可用。另外，在设计降级时，离不开降级开关的配置，一般是通过参数化配置的方式存储在配置中心，手动或自动开启开关，实现系统降级。\n\n在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅，从而梳理出那些必须誓死保护，哪些可降级。\n\n * 超时次数超过重试次数降级\n * 限流降级\n * 服务不可用降级\n\n\n# 4.4 隔离\n\n隔离是指将系统或资源分割开。\n\n * 系统隔离：是为了在系统发生故障时，能限定传播范围和影响范围，即故障发生后不会出现滚雪球效应，从而保证只有出问题的服务不可用，其他服务还是可用的。\n\n * 资源隔离：通过隔离来减少资源竞争，保证服务间的相互不影响和可用性，常用的隔离手段有：\n   \n   * 线程隔离：主要是指线程池隔离，在实际使用时，我们会把请求分类，然后交给不同的线程池处理。当一种业务的请求处理发生问题时，不会将故障扩散到其他线程池，从而保证其他服务可用。（我们可以在过滤器中，至少封装两个线程池：核心业务线程池、非核心业务线程池）\n   * 进程隔离：部署多实例，通过负载均衡进行路由转发，通过进程隔离使得某一个子系统出问题时不会影响到其他子系统。\n   * 集群隔离：部署多个服务形成集群，提升系统容量。比如：随着调用方的增多，当秒杀服务被刷会影响到其他服务的稳定性时，应该考虑为秒杀服务提供单独的服务集群。\n   * 机房隔离：每个机房的服务都有自己的服务分组，本机房的服务只调用本机房的服务，不进行跨机房调用。其中一个机房发生问题时，通过 dns/负载均衡将请求全部切到另一个机房，或者考虑服务自动重试其他机房的服务，从而提升系统可用性。\n   * 读写隔离：通过主从模式将读和写集群分离，常见的读写隔离有 mysql 读写隔离和 redis 读写隔离。当主集群不可写的时候，从集群还可以用。当从集群大量读导致从集群挂掉，主集群还可以提供写的能力。\n   * 快慢隔离：有些请求和服务比较慢，会导致全部资源（如线程池被耗尽），因此需要对比较慢的操作限制资源的使用量。\n   * 动静隔离：将动内容和静态内容资源隔离，一般将静态资源(如：js/css)放在 cdn 上。\n   * 爬虫隔离：在实际的一些业务中，爬虫比例和正常流量的比例可能超过一半，而一些系统会因为爬虫流量过大导致服务不可用。一种方法是通过限流解决，另一种方法是将爬虫引流到单独集群。\n   * 热点隔离：热点服务独立成系统或单独服务，对于读热点，我们常用多级缓存来搞定，对于写热点常用缓存+队列模式削锋。\n\n * 服务隔离：服务隔离的目的是防止因为某些服务抖动而造成整个应用内的所有服务不可用，可以分为：\n   \n   * 应用内线程池隔离：采用 servlet 3 异步化，并为不同的请求按照重要级别分配线程池，这些线程池是相互隔离的，提供监控接口以便发现问题并及时进行动态调整。\n   * 部署/分组隔离：不同的消费方式提供不同的分组，不同的分组之间相互影响，避免某个分组某个应用乱用，导致整个分组服务不可用。\n   * 拆应用隔离：如果一个服务调用量巨大，那么我们应该把这个服务单独拆出去，做成一个应用，减少因其他服务上线或者重启导致影响该应用。\n\n * 消息队列隔离：通过消息队列来实现异步解耦。生产者和消费者通过消息队列进行解耦，当消费者发生故障的时候，生产者可以继续向消息队列发送数据，而不会影响生产者。另外，还可以进行削峰填谷的作用。\n\n\n# 4.5 服务治理\n\n * 服务分级：根据服务的重要程度来决策丢弃请求。如何为服务确定级别：\n   * 1 级：系统最关键的服务，如果出现故障会导致用户或业务产生重大损失，比如：登录服务、流媒体服务、权限服务、数专服务等。\n   * 2 级：对于业务非常重要，如果出现会导致用户体验受到影响，但是不会完全无法使用我们的系统，比如：排行版服务、评论服务等。\n   * 3 级：会对用户造成较小的影响，不容易注意或很难发现，比如：用户头像服务、弹窗服务等。\n   * 4 级：即使失败，也不会对用户体验造成影响，比如：红点服务等。\n\n> 服务分级的应用场景：\n> \n>  1. 核心接口运营质量周报。比如，每日邮件推送 1 级和 2 级的观测数据。\n>  2. sla：针对 1 级服务和 2 级服务，制定 slo。\n>  3. api 网关根据服务分级限流，优先确保 1 级服务通过。\n>  4. 重大项目参考服务重要程度制定优先级计划，如容灾演练，大型活动压测等。\n\n * 用户分级：根据用户的重要程度来决策丢弃请求。\n\n * 拆分系统：将系统拆分为多个子系统虽然增加了复杂性，但是却得到了跟多的好处，这里以商品服务为例。\n   \n   * 数据异构系统存储的数据是原子化数据，这样可以按照一些维度对外提供服务；\n   * 数据同步系统存储的是聚合数据，可以为前端展示提供高性能的读取；\n   * 前端展示系统分为商品详情页和商品介绍，可以减少相互影响。\n\n * 防御性编程（契约精神）：防备上游、做好自己、怀疑下游。\n\n\n# 4.6 数据治理\n\n# 4.6.1 数据闭环\n\n> 即数据的自我管理，或者说是数据都维护在自己的系统里，不依赖于任何其他系统，即去依赖化的好处是别人抖动不会影响到自身系统。数据闭环包括以下几个方面：\n\n * 数据异构：数据闭环的第一步，即将各个依赖系统的数据拿过来，按照自己的要求存储起来。\n * 数据原子化：原子化数据，这样未来我们可以对这些数据再加工处理，从而响应快速变化的需求。\n * 数据聚合：将多个原子数据聚合为一个大 json 数据，这样前端展示只需要一次获取。\n * 数据存储：选择合适的数据存储类型。\n\n# 4.6.2 数据维度化\n\n> 数据应该按照维度和作用进行维度化，这样可以分离存储，进行更有效地存储和使用。\n\n示例数据的维度比较简单，比如：\n\n * 商品基本信息：包括标题、扩展属性、特殊属性、图片、颜色尺码、规格参数等。\n * 商品介绍信息：包括商品维度商家模板、商品介绍等。\n * 非商品维度的其他信息：包括分类信息、商家信息、店铺信息、店铺头、品牌信息等。\n * 商品维度其他信息（异步加载）：包括价格、促销、配送至、广告词、推荐配件、最佳组合等。\n\n# 4.6.3 长期治理\n\n * mysql 大表\n * redis大 key\n * 冷热数据\n * 历史数据归档\n * ……\n\n\n# 4.7 超时与重试\n\n特别注意\n\n太多故障是因为没有设置超时或者设置得不对而造成的。而这些故障都是因为没有意识到超时设置的重要性而造成的。如果不设置超时，则可能会导致请求响应慢，慢请求累积导致连锁反应，甚至造成应用雪崩。\n\n有些中间件或者框架在超时时会进行重试（如设置超时重试两次），读服务天然适合重试，但写服务大多不能重试（如写订单，如果写服务是幂等的，则重试是允许的），重试次数太多会导致多倍请求流量，即模拟了 ddos 攻击，后果可能是灾难，因此，务必要设置合理的重试机制，并且应该和熔断、 快速失败机制配合。在进行代码 review 时，一定要记得 review 超时与重试机制。\n\n具体注意事项如下：\n\n * 哪些地方已经有了超时参数的设置？\n\n * 哪些地方需要我们自己显示的设置超时的参数？\n\n * 将超时时间设置为 tp999 和 max 之间的值，但因此可能会带来 0.1% 的失败。如果搭配重试，可以将失败的比例降低到 0.0001%（即两次都失败，0.1%*0.1%）。即使使用了重试一次，你的接口性能也会较好。比如设置超时时间为大于上述 tp999 的值，比如 500ms，重试一次最大的耗时才为 1s，远比上述的 max 低。\n\n\n# 4.8 日志监控告警\n\n# 4.8.1 日志\n\n常见的日志种类有：\n\n * 网关日志：比如 kong或nginx反向代理记录的请求日志。\n * waf日志：如果整个网络拓扑中包括防火墙模块，也需要注意防火墙侧的日志，哪些请求被 waf 拦截。\n * 服务端日志：实际服务运行时产生的日志，特别注意日志中包括warn级别以上的日志。\n * 中间件日志：这里主要关注中间件的包括warn级别以上的日志，特别是中间件的慢、延迟或者problem的日志，如：mysql 慢日志、redis 慢日志、elasticsearch 慢日志、mysql死锁日志。\n\n# 4.8.2 监控\n\n根据监控层次可以划分为：\n\n * 资源监控：服务器（容器、物理机）等，指标包括：cpu 使用率、内存使用率、健康状态等。\n * 中间件监控：kafka、redis、elasticsearch、mysql等，指标包括：使用率、容量、失败（堆积）等。\n * 服务监控：服务器请求量、失败率、耗时等，维度包括：集群、服务模块、接口等。\n * 业务监控：指标：在线人数、订单情况等。\n\n常用的监控工具有：\n\n * apm（如：zipking、skywalking、cat 等）\n * prometheus + grafana\n\n# 4.8.3 告警\n\n针对上面的日志和监控的指标，需要配置预警或告警通知，当问题发生的时候，能够第一时间通知到责任人，需要特别注意对告警进行治理，减少告警风暴。\n\n\n# 4.9 预发布与灰度发布\n\n> 灰度就是在生产环境进行小范围测试 （这个观点是错误的），它本身是为了对抗"未知的不确定性"，需要更加谨慎地进行灰度，确保即使问题真的在生产环境出现，造成的影响也是可控的。\n\n * 预发布：比如有一台预发布服务器，不和域名解析和负载均衡服务器连接在一起，但是却有线上的机器的所有环境，只有内部的工程师才可以访问到。\n * 灰度发布：灰度就是在生产环境进行小范围测试 （这个观点是错误的），它本身是为了对抗"未知的不确定性"，需要更加谨慎地进行灰度，确保即使问题真的在生产环境出现，造成的影响也是可控的。\n\n\n# 4.10 回滚机制\n\n可回滚的设计：可回滚的本质是系统的兼容性设计与实现,比如常见的"只增不改"。\n\n\n# 4.11 组件高可用\n\n数据库的高可用\n\n读写分离：保证读和写的资源隔离。\n\n * 读高可用：通过数据库的主从模式，多个从服务器，当读操作读取的某个从服务器挂掉，会迁移到其他可用的从服务器上。\n * 写高可用：通过数据库的主主模式，即正常操作的时候写操作会写到主服务器 a，当主服务器 a 失效的时候，写操作会被发送到主服务器 b。\n\n\n# 4.12 架构冗余\n\n一般来说，建设一个机房的要求是非常高的，地理位置、温湿度控制、备用电源等等，机房厂商会在各方面做好防护。即时这样，我们每隔一段时间还会看到这样的新闻：\n\n * 2015年5月27日，杭州某地光纤被挖断，近 3 亿用户长达 5 小时无法访问支付宝\n * 2021年7月13日，b 站部分服务器机房发生故障，造成整站持续 3 小时无法访问\n * 2021年10月9日，富途证券服务器机房发生电力闪断故障，造成用户 2 个小时无法登录、交易\n * ……\n\n解决思路：\n\n * 冗余单节点：不仅是机器，还包括网络，比如：通信线路不仅要有移动的也要有联通的，再有异地多活等架构。\n * 水平扩展：无状态的计算节点容易扩展，而数据库则通过水平分库来实现。\n\n异地多活机房架构\n\n避免数据修改冲突，类似 mysql 的主主模式。\n\n架构演进路线：👉 单机架构 -> 主从副本 -> 同城灾备 -> 同城双活 -> 两地三中心 -> 伪异地双活 -> 异地双活 -> 异地多活\n\n> 参考文献：两地三中心数据中心和同城双活数据中心的区别？\n\n\n# 4.13 性能分析与调优\n\n性能分析与调优旨在把系统打造成一个高可用、高可靠的系统；性能分析的目的是找出性能瓶颈与风险在哪里？性能调优就是用更少的资源提供更好的服务，成本利益最大化。\n\n性能调优场景的手段：\n\n 1. 空间换时间。内存、缓存就是典型的空间换取时间的例子。利用内存缓存从磁盘上取出的数据，cpu 请求数据直接从内存中获取，从而获取比从磁盘读取数据更高的效率。\n 2. 时间换空间。当空间称为瓶颈时，切分数据分批次处理，用更少的空间完成任务处理。上传大附件的时候经常用这种方式。\n 3. 分而治之。把任务切分，分开执行，也方便并行执行来提高效率，hadoop 中的 hdfs、mapreduce 都是这个原理。\n 4. 异步处理。业务链路上有任务时间消耗较长，可以拆分业务，减少阻塞影响。常见的异步处理机制有 mq（消息队列），目前在互联网应用中大量使用。\n 5. 并行。用多个进程或者线程同时处理业务，缩短业务处理时间，比如：我们在银行办业务时，如果排队人数较多时，银行会加开柜台。\n 6. 离用户更近一点。比如：cdn 技术，把用户请求的静态资源放在离用户更近的地方。\n 7. 一切可扩展。业务模块化、服务化（同时无状态化）、良好的水平扩展能力。\n\n性能分析方法：\n\n性能分析是一个大课题，不同的架构、不同的应用场景、不同的程序语言分析的方法若有差异，抽象一下大致分为两类：\n\n 1. 自底而上。通过监控硬件及操作系统性能指标（cpu、内存、磁盘、网络等硬件资源的性能指标）来分析性能问题（配置、程序等问题）。因为用户请求最终是由计算机硬件设备来完成的，做事的是 cpu。\n 2. 自顶而下。通过生成负载来观察被测试的系统性能，比如：响应时间、吞吐量；然后从请求点由外及里一层一层地分析，从而找到性能问题所在。\n\n系统性能关注点：\n\n系统资源包括 cpu、内存、存储介质等。一般硬件瓶颈的表现如下：\n\n 1. cpu 利用率高\n    \n    cpu 利用率又分为系统 cpu （linux 系统为例，操作系统占用cpu）与用户 cpu （用户程序占用的cpu，比如我们运行的引用系统），过高原因常见有：\n    \n    * 计算量大。比如：运算、连接查询、数据统计。\n    * 非空闲等待。比如：io 等待、资源竞争（统一资源被不同不同线程请求，而此资源又需要保持一致性，只能前一个释放后一个再访问，这样导致的等待）。\n    * 过多的系统调用系统调用，即调用操作系统提供的程序接口。比如：java 项目中写日志，会调用系统接口进行日志操作，这样会导致系统 cpu 使用率比较高。\n    * 过多的打断。终端是 cpu 用来响应请求的机制，比如键盘的输入、鼠标的点击等都会产生中断，中断是通知 cpu 有任务需要响应，cpu 停下正在执行的程序来响应当前的中断。\n\n 2. 内存吃紧 内存吃紧的原因比 cpu 要简单的多，多数是过多的页交换与内存泄漏。 java 程序运行在 jvm 之上，jvm 的内存设置也是有限制的，有时候 jvm 堆内存中有些对象无法回收，久而久之就没有空间来容纳新的对象，最后导致了 jvm 崩溃，这也就是内存溢出，回收不了的这种现象就是内存泄漏，这往往是由于程序原因硬引起的。\n\n 3. 磁盘繁忙 磁盘繁忙，即数据读写频繁。我们知道，磁盘介质的读写是物理动作，所以速度受限。如果频繁地对磁盘进行读写，因为磁盘的平均导致的 cpu 等待的情况会激增。虽然现在有了 ssd，但 ssd 相当昂贵，所以磁盘的瓶颈问题是相对突出的问题。数据玩笑话，不做任何分析也可以说磁盘瓶颈是系统性能风险。\n\n 4. 网络流量过大 高并发系统由于访问量大，带宽需求会比较大，导致网络拥堵。比如：一个pv（访问一个页面的单位）100k，同一时刻 10 万用户在访问，那么此时占用带宽大约就是：100k * 100000 = 977mb，换算成 bit/s 就是 7.8gbit/s。\n\n\n# 4.14 性能测试与自动化测试回归\n\n# 4.14.1 性能测试\n\n性能测试的首要任务在于一定要明白性能测试的背景和目的（比如：你是为了找到系统的瓶颈，还是为了验证系统在指定流量下能否扛得住），而不是直接认为 c 端接口就要进行性能测试，背景和目标不明确会导致整个性能测试沦为一次业务秀，达不到预期要保证线上高可用的目的。\n\n性能测试的难点在于，如果用线下的测试环境去仿真线上的环境，你的报告中需要让人信服「测试环境的压测报告可以用来反馈线上环境」，比如：报告中要给出线上环境的机器情况、主数据等，线下环境的机器是怎么去匹配这些。\n\n性能测试至少包括以下几种类型的测试：\n\n * 基准测试：一般是单业务场景、单用户的场景来执行脚本，同时设置合理的用户思考时间如200m\n * 配置测试：设计业务的场景来进行配置的优化，并给出配置测试的目标方向，即：主要优化哪些配置（比如：jvm、tomcat、mysql 连接池等）。\n * 稳定性测试：稳定性测试的目的是验证在当前软硬件环境下，长时间运行一定负载，确定系统在满足性能指标的前提下是否运行稳定。\n * 负载测试：负载测试的目的是版主我们找出性能问题与风险，对系统进行定容定量；为系统优化、性能调整提供数据支撑。\n\n特别提醒的是，性能测试的报告中一定会有一项：「系统风险」。这个也是性能测试报告最重要的内容之一。\n\n> 比如：给出随着系统的规模增加，首要风险在哪里？第二瓶颈又是什么？哪些情况的操作对系统会有重大的风险。本次性能分析报告是否能够合理的给生产环境的性能合理的建议，如不能，给出哪里有风险。。\n\n如何写一份合格的性能测试报告，可以参考这篇文档：待补充\n\n# 4.14.2 自动化测试回归\n\n在自动化测试领域一般会有两个层次的自动化：\n\n 1. 接口自动化\n 2. ui 自动化\n\n另外，这篇文章中给出了这一种针对读服务无状态的情况下，给出了一种《如何基于流量回放实现读服务的自动化测试回归》，感兴趣的可以去实验下。\n\n通过更长时间的回放尽可能地覆盖更多的业务场景，但也并没有足够的证据表明，一定不会出现漏测。对于此种问题，可以借助一些代码覆盖率的工具，如 java 里的 jacoco，来统计一次回放后被测系统的代码覆盖率，通过数据来判断是否存在可能的漏测。\n\n\n# 4.15 故障演练\n\n针对故障演练，一般是通过混沌工程项目来实现的，比如：阿里开源的chaosblade是一款简单易用、功能强大的混沌实验注入工具。\n\n🎯 故障演练的目的：\n\n * 这些措施在故障发生时是否真的有效？\n * 处理流程与沟通协作是否通畅？\n\n技术 leader 要化被动为主动，有意识地推进故障演练，不论是以注入还是回放的形式制造可控的故障，以此验证应急处理的机制流程和预先设计的灾备方案是否有效。\n\n演练的演化过程\n\n先在测试环境检验，后面才开始在生产环境进行有预案的演练，最后才有可能进行真正的随机故障演练。\n\n🛎 希望大家不要用一次次的重大事故来让团队成员慢慢理解系统稳定性的重要性。\n\n\n# 4.16 故障处理原则\n\n问题：如果线上出现告警问题，你会如何处理？ 对于线上故障，要有应急响应机制，具体包括：\n\n故障处理原则\n\n * 应急响应的目标：\n   * 线上故障发生时，以快速恢复服务为第一优先级，避免或减少故障带来的损失，避免或减少故障对客户的影响。\n   * 线上故障发生后，及时总结经验教训，提高团队的应急水平。\n   * 线上故障发生前，积极预防，尽可能避免或减少故障发生。\n * 应急响应的原则：\n   * 首要任务，应在第一时间恢复服务。\n   * 影响重大（比如受影响用户范围大，受损资金多，关键功能受阻等），应立即升级处理。\n   * 如果不能短时间解决问题，应及时升级处理并尽可能止损。\n * 应急响应流程：\n   * 事前预防、问题监控、事中应对、故障定位、故障解决、事后总结、故障回顾、改进措施\n\n故障处理流程：客户报告故障或监控系统发现故障（故障开始时间）-> 提交故障给相关部门接口人 -> 故障接手&处理 -> 故障处理完毕，故障归档（故障结束时间）-> 确认故障归属记入绩效考核。\n\n\n# 4.17 应急预案\n\n大型促销备战：\n\n * 成熟团队\n   * 运营提升设计能力\n   * 设计提升运营效率\n * 完善的流程和规范\n   * 事件分级与处理流程\n   * 系统分级与治理规范\n   * 系统变更流程与规范\n   * 值班与联络制度\n   * ……\n * 积极预防问题\n   * 系统评估\n     * 吞吐能力\n     * 容量/流量\n     * 响应速度\n   * 系统升级\n     * 扩展/拆分\n     * 异步化\n     * 使用缓存\n     * 跨机房部署\n   * sla 规划与确认\n     * 吞吐能力\n     * 响应时间\n     * 可用性\n     * 降级方案\n   * 验证\n     * 线下压测\n     * 线上局部压测\n     * 线上军演\n   * 系统体检\n * 及时发现问题\n   * 监控/报警\n     * 系统整体指标\n     * 系统可用性\n     * 系统处理能力\n     * 系统负载\n     * 数据\n     * 主业务流程\n * 迅速决策/处理\n   * 应急预案\n     * 扩容\n     * 流控控制\n     * 降级\n     * 故障转移\n   * 培训\n   * 演练\n   * 现场值班\n   * 明确分工和绩效\n\n\n# 4.18 checklist 保驾护航\n\n * 发布 checklist 服务端这边给出了：服务端上线 checklist 模板，大家可以参考一下。\n\n * 稳定性 checklist\n\n> 历史是最好的老师，总结分析过去发生的事故，并沉淀相关的经验，以此梳理出围绕事故隐患的风险点 checklist。\n\n\n# 5. 总结\n\n在写这篇文章前，我认真的整理了市面上大部分的高可用架构的文章，并根据自己的工作经验总结归纳出来，由于高可用设计的范围是在太广，因此每个模块的内容没办法面面俱到，大家有任何补充可以在评论里面评论。',charsets:{cjk:!0},lastUpdated:"2023/03/17, 17:04:14",lastUpdatedTimestamp:1679043854e3},{title:"草稿",frontmatter:{title:"草稿",date:"2023-02-07T14:44:43.000Z",permalink:"/pages/884001/"},regularPath:"/20.%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/100.%E8%8D%89%E7%A8%BF.html",relativePath:"20.前端开发/100.草稿.md",key:"v-54ed71f9",path:"/pages/884001/",headers:[{level:2,title:"相关命令",slug:"相关命令",normalizedTitle:"相关命令",charIndex:59}],headersStr:"相关命令",content:" * 编码工具：VSCode 轻量级、webStorm\n * 依赖工具：NPM\n * 构建工具：VUECli\n\n\n# 相关命令\n\n * 查看 node 版本：node -v\n * 查看 vue 版本： vue -V（这里是大V） 前端 vue 通过 vue cli 创建的\n\n 1. 安装 npm\n\nnpm 全称为 Node Package Manager，是一个基于 Node.js 的包管理器，也是整个 Node.js 社区最流行、支持的 第三方模块最多的包管理器。\n\nnpm -v\n\n 2. 由于网络原因 安装 cnpm npm install -g cnpm --registry=https://registry=https://registry.npm.tabao.org\n\nnpm设置淘宝镜像加速： npm config set registry https://registry.npm.taobao.org\n\n 3. 安装 vue-cli cnpm install -g @vue/cli\n\n 4. 安装 webpack cnpm install -g webpack webpack 是 JavaScript 打包器（module bundler）\n\n * 创建一个项目：vue create business-ui 选择：baber router 去掉 hint，选择 vue2.x\n * 安装 element-ui： npm i element-ui -s\n * main.js 添加：\n\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\n\nVue.use(ElementUI);\n\n\n\n * 安装 axios: npm install axios --save\n * 安装 echart: npm install echart vue-echart --save",normalizedContent:" * 编码工具：vscode 轻量级、webstorm\n * 依赖工具：npm\n * 构建工具：vuecli\n\n\n# 相关命令\n\n * 查看 node 版本：node -v\n * 查看 vue 版本： vue -v（这里是大v） 前端 vue 通过 vue cli 创建的\n\n 1. 安装 npm\n\nnpm 全称为 node package manager，是一个基于 node.js 的包管理器，也是整个 node.js 社区最流行、支持的 第三方模块最多的包管理器。\n\nnpm -v\n\n 2. 由于网络原因 安装 cnpm npm install -g cnpm --registry=https://registry=https://registry.npm.tabao.org\n\nnpm设置淘宝镜像加速： npm config set registry https://registry.npm.taobao.org\n\n 3. 安装 vue-cli cnpm install -g @vue/cli\n\n 4. 安装 webpack cnpm install -g webpack webpack 是 javascript 打包器（module bundler）\n\n * 创建一个项目：vue create business-ui 选择：baber router 去掉 hint，选择 vue2.x\n * 安装 element-ui： npm i element-ui -s\n * main.js 添加：\n\nimport elementui from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\n\nvue.use(elementui);\n\n\n\n * 安装 axios: npm install axios --save\n * 安装 echart: npm install echart vue-echart --save",charsets:{cjk:!0},lastUpdated:"2023/03/31, 10:49:48",lastUpdatedTimestamp:1680230988e3},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:25:41.000Z",permalink:"/pages/ca725f/"},regularPath:"/22.%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/10.%E6%A6%82%E8%A6%81.html",relativePath:"22.测试开发/10.概要.md",key:"v-6d9bafd5",path:"/pages/ca725f/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"精通性能测试",frontmatter:{title:"精通性能测试",date:"2023-01-17T09:06:47.000Z",permalink:"/pages/157465/"},regularPath:"/22.%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91/20.%E7%B2%BE%E9%80%9A%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.html",relativePath:"22.测试开发/20.精通性能测试.md",key:"v-0c4d7672",path:"/pages/157465/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/01/31, 09:21:58",lastUpdatedTimestamp:1675128118e3},{title:"docker 命令",frontmatter:{title:"docker 命令",date:"2022-03-26T23:24:42.000Z",permalink:"/pages/227545/"},regularPath:"/25.%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/01.docker%20%E5%91%BD%E4%BB%A4.html",relativePath:"25.运维开发/01.docker 命令.md",key:"v-0975a803",path:"/pages/227545/",headers:[{level:2,title:"Centos 7 安装 docker",slug:"centos-7-安装-docker",normalizedTitle:"centos 7 安装 docker",charIndex:2},{level:2,title:"配置国内163镜像源",slug:"配置国内163镜像源",normalizedTitle:"配置国内163镜像源",charIndex:499},{level:2,title:"Docker 安装 elasticsearch 6.7.1",slug:"docker-安装-elasticsearch-6-7-1",normalizedTitle:"docker 安装 elasticsearch 6.7.1",charIndex:952},{level:2,title:"centos 7 使用 ifconfig",slug:"centos-7-使用-ifconfig",normalizedTitle:"centos 7 使用 ifconfig",charIndex:1227},{level:2,title:"重启 docker 服务",slug:"重启-docker-服务",normalizedTitle:"重启 docker 服务",charIndex:1279},{level:2,title:"安装 docker-compose",slug:"安装-docker-compose",normalizedTitle:"安装 docker-compose",charIndex:1323},{level:2,title:"VMWare 设置 centos 7 静态ip地址",slug:"vmware-设置-centos-7-静态ip地址",normalizedTitle:"vmware 设置 centos 7 静态ip地址",charIndex:1659},{level:2,title:"centos 7 安装 jdk8",slug:"centos-7-安装-jdk8",normalizedTitle:"centos 7 安装 jdk8",charIndex:2293},{level:2,title:"centos 7 开放所有端口",slug:"centos-7-开放所有端口",normalizedTitle:"centos 7 开放所有端口",charIndex:2640},{level:2,title:"Docker 安装 MySQL",slug:"docker-安装-mysql",normalizedTitle:"docker 安装 mysql",charIndex:2704},{level:2,title:"Docker 安装 Prometheus",slug:"docker-安装-prometheus",normalizedTitle:"docker 安装 prometheus",charIndex:2880},{level:2,title:"Docker 安装 Grafana",slug:"docker-安装-grafana",normalizedTitle:"docker 安装 grafana",charIndex:2905},{level:2,title:"docker 安装 kafka",slug:"docker-安装-kafka",normalizedTitle:"docker 安装 kafka",charIndex:2937},{level:2,title:"docker 安装 redis",slug:"docker-安装-redis",normalizedTitle:"docker 安装 redis",charIndex:2960}],headersStr:"Centos 7 安装 docker 配置国内163镜像源 Docker 安装 elasticsearch 6.7.1 centos 7 使用 ifconfig 重启 docker 服务 安装 docker-compose VMWare 设置 centos 7 静态ip地址 centos 7 安装 jdk8 centos 7 开放所有端口 Docker 安装 MySQL Docker 安装 Prometheus Docker 安装 Grafana docker 安装 kafka docker 安装 redis",content:'# Centos 7 安装 docker\n\n1. uname -r\n2. sudo yum update\n3. sudo yum remove docker docker-common docker-selinux docker-engine\n4. sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n5. sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n6. yum list docker-ce --showduplicates | sort -r\n7. sudo yum install docker-ce  # 由于repo中默认只开启stable库，故这里安装的是最新稳定版本\n8. sudo systemctl start docker\n9. sudo systemctl enable docker\n10. docker version \n\n\n\n# Docker\n\n\n# 配置国内163镜像源\n\ndocker info \n\n\n默认的docker镜像源是国外的，docker pull的速度会比较慢。\n\nvim /etc/docker/daemon.json\n{\n    "registry-mirrors": [\n        "https://qkbjkoqt.mirror.aliyuncs.com",\n        "http://hub-mirror.c.163.com",\n        "https://docker.mirrors.ustc.edu.cn",\n        "https://registry.docker-cn.com"\n    ]\n}\n\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n或者命令：\nservice docker restart\n\n\n> 比如：上面的 地址可以为："https://og7vpkky.mirror.aliyuncs.com"\n\n\n# Docker 安装 elasticsearch 6.7.1\n\n1. docker pull elasticsearch:6.7.1\n\n2. docker run --name elasticsearch -e ES_JAVA_OPTS="-Xms1256m -Xmx1256m" -d -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:6.7.1\n\n3. docker update elasticsearch --restart=always\n\n\n\n# centos 7 使用 ifconfig\n\nyum -y install net-tools\n\n\n\n# 重启 docker 服务\n\nsystemctl restart docker\n\n\n\n# 安装 docker-compose\n\n1. cd /usr/local/bin #切换到安装路径\n2. wget https://github.com/docker/compose/releases/download/1.14.0-rc2/docker-compose-Linux-x86_64  # 下载安装源\n3. rename docker-compose-Linux-x86_64 docker-compose docker-compose-Linux-x86_64 # 重命名安装下载的安装包\n4. chmod +x /usr/local/bin/docker-compose\n5. docker-compose version # 查看是否安装成功\n\n\n\n# VMWare 设置 centos 7 静态ip地址\n\n1. cd /etc/sysconfig/network-scripts\n2. vim ifcfg-ens33\n修改后：\nTYPE="Ethernet"\nPROXY_METHOD="none"\nBROWSER_ONLY="no"\nBOOTPROTO="static"       # 使用静态 IP 地址，默认为 dhcp\nIPADDR="192.168.21.18"   # 设置的静态 IP 地址\nNETMASK="255.255.255.0"  # 子网掩码\nGATEWAY="192.168.21.1"   # 网关地址\nDNS1=114.114.114.114     # 配置 dns1\nDNS2=8.8.8.8             # 配置 dns2\nDEFROUTE="yes"\nIPV4_FAILURE_FATAL="no"\nIPV6INIT="yes"\nIPV6_AUTOCONF="yes"\nIPV6_DEFROUTE="yes"\nIPV6_FAILURE_FATAL="no"\nIPV6_ADDR_GEN_MODE="stable-privacy"\nNAME="ens33"\nUUID="1acbe1ab-0a79-4f42-8d06-32a9ee025388"\nDEVICE="ens33"\nONBOOT="yes"\n3. service network restart \n\n\n\n# centos 7 安装 jdk8\n\n1. tar -zxvf jdk-8u301-linux-x64.tar.gz\n2. vim /etc/profile\n在末尾添加如下内容：\n# set java environment\nJAVA_HOME=/root/jdk1.8.0_301\nJRE_HOME=$JAVA_HOME/jre\nPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\nexport JAVA_HOME JRE_HOME PATH CLASSPATH\n3. source /etc/profile\n\n\n\n# centos 7 开放所有端口\n\n1. 关闭防火墙\nsystemctl stop firewalld.service\n\n\n\n# Docker 安装 MySQL\n\ndocker run -di --name=skywalking_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 centos/mysql-57-centos7\n\n\n> MYSQL_ROOT_PASSWORD 环境变量指定 root 的密码为 123456。\n\n\n# Docker 安装 Prometheus\n\n\n# Docker 安装 Grafana\n\nctrl + s\n\n\n# docker 安装 kafka\n\n\n\n\n\n# docker 安装 redis\n\ndocker run --name redis -p 6379:6379 -d redis \n',normalizedContent:'# centos 7 安装 docker\n\n1. uname -r\n2. sudo yum update\n3. sudo yum remove docker docker-common docker-selinux docker-engine\n4. sudo yum install -y yum-utils device-mapper-persistent-data lvm2\n5. sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n6. yum list docker-ce --showduplicates | sort -r\n7. sudo yum install docker-ce  # 由于repo中默认只开启stable库，故这里安装的是最新稳定版本\n8. sudo systemctl start docker\n9. sudo systemctl enable docker\n10. docker version \n\n\n\n# docker\n\n\n# 配置国内163镜像源\n\ndocker info \n\n\n默认的docker镜像源是国外的，docker pull的速度会比较慢。\n\nvim /etc/docker/daemon.json\n{\n    "registry-mirrors": [\n        "https://qkbjkoqt.mirror.aliyuncs.com",\n        "http://hub-mirror.c.163.com",\n        "https://docker.mirrors.ustc.edu.cn",\n        "https://registry.docker-cn.com"\n    ]\n}\n\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n或者命令：\nservice docker restart\n\n\n> 比如：上面的 地址可以为："https://og7vpkky.mirror.aliyuncs.com"\n\n\n# docker 安装 elasticsearch 6.7.1\n\n1. docker pull elasticsearch:6.7.1\n\n2. docker run --name elasticsearch -e es_java_opts="-xms1256m -xmx1256m" -d -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:6.7.1\n\n3. docker update elasticsearch --restart=always\n\n\n\n# centos 7 使用 ifconfig\n\nyum -y install net-tools\n\n\n\n# 重启 docker 服务\n\nsystemctl restart docker\n\n\n\n# 安装 docker-compose\n\n1. cd /usr/local/bin #切换到安装路径\n2. wget https://github.com/docker/compose/releases/download/1.14.0-rc2/docker-compose-linux-x86_64  # 下载安装源\n3. rename docker-compose-linux-x86_64 docker-compose docker-compose-linux-x86_64 # 重命名安装下载的安装包\n4. chmod +x /usr/local/bin/docker-compose\n5. docker-compose version # 查看是否安装成功\n\n\n\n# vmware 设置 centos 7 静态ip地址\n\n1. cd /etc/sysconfig/network-scripts\n2. vim ifcfg-ens33\n修改后：\ntype="ethernet"\nproxy_method="none"\nbrowser_only="no"\nbootproto="static"       # 使用静态 ip 地址，默认为 dhcp\nipaddr="192.168.21.18"   # 设置的静态 ip 地址\nnetmask="255.255.255.0"  # 子网掩码\ngateway="192.168.21.1"   # 网关地址\ndns1=114.114.114.114     # 配置 dns1\ndns2=8.8.8.8             # 配置 dns2\ndefroute="yes"\nipv4_failure_fatal="no"\nipv6init="yes"\nipv6_autoconf="yes"\nipv6_defroute="yes"\nipv6_failure_fatal="no"\nipv6_addr_gen_mode="stable-privacy"\nname="ens33"\nuuid="1acbe1ab-0a79-4f42-8d06-32a9ee025388"\ndevice="ens33"\nonboot="yes"\n3. service network restart \n\n\n\n# centos 7 安装 jdk8\n\n1. tar -zxvf jdk-8u301-linux-x64.tar.gz\n2. vim /etc/profile\n在末尾添加如下内容：\n# set java environment\njava_home=/root/jdk1.8.0_301\njre_home=$java_home/jre\npath=$path:$java_home/bin:$jre_home/bin\nclasspath=.:$java_home/lib/dt.jar:$java_home/lib/tools.jar:$jre_home/lib\nexport java_home jre_home path classpath\n3. source /etc/profile\n\n\n\n# centos 7 开放所有端口\n\n1. 关闭防火墙\nsystemctl stop firewalld.service\n\n\n\n# docker 安装 mysql\n\ndocker run -di --name=skywalking_mysql -p 3306:3306 -e mysql_root_password=123456 centos/mysql-57-centos7\n\n\n> mysql_root_password 环境变量指定 root 的密码为 123456。\n\n\n# docker 安装 prometheus\n\n\n# docker 安装 grafana\n\nctrl + s\n\n\n# docker 安装 kafka\n\n\n\n\n\n# docker 安装 redis\n\ndocker run --name redis -p 6379:6379 -d redis \n',charsets:{cjk:!0},lastUpdated:"2022/12/15, 12:35:47",lastUpdatedTimestamp:1671078947e3},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:21:08.000Z",permalink:"/pages/df4369/"},regularPath:"/25.%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91/10.%E6%A6%82%E8%A6%81.html",relativePath:"25.运维开发/10.概要.md",key:"v-67d086b3",path:"/pages/df4369/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"用户画像",frontmatter:{title:"用户画像",date:"2022-03-26T15:51:04.000Z",permalink:"/pages/7c75c6/"},regularPath:"/27.%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/04.%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F.html",relativePath:"27.大数据开发/04.用户画像.md",key:"v-8672caaa",path:"/pages/7c75c6/",headers:[{level:2,title:"一、 数据驱动营收",slug:"一、-数据驱动营收",normalizedTitle:"一、 数据驱动营收",charIndex:2},{level:2,title:"二、 用户画像是什么？",slug:"二、-用户画像是什么",normalizedTitle:"二、 用户画像是什么？",charIndex:57},{level:2,title:"三、 用户画像的标签类型的种类",slug:"三、-用户画像的标签类型的种类",normalizedTitle:"三、 用户画像的标签类型的种类",charIndex:166},{level:3,title:"3.1 统计类标签",slug:"_3-1-统计类标签",normalizedTitle:"3.1 统计类标签",charIndex:259},{level:3,title:"3.2 规则类标签",slug:"_3-2-规则类标签",normalizedTitle:"3.2 规则类标签",charIndex:389},{level:3,title:"3.3 机器学习挖掘类标签",slug:"_3-3-机器学习挖掘类标签",normalizedTitle:"3.3 机器学习挖掘类标签",charIndex:539},{level:2,title:"四、用户画像标签体系",slug:"四、用户画像标签体系",normalizedTitle:"四、用户画像标签体系",charIndex:748},{level:3,title:"4.1 用户基本属性标签",slug:"_4-1-用户基本属性标签",normalizedTitle:"4.1 用户基本属性标签",charIndex:865},{level:3,title:"4.2  用户登录活跃标签",slug:"_4-2-用户登录活跃标签",normalizedTitle:"4.2  用户登录活跃标签",charIndex:null},{level:3,title:"4.3 用户年龄段标签",slug:"_4-3-用户年龄段标签",normalizedTitle:"4.3 用户年龄段标签",charIndex:2113},{level:3,title:"4.4 用户交互行为标签",slug:"_4-4-用户交互行为标签",normalizedTitle:"4.4 用户交互行为标签",charIndex:2361},{level:3,title:"4.5 用户消费能力标签",slug:"_4-5-用户消费能力标签",normalizedTitle:"4.5 用户消费能力标签",charIndex:2847},{level:3,title:"4.6 用户订单画像标签",slug:"_4-6-用户订单画像标签",normalizedTitle:"4.6 用户订单画像标签",charIndex:3119},{level:3,title:"4.7 用户退拒货行为画像标签",slug:"_4-7-用户退拒货行为画像标签",normalizedTitle:"4.7 用户退拒货行为画像标签",charIndex:4372},{level:3,title:"4.8 用户购物偏好画像标签",slug:"_4-8-用户购物偏好画像标签",normalizedTitle:"4.8 用户购物偏好画像标签",charIndex:4856},{level:2,title:"五、画像标签存储及表结构",slug:"五、画像标签存储及表结构",normalizedTitle:"五、画像标签存储及表结构",charIndex:5133}],headersStr:"一、 数据驱动营收 二、 用户画像是什么？ 三、 用户画像的标签类型的种类 3.1 统计类标签 3.2 规则类标签 3.3 机器学习挖掘类标签 四、用户画像标签体系 4.1 用户基本属性标签 4.2  用户登录活跃标签 4.3 用户年龄段标签 4.4 用户交互行为标签 4.5 用户消费能力标签 4.6 用户订单画像标签 4.7 用户退拒货行为画像标签 4.8 用户购物偏好画像标签 五、画像标签存储及表结构",content:"# 一、 数据驱动营收\n\n> 数据 的最终目的是走出数据仓库，应用到业务系统和营销系统中来驱动营收增长。\n\n\n# 二、 用户画像是什么？\n\n用户画像，即用户信息标签化，通过收集用户的社会属性、消费习惯、偏好特征等各个维度的数据，进而对用户进行刻画，并对这些特征进行分析、统计，挖掘潜在的价值信息，从而抽象出用户的信息全貌。\n\n\n# 三、 用户画像的标签类型的种类\n\n用户画像建模，其实就是对用户“打标签”，用户打标签的方式，分为以下3类：\n\n 1. 统计类标签\n 2. 规则类标签\n 3. 机器学习挖掘类标签\n\n\n# 3.1 统计类标签\n\n该类标签构成了用户画像的基础。\n\n这类标签是最为基础也最为常见的标签类型。例如，对于某个用户来说，其性别、年龄、城市、星座、近7天活跃时长、近7日活跃天数、近7日活跃次数等字段可以从用户注册数据、用户访问、消费数据中统计中得出。\n\n\n# 3.2 规则类标签\n\n该类标签是基于用户行为及确定的规则产生。例如，对平台上“消费活跃”用户这一口型的定义为“近30天交易次数>= 2”。在实际开发画像的过程中，由于运营人员对业务更为熟悉，而数据人员对数据的结构、分布、特征更为熟悉，因此规则类标签的规则是由运营人员和数据人员共同协商确定。\n\n\n# 3.3 机器学习挖掘类标签\n\n该类标签通过机器学习挖掘产生，用于对用户的某些属性或某些行为进行预测判断。例如，根据一个用户的行为习惯判断该用户是男性还是女性、根据一个用户的消费习惯判断其对某商品的偏好程度。该类标签需要通过算法挖掘产生。\n\n在项目工程中，一般统计类标签和规则类的标签即可以满足应用需求，在开发中占有较大比例。机器学习挖掘类标签多用于预测场景，如判断用户性别、用户购买商品偏好、用户流失意向等。\n\n\n# 四、用户画像标签体系\n\n这里设计的用户标签体系主要分为以下方面：\n\n * 用户基本属性标签\n\n * 用户订单属性标签\n\n * 用户退换货属性标签\n\n * 用户购物车属性标签\n\n * 用户活跃属性标签\n\n * 用户偏好属性标签\n\n\n# 4.1 用户基本属性标签\n\n用户属性指标主要根据业务数据来源（业务系统中的用户信息），尽可能全面描述用户基础属性，这些基础属性值是短期内不会改变的，如：年龄、性别、手机号归属地、身份证归属地等。\n\n字段                   字段类型        字段定义\nuser_id              bigint      用户编号\nlogin_name           string      登录名称\nuser_name            string      用户姓名\nuser_status_id       int         用户状态\ngender_id            int         用户性别\nbirthday             int         用户生日\nuser_age             int         用户年龄\nconstellation_name   string      星座名称\ncellphone_id         string      手机号\ncert_id              string      证件号\nsource_id            bigint      注册来源\nis_real_name_auth    int         是否实名认证标志\nis_valid_cellphone   int         是否认证手机标志\nis_has_photo         int         是否有头像标志\nis_tmp_user_flag     int         是否临时用户\ncreate_time          string      注册时间\ncreate_date          timestamp   注册日期\nmodify_time          string      修改时间\nmodify_date          timestamp   修改日期\ndate_id              string      数据日期\n\n\n# 4.2 用户登录活跃标签\n\n看用户近期登录时间段、登录时长、登录频次、登录地等指标。\n\n字段                  类型       定义       备注\nuser_id             int      用户id     用户唯一id\nlogin_city_ration   string   常登录地     用户近一个月登录的3个地点及比率\nlast_online_date    string   最近登录时间   用户最近一次登录日期\nonline_frequency    int      登录频次     用户近一个月登录频次\nonline_time         int      登录时长     用户近一个月登录时长\n\n\n# 4.3 用户年龄段标签\n\n在做营销活动或站内推送时，可对不同年龄段针对性运营。\n\n字段               类型       定义       备注\nuser_id          string   用户编码     \ncontract_id      string   联系人编码    \nuser_sex         string   用户性别     \nuser_age_crowd   string   用户年龄群体   儿童（0-10）、少年（11-15）...\n\n\n# 4.4 用户交互行为标签\n\n记录用户在平台上每一次操作行为，及该次行为所带来的标签。后续可根据用户的行为标签计算用户的偏好标签，做推荐和营销等活动。\n\n字段            类型       定义       备注\nuser_id       string   用户id     用户唯一id\norg_id        string   原始id     标签id\norg_name      string   标签中文名称   标签对应标签的中文名称\nis_valid      string   是否有效     1 有效， 0 无效\ncnt           string   行为次数     用户行为次数\ndate_id       string   行为日期     产生用户该条标签对应日期\nact_type_id   int      用户行为类型   1 搜索；2 浏览；3 收藏；4 下单；5 支付；6 退货\ntag_type_id   int      频道类型     1 母婴；2 家电；3 美妆；4 美食；5 服装；6 鲜花\n\n\n# 4.5 用户消费能力标签\n\n看用户的消费金额、消费频次、最近消费时间。进一步结合用户登录活跃情况，可以对用户做 RFM 分层。\n\n字段           类型        定义       备注\nuser_id      string    用户编码     \nsum_pay      string    累积付费金额   \nsum_num      decimal   累积付费次数   \npaid_level   int       付费分层     1:[0,30) 2:[30,100) 3:[100, 300) ...\n\n\n# 4.6 用户订单画像标签\n\n字段                          类型       定义\nuser_id                     bigint   用户\nfirst_order_time            string   首单日期\nlast_order_time             string   末单日期\nfirst_order_ago             bigint   首单距今时间\nlast_order_ago              bigint   末单距今时间\nmonth1_order_cnt            bigint   近30天购买次数\nmonth1_order_amt            double   近30天购买金额\nmonth2_order_cnt            bigint   近60天购买次数\nmonth2_order_amt            double   近60天购买金额\nmonth3_order_cnt            bigint   近90天购买次数\nmonth3_order_amt            double   近90天购买金额\nmax_order_amt               double   最大订单金额\nmin_order_amt               double   最小订单金额\ntotal_order_cnt             bigint   累计消费次数（不含退拒）\ntotal_order_amt             double   累计消费金额（不含退拒）\ntotal_coupon_amt            double   累计使用代金券金额\nuser_avg_order_amt          double   平均订单金额（含退拒）\nmonth3_user_avg_amt         double   近90天平均订单金额（含退拒）\ncommon_address              string   常用收货地址\ncommon_pay_type             string   常用支付方式\nmonth1_cart_cnt_30          bigint   最近30天加购次数\nmonth1_cart_goods_cnt_30    bigint   最近30天加购商品件数\nmonth1_cart_submit_cnt_30   bigint   最近3天提交件数\nmonth1_cart_submit_rate     double   最近30天商品提交占比\nmonth1_cart_cancel_cnt      bigint   最近30天取消商品件数\ndw_date                     string   计算日期\n\n\n# 4.7 用户退拒货行为画像标签\n\n                  类型       定义\nuser_id           bigint   用户\np_sales_cnt       bigint   不含退拒商品购买数量\np_sales_amt       double   不含退拒商品购买的商品总价\np_sales_cnt_amt   double   不含退拒实付金额（扣促销减免）\nh_sales_cnt       bigint   含退拒购买数量\nh_sales_amt       double   含退拒购买金额\nh_sales_cnt_amt   double   含退拒购金额（扣促销减免）\nreturn_cnt        bigint   退货商品数量\nreturn_amt        double   退货商品金额\nreject_cnt        bigint   拒收商品数量\nreject_amt        double   拒收商品金额\ndw_date           bigint   数仓计算日期\n\n\n# 4.8 用户购物偏好画像标签\n\n字段                  类型       定义\nuser_id             bigint   用户\ncommon_first_cat    bigint   最常购买一级类目名称\ncommon_second_cat   bigint   最常购买二级类目名称\ncommon_third_cat    bigint   最常购买三级类目名称\ncommon_brand_id     bigint   最常购买的品牌\ndw_date             bigint   数仓计算日期\n\n\n# 五、画像标签存储及表结构\n\n画像数据，行数基本与公司用户规模相同。 列数则众多（一个中型互联网企业，用户的画像标签通常都在1000~2000个之间），而且会在实际 运营中，不断增加新的标签，则会不断增加新的列。\n\n> 考虑到行数及列数规模巨大（数亿行*数千列），以及列的动态增加特性，业内通常将 用户画像标签数据存于 HBase 之中，再辅以 elastic search 做二级索引，以实现对 HBase 中画像数据的快速检索；\n\n                   列簇 F\nrowkey(deviceId)   sex\n1200212            1\n1200213            0",normalizedContent:"# 一、 数据驱动营收\n\n> 数据 的最终目的是走出数据仓库，应用到业务系统和营销系统中来驱动营收增长。\n\n\n# 二、 用户画像是什么？\n\n用户画像，即用户信息标签化，通过收集用户的社会属性、消费习惯、偏好特征等各个维度的数据，进而对用户进行刻画，并对这些特征进行分析、统计，挖掘潜在的价值信息，从而抽象出用户的信息全貌。\n\n\n# 三、 用户画像的标签类型的种类\n\n用户画像建模，其实就是对用户“打标签”，用户打标签的方式，分为以下3类：\n\n 1. 统计类标签\n 2. 规则类标签\n 3. 机器学习挖掘类标签\n\n\n# 3.1 统计类标签\n\n该类标签构成了用户画像的基础。\n\n这类标签是最为基础也最为常见的标签类型。例如，对于某个用户来说，其性别、年龄、城市、星座、近7天活跃时长、近7日活跃天数、近7日活跃次数等字段可以从用户注册数据、用户访问、消费数据中统计中得出。\n\n\n# 3.2 规则类标签\n\n该类标签是基于用户行为及确定的规则产生。例如，对平台上“消费活跃”用户这一口型的定义为“近30天交易次数>= 2”。在实际开发画像的过程中，由于运营人员对业务更为熟悉，而数据人员对数据的结构、分布、特征更为熟悉，因此规则类标签的规则是由运营人员和数据人员共同协商确定。\n\n\n# 3.3 机器学习挖掘类标签\n\n该类标签通过机器学习挖掘产生，用于对用户的某些属性或某些行为进行预测判断。例如，根据一个用户的行为习惯判断该用户是男性还是女性、根据一个用户的消费习惯判断其对某商品的偏好程度。该类标签需要通过算法挖掘产生。\n\n在项目工程中，一般统计类标签和规则类的标签即可以满足应用需求，在开发中占有较大比例。机器学习挖掘类标签多用于预测场景，如判断用户性别、用户购买商品偏好、用户流失意向等。\n\n\n# 四、用户画像标签体系\n\n这里设计的用户标签体系主要分为以下方面：\n\n * 用户基本属性标签\n\n * 用户订单属性标签\n\n * 用户退换货属性标签\n\n * 用户购物车属性标签\n\n * 用户活跃属性标签\n\n * 用户偏好属性标签\n\n\n# 4.1 用户基本属性标签\n\n用户属性指标主要根据业务数据来源（业务系统中的用户信息），尽可能全面描述用户基础属性，这些基础属性值是短期内不会改变的，如：年龄、性别、手机号归属地、身份证归属地等。\n\n字段                   字段类型        字段定义\nuser_id              bigint      用户编号\nlogin_name           string      登录名称\nuser_name            string      用户姓名\nuser_status_id       int         用户状态\ngender_id            int         用户性别\nbirthday             int         用户生日\nuser_age             int         用户年龄\nconstellation_name   string      星座名称\ncellphone_id         string      手机号\ncert_id              string      证件号\nsource_id            bigint      注册来源\nis_real_name_auth    int         是否实名认证标志\nis_valid_cellphone   int         是否认证手机标志\nis_has_photo         int         是否有头像标志\nis_tmp_user_flag     int         是否临时用户\ncreate_time          string      注册时间\ncreate_date          timestamp   注册日期\nmodify_time          string      修改时间\nmodify_date          timestamp   修改日期\ndate_id              string      数据日期\n\n\n# 4.2 用户登录活跃标签\n\n看用户近期登录时间段、登录时长、登录频次、登录地等指标。\n\n字段                  类型       定义       备注\nuser_id             int      用户id     用户唯一id\nlogin_city_ration   string   常登录地     用户近一个月登录的3个地点及比率\nlast_online_date    string   最近登录时间   用户最近一次登录日期\nonline_frequency    int      登录频次     用户近一个月登录频次\nonline_time         int      登录时长     用户近一个月登录时长\n\n\n# 4.3 用户年龄段标签\n\n在做营销活动或站内推送时，可对不同年龄段针对性运营。\n\n字段               类型       定义       备注\nuser_id          string   用户编码     \ncontract_id      string   联系人编码    \nuser_sex         string   用户性别     \nuser_age_crowd   string   用户年龄群体   儿童（0-10）、少年（11-15）...\n\n\n# 4.4 用户交互行为标签\n\n记录用户在平台上每一次操作行为，及该次行为所带来的标签。后续可根据用户的行为标签计算用户的偏好标签，做推荐和营销等活动。\n\n字段            类型       定义       备注\nuser_id       string   用户id     用户唯一id\norg_id        string   原始id     标签id\norg_name      string   标签中文名称   标签对应标签的中文名称\nis_valid      string   是否有效     1 有效， 0 无效\ncnt           string   行为次数     用户行为次数\ndate_id       string   行为日期     产生用户该条标签对应日期\nact_type_id   int      用户行为类型   1 搜索；2 浏览；3 收藏；4 下单；5 支付；6 退货\ntag_type_id   int      频道类型     1 母婴；2 家电；3 美妆；4 美食；5 服装；6 鲜花\n\n\n# 4.5 用户消费能力标签\n\n看用户的消费金额、消费频次、最近消费时间。进一步结合用户登录活跃情况，可以对用户做 rfm 分层。\n\n字段           类型        定义       备注\nuser_id      string    用户编码     \nsum_pay      string    累积付费金额   \nsum_num      decimal   累积付费次数   \npaid_level   int       付费分层     1:[0,30) 2:[30,100) 3:[100, 300) ...\n\n\n# 4.6 用户订单画像标签\n\n字段                          类型       定义\nuser_id                     bigint   用户\nfirst_order_time            string   首单日期\nlast_order_time             string   末单日期\nfirst_order_ago             bigint   首单距今时间\nlast_order_ago              bigint   末单距今时间\nmonth1_order_cnt            bigint   近30天购买次数\nmonth1_order_amt            double   近30天购买金额\nmonth2_order_cnt            bigint   近60天购买次数\nmonth2_order_amt            double   近60天购买金额\nmonth3_order_cnt            bigint   近90天购买次数\nmonth3_order_amt            double   近90天购买金额\nmax_order_amt               double   最大订单金额\nmin_order_amt               double   最小订单金额\ntotal_order_cnt             bigint   累计消费次数（不含退拒）\ntotal_order_amt             double   累计消费金额（不含退拒）\ntotal_coupon_amt            double   累计使用代金券金额\nuser_avg_order_amt          double   平均订单金额（含退拒）\nmonth3_user_avg_amt         double   近90天平均订单金额（含退拒）\ncommon_address              string   常用收货地址\ncommon_pay_type             string   常用支付方式\nmonth1_cart_cnt_30          bigint   最近30天加购次数\nmonth1_cart_goods_cnt_30    bigint   最近30天加购商品件数\nmonth1_cart_submit_cnt_30   bigint   最近3天提交件数\nmonth1_cart_submit_rate     double   最近30天商品提交占比\nmonth1_cart_cancel_cnt      bigint   最近30天取消商品件数\ndw_date                     string   计算日期\n\n\n# 4.7 用户退拒货行为画像标签\n\n                  类型       定义\nuser_id           bigint   用户\np_sales_cnt       bigint   不含退拒商品购买数量\np_sales_amt       double   不含退拒商品购买的商品总价\np_sales_cnt_amt   double   不含退拒实付金额（扣促销减免）\nh_sales_cnt       bigint   含退拒购买数量\nh_sales_amt       double   含退拒购买金额\nh_sales_cnt_amt   double   含退拒购金额（扣促销减免）\nreturn_cnt        bigint   退货商品数量\nreturn_amt        double   退货商品金额\nreject_cnt        bigint   拒收商品数量\nreject_amt        double   拒收商品金额\ndw_date           bigint   数仓计算日期\n\n\n# 4.8 用户购物偏好画像标签\n\n字段                  类型       定义\nuser_id             bigint   用户\ncommon_first_cat    bigint   最常购买一级类目名称\ncommon_second_cat   bigint   最常购买二级类目名称\ncommon_third_cat    bigint   最常购买三级类目名称\ncommon_brand_id     bigint   最常购买的品牌\ndw_date             bigint   数仓计算日期\n\n\n# 五、画像标签存储及表结构\n\n画像数据，行数基本与公司用户规模相同。 列数则众多（一个中型互联网企业，用户的画像标签通常都在1000~2000个之间），而且会在实际 运营中，不断增加新的标签，则会不断增加新的列。\n\n> 考虑到行数及列数规模巨大（数亿行*数千列），以及列的动态增加特性，业内通常将 用户画像标签数据存于 hbase 之中，再辅以 elastic search 做二级索引，以实现对 hbase 中画像数据的快速检索；\n\n                   列簇 f\nrowkey(deviceid)   sex\n1200212            1\n1200213            0",charsets:{cjk:!0},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:24:45.000Z",permalink:"/pages/aa09ae/"},regularPath:"/27.%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/01.%E6%A6%82%E8%A6%81.html",relativePath:"27.大数据开发/01.概要.md",key:"v-061ae64c",path:"/pages/aa09ae/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"flink",frontmatter:{title:"flink",date:"2023-03-28T15:11:53.000Z",permalink:"/pages/af7f35/"},regularPath:"/27.%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/120.flink.html",relativePath:"27.大数据开发/120.flink.md",key:"v-41163b04",path:"/pages/af7f35/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/31, 10:49:48",lastUpdatedTimestamp:1680230988e3},{title:"数据分析万能法则",frontmatter:{title:"数据分析万能法则",date:"2022-11-19T22:51:31.000Z",permalink:"/pages/c7a395/"},regularPath:"/27.%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91/110.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%87%E8%83%BD%E6%B3%95%E5%88%99.html",relativePath:"27.大数据开发/110.数据分析万能法则.md",key:"v-53c133a4",path:"/pages/c7a395/",headers:[{level:2,title:"技能决定下限，思维决定上限",slug:"技能决定下限-思维决定上限",normalizedTitle:"技能决定下限，思维决定上限",charIndex:2},{level:3,title:"数据分析中的核心竞争力在于分析思维。",slug:"数据分析中的核心竞争力在于分析思维。",normalizedTitle:"数据分析中的核心竞争力在于分析思维。",charIndex:20},{level:3,title:"数据分析究竟需要哪些思维？",slug:"数据分析究竟需要哪些思维",normalizedTitle:"数据分析究竟需要哪些思维？",charIndex:132},{level:2,title:"01. 目标导向：如何走出取数的怪圈？",slug:"_01-目标导向-如何走出取数的怪圈",normalizedTitle:"01. 目标导向：如何走出取数的怪圈？",charIndex:233},{level:3,title:"为什么会陷入取数的怪圈",slug:"为什么会陷入取数的怪圈",normalizedTitle:"为什么会陷入取数的怪圈",charIndex:257},{level:3,title:"什么是目标思维？",slug:"什么是目标思维",normalizedTitle:"什么是目标思维？",charIndex:417},{level:3,title:"如何找出目标？",slug:"如何找出目标",normalizedTitle:"如何找出目标？",charIndex:430},{level:3,title:"将目标思维融入工作的各个方面",slug:"将目标思维融入工作的各个方面",normalizedTitle:"将目标思维融入工作的各个方面",charIndex:458}],headersStr:"技能决定下限，思维决定上限 数据分析中的核心竞争力在于分析思维。 数据分析究竟需要哪些思维？ 01. 目标导向：如何走出取数的怪圈？ 为什么会陷入取数的怪圈 什么是目标思维？ 如何找出目标？ 将目标思维融入工作的各个方面",content:'# 技能决定下限，思维决定上限\n\n\n# 数据分析中的核心竞争力在于分析思维。\n\n警惕\n\n掌握技能就能解决问题 - 这是标准的学生思维。进入职场，具体的业务问题没有标准答案。\n\n你缺少如何使用数据分析技能的能力 数据分析思维的作用是搭建数据分析思路的框架。\n\n\n# 数据分析究竟需要哪些思维？\n\n * 定义问题思维能力（目标导向、定义问题）\n * 分析问题思维能力（指标思维、逻辑推理、拆解问题、找出原因）\n * 解决问题思维能力（懂业务、懂用户、提出建议）\n\n\n# 01. 目标导向：如何走出取数的怪圈？\n\n\n# 为什么会陷入取数的怪圈\n\n做题思维：每当我们看到考题的时候，就条件反射的想着怎么解答。考题问什么，我们就回答什么，回答 问题的时候千万不能超过考题的范围，不然就有可能离题，拿不到分。\n\n管理大事德鲁克说过一句话："最重要的是做正确的事，其次才是如何正确地做事"。\n\n相比解题更重要的是：我们为什么要解答这道题？\n\n\n# 什么是目标思维？\n\n\n# 如何找出目标？\n\n直接问"要达成什么业务目标"\n\n\n# 将目标思维融入工作的各个方面\n\n * 求职面试（面试的时候，我们不要看他问什么，要想想他为什么这么问？）\n\n> 你平时的爱好是什么？目标思维=》通过你的爱好可以反映出你的性格特质，是不是和岗位的需求相匹配。',normalizedContent:'# 技能决定下限，思维决定上限\n\n\n# 数据分析中的核心竞争力在于分析思维。\n\n警惕\n\n掌握技能就能解决问题 - 这是标准的学生思维。进入职场，具体的业务问题没有标准答案。\n\n你缺少如何使用数据分析技能的能力 数据分析思维的作用是搭建数据分析思路的框架。\n\n\n# 数据分析究竟需要哪些思维？\n\n * 定义问题思维能力（目标导向、定义问题）\n * 分析问题思维能力（指标思维、逻辑推理、拆解问题、找出原因）\n * 解决问题思维能力（懂业务、懂用户、提出建议）\n\n\n# 01. 目标导向：如何走出取数的怪圈？\n\n\n# 为什么会陷入取数的怪圈\n\n做题思维：每当我们看到考题的时候，就条件反射的想着怎么解答。考题问什么，我们就回答什么，回答 问题的时候千万不能超过考题的范围，不然就有可能离题，拿不到分。\n\n管理大事德鲁克说过一句话："最重要的是做正确的事，其次才是如何正确地做事"。\n\n相比解题更重要的是：我们为什么要解答这道题？\n\n\n# 什么是目标思维？\n\n\n# 如何找出目标？\n\n直接问"要达成什么业务目标"\n\n\n# 将目标思维融入工作的各个方面\n\n * 求职面试（面试的时候，我们不要看他问什么，要想想他为什么这么问？）\n\n> 你平时的爱好是什么？目标思维=》通过你的爱好可以反映出你的性格特质，是不是和岗位的需求相匹配。',charsets:{cjk:!0},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:21:30.000Z",permalink:"/pages/5b4bcd/"},regularPath:"/40.%E4%BA%A7%E5%93%81&UI%E4%BA%A4%E4%BA%92/10.%E6%A6%82%E8%A6%81.html",relativePath:"40.产品&UI交互/10.概要.md",key:"v-0b14e908",path:"/pages/5b4bcd/",headers:[{level:2,title:"为什么要介绍设计与原型？",slug:"为什么要介绍设计与原型",normalizedTitle:"为什么要介绍设计与原型？",charIndex:2}],headersStr:"为什么要介绍设计与原型？",content:"# 为什么要介绍设计与原型？\n\nhttps://ant.design/docs/spec/introduce-cn\n\nhttps://www.socialmarketings.com/articldetails/15807",normalizedContent:"# 为什么要介绍设计与原型？\n\nhttps://ant.design/docs/spec/introduce-cn\n\nhttps://www.socialmarketings.com/articldetails/15807",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"设计价值观",frontmatter:{title:"设计价值观",date:"2023-01-31T09:47:56.000Z",permalink:"/pages/b124a5/"},regularPath:"/40.%E4%BA%A7%E5%93%81&UI%E4%BA%A4%E4%BA%92/20.%E8%AE%BE%E8%AE%A1%E4%BB%B7%E5%80%BC%E8%A7%82.html",relativePath:"40.产品&UI交互/20.设计价值观.md",key:"v-bab82fcc",path:"/pages/b124a5/",headers:[{level:2,title:"自然",slug:"自然",normalizedTitle:"自然",charIndex:48},{level:2,title:"确定性",slug:"确定性",normalizedTitle:"确定性",charIndex:414},{level:2,title:"意义感",slug:"意义感",normalizedTitle:"意义感",charIndex:1062},{level:2,title:"生长性",slug:"生长性",normalizedTitle:"生长性",charIndex:1469}],headersStr:"自然 确定性 意义感 生长性",content:"阿里开源的Ant Design文档中，指出四点与众不同的价值观，觉得特别具有参考意义：\n\n\n# 自然\n\n数字世界的光速迭代使得产品日益复杂，而人类意识和注意力资源有限。面对这种设计矛盾，追求「自然」交互将是 Ant Design 持之以恒的方向。\n\n * 感知自然：认知心理学所述，约 80% 外界信息通过视觉通道获取。界面设计中最重要的视觉要素，包括布局、色彩、插画、图标等，应充分汲取自然界规律，从而降低用户认知成本，带来真实流畅的感受。在一些场景下，适时加入听觉、触觉等其它感知通道，能创造更丰富自然的产品体验。\n\n * 行为自然：在与系统的互动中，设计者应充分理解用户、系统角色、任务目标间的关系，场景化组织系统功能和服务。同时辅以行为分析、人工智能、传感器、元数据等策略，提供主动式服务，帮助用户决策、减少操作，从而节约用户脑力和体力，让人机交互行为更自然。\n\n> 想了解自然价值观的前世今生，请移步至专栏。\n\n\n# 确定性\n\n界面是用户与系统交互的媒介，是手段而非目的。在追求「自然」交互基础上，通过 Ant Design 创造的产品界面应是高确定性、低合作熵的状态。\n\n * 设计者确定：企业级产品都是分工合作的产物，参与者越多合作熵越高，这是一切设计工作低效、产品系统不易维护的来源。通过探索设计规律、模块化设计思路，来为设计者提供足够精简的设计规则、组件、模式等，赋能设计者、降低合作熵。\n   * 保持克制：能做，但想清楚了不做。设计者应当聚焦在最有价值产品功能打磨，并用尽可能少的设计元素将其表达。正如 Antoine de St.Exupery 所说：完美不在于无以复加，而在于无可删减，万事莫不如此。\n   * 面向对象的方法：探索设计规律，并将其抽象成「对象」，增强界面设计的灵活性和可维护性，同时也减少「设计者」的主观干扰，从而降低系统的不确定性。例如：色值换算、间距排版。\n   * 模块化设计：将复杂或者重复出现的局部封装成模块，提供有限接口与其他模块互动，最终全面减少系统的复杂度，进而增进可靠性以及可维护性。设计者可运用现有的组件/模板或者自行抽象可复用的组件/模板，节约无谓的设计且保持系统一致性，让「设计者」把创造力专注在最需要的地方。\n * 用户确定性：用户日常工作是通过诸多企业级产品的协同来完成的，除了考虑单一产品的设计一致性，更应当在跨产品、跨终端、跨系统间保持良好的确定性。一致的外观和交互，保持面向用户的熟悉感，能提升易学性，降低认知和操作成本，提升工作效率。\n\n\n# 意义感\n\n一个产品或功能被设计者创造出来不只是用户的需要，而更多是承载用户的某个工作使命。产品设计应充分站在工作视角，促成用户使命的达成；同时，在「自然」、「确定」之上，兼顾用户的人性需求，为工作过程创造富有意义感的人机交互。\n\n * **结果的意义：明确目标，即时反馈。**洞悉工作目标，根据使用流程拆解明确的子目标，让每个交互行为都围绕着主目标的达成；为每个行为，辅以恰当、即时的反馈，让用户对操作结果了然于胸。此外，可通过情感化设计，适度安抚用户负面情感，强化用户正面情感。\n * **过程的意义：挑战适中，全情投入。**调整不同场景下的工作难度，让功能适时适地触发，以匹配用户能力；如无必要，勿增实体，不分散用户注意力，让用户专注于任务达成，而非界面。让当下的工作既不过于简单，亦不过于复杂，挑战适中，并随着用户能力的成长提出更高的挑战，能让用户持续沉浸在工作的心流中，获得富有成就感的工作体验。\n\n\n# 生长性\n\n企业级产品功能的增长与用户系统角色的演变相生相伴。设计者应为自己创造的产品负责，提升功能、价值的可发现性。用发展的眼光做设计，充分考虑人、机两端的共同生长。\n\n * 价值连接：产品的增长依赖于用户的群体扩大和深度使用，而用户的成长又依赖于产品功能的壮大。设计者应建立系统设计思维，洞悉产品功能的价值，探索用户在不同场景下的需求，在价值和需求间建立连接。让产品价值被发现，帮助用户建立更有效、更高效的工作方式。\n * 人机共生：产品功能和用户需求的更多连接，让人机互动更加紧密，用户和系统共生。产品设计时，不应将用户和系统独立开来，应作为一个动态发展的共同体来思考，确保其足够的灵活、包容，充满生命力。\n\n> 上述内容摘录自Ant Design的「设计价值观」",normalizedContent:"阿里开源的ant design文档中，指出四点与众不同的价值观，觉得特别具有参考意义：\n\n\n# 自然\n\n数字世界的光速迭代使得产品日益复杂，而人类意识和注意力资源有限。面对这种设计矛盾，追求「自然」交互将是 ant design 持之以恒的方向。\n\n * 感知自然：认知心理学所述，约 80% 外界信息通过视觉通道获取。界面设计中最重要的视觉要素，包括布局、色彩、插画、图标等，应充分汲取自然界规律，从而降低用户认知成本，带来真实流畅的感受。在一些场景下，适时加入听觉、触觉等其它感知通道，能创造更丰富自然的产品体验。\n\n * 行为自然：在与系统的互动中，设计者应充分理解用户、系统角色、任务目标间的关系，场景化组织系统功能和服务。同时辅以行为分析、人工智能、传感器、元数据等策略，提供主动式服务，帮助用户决策、减少操作，从而节约用户脑力和体力，让人机交互行为更自然。\n\n> 想了解自然价值观的前世今生，请移步至专栏。\n\n\n# 确定性\n\n界面是用户与系统交互的媒介，是手段而非目的。在追求「自然」交互基础上，通过 ant design 创造的产品界面应是高确定性、低合作熵的状态。\n\n * 设计者确定：企业级产品都是分工合作的产物，参与者越多合作熵越高，这是一切设计工作低效、产品系统不易维护的来源。通过探索设计规律、模块化设计思路，来为设计者提供足够精简的设计规则、组件、模式等，赋能设计者、降低合作熵。\n   * 保持克制：能做，但想清楚了不做。设计者应当聚焦在最有价值产品功能打磨，并用尽可能少的设计元素将其表达。正如 antoine de st.exupery 所说：完美不在于无以复加，而在于无可删减，万事莫不如此。\n   * 面向对象的方法：探索设计规律，并将其抽象成「对象」，增强界面设计的灵活性和可维护性，同时也减少「设计者」的主观干扰，从而降低系统的不确定性。例如：色值换算、间距排版。\n   * 模块化设计：将复杂或者重复出现的局部封装成模块，提供有限接口与其他模块互动，最终全面减少系统的复杂度，进而增进可靠性以及可维护性。设计者可运用现有的组件/模板或者自行抽象可复用的组件/模板，节约无谓的设计且保持系统一致性，让「设计者」把创造力专注在最需要的地方。\n * 用户确定性：用户日常工作是通过诸多企业级产品的协同来完成的，除了考虑单一产品的设计一致性，更应当在跨产品、跨终端、跨系统间保持良好的确定性。一致的外观和交互，保持面向用户的熟悉感，能提升易学性，降低认知和操作成本，提升工作效率。\n\n\n# 意义感\n\n一个产品或功能被设计者创造出来不只是用户的需要，而更多是承载用户的某个工作使命。产品设计应充分站在工作视角，促成用户使命的达成；同时，在「自然」、「确定」之上，兼顾用户的人性需求，为工作过程创造富有意义感的人机交互。\n\n * **结果的意义：明确目标，即时反馈。**洞悉工作目标，根据使用流程拆解明确的子目标，让每个交互行为都围绕着主目标的达成；为每个行为，辅以恰当、即时的反馈，让用户对操作结果了然于胸。此外，可通过情感化设计，适度安抚用户负面情感，强化用户正面情感。\n * **过程的意义：挑战适中，全情投入。**调整不同场景下的工作难度，让功能适时适地触发，以匹配用户能力；如无必要，勿增实体，不分散用户注意力，让用户专注于任务达成，而非界面。让当下的工作既不过于简单，亦不过于复杂，挑战适中，并随着用户能力的成长提出更高的挑战，能让用户持续沉浸在工作的心流中，获得富有成就感的工作体验。\n\n\n# 生长性\n\n企业级产品功能的增长与用户系统角色的演变相生相伴。设计者应为自己创造的产品负责，提升功能、价值的可发现性。用发展的眼光做设计，充分考虑人、机两端的共同生长。\n\n * 价值连接：产品的增长依赖于用户的群体扩大和深度使用，而用户的成长又依赖于产品功能的壮大。设计者应建立系统设计思维，洞悉产品功能的价值，探索用户在不同场景下的需求，在价值和需求间建立连接。让产品价值被发现，帮助用户建立更有效、更高效的工作方式。\n * 人机共生：产品功能和用户需求的更多连接，让人机互动更加紧密，用户和系统共生。产品设计时，不应将用户和系统独立开来，应作为一个动态发展的共同体来思考，确保其足够的灵活、包容，充满生命力。\n\n> 上述内容摘录自ant design的「设计价值观」",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"设计的四大原则",frontmatter:{title:"设计的四大原则",date:"2023-01-31T09:48:21.000Z",permalink:"/pages/d20b3e/"},regularPath:"/40.%E4%BA%A7%E5%93%81&UI%E4%BA%A4%E4%BA%92/40.%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%8E%9F%E5%88%99.html",relativePath:"40.产品&UI交互/40.设计的四大原则.md",key:"v-ba1f1340",path:"/pages/d20b3e/",headers:[{level:2,title:"亲密性",slug:"亲密性",normalizedTitle:"亲密性",charIndex:52},{level:2,title:"对齐",slug:"对齐",normalizedTitle:"对齐",charIndex:80},{level:2,title:"对比",slug:"对比",normalizedTitle:"对比",charIndex:111},{level:2,title:"重复",slug:"重复",normalizedTitle:"重复",charIndex:149}],headersStr:"亲密性 对齐 对比 重复",content:'重要\n\n首先要记住，原则是可以打破的，前提是你知道为什么要打破。\n\n在设计领域有如下四大原则：\n\n * 亲密性：即相互关联，意思相近的内容应该放在一起。\n * 对齐：保证页面上的某两个元素中间总是围绕一条直线对齐。\n * 对比：有意识地增加不同等级元素中间的差异性，要么相同，要么完全不同。\n * 重复：分析元素等级后，选取相同等级的元素来重复。\n\n\n# 亲密性\n\n如果信息之间关联性越高，它们之间的距离就应该越接近，也越像一个视觉单元；反之，则它们的距离应该越远，也越像多个视觉单元。亲密性的根本目的是实现组织性，让用户对页面结构和信息层次一目了然。\n\n\n\n说明\n\n图A中如果你要找一瓶可乐，那是不是要从头到尾找一次？很浪费时间对不对？经过亲密性原则调整后，在图B你就可以很快找到饮料区，从中找到可乐。\n\n\n# 对齐\n\n正如「格式塔学派」中的连续律（Law of Community）所描述的，在知觉过程中人们往往倾向于知觉对象的直线继续称为直线，使曲线继续成为曲线。在界面设计中， 将元素进行对齐，既符合用户的认知特性，也能引导视觉流向，让用户更流畅地接收信息。\n\n\n\n说明\n\n图C这个排版是想说明你的信息是乱"拍"上去的吧，信息量再大一点整个页面就崩了。经过对齐调整后，图D马上简洁大气上档次了。\n\n\n# 对比\n\n对比是增加视觉效果最有效方法之一，同时也能在不同元素之间建立一种有组织的层次结构，让用户快速识别关键信息。\n\n说明\n\n图E这个排版是简洁大气，但是略显平淡，没有层次。看下图F，先不论这样的调整是否合适，但是是不是马上就刺激吸引眼球了，更有主次了。\n\n\n# 重复\n\n相同的元素在整个界面中不断重复，不仅可以有效降低用户的学习成本，也可以帮助识别出这些元素之间的关联性。\n\n说明\n\n上面个板块，从单个页面来说，"解释说明"部分的字体、大小都体现出了重复原则，保证了单个页面的稳定性。\n\n从多个页面来说，转场也属于同一级别，所以他们应该具有重复的特征，上述这三幅例子，除了颜色之外，其他特征都是相同的，而颜色的不同让PPT更有味道。',normalizedContent:'重要\n\n首先要记住，原则是可以打破的，前提是你知道为什么要打破。\n\n在设计领域有如下四大原则：\n\n * 亲密性：即相互关联，意思相近的内容应该放在一起。\n * 对齐：保证页面上的某两个元素中间总是围绕一条直线对齐。\n * 对比：有意识地增加不同等级元素中间的差异性，要么相同，要么完全不同。\n * 重复：分析元素等级后，选取相同等级的元素来重复。\n\n\n# 亲密性\n\n如果信息之间关联性越高，它们之间的距离就应该越接近，也越像一个视觉单元；反之，则它们的距离应该越远，也越像多个视觉单元。亲密性的根本目的是实现组织性，让用户对页面结构和信息层次一目了然。\n\n\n\n说明\n\n图a中如果你要找一瓶可乐，那是不是要从头到尾找一次？很浪费时间对不对？经过亲密性原则调整后，在图b你就可以很快找到饮料区，从中找到可乐。\n\n\n# 对齐\n\n正如「格式塔学派」中的连续律（law of community）所描述的，在知觉过程中人们往往倾向于知觉对象的直线继续称为直线，使曲线继续成为曲线。在界面设计中， 将元素进行对齐，既符合用户的认知特性，也能引导视觉流向，让用户更流畅地接收信息。\n\n\n\n说明\n\n图c这个排版是想说明你的信息是乱"拍"上去的吧，信息量再大一点整个页面就崩了。经过对齐调整后，图d马上简洁大气上档次了。\n\n\n# 对比\n\n对比是增加视觉效果最有效方法之一，同时也能在不同元素之间建立一种有组织的层次结构，让用户快速识别关键信息。\n\n说明\n\n图e这个排版是简洁大气，但是略显平淡，没有层次。看下图f，先不论这样的调整是否合适，但是是不是马上就刺激吸引眼球了，更有主次了。\n\n\n# 重复\n\n相同的元素在整个界面中不断重复，不仅可以有效降低用户的学习成本，也可以帮助识别出这些元素之间的关联性。\n\n说明\n\n上面个板块，从单个页面来说，"解释说明"部分的字体、大小都体现出了重复原则，保证了单个页面的稳定性。\n\n从多个页面来说，转场也属于同一级别，所以他们应该具有重复的特征，上述这三幅例子，除了颜色之外，其他特征都是相同的，而颜色的不同让ppt更有味道。',charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"设计原则 Element",frontmatter:{title:"设计原则 Element",date:"2023-01-31T09:48:09.000Z",permalink:"/pages/28fad7/"},regularPath:"/40.%E4%BA%A7%E5%93%81&UI%E4%BA%A4%E4%BA%92/30.%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%20Element.html",relativePath:"40.产品&UI交互/30.设计原则 Element.md",key:"v-1dd4318e",path:"/pages/28fad7/",headers:[{level:2,title:"一致性 Consistency",slug:"一致性-consistency",normalizedTitle:"一致性 consistency",charIndex:2},{level:2,title:"反馈 Feedback",slug:"反馈-feedback",normalizedTitle:"反馈 feedback",charIndex:111},{level:2,title:"效率 Efficiency",slug:"效率-efficiency",normalizedTitle:"效率 efficiency",charIndex:198},{level:2,title:"可控 Controllability",slug:"可控-controllability",normalizedTitle:"可控 controllability",charIndex:315}],headersStr:"一致性 Consistency 反馈 Feedback 效率 Efficiency 可控 Controllability",content:"# 一致性 Consistency\n\n * 与现实生活一致： 与现实生活的流程、逻辑保持一致，遵循用户习惯的语言和概念；\n * 在界面中一致： 所有的元素和结构保持一致，比如：设计样式、图标和文本、元素的位置等。\n\n\n# 反馈 Feedback\n\n * 控制反馈： 通过界面样式和交互动效让用户可以清晰的感知自己的操作；\n * 页面反馈： 操作后，通过页面元素的变化清晰地展现当前状态。\n\n\n# 效率 Efficiency\n\n * 简化流程： 设计简洁直观的操作流程；\n * 清晰明确： 语言表达清晰且表意明确，让用户快速理解进而作出决策；\n * 帮助用户识别： 界面简单直白，让用户快速识别而非回忆，减少用户记忆负担。\n\n\n# 可控 Controllability\n\n * 用户决策： 根据场景可给予用户操作建议或安全提示，但不能代替用户进行决策；\n * 结果可控： 用户可以自由的进行操作，包括撤销、回退和终止当前操作等。",normalizedContent:"# 一致性 consistency\n\n * 与现实生活一致： 与现实生活的流程、逻辑保持一致，遵循用户习惯的语言和概念；\n * 在界面中一致： 所有的元素和结构保持一致，比如：设计样式、图标和文本、元素的位置等。\n\n\n# 反馈 feedback\n\n * 控制反馈： 通过界面样式和交互动效让用户可以清晰的感知自己的操作；\n * 页面反馈： 操作后，通过页面元素的变化清晰地展现当前状态。\n\n\n# 效率 efficiency\n\n * 简化流程： 设计简洁直观的操作流程；\n * 清晰明确： 语言表达清晰且表意明确，让用户快速理解进而作出决策；\n * 帮助用户识别： 界面简单直白，让用户快速识别而非回忆，减少用户记忆负担。\n\n\n# 可控 controllability\n\n * 用户决策： 根据场景可给予用户操作建议或安全提示，但不能代替用户进行决策；\n * 结果可控： 用户可以自由的进行操作，包括撤销、回退和终止当前操作等。",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"色彩的秘密",frontmatter:{title:"色彩的秘密",date:"2023-01-31T09:48:32.000Z",permalink:"/pages/2781f1/"},regularPath:"/40.%E4%BA%A7%E5%93%81&UI%E4%BA%A4%E4%BA%92/50.%E8%89%B2%E5%BD%A9%E7%9A%84%E7%A7%98%E5%AF%86.html",relativePath:"40.产品&UI交互/50.色彩的秘密.md",key:"v-57237f40",path:"/pages/2781f1/",headers:[{level:3,title:"1. 这可能是你听过的最好的色彩课，色彩大师速成手册。",slug:"_1-这可能是你听过的最好的色彩课-色彩大师速成手册。",normalizedTitle:"1. 这可能是你听过的最好的色彩课，色彩大师速成手册。",charIndex:20},{level:2,title:"2. 史上最最最最最简单的PPT配色法！没有之一！",slug:"_2-史上最最最最最简单的ppt配色法-没有之一",normalizedTitle:"2. 史上最最最最最简单的ppt配色法！没有之一！",charIndex:55},{level:2,title:"3. 零基础UI设计师配色详解-颜色搭配技巧",slug:"_3-零基础ui设计师配色详解-颜色搭配技巧",normalizedTitle:"3. 零基础ui设计师配色详解-颜色搭配技巧",charIndex:88}],headersStr:"1. 这可能是你听过的最好的色彩课，色彩大师速成手册。 2. 史上最最最最最简单的PPT配色法！没有之一！ 3. 零基础UI设计师配色详解-颜色搭配技巧",content:"> 选色的原则：鲜艳而不刺眼。\n\n\n# 1. 这可能是你听过的最好的色彩课，色彩大师速成手册。\n\n\n\n\n\n# 2. 史上最最最最最简单的PPT配色法！没有之一！\n\n\n\n\n\n# 3. 零基础UI设计师配色详解-颜色搭配技巧\n\n\n",normalizedContent:"> 选色的原则：鲜艳而不刺眼。\n\n\n# 1. 这可能是你听过的最好的色彩课，色彩大师速成手册。\n\n\n\n\n\n# 2. 史上最最最最最简单的ppt配色法！没有之一！\n\n\n\n\n\n# 3. 零基础ui设计师配色详解-颜色搭配技巧\n\n\n",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"原型图工具",frontmatter:{title:"原型图工具",date:"2023-01-31T09:48:50.000Z",permalink:"/pages/603711/"},regularPath:"/40.%E4%BA%A7%E5%93%81&UI%E4%BA%A4%E4%BA%92/60.%E5%8E%9F%E5%9E%8B%E5%9B%BE%E5%B7%A5%E5%85%B7.html",relativePath:"40.产品&UI交互/60.原型图工具.md",key:"v-02e2bf18",path:"/pages/603711/",headers:[{level:2,title:"常用工具",slug:"常用工具",normalizedTitle:"常用工具",charIndex:2},{level:3,title:"Figma",slug:"figma",normalizedTitle:"figma",charIndex:11},{level:3,title:"墨刀",slug:"墨刀",normalizedTitle:"墨刀",charIndex:151},{level:3,title:"Axure",slug:"axure",normalizedTitle:"axure",charIndex:235},{level:3,title:"即时设计",slug:"即时设计",normalizedTitle:"即时设计",charIndex:321}],headersStr:"常用工具 Figma 墨刀 Axure 即时设计",content:"# 常用工具\n\n\n# Figma\n\nFigma 是一个向量图形编辑器和原型设计工具，主要基于网页进行工作。Figma 的功能集着重于用户界面设计及用户体验设计，并强调即时写作。\n\n公司内部Figma使用说明文案。\n\n目前，Figma的受众 UI 设计师使用的比较多，当然也可以来画部分原型图。\n\n\n# 墨刀\n\n墨刀是一款专业、可靠、简洁、易懂的在线产品原型工具与产品设计团队写作平台，使用墨刀原型设计与写作工具，简单拖拽即可完成页面交互跳转，并进行团队写作等。\n\n\n# Axure\n\nAxure RP是一款用于网站和应用程序原型和规范的软件，支持提供窗口小部件的拖放放置，大小调整和格式设置。\n\n平台组整理的Axure使用说明文档。\n\n\n# 即时设计\n\n即时设计高效协作云端 UI 设计工具，从产品原型、页面交互、设计创作到开发标注切图、交付上线、一站式完成研发工作流程。\n\n即时设计 与 Figma 功能对比：\n\n",normalizedContent:"# 常用工具\n\n\n# figma\n\nfigma 是一个向量图形编辑器和原型设计工具，主要基于网页进行工作。figma 的功能集着重于用户界面设计及用户体验设计，并强调即时写作。\n\n公司内部figma使用说明文案。\n\n目前，figma的受众 ui 设计师使用的比较多，当然也可以来画部分原型图。\n\n\n# 墨刀\n\n墨刀是一款专业、可靠、简洁、易懂的在线产品原型工具与产品设计团队写作平台，使用墨刀原型设计与写作工具，简单拖拽即可完成页面交互跳转，并进行团队写作等。\n\n\n# axure\n\naxure rp是一款用于网站和应用程序原型和规范的软件，支持提供窗口小部件的拖放放置，大小调整和格式设置。\n\n平台组整理的axure使用说明文档。\n\n\n# 即时设计\n\n即时设计高效协作云端 ui 设计工具，从产品原型、页面交互、设计创作到开发标注切图、交付上线、一站式完成研发工作流程。\n\n即时设计 与 figma 功能对比：\n\n",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:21:38.000Z",permalink:"/pages/7ba30c/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/10.%E6%A6%82%E8%A6%81.html",relativePath:"50.团队管理/10.概要.md",key:"v-a869ad28",path:"/pages/7ba30c/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"概要",frontmatter:{title:"概要",date:"2023-01-28T17:18:42.000Z",permalink:"/pages/a6ba54/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/100.%E8%A7%84%E8%8C%83&%E6%A8%A1%E6%9D%BF/01.%E6%A6%82%E8%A6%81.html",relativePath:"50.团队管理/100.规范&模板/01.概要.md",key:"v-5d829516",path:"/pages/a6ba54/",headersStr:null,content:"规范手册的作用：\n\n * 规范不是为了约束和禁锢大家的创造力，而是为了帮助大家能够在正确的道路上，尽可能的避免踩坑和跑偏。\n * 规范可以让我们无论单枪匹马还是与众人同行的时候都能得心应手。\n * 规范可以让我们在面对日益变态的需求和做代码接盘侠的时候，更优雅从容。\n * 规则并不是完美的，通过约束和禁止在特定情况下的特性，可能会对代码实现造成影响。\n * 但是我们制定规则的目的：为了大多数程序员小伙伴可以得到更多的好处，如果在团队实际运作中认为某个规则无法遵循或有更好的做法，希望大家可以共同改进该规范。",normalizedContent:"规范手册的作用：\n\n * 规范不是为了约束和禁锢大家的创造力，而是为了帮助大家能够在正确的道路上，尽可能的避免踩坑和跑偏。\n * 规范可以让我们无论单枪匹马还是与众人同行的时候都能得心应手。\n * 规范可以让我们在面对日益变态的需求和做代码接盘侠的时候，更优雅从容。\n * 规则并不是完美的，通过约束和禁止在特定情况下的特性，可能会对代码实现造成影响。\n * 但是我们制定规则的目的：为了大多数程序员小伙伴可以得到更多的好处，如果在团队实际运作中认为某个规则无法遵循或有更好的做法，希望大家可以共同改进该规范。",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"设计资源",frontmatter:{title:"设计资源",date:"2023-01-31T09:49:05.000Z",permalink:"/pages/438b60/"},regularPath:"/40.%E4%BA%A7%E5%93%81&UI%E4%BA%A4%E4%BA%92/70.%E8%AE%BE%E8%AE%A1%E8%B5%84%E6%BA%90.html",relativePath:"40.产品&UI交互/70.设计资源.md",key:"v-8a321d32",path:"/pages/438b60/",headers:[{level:2,title:"1. removeBg",slug:"_1-removebg",normalizedTitle:"1. removebg",charIndex:2},{level:2,title:"2. pixabay",slug:"_2-pixabay",normalizedTitle:"2. pixabay",charIndex:105},{level:2,title:"3. Pexels",slug:"_3-pexels",normalizedTitle:"3. pexels",charIndex:174},{level:2,title:"4. easyicon",slug:"_4-easyicon",normalizedTitle:"4. easyicon",charIndex:225},{level:2,title:"5. iconninja",slug:"_5-iconninja",normalizedTitle:"5. iconninja",charIndex:282},{level:2,title:"6. webgradients",slug:"_6-webgradients",normalizedTitle:"6. webgradients",charIndex:327},{level:2,title:"7. uigradients",slug:"_7-uigradients",normalizedTitle:"7. uigradients",charIndex:420}],headersStr:"1. removeBg 2. pixabay 3. Pexels 4. easyicon 5. iconninja 6. webgradients 7. uigradients",content:"# 1. removeBg\n\nRemoveBg是一款在线抠图软件，轻点一下，即可在 5 秒内 100% 自动取出背景，凭借 remove.bg 智能的 AI，你可以省去 大量的编辑时间，收货更多乐趣！\n\n\n# 2. pixabay\n\nPixabay 免费正版高清图片素材库，拥有超过2.6百万优质图片和视频素材，让你轻松应对各种设计场景。\n\n\n# 3. Pexels\n\nPexels 才华横溢的摄影作者在这里分享免费最精彩的素材图片和视频。\n\n\n# 4. easyicon\n\neasyicon 另一款免费的 icon 图标网址，和阿里开源的icon类似。\n\n\n# 5. iconninja\n\niconninja 免费的英文 icon 图标网址。\n\n\n# 6. webgradients\n\nwebgradients 是 180 种线性渐变的免费集合，您可以将其用作网站任何部分的内容背景。 轻松复制 CSS3 跨浏览器代码并立即使用\n\n\n# 7. uigradients\n\nuigradients UI 渐变色。",normalizedContent:"# 1. removebg\n\nremovebg是一款在线抠图软件，轻点一下，即可在 5 秒内 100% 自动取出背景，凭借 remove.bg 智能的 ai，你可以省去 大量的编辑时间，收货更多乐趣！\n\n\n# 2. pixabay\n\npixabay 免费正版高清图片素材库，拥有超过2.6百万优质图片和视频素材，让你轻松应对各种设计场景。\n\n\n# 3. pexels\n\npexels 才华横溢的摄影作者在这里分享免费最精彩的素材图片和视频。\n\n\n# 4. easyicon\n\neasyicon 另一款免费的 icon 图标网址，和阿里开源的icon类似。\n\n\n# 5. iconninja\n\niconninja 免费的英文 icon 图标网址。\n\n\n# 6. webgradients\n\nwebgradients 是 180 种线性渐变的免费集合，您可以将其用作网站任何部分的内容背景。 轻松复制 css3 跨浏览器代码并立即使用\n\n\n# 7. uigradients\n\nuigradients ui 渐变色。",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"服务端上线 CheckList 模板",frontmatter:{title:"服务端上线 CheckList 模板",date:"2023-01-28T16:28:38.000Z",permalink:"/pages/8acb94/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/100.%E8%A7%84%E8%8C%83&%E6%A8%A1%E6%9D%BF/10.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%91%E5%B8%83%20CheckList%20%E6%A8%A1%E6%9D%BF.html",relativePath:"50.团队管理/100.规范&模板/10.服务端发布 CheckList 模板.md",key:"v-f4693658",path:"/pages/8acb94/",headers:[{level:2,title:"1. 上线功能点及涉及服务",slug:"_1-上线功能点及涉及服务",normalizedTitle:"1. 上线功能点及涉及服务",charIndex:851},{level:3,title:"1.1 新功能点及改动点",slug:"_1-1-新功能点及改动点",normalizedTitle:"1.1 新功能点及改动点",charIndex:869},{level:3,title:"1.2 涉及服务",slug:"_1-2-涉及服务",normalizedTitle:"1.2 涉及服务",charIndex:960},{level:3,title:"1.3 注意事项",slug:"_1-3-注意事项",normalizedTitle:"1.3 注意事项",charIndex:1119},{level:2,title:"2. 上线前预操作 发布前半天",slug:"_2-上线前预操作-发布前半天",normalizedTitle:"2. 上线前预操作 发布前半天",charIndex:1132},{level:3,title:"2.1 配置相关",slug:"_2-1-配置相关",normalizedTitle:"2.1 配置相关",charIndex:1152},{level:3,title:"2.2 资源申请相关",slug:"_2-2-资源申请相关",normalizedTitle:"2.2 资源申请相关",charIndex:1548},{level:3,title:"2.3 数据库操作相关",slug:"_2-3-数据库操作相关",normalizedTitle:"2.3 数据库操作相关",charIndex:1757},{level:2,title:"3. 正式发布流程",slug:"_3-正式发布流程",normalizedTitle:"3. 正式发布流程",charIndex:2007},{level:3,title:"3.1 应用程序发布",slug:"_3-1-应用程序发布",normalizedTitle:"3.1 应用程序发布",charIndex:2021},{level:3,title:"3.2 网关层配置发布",slug:"_3-2-网关层配置发布",normalizedTitle:"3.2 网关层配置发布",charIndex:2476},{level:2,title:"4. 应用发布后",slug:"_4-应用发布后",normalizedTitle:"4. 应用发布后",charIndex:2495},{level:3,title:"4.1 功能验证（重要）",slug:"_4-1-功能验证-重要",normalizedTitle:"4.1 功能验证（重要）",charIndex:2582},{level:3,title:"4.2 日志监控告警",slug:"_4-2-日志监控告警",normalizedTitle:"4.2 日志监控告警",charIndex:2770},{level:2,title:"5. 风险点",slug:"_5-风险点",normalizedTitle:"5. 风险点",charIndex:2811},{level:2,title:"6. 回滚操作",slug:"_6-回滚操作",normalizedTitle:"6. 回滚操作",charIndex:2825},{level:2,title:"7. 其他相关注意事项",slug:"_7-其他相关注意事项",normalizedTitle:"7. 其他相关注意事项",charIndex:2854},{level:2,title:"8. 附件",slug:"_8-附件",normalizedTitle:"8. 附件",charIndex:2873}],headersStr:"1. 上线功能点及涉及服务 1.1 新功能点及改动点 1.2 涉及服务 1.3 注意事项 2. 上线前预操作 发布前半天 2.1 配置相关 2.2 资源申请相关 2.3 数据库操作相关 3. 正式发布流程 3.1 应用程序发布 3.2 网关层配置发布 4. 应用发布后 4.1 功能验证（重要） 4.2 日志监控告警 5. 风险点 6. 回滚操作 7. 其他相关注意事项 8. 附件",content:"上线 CheckList 是「检查清单」，而不是 To Do List。CheckList 必须尽可能保证能成功顺利运行，因此需要：\n\n原则\n\n * 上线 CheckList 必须至少在线下环境按照清单执行一遍，需要确保 CheckList 在线上 99.9% 能够执行成功。\n * 与大多数文档类似，CheckList 也遵循总分总原则，文档尽量清晰易懂，对于内容特别多的部分可以通过附件来添加。\n * 每一项操作，必须责任到具体的操作人，当操作人执行完成后，CheckList 负责人必须进行 Check 是否成功执行，只有成功执行了，方可进行下一步。\n * CheckList 需要开发人员至少在开发的中后期阶段，进行预想上线后的操作步骤，并进行注意事项记录。\n * 由于当开始应用发布后，可能会因为一些前置操作没做导致服务不可用，因此，需要提前准备好，哪些操作可以进行前置操作。\n * 应用发布完成后，必须对所开发的功能进行验证（不存在说线上不可验证的功能，可以用一些冗余代码来进行尽可能的验证）。\n * CheckList 的所有项要遵循从上到下的时间线依次操作，即依次按照编写的文档操作，不可跳过步骤。\n * CheckList 需要给出系统可能的风险点，倒逼开发者进行稳定性思考。\n * 每次的发布一定要认真想好是否可以回滚，如果不能回滚，出问题了，该如何操作。\n\n这里给出一个服务端上线 CheckList 的样例模板，大家可以根据需要适当增加、修改以及删除。\n\n\n# Demo V1.0 上线 CheckList\n\n项目&版本       团队成员    CHECKLIST 主导人   发布时间               预计发布时长   影响范围              创建时间\nDemo v1.0   李四、小明   李四              2023-01-29 10:00   10min    发布期间会有部分用户超时不可用   2023-01-29\n\n\n# 1. 上线功能点及涉及服务\n\n\n# 1.1 新功能点及改动点\n\n本次版本发布有新功能以及旧版功能的优化，具体有： 小明\n\n * 增加用户画像模块；\n * 修改用户权限配置的bug;\n * 删除评价中冗余代码；\n\n\n# 1.2 涉及服务\n\n本次版本发布涉及较多服务，具体有： 李四\n\n 1. Demo A端服务 admin-demo\n 2. Demo 前端服务 demo-ui\n 3. Demo 对外服务 demo-service\n 4. Demo 监控服务 demo-apm\n\n> 注意：服务的发布顺序依次从上到下，不可跳步。\n\n\n# 1.3 注意事项\n\n\n# 2. 上线前预操作 发布前半天\n\n\n# 2.1 配置相关\n\n1) Apollo 配置 @张三\n\n增加如下配置：\n\ndemo.search.switch=false\ndemo.search.test=good\n\n\n删除如下配置：\n\ndemo.search.t=55\n\n> check：在测试环境配置完成后，通过 actuator /properties 验证，正式环境配置后，人工校验，当项目发布成功后，需再次通过 actuator /properties 校验。 @李四\n\n2）application.properties 配置 @张三\n\n增加如下配置：\n\ndemo.spring.actuator=health\n\n\n> check：在测试环境配置完成后，通过 actuator /properties 验证，正式环境配置后，人工校验，当项目发布成功后，需再次通过 actuator /properties 校验。 @李四\n\n\n# 2.2 资源申请相关\n\n1）域名申请 @王五\n\n运维域名管理平台，申请域名：http://api.demo.com\n\n> check: ping 该域名 http://api.demo.com，域名解析可能需要一到两天，因此，需要提前一到两天申请。 @李四\n\n2) 线上机器申请 @王五\n\n运维机器管理平台，申请 3 台 4 C 16 G 的机器。\n\n> check：运维管理平台上查看机器是否存在。 @李四\n\n\n# 2.3 数据库操作相关\n\n1）MySQL 操作 @小七\n\n详细见：附件一。\n\n> check：通过 DBA 平台，查看 MySQL 表 t_test 是否成功建立，表 t_middle 的字段 name 从 char（10） 是否改为 varchar（20）。@李四\n\n2）ElasticSearch 操作 @小花\n\n详细见：附件二\n\n> check：在 Kibana 平台，执行 GET demo/_mapping 查看索引的字段是否成功创建。@李四\n\n3）Redis 操作 @小花\n\n无\n\n\n# 3. 正式发布流程\n\n\n# 3.1 应用程序发布\n\n * 步骤一：发布 admin-demo @李四\n\n> check：查看 admin-demo 的日志是否报错，执行接口/demo/user/1222 接口，是否成功返回 success，否则检查 MySQL 的数据是操作有问题。 @李四\n\n * 步骤二：发布 demo-ui @李四\n\n> check：利用管理员账号 admin/admin 查看是否新增用户权限页面、用户画像模块，并添加一个用例，成功添加后，执行MySQL 语句，Delete table test where a = 122. @李四\n\n * 步骤三：发布 demo-service @李四\n\n> check: 查看项目日志是否有 warn 以及日志，调用接口 Dubbo demo.test.service.api.search，是否返回 success，否则查看代码是否有问题。\n\n * 步骤四：发布 demo-apm @李四\n\n> check：查看项目日志，登录 APM 后台，查看是否有指标上报。\n\n\n# 3.2 网关层配置发布\n\n无\n\n\n# 4. 应用发布后\n\n在应用发布的过程中，我们已经依次保证单个服务以及自上而下的服务的基本流程的正确，但是仍然不能保证所有服务的功能正常，因此需要做进一步的功能验证。\n\n\n# 4.1 功能验证（重要）\n\n功能验证是应用发布后至关重要的一步，严禁发布后的功能没有验证。\n\n验证过程需要让项目组的人员一起参与，包括：测试、前端、后端、产品，当功能验证都通过后，方可交付给一线业务。\n\n1）本次功能验证\n\n 1. 新增用户权限页面；\n 2. 编辑用户权限页面；\n 3. 删除用户权限页面\n\n2）重要功能回归\n\n 1. 用户统计模块的功能点是否正常。\n\n\n# 4.2 日志监控告警\n\n1）治理日志\n\n2）治理监控指标\n\n3）添加告警\n\n\n# 5. 风险点\n\n无\n\n\n# 6. 回滚操作\n\n无需回滚，本次为首次功能上线。\n\n\n# 7. 其他相关注意事项\n\n无\n\n\n# 8. 附件\n\n * 附件1：v1.0.0 MySQL\n * 附件2：v1.0.0 Elasticsearch",normalizedContent:"上线 checklist 是「检查清单」，而不是 to do list。checklist 必须尽可能保证能成功顺利运行，因此需要：\n\n原则\n\n * 上线 checklist 必须至少在线下环境按照清单执行一遍，需要确保 checklist 在线上 99.9% 能够执行成功。\n * 与大多数文档类似，checklist 也遵循总分总原则，文档尽量清晰易懂，对于内容特别多的部分可以通过附件来添加。\n * 每一项操作，必须责任到具体的操作人，当操作人执行完成后，checklist 负责人必须进行 check 是否成功执行，只有成功执行了，方可进行下一步。\n * checklist 需要开发人员至少在开发的中后期阶段，进行预想上线后的操作步骤，并进行注意事项记录。\n * 由于当开始应用发布后，可能会因为一些前置操作没做导致服务不可用，因此，需要提前准备好，哪些操作可以进行前置操作。\n * 应用发布完成后，必须对所开发的功能进行验证（不存在说线上不可验证的功能，可以用一些冗余代码来进行尽可能的验证）。\n * checklist 的所有项要遵循从上到下的时间线依次操作，即依次按照编写的文档操作，不可跳过步骤。\n * checklist 需要给出系统可能的风险点，倒逼开发者进行稳定性思考。\n * 每次的发布一定要认真想好是否可以回滚，如果不能回滚，出问题了，该如何操作。\n\n这里给出一个服务端上线 checklist 的样例模板，大家可以根据需要适当增加、修改以及删除。\n\n\n# demo v1.0 上线 checklist\n\n项目&版本       团队成员    checklist 主导人   发布时间               预计发布时长   影响范围              创建时间\ndemo v1.0   李四、小明   李四              2023-01-29 10:00   10min    发布期间会有部分用户超时不可用   2023-01-29\n\n\n# 1. 上线功能点及涉及服务\n\n\n# 1.1 新功能点及改动点\n\n本次版本发布有新功能以及旧版功能的优化，具体有： 小明\n\n * 增加用户画像模块；\n * 修改用户权限配置的bug;\n * 删除评价中冗余代码；\n\n\n# 1.2 涉及服务\n\n本次版本发布涉及较多服务，具体有： 李四\n\n 1. demo a端服务 admin-demo\n 2. demo 前端服务 demo-ui\n 3. demo 对外服务 demo-service\n 4. demo 监控服务 demo-apm\n\n> 注意：服务的发布顺序依次从上到下，不可跳步。\n\n\n# 1.3 注意事项\n\n\n# 2. 上线前预操作 发布前半天\n\n\n# 2.1 配置相关\n\n1) apollo 配置 @张三\n\n增加如下配置：\n\ndemo.search.switch=false\ndemo.search.test=good\n\n\n删除如下配置：\n\ndemo.search.t=55\n\n> check：在测试环境配置完成后，通过 actuator /properties 验证，正式环境配置后，人工校验，当项目发布成功后，需再次通过 actuator /properties 校验。 @李四\n\n2）application.properties 配置 @张三\n\n增加如下配置：\n\ndemo.spring.actuator=health\n\n\n> check：在测试环境配置完成后，通过 actuator /properties 验证，正式环境配置后，人工校验，当项目发布成功后，需再次通过 actuator /properties 校验。 @李四\n\n\n# 2.2 资源申请相关\n\n1）域名申请 @王五\n\n运维域名管理平台，申请域名：http://api.demo.com\n\n> check: ping 该域名 http://api.demo.com，域名解析可能需要一到两天，因此，需要提前一到两天申请。 @李四\n\n2) 线上机器申请 @王五\n\n运维机器管理平台，申请 3 台 4 c 16 g 的机器。\n\n> check：运维管理平台上查看机器是否存在。 @李四\n\n\n# 2.3 数据库操作相关\n\n1）mysql 操作 @小七\n\n详细见：附件一。\n\n> check：通过 dba 平台，查看 mysql 表 t_test 是否成功建立，表 t_middle 的字段 name 从 char（10） 是否改为 varchar（20）。@李四\n\n2）elasticsearch 操作 @小花\n\n详细见：附件二\n\n> check：在 kibana 平台，执行 get demo/_mapping 查看索引的字段是否成功创建。@李四\n\n3）redis 操作 @小花\n\n无\n\n\n# 3. 正式发布流程\n\n\n# 3.1 应用程序发布\n\n * 步骤一：发布 admin-demo @李四\n\n> check：查看 admin-demo 的日志是否报错，执行接口/demo/user/1222 接口，是否成功返回 success，否则检查 mysql 的数据是操作有问题。 @李四\n\n * 步骤二：发布 demo-ui @李四\n\n> check：利用管理员账号 admin/admin 查看是否新增用户权限页面、用户画像模块，并添加一个用例，成功添加后，执行mysql 语句，delete table test where a = 122. @李四\n\n * 步骤三：发布 demo-service @李四\n\n> check: 查看项目日志是否有 warn 以及日志，调用接口 dubbo demo.test.service.api.search，是否返回 success，否则查看代码是否有问题。\n\n * 步骤四：发布 demo-apm @李四\n\n> check：查看项目日志，登录 apm 后台，查看是否有指标上报。\n\n\n# 3.2 网关层配置发布\n\n无\n\n\n# 4. 应用发布后\n\n在应用发布的过程中，我们已经依次保证单个服务以及自上而下的服务的基本流程的正确，但是仍然不能保证所有服务的功能正常，因此需要做进一步的功能验证。\n\n\n# 4.1 功能验证（重要）\n\n功能验证是应用发布后至关重要的一步，严禁发布后的功能没有验证。\n\n验证过程需要让项目组的人员一起参与，包括：测试、前端、后端、产品，当功能验证都通过后，方可交付给一线业务。\n\n1）本次功能验证\n\n 1. 新增用户权限页面；\n 2. 编辑用户权限页面；\n 3. 删除用户权限页面\n\n2）重要功能回归\n\n 1. 用户统计模块的功能点是否正常。\n\n\n# 4.2 日志监控告警\n\n1）治理日志\n\n2）治理监控指标\n\n3）添加告警\n\n\n# 5. 风险点\n\n无\n\n\n# 6. 回滚操作\n\n无需回滚，本次为首次功能上线。\n\n\n# 7. 其他相关注意事项\n\n无\n\n\n# 8. 附件\n\n * 附件1：v1.0.0 mysql\n * 附件2：v1.0.0 elasticsearch",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"Case Study 模板",frontmatter:{title:"Case Study 模板",date:"2023-01-29T16:41:31.000Z",permalink:"/pages/814a15/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/100.%E8%A7%84%E8%8C%83&%E6%A8%A1%E6%9D%BF/30.Case%20Study%20%E6%A8%A1%E6%9D%BF.html",relativePath:"50.团队管理/100.规范&模板/30.Case Study 模板.md",key:"v-6bb3d765",path:"/pages/814a15/",headers:[{level:2,title:"1. 故障级别及责任人",slug:"_1-故障级别及责任人",normalizedTitle:"1. 故障级别及责任人",charIndex:38},{level:2,title:"2. 详细描述（必填）",slug:"_2-详细描述-必填",normalizedTitle:"2. 详细描述（必填）",charIndex:161},{level:3,title:"2.1 问题现场录屏/截图【必填】",slug:"_2-1-问题现场录屏-截图【必填】",normalizedTitle:"2.1 问题现场录屏/截图【必填】",charIndex:249},{level:3,title:"2.2 问题发生概率【必填】",slug:"_2-2-问题发生概率【必填】",normalizedTitle:"2.2 问题发生概率【必填】",charIndex:271},{level:2,title:"3. 发生过程",slug:"_3-发生过程",normalizedTitle:"3. 发生过程",charIndex:340},{level:2,title:"4. 原因分析（必填）",slug:"_4-原因分析-必填",normalizedTitle:"4. 原因分析（必填）",charIndex:550},{level:2,title:"5. 解决方案",slug:"_5-解决方案",normalizedTitle:"5. 解决方案",charIndex:579},{level:2,title:"6. 影响范围（必填）",slug:"_6-影响范围-必填",normalizedTitle:"6. 影响范围（必填）",charIndex:681},{level:2,title:"7. 关联需求",slug:"_7-关联需求",normalizedTitle:"7. 关联需求",charIndex:787},{level:2,title:"8. 反思总结（必填）",slug:"_8-反思总结-必填",normalizedTitle:"8. 反思总结（必填）",charIndex:840}],headersStr:"1. 故障级别及责任人 2. 详细描述（必填） 2.1 问题现场录屏/截图【必填】 2.2 问题发生概率【必填】 3. 发生过程 4. 原因分析（必填） 5. 解决方案 6. 影响范围（必填） 7. 关联需求 8. 反思总结（必填）",content:"这里给出 「Case Study：故障复盘」模板（参考飞书的模板）\n\n\n# 1. 故障级别及责任人\n\n> 故障级别分为：严重、警告、一般，具体不同项目以及影响范围定级略有不同，需要跟业务部门以及相关上级领导一起确认事故级别。\n\n故障级别   主责任人      次责任人\n警告     @张三、@李四   @王五\n\n\n# 2. 详细描述（必填）\n\n> 详细的 bug 描述，包括可以复现的环境准备（比如测试包、有问题的 commit、现场录屏/截图、coredump 文件、监控报表等等）\n\n\n# 2.1 问题现场录屏/截图【必填】\n\n\n# 2.2 问题发生概率【必填】\n\n>  * 必现 - 描述必现路径/场景\n>  * 概率复现 - 出现概率 + 描述偶现路径/场景\n\n\n# 3. 发生过程\n\n> 问题发生的时间线及行为\n\n时间                 行为\n2022/03/01 10:05   收到首例用户反馈\n2022/03/01 10:06   值班研发开始调研，并同步相关成员\n2022/03/01 10:07   问题初步定位\n2022/03/01 10:09   问题修复\n2022/03/01 10:10   上线\n2022/03/01 10:11   故障解除\n\n\n# 4. 原因分析（必填）\n\n> 定位过程及问题原因\n\n\n# 5. 解决方案\n\n> 方案策略及代码修改截图/commit等 可根据具体问题包含：不同版本的修复策略，发版分支是什么处理方案，主干开发分支是什么方案；推荐分级处理，保障发版分支的修复影响最小化。\n\n\n# 6. 影响范围（必填）\n\n> 客户端问题：引入版本，影响版本，影响用户人数，受影响的场景，发现渠道等。 服务端问题：设计××接口/服务，影响××端××版本，影响用户人数XX人，受影响的功能，发现渠道等。\n\n\n# 7. 关联需求\n\n> 有关联需求的填写：需求名称或者附上需求链接； 无明确需求根据实际可不填写。\n\n\n# 8. 反思总结（必填）\n\n> 改进与 Todo，明确真正有借鉴意义、会落实的措施。",normalizedContent:"这里给出 「case study：故障复盘」模板（参考飞书的模板）\n\n\n# 1. 故障级别及责任人\n\n> 故障级别分为：严重、警告、一般，具体不同项目以及影响范围定级略有不同，需要跟业务部门以及相关上级领导一起确认事故级别。\n\n故障级别   主责任人      次责任人\n警告     @张三、@李四   @王五\n\n\n# 2. 详细描述（必填）\n\n> 详细的 bug 描述，包括可以复现的环境准备（比如测试包、有问题的 commit、现场录屏/截图、coredump 文件、监控报表等等）\n\n\n# 2.1 问题现场录屏/截图【必填】\n\n\n# 2.2 问题发生概率【必填】\n\n>  * 必现 - 描述必现路径/场景\n>  * 概率复现 - 出现概率 + 描述偶现路径/场景\n\n\n# 3. 发生过程\n\n> 问题发生的时间线及行为\n\n时间                 行为\n2022/03/01 10:05   收到首例用户反馈\n2022/03/01 10:06   值班研发开始调研，并同步相关成员\n2022/03/01 10:07   问题初步定位\n2022/03/01 10:09   问题修复\n2022/03/01 10:10   上线\n2022/03/01 10:11   故障解除\n\n\n# 4. 原因分析（必填）\n\n> 定位过程及问题原因\n\n\n# 5. 解决方案\n\n> 方案策略及代码修改截图/commit等 可根据具体问题包含：不同版本的修复策略，发版分支是什么处理方案，主干开发分支是什么方案；推荐分级处理，保障发版分支的修复影响最小化。\n\n\n# 6. 影响范围（必填）\n\n> 客户端问题：引入版本，影响版本，影响用户人数，受影响的场景，发现渠道等。 服务端问题：设计××接口/服务，影响××端××版本，影响用户人数xx人，受影响的功能，发现渠道等。\n\n\n# 7. 关联需求\n\n> 有关联需求的填写：需求名称或者附上需求链接； 无明确需求根据实际可不填写。\n\n\n# 8. 反思总结（必填）\n\n> 改进与 todo，明确真正有借鉴意义、会落实的措施。",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"性能测试报告 模板",frontmatter:{title:"性能测试报告 模板",date:"2023-01-30T15:38:45.000Z",permalink:"/pages/97392b/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/100.%E8%A7%84%E8%8C%83&%E6%A8%A1%E6%9D%BF/50.%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%20%E6%A8%A1%E6%9D%BF.html",relativePath:"50.团队管理/100.规范&模板/50.性能测试报告 模板.md",key:"v-591a4f31",path:"/pages/97392b/",headers:[{level:2,title:"1. 性能测试背景",slug:"_1-性能测试背景",normalizedTitle:"1. 性能测试背景",charIndex:2},{level:2,title:"2. 性能测试目标",slug:"_2-性能测试目标",normalizedTitle:"2. 性能测试目标",charIndex:79},{level:2,title:"3. 性能测试范围",slug:"_3-性能测试范围",normalizedTitle:"3. 性能测试范围",charIndex:140},{level:2,title:"4. 名词术语约定",slug:"_4-名词术语约定",normalizedTitle:"4. 名词术语约定",charIndex:202},{level:2,title:"5. 环境",slug:"_5-环境",normalizedTitle:"5. 环境",charIndex:286},{level:3,title:"5.1 生产环境架构",slug:"_5-1-生产环境架构",normalizedTitle:"5.1 生产环境架构",charIndex:350},{level:3,title:"5.2 测试环境架构",slug:"_5-2-测试环境架构",normalizedTitle:"5.2 测试环境架构",charIndex:380},{level:3,title:"5.3 生产环境软硬件配置",slug:"_5-3-生产环境软硬件配置",normalizedTitle:"5.3 生产环境软硬件配置",charIndex:410},{level:3,title:"5.4 测试环境软硬件配置",slug:"_5-4-测试环境软硬件配置",normalizedTitle:"5.4 测试环境软硬件配置",charIndex:473},{level:3,title:"5.5 负载机硬件配置",slug:"_5-5-负载机硬件配置",normalizedTitle:"5.5 负载机硬件配置",charIndex:536},{level:2,title:"6. 测试数据",slug:"_6-测试数据",normalizedTitle:"6. 测试数据",charIndex:596},{level:3,title:"6.1 历史数据量",slug:"_6-1-历史数据量",normalizedTitle:"6.1 历史数据量",charIndex:676},{level:3,title:"6.2 主数据",slug:"_6-2-主数据",normalizedTitle:"6.2 主数据",charIndex:712},{level:3,title:"6.3 性能指标",slug:"_6-3-性能指标",normalizedTitle:"6.3 性能指标",charIndex:803},{level:2,title:"7. 测试进度",slug:"_7-测试进度",normalizedTitle:"7. 测试进度",charIndex:979},{level:2,title:"8. 测试结果",slug:"_8-测试结果",normalizedTitle:"8. 测试结果",charIndex:1011},{level:3,title:"8.1 基准测试结果",slug:"_8-1-基准测试结果",normalizedTitle:"8.1 基准测试结果",charIndex:1023},{level:3,title:"8.2 配置测试结果",slug:"_8-2-配置测试结果",normalizedTitle:"8.2 配置测试结果",charIndex:1198},{level:3,title:"8.3 负载测试结果",slug:"_8-3-负载测试结果",normalizedTitle:"8.3 负载测试结果",charIndex:1403},{level:3,title:"8.4 稳定性测试结果",slug:"_8-4-稳定性测试结果",normalizedTitle:"8.4 稳定性测试结果",charIndex:1686},{level:2,title:"9. 测试结论",slug:"_9-测试结论",normalizedTitle:"9. 测试结论",charIndex:1934},{level:3,title:"9.1 测试结论",slug:"_9-1-测试结论",normalizedTitle:"9.1 测试结论",charIndex:1946},{level:3,title:"9.2 系统缺陷",slug:"_9-2-系统缺陷",normalizedTitle:"9.2 系统缺陷",charIndex:1998},{level:2,title:"10. 系统风险",slug:"_10-系统风险",normalizedTitle:"10. 系统风险",charIndex:2043}],headersStr:"1. 性能测试背景 2. 性能测试目标 3. 性能测试范围 4. 名词术语约定 5. 环境 5.1 生产环境架构 5.2 测试环境架构 5.3 生产环境软硬件配置 5.4 测试环境软硬件配置 5.5 负载机硬件配置 6. 测试数据 6.1 历史数据量 6.2 主数据 6.3 性能指标 7. 测试进度 8. 测试结果 8.1 基准测试结果 8.2 配置测试结果 8.3 负载测试结果 8.4 稳定性测试结果 9. 测试结论 9.1 测试结论 9.2 系统缺陷 10. 系统风险",content:"# 1. 性能测试背景\n\n> 描述该项目的受众，该项目的需求背景，该项目的目的是为了实现什么价值，为什么需要进行性能测试，能够帮助解决一些什么问题？\n\n\n# 2. 性能测试目标\n\n> 分点列出测试的目标，一定要先想清楚为什么要做性能测试，而不是先做性能测试，再去找目标。\n\n\n# 3. 性能测试范围\n\n> 通过表格给出本次性能测试的业务，预计高峰业务量，TPS，并发数，响应时间，事务成功率等。\n\n\n# 4. 名词术语约定\n\n> 给出报告中可能用到的性能压测的术语描述，比如：负载、性能测试、负载测试、配置测试、压力/强度测试、稳定性测试、TPS、AR、PV等。\n\n\n# 5. 环境\n\n> 环境推荐先想清楚生产环境是什么情况，再去通过合理的评估测试环境的架构和配置来尽可能的仿真线上的情况。\n\n\n# 5.1 生产环境架构\n\n> 给出生产环境物理架构图\n\n\n# 5.2 测试环境架构\n\n> 给出测试环境物理结构图\n\n\n# 5.3 生产环境软硬件配置\n\n> 给出生产环境的软硬件配置，包括：操作系统、JDK 版本、CPU、内存、JVM 等。\n\n\n# 5.4 测试环境软硬件配置\n\n> 给出测试环境的软硬件配置，包括：操作系统、JDK 版本、CPU、内存、JVM 等。\n\n\n# 5.5 负载机硬件配置\n\n> 给出负载机的软硬件配置，包括：操作系统、JDK 版本、CPU、内存、JVM 等。\n\n\n# 6. 测试数据\n\n> 系统性能要能够支撑企业未来 3 年的业务增长带来的系统负担，随着数据量的增加系统性能会受到影响，在测试时我们必须考虑这方面影响。\n\n\n# 6.1 历史数据量\n\n> 给出目前线上各个业务的历史总数据量。\n\n\n# 6.2 主数据\n\n> 主数据完整性是系统运行的先决条件，为了真实模拟系统生产环境运行状况，测试环境中的主数据将以生产环境为参照。比如：测试账号 300 个，按角色比例分布。\n\n\n# 6.3 性能指标\n\n> 性能指标中给出预期的业务性能指标以及硬件的性能指标。\n\n# 6.3.1 业务性能指标\n\n> 业务性能测试指标通过表格给出，具体的字段可能有：业务名称、高峰业务量、TPS、并发数、响应时长、事务成功率。\n\n# 6.3.2 硬件性能指标\n\n> 硬件性能指标包括：CPU、内存、存储、网络、中间件、DB等的监控项以及阈值等。\n\n\n# 7. 测试进度\n\n> 测试进度可以通过甘特图等来给出。\n\n\n# 8. 测试结果\n\n\n# 8.1 基准测试结果\n\n# 8.1.1 测试场景\n\n> 基准测试一般是单业务场景、单用户的场景来执行脚本，同时设置合理的用户思考时间如200ms。\n\n# 8.1.2 测试结果\n\n> 给出聚合报告表、响应时间时序图等，并针对上述的结果进行合理的分析。\n\n# 8.1.3 测试结论\n\n> 总结下在基准测试场景下的业务性能情况，并给出存在的问题。\n\n\n# 8.2 配置测试结果\n\n# 8.2.1 测试场景\n\n> 设计业务的场景来进行配置的优化，并给出配置测试的目标方向，即：主要优化哪些配置（比如：JVM、Tomcat、MySQL 连接池等）。\n\n# 8.2.2 测试结果\n\n> 给出聚合报告表、响应时间时序图等，并针对上述的结果进行合理的分析。\n\n# 8.2.3 测试结论\n\n> 总结配置测试结果，从上面的多个实验，得出线上各种涉及配置的组件的最优配置。\n\n\n# 8.3 负载测试结果\n\n# 8.3.1 测试场景\n\n> 负载测试的目的是版主我们找出性能问题与风险，对系统进行定容定量；为系统优化、性能调整提供数据支撑。负载测试在执行时又分为单场景与混合场景；单场景有利于分析性能问题，因为排除了其他业务的干扰；混合场景更贴近与用户实际使用习惯，是一个综合的性能评估。建议先做单场景的性能执行工作，后做混合场景的执行工作。\n\n# 8.3.2 测试结果\n\n> 给出聚合报告表、响应时间时序图等，并针对上述的结果进行合理的分析。\n\n# 8.3.3 测试结论\n\n> 总结负载测试的结论，是否满足性能要求，系统的拐点，首要风险等。\n\n\n# 8.4 稳定性测试结果\n\n# 8.4.1 测试场景\n\n> 稳定性测试的目的是验证在当前软硬件环境下，长时间运行一定负载，确定系统在满足性能指标的前提下是否运行稳定，执行场景依然是用混合场景，负载量参考负载测试结果。\n\n# 8.4.2 测试结果\n\n> 给出聚合报告表、响应时间时序图等，并针对上述的结果进行合理的分析。\n\n# 8.4.3 测试结论\n\n> 总结负载测试的结论，在系统的1.5倍于需求负载情况下是否能够稳定运行，各项指标是否正常，总体来说系统能够提供多大的吞吐量，且运行稳定。\n\n\n# 9. 测试结论\n\n\n# 9.1 测试结论\n\n> 经过不同目的的测试执行工作，对系统的性能有了全面的了解，给出测试总结。\n\n\n# 9.2 系统缺陷\n\n> 系统缺陷通过表格给出，字段有：编号、缺陷说明、是否解决。\n\n\n# 10. 系统风险\n\n> 给出随着系统的规模增加，首要风险在哪里？第二瓶颈又是什么？哪些情况的操作对系统会有重大的风险。本次性能分析报告是否能够合理的给生产环境的性能合理的建议，如不能，给出哪里有风险。",normalizedContent:"# 1. 性能测试背景\n\n> 描述该项目的受众，该项目的需求背景，该项目的目的是为了实现什么价值，为什么需要进行性能测试，能够帮助解决一些什么问题？\n\n\n# 2. 性能测试目标\n\n> 分点列出测试的目标，一定要先想清楚为什么要做性能测试，而不是先做性能测试，再去找目标。\n\n\n# 3. 性能测试范围\n\n> 通过表格给出本次性能测试的业务，预计高峰业务量，tps，并发数，响应时间，事务成功率等。\n\n\n# 4. 名词术语约定\n\n> 给出报告中可能用到的性能压测的术语描述，比如：负载、性能测试、负载测试、配置测试、压力/强度测试、稳定性测试、tps、ar、pv等。\n\n\n# 5. 环境\n\n> 环境推荐先想清楚生产环境是什么情况，再去通过合理的评估测试环境的架构和配置来尽可能的仿真线上的情况。\n\n\n# 5.1 生产环境架构\n\n> 给出生产环境物理架构图\n\n\n# 5.2 测试环境架构\n\n> 给出测试环境物理结构图\n\n\n# 5.3 生产环境软硬件配置\n\n> 给出生产环境的软硬件配置，包括：操作系统、jdk 版本、cpu、内存、jvm 等。\n\n\n# 5.4 测试环境软硬件配置\n\n> 给出测试环境的软硬件配置，包括：操作系统、jdk 版本、cpu、内存、jvm 等。\n\n\n# 5.5 负载机硬件配置\n\n> 给出负载机的软硬件配置，包括：操作系统、jdk 版本、cpu、内存、jvm 等。\n\n\n# 6. 测试数据\n\n> 系统性能要能够支撑企业未来 3 年的业务增长带来的系统负担，随着数据量的增加系统性能会受到影响，在测试时我们必须考虑这方面影响。\n\n\n# 6.1 历史数据量\n\n> 给出目前线上各个业务的历史总数据量。\n\n\n# 6.2 主数据\n\n> 主数据完整性是系统运行的先决条件，为了真实模拟系统生产环境运行状况，测试环境中的主数据将以生产环境为参照。比如：测试账号 300 个，按角色比例分布。\n\n\n# 6.3 性能指标\n\n> 性能指标中给出预期的业务性能指标以及硬件的性能指标。\n\n# 6.3.1 业务性能指标\n\n> 业务性能测试指标通过表格给出，具体的字段可能有：业务名称、高峰业务量、tps、并发数、响应时长、事务成功率。\n\n# 6.3.2 硬件性能指标\n\n> 硬件性能指标包括：cpu、内存、存储、网络、中间件、db等的监控项以及阈值等。\n\n\n# 7. 测试进度\n\n> 测试进度可以通过甘特图等来给出。\n\n\n# 8. 测试结果\n\n\n# 8.1 基准测试结果\n\n# 8.1.1 测试场景\n\n> 基准测试一般是单业务场景、单用户的场景来执行脚本，同时设置合理的用户思考时间如200ms。\n\n# 8.1.2 测试结果\n\n> 给出聚合报告表、响应时间时序图等，并针对上述的结果进行合理的分析。\n\n# 8.1.3 测试结论\n\n> 总结下在基准测试场景下的业务性能情况，并给出存在的问题。\n\n\n# 8.2 配置测试结果\n\n# 8.2.1 测试场景\n\n> 设计业务的场景来进行配置的优化，并给出配置测试的目标方向，即：主要优化哪些配置（比如：jvm、tomcat、mysql 连接池等）。\n\n# 8.2.2 测试结果\n\n> 给出聚合报告表、响应时间时序图等，并针对上述的结果进行合理的分析。\n\n# 8.2.3 测试结论\n\n> 总结配置测试结果，从上面的多个实验，得出线上各种涉及配置的组件的最优配置。\n\n\n# 8.3 负载测试结果\n\n# 8.3.1 测试场景\n\n> 负载测试的目的是版主我们找出性能问题与风险，对系统进行定容定量；为系统优化、性能调整提供数据支撑。负载测试在执行时又分为单场景与混合场景；单场景有利于分析性能问题，因为排除了其他业务的干扰；混合场景更贴近与用户实际使用习惯，是一个综合的性能评估。建议先做单场景的性能执行工作，后做混合场景的执行工作。\n\n# 8.3.2 测试结果\n\n> 给出聚合报告表、响应时间时序图等，并针对上述的结果进行合理的分析。\n\n# 8.3.3 测试结论\n\n> 总结负载测试的结论，是否满足性能要求，系统的拐点，首要风险等。\n\n\n# 8.4 稳定性测试结果\n\n# 8.4.1 测试场景\n\n> 稳定性测试的目的是验证在当前软硬件环境下，长时间运行一定负载，确定系统在满足性能指标的前提下是否运行稳定，执行场景依然是用混合场景，负载量参考负载测试结果。\n\n# 8.4.2 测试结果\n\n> 给出聚合报告表、响应时间时序图等，并针对上述的结果进行合理的分析。\n\n# 8.4.3 测试结论\n\n> 总结负载测试的结论，在系统的1.5倍于需求负载情况下是否能够稳定运行，各项指标是否正常，总体来说系统能够提供多大的吞吐量，且运行稳定。\n\n\n# 9. 测试结论\n\n\n# 9.1 测试结论\n\n> 经过不同目的的测试执行工作，对系统的性能有了全面的了解，给出测试总结。\n\n\n# 9.2 系统缺陷\n\n> 系统缺陷通过表格给出，字段有：编号、缺陷说明、是否解决。\n\n\n# 10. 系统风险\n\n> 给出随着系统的规模增加，首要风险在哪里？第二瓶颈又是什么？哪些情况的操作对系统会有重大的风险。本次性能分析报告是否能够合理的给生产环境的性能合理的建议，如不能，给出哪里有风险。",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"日报格式 模板",frontmatter:{title:"日报格式 模板",date:"2023-01-31T09:27:04.000Z",permalink:"/pages/f0afeb/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/100.%E8%A7%84%E8%8C%83&%E6%A8%A1%E6%9D%BF/60.%E6%97%A5%E6%8A%A5%E6%A0%BC%E5%BC%8F%20%E6%A8%A1%E6%9D%BF.html",relativePath:"50.团队管理/100.规范&模板/60.日报格式 模板.md",key:"v-ceb6f044",path:"/pages/f0afeb/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"月报格式 模板",frontmatter:{title:"月报格式 模板",date:"2023-01-31T09:27:15.000Z",permalink:"/pages/2da3b0/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/100.%E8%A7%84%E8%8C%83&%E6%A8%A1%E6%9D%BF/70.%E6%9C%88%E6%8A%A5%E6%A0%BC%E5%BC%8F%20%E6%A8%A1%E6%9D%BF.html",relativePath:"50.团队管理/100.规范&模板/70.月报格式 模板.md",key:"v-61164b86",path:"/pages/2da3b0/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"Git 提交 message 规范",frontmatter:{title:"Git 提交 message 规范",date:"2023-01-31T09:27:38.000Z",permalink:"/pages/c976cf/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/100.%E8%A7%84%E8%8C%83&%E6%A8%A1%E6%9D%BF/80.Git%20%E6%8F%90%E4%BA%A4%20message%20%E8%A7%84%E8%8C%83.html",relativePath:"50.团队管理/100.规范&模板/80.Git 提交 message 规范.md",key:"v-6f343e3c",path:"/pages/c976cf/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"如何做好技术规划",frontmatter:{title:"如何做好技术规划",date:"2022-11-29T10:45:12.000Z",permalink:"/pages/80270d/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/120.%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E6%8A%80%E6%9C%AF%E8%A7%84%E5%88%92.html",relativePath:"50.团队管理/120.如何做好技术规划.md",key:"v-d18c0768",path:"/pages/80270d/",headers:[{level:2,title:"项目背景",slug:"项目背景",normalizedTitle:"项目背景",charIndex:2},{level:2,title:"团队现状",slug:"团队现状",normalizedTitle:"团队现状",charIndex:11},{level:3,title:"明确定位与职责",slug:"明确定位与职责",normalizedTitle:"明确定位与职责",charIndex:20},{level:3,title:"人员情况",slug:"人员情况",normalizedTitle:"人员情况",charIndex:86},{level:3,title:"业务情况",slug:"业务情况",normalizedTitle:"业务情况",charIndex:134},{level:3,title:"规划中包含的内容",slug:"规划中包含的内容",normalizedTitle:"规划中包含的内容",charIndex:387},{level:3,title:"你的规划中包含了什么？",slug:"你的规划中包含了什么",normalizedTitle:"你的规划中包含了什么？",charIndex:564},{level:3,title:"技术创新",slug:"技术创新",normalizedTitle:"技术创新",charIndex:467},{level:3,title:"规划落地的问题与思路",slug:"规划落地的问题与思路",normalizedTitle:"规划落地的问题与思路",charIndex:990},{level:2,title:"团队建设",slug:"团队建设",normalizedTitle:"团队建设",charIndex:513}],headersStr:"项目背景 团队现状 明确定位与职责 人员情况 业务情况 规划中包含的内容 你的规划中包含了什么？ 技术创新 规划落地的问题与思路 团队建设",content:"# 项目背景\n\n\n# 团队现状\n\n\n# 明确定位与职责\n\n 1. 你的职责及团队的定位是什么？\n 2. 公司对你们的希望是怎样的？\n 3. 你与上级的关联点在哪？\n\n\n# 人员情况\n\n 1. 成员能力\n 2. 团队结构\n 3. 团队规模\n 4. 当前团队负载\n\n\n# 业务情况\n\n 1. 业务当前的侧重点是什么？\n 2. 阶段性目标如何？\n 3. 业务的执行计划是怎样？\n 4. 技术能解决的痛点在哪里？\n\n> 梳理团队现状之后，会发现大量的 TODO，并且痛点和问题特别多。 “Leader 的决断：什么内容是要列入规划，什么事务并不是重点问题？”\n\n> =》 盯着业务目标去延展人员和业务，从而判断哪些是依赖项，哪些是前置项？（目标思维）\n\n在大部分公司中，技术很难直接创造价值，往往还是要依赖于业务。\n\n大部分的技术团队都是用来服务于业务 转变 技术驱动业务\n\n\n# 规划中包含的内容\n\n * 业务结果：业务层面的战绩，团队打造一个公司 GMV 占比超过 50% 的商城，或者支撑了某个快速发展业务。\n * 稳定性建设：\n * 技术创新：由技术人员发起或完成的所有降本提效的动作，但是同样要看优先级和投入产出比。\n * 团队建设：让团队可以长期健康发展下去，在 Backup、人员组成、机制建设等多个方面下功夫。\n\n\n# 你的规划中包含了什么？\n\n * WHY：为什么做业务目标/技术创新/团队建设的规划？\n * WHAT：是否能说明业务目标/技术创新/团队规划解决的问题、价值与作用？\n * WHO：由谁承担？负责人的优势与劣势是什么？\n * WHEN：所做的规划着眼于现在还是未来？能否保证长期有价值？\n * HOW：针对不同的部分，具体的落地细则如何？\n * HOW MUCH：规划要做到什么程度？是否可以做成可衡量的 KPI？明确现阶段上级领导关注的重点？转化、流量、留存、还是产品的用户体验？作为技术Leader，你和团队成员的到达路径是什么？\n\n\n# 技术创新\n\n * 稳定性：\n * 效能优化：优化开发的效率、流程，建议从几个最痛的点去着手，看如何通过工具、流程、新技术等手段减少不必要的损耗甚至颠覆现有的开发模式来逐步优化。\n * 驱动业务：\n * 视野展望：团队对新技术的探索，技术 Leader 对新技术的铭感和接受程度，决定了团队的技术上限。\n\n\n# 规划落地的问题与思路\n\n * 规划不等于计划：规划是某个阶段内的优先级\n * 规划内容想的太多做成的少：规划并不是囊括万物，需要有落脚点，要有核心解决的问题，并以周/月为单位去调整自己的规划。\n * 业务压力大，盲盯痛点，忽视目标：解决痛点最终是为了实现目标。\n * 规划最终成了技术 Leader 的规划：目标规划一定要形成 KPI，落到每一个人身上。一定要将规划拿出来讲、拿出来看，每周带领团队成员查看进度。\n\n\n# 团队建设\n\n核心重点：从未来看现在，从整体到个体。思考团队的未来和终态如何，反推到每个人、每件事。\n\n团队建设的关键不只是知人善用，还包括：\n\n 1. 团队未来需要什么样的人？\n 2. 目前团队成员需要什么样的状态和能力？\n 3. 团队成员需要承担什么样的责任？",normalizedContent:"# 项目背景\n\n\n# 团队现状\n\n\n# 明确定位与职责\n\n 1. 你的职责及团队的定位是什么？\n 2. 公司对你们的希望是怎样的？\n 3. 你与上级的关联点在哪？\n\n\n# 人员情况\n\n 1. 成员能力\n 2. 团队结构\n 3. 团队规模\n 4. 当前团队负载\n\n\n# 业务情况\n\n 1. 业务当前的侧重点是什么？\n 2. 阶段性目标如何？\n 3. 业务的执行计划是怎样？\n 4. 技术能解决的痛点在哪里？\n\n> 梳理团队现状之后，会发现大量的 todo，并且痛点和问题特别多。 “leader 的决断：什么内容是要列入规划，什么事务并不是重点问题？”\n\n> =》 盯着业务目标去延展人员和业务，从而判断哪些是依赖项，哪些是前置项？（目标思维）\n\n在大部分公司中，技术很难直接创造价值，往往还是要依赖于业务。\n\n大部分的技术团队都是用来服务于业务 转变 技术驱动业务\n\n\n# 规划中包含的内容\n\n * 业务结果：业务层面的战绩，团队打造一个公司 gmv 占比超过 50% 的商城，或者支撑了某个快速发展业务。\n * 稳定性建设：\n * 技术创新：由技术人员发起或完成的所有降本提效的动作，但是同样要看优先级和投入产出比。\n * 团队建设：让团队可以长期健康发展下去，在 backup、人员组成、机制建设等多个方面下功夫。\n\n\n# 你的规划中包含了什么？\n\n * why：为什么做业务目标/技术创新/团队建设的规划？\n * what：是否能说明业务目标/技术创新/团队规划解决的问题、价值与作用？\n * who：由谁承担？负责人的优势与劣势是什么？\n * when：所做的规划着眼于现在还是未来？能否保证长期有价值？\n * how：针对不同的部分，具体的落地细则如何？\n * how much：规划要做到什么程度？是否可以做成可衡量的 kpi？明确现阶段上级领导关注的重点？转化、流量、留存、还是产品的用户体验？作为技术leader，你和团队成员的到达路径是什么？\n\n\n# 技术创新\n\n * 稳定性：\n * 效能优化：优化开发的效率、流程，建议从几个最痛的点去着手，看如何通过工具、流程、新技术等手段减少不必要的损耗甚至颠覆现有的开发模式来逐步优化。\n * 驱动业务：\n * 视野展望：团队对新技术的探索，技术 leader 对新技术的铭感和接受程度，决定了团队的技术上限。\n\n\n# 规划落地的问题与思路\n\n * 规划不等于计划：规划是某个阶段内的优先级\n * 规划内容想的太多做成的少：规划并不是囊括万物，需要有落脚点，要有核心解决的问题，并以周/月为单位去调整自己的规划。\n * 业务压力大，盲盯痛点，忽视目标：解决痛点最终是为了实现目标。\n * 规划最终成了技术 leader 的规划：目标规划一定要形成 kpi，落到每一个人身上。一定要将规划拿出来讲、拿出来看，每周带领团队成员查看进度。\n\n\n# 团队建设\n\n核心重点：从未来看现在，从整体到个体。思考团队的未来和终态如何，反推到每个人、每件事。\n\n团队建设的关键不只是知人善用，还包括：\n\n 1. 团队未来需要什么样的人？\n 2. 目前团队成员需要什么样的状态和能力？\n 3. 团队成员需要承担什么样的责任？",charsets:{cjk:!0},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"服务端系统设计 模板",frontmatter:{title:"服务端系统设计 模板",date:"2023-01-30T13:55:14.000Z",permalink:"/pages/5700d1/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/100.%E8%A7%84%E8%8C%83&%E6%A8%A1%E6%9D%BF/40.%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%20%E6%A8%A1%E6%9D%BF.html",relativePath:"50.团队管理/100.规范&模板/40.服务端系统设计 模板.md",key:"v-6cde0ab2",path:"/pages/5700d1/",headers:[{level:2,title:"1. 修订记录",slug:"_1-修订记录",normalizedTitle:"1. 修订记录",charIndex:111},{level:2,title:"2. 需求/背景",slug:"_2-需求-背景",normalizedTitle:"2. 需求/背景",charIndex:180},{level:2,title:"3. 设计目标",slug:"_3-设计目标",normalizedTitle:"3. 设计目标",charIndex:236},{level:3,title:"3.1 实现功能",slug:"_3-1-实现功能",normalizedTitle:"3.1 实现功能",charIndex:248},{level:3,title:"3.2 设计指标",slug:"_3-2-设计指标",normalizedTitle:"3.2 设计指标",charIndex:444},{level:2,title:"4. 概要设计",slug:"_4-概要设计",normalizedTitle:"4. 概要设计",charIndex:1004},{level:3,title:"4.1 设计思路",slug:"_4-1-设计思路",normalizedTitle:"4.1 设计思路",charIndex:1016},{level:3,title:"4.2 技术选型",slug:"_4-2-技术选型",normalizedTitle:"4.2 技术选型",charIndex:1148},{level:3,title:"4.3 业务架构",slug:"_4-3-业务架构",normalizedTitle:"4.3 业务架构",charIndex:1288},{level:3,title:"4.4 技术架构",slug:"_4-4-技术架构",normalizedTitle:"4.4 技术架构",charIndex:1306},{level:3,title:"4.5 系统环境",slug:"_4-5-系统环境",normalizedTitle:"4.5 系统环境",charIndex:1324},{level:2,title:"5. 详细设计",slug:"_5-详细设计",normalizedTitle:"5. 详细设计",charIndex:1491},{level:3,title:"5.1 流程设计",slug:"_5-1-流程设计",normalizedTitle:"5.1 流程设计",charIndex:1548},{level:3,title:"5.2 算法设计",slug:"_5-2-算法设计",normalizedTitle:"5.2 算法设计",charIndex:1600},{level:3,title:"5.3 数据模型设计",slug:"_5-3-数据模型设计",normalizedTitle:"5.3 数据模型设计",charIndex:1660},{level:3,title:"5.4 接口设计",slug:"_5-4-接口设计",normalizedTitle:"5.4 接口设计",charIndex:1824},{level:3,title:"5.5 异常处理",slug:"_5-5-异常处理",normalizedTitle:"5.5 异常处理",charIndex:1925},{level:2,title:"6. 风险评估",slug:"_6-风险评估",normalizedTitle:"6. 风险评估",charIndex:2043},{level:3,title:"6.1 已知风险",slug:"_6-1-已知风险",normalizedTitle:"6.1 已知风险",charIndex:2055},{level:3,title:"6.2 可能风险",slug:"_6-2-可能风险",normalizedTitle:"6.2 可能风险",charIndex:2156},{level:2,title:"7. 测试建议",slug:"_7-测试建议",normalizedTitle:"7. 测试建议",charIndex:2209},{level:3,title:"7.1 功能测试",slug:"_7-1-功能测试",normalizedTitle:"7.1 功能测试",charIndex:2312},{level:3,title:"7.2 性能测试",slug:"_7-2-性能测试",normalizedTitle:"7.2 性能测试",charIndex:2393},{level:2,title:"8. 上线准备",slug:"_8-上线准备",normalizedTitle:"8. 上线准备",charIndex:2433},{level:2,title:"9. 评审意见",slug:"_9-评审意见",normalizedTitle:"9. 评审意见",charIndex:2501}],headersStr:"1. 修订记录 2. 需求/背景 3. 设计目标 3.1 实现功能 3.2 设计指标 4. 概要设计 4.1 设计思路 4.2 技术选型 4.3 业务架构 4.4 技术架构 4.5 系统环境 5. 详细设计 5.1 流程设计 5.2 算法设计 5.3 数据模型设计 5.4 接口设计 5.5 异常处理 6. 风险评估 6.1 已知风险 6.2 可能风险 7. 测试建议 7.1 功能测试 7.2 性能测试 8. 上线准备 9. 评审意见",content:'这里以 CRM 项目的用户触达模块为例，给大家分享一下。\n\n\n# CRM 技术设计文档「消息触达模块」\n\n项目名称    CRM 系统\n项目负责人   @张三\n模块名称    用户触达模块\n模块负责人   @李四\n\n\n# 1. 修订记录\n\n版本     修订人   修订内容   修订日期\nv1.0   @张三   创建     2022-12-23\n\n\n# 2. 需求/背景\n\n产品文档：xxx\n\n为了实现用户的精细化运营，通过多种途径，向用户发送消息通知……\n\n\n# 3. 设计目标\n\n\n# 3.1 实现功能\n\n 1. 多种渠道给用户推送消息，主要包含站内和站外两大部分：\n\n * 站内：\n   * 站内信\n   * 弹屏\n * 站外\n   * 邮箱\n   * 短信\n   * push\n   * 微信\n   * ……\n\n 2. 触达任务\n\n * 支持定时/延时消息发送\n * 支持触发型消息发送\n * 支持用户分群发送\n\n> 功能点比较多的话，可以用思维导图的形式来整理。\n\n\n# 3.2 设计指标\n\n 1. 性能指标\n\n * 百万级消息分钟级发送完成\n * xx接口，性能指标：单机 1000 并发，95%响应 <= 200ms\n * ……\n\n 2. 可用性\n\n * 触达模块 99.9% 可用\n * 消息推送成功率 80% 以上\n * ……\n\n 3. 扩展性\n\n * 采用策略模式+配置，新增消息渠道，只需少量代码+代码即可实现。\n * 引入规则引擎，统一消息类型的不同渠道，可以通过规则调整，无需发版。\n * ……\n\n 4. 兼容性\n\n * 接口xxx向前兼容 APP 1.9.0 版本，低版本需强制更新。\n\n 5. 可观测性\n\n * 接入 Prometheus 和 Grafana，对服务和业务进行监控\n   * 服务监控：通过控制面板观察服务的内存、CPU、JVM、接口 QPS、接口 RT …… = 业务监控：通过埋点上报，收集用户触达数据，通过面板可以分设备、渠道查看用户触达成功率 ……\n\n 6. 告警\n\n * 通过 Prometheus Alert 实现服务的告警，告警信息分级别，进行飞书通知、电话通知、告警类型分为服务告警和业务告警。\n   * 服务告警：内存、CPU 占用过高、接口 QPS 过高、接口 RT 过长，触发告警\n   * 业务告警：用户触达成功率过低告警\n\n\n# 4. 概要设计\n\n\n# 4.1 设计思路\n\n * 数百万消息短时间发送完成，流量较大，对数据存储性能要求较高，需要选用高性能 DB，对存储压力也比较大，同时需要一定削峰处理。\n * 定时/延时消息发送采用消息队列完成，对 MQ 的消费要求较高，并发度要高，批量消费。\n * ……\n\n\n# 4.2 技术选型\n\n * 存储：TiDB\n * 缓存：Redis\n * 消息队列：业务 RocketMQ、埋点 Kafka\n * 注册中心：Nacos\n * 配置中心：Nacos\n * RPC：Dubbo\n * 网关：Gateway\n * Push通道：自建\n * ……\n\n\n# 4.3 业务架构\n\n待补充\n\n\n# 4.4 技术架构\n\n待补充\n\n\n# 4.5 系统环境\n\n * JDK 版本：11\n\n * 部署环境：k8s + Container，单 pod 8 核 CPU + 4G 内存，服务集群 32 个 pod\n\n * 数据库\n   \n   * 业务数据：TiDB 64核 CPU + 128G 内存\n   * 离线数据：Hbase ……\n   * ……\n\n * ……\n\n\n# 5. 详细设计\n\n> 详细设计，是具体指导开发的设计部分，包括：流程、数据模型、算法、客户端的接口等等。\n\n\n# 5.1 流程设计\n\n * push 流程\n\n待补充\n\n * Alipay 接入时序图\n\n待补充\n\n\n# 5.2 算法设计\n\n * 渠道分流：同一消息类型、多种渠道，支持按比例分流，采用加权随机算法实现。\n * ……\n\n\n# 5.3 数据模型设计\n\n * crm_user_toutch_tash：用户触达任务表\n\n字段        数据类型      描述\nid        bigint    主键\ntask_no   bigint    任务编号\ncomment   varchar   描述\n……                  \n\n\n# 5.4 接口设计\n\n接口名称     添加支付任务\n接口文档地址   https://yapi.comn/xxx\n入参       \n入参描述     \n出参       \n出参描述     \n\n\n# 5.5 异常处理\n\n * 系统中的不确定异常，进行统一处理，响应"Network Error"\n * 埋点异步发送，不影响主要功能 _ ……\n\n> 异常处理也是需要考虑的地方，哪些异常可以吞掉，哪些异常需要降级，怎么到日志等。\n\n\n# 6. 风险评估\n\n\n# 6.1 已知风险\n\n * 对数据相关服务压力较大，用户分群、用户画像等数据服务崩溃风险\n * MQ 存在堆积风险，导致用户收到消息延迟\n * QPS 较高，数据库 CPU 飙升风险\n * ……\n\n\n# 6.2 可能风险\n\n * 场景类消息延迟，可能会影响交易相关流程，拉低转化率和成交率\n * ……\n\n\n# 7. 测试建议\n\n> 需求评审、设计阶段，都需要拉上测试同学，测试同学要对整体功能、性能，有比较清楚的了解。由于具体实现逻辑，开发会比较清楚，因此需要给测试同学一些建议，给测试的测试用例提供参考。\n\n\n# 7.1 功能测试\n\n功能       测试步骤     预期结果\n定时消息发送   创建定时消息   消息定时发送\n……                \n\n\n# 7.2 性能测试\n\n * xxx接口压测，预估单机 QPS 1000。\n\n\n# 8. 上线准备\n\n * 运维搭建环境\n * 数据初始化\n * 添加配置\n * 消息队列创建\n * 依赖服务上线\n * 服务上线\n\n\n# 9. 评审意见\n\n评审意见                                  提出人   提出日期         解决意见     解决人   解决日期\nxxx接口需要考虑一下兼容性，建议xx字段，从object改为list   @李四   2023-01-02   修改字段类型   @张三   2023-02-01\n……                                                                      ',normalizedContent:'这里以 crm 项目的用户触达模块为例，给大家分享一下。\n\n\n# crm 技术设计文档「消息触达模块」\n\n项目名称    crm 系统\n项目负责人   @张三\n模块名称    用户触达模块\n模块负责人   @李四\n\n\n# 1. 修订记录\n\n版本     修订人   修订内容   修订日期\nv1.0   @张三   创建     2022-12-23\n\n\n# 2. 需求/背景\n\n产品文档：xxx\n\n为了实现用户的精细化运营，通过多种途径，向用户发送消息通知……\n\n\n# 3. 设计目标\n\n\n# 3.1 实现功能\n\n 1. 多种渠道给用户推送消息，主要包含站内和站外两大部分：\n\n * 站内：\n   * 站内信\n   * 弹屏\n * 站外\n   * 邮箱\n   * 短信\n   * push\n   * 微信\n   * ……\n\n 2. 触达任务\n\n * 支持定时/延时消息发送\n * 支持触发型消息发送\n * 支持用户分群发送\n\n> 功能点比较多的话，可以用思维导图的形式来整理。\n\n\n# 3.2 设计指标\n\n 1. 性能指标\n\n * 百万级消息分钟级发送完成\n * xx接口，性能指标：单机 1000 并发，95%响应 <= 200ms\n * ……\n\n 2. 可用性\n\n * 触达模块 99.9% 可用\n * 消息推送成功率 80% 以上\n * ……\n\n 3. 扩展性\n\n * 采用策略模式+配置，新增消息渠道，只需少量代码+代码即可实现。\n * 引入规则引擎，统一消息类型的不同渠道，可以通过规则调整，无需发版。\n * ……\n\n 4. 兼容性\n\n * 接口xxx向前兼容 app 1.9.0 版本，低版本需强制更新。\n\n 5. 可观测性\n\n * 接入 prometheus 和 grafana，对服务和业务进行监控\n   * 服务监控：通过控制面板观察服务的内存、cpu、jvm、接口 qps、接口 rt …… = 业务监控：通过埋点上报，收集用户触达数据，通过面板可以分设备、渠道查看用户触达成功率 ……\n\n 6. 告警\n\n * 通过 prometheus alert 实现服务的告警，告警信息分级别，进行飞书通知、电话通知、告警类型分为服务告警和业务告警。\n   * 服务告警：内存、cpu 占用过高、接口 qps 过高、接口 rt 过长，触发告警\n   * 业务告警：用户触达成功率过低告警\n\n\n# 4. 概要设计\n\n\n# 4.1 设计思路\n\n * 数百万消息短时间发送完成，流量较大，对数据存储性能要求较高，需要选用高性能 db，对存储压力也比较大，同时需要一定削峰处理。\n * 定时/延时消息发送采用消息队列完成，对 mq 的消费要求较高，并发度要高，批量消费。\n * ……\n\n\n# 4.2 技术选型\n\n * 存储：tidb\n * 缓存：redis\n * 消息队列：业务 rocketmq、埋点 kafka\n * 注册中心：nacos\n * 配置中心：nacos\n * rpc：dubbo\n * 网关：gateway\n * push通道：自建\n * ……\n\n\n# 4.3 业务架构\n\n待补充\n\n\n# 4.4 技术架构\n\n待补充\n\n\n# 4.5 系统环境\n\n * jdk 版本：11\n\n * 部署环境：k8s + container，单 pod 8 核 cpu + 4g 内存，服务集群 32 个 pod\n\n * 数据库\n   \n   * 业务数据：tidb 64核 cpu + 128g 内存\n   * 离线数据：hbase ……\n   * ……\n\n * ……\n\n\n# 5. 详细设计\n\n> 详细设计，是具体指导开发的设计部分，包括：流程、数据模型、算法、客户端的接口等等。\n\n\n# 5.1 流程设计\n\n * push 流程\n\n待补充\n\n * alipay 接入时序图\n\n待补充\n\n\n# 5.2 算法设计\n\n * 渠道分流：同一消息类型、多种渠道，支持按比例分流，采用加权随机算法实现。\n * ……\n\n\n# 5.3 数据模型设计\n\n * crm_user_toutch_tash：用户触达任务表\n\n字段        数据类型      描述\nid        bigint    主键\ntask_no   bigint    任务编号\ncomment   varchar   描述\n……                  \n\n\n# 5.4 接口设计\n\n接口名称     添加支付任务\n接口文档地址   https://yapi.comn/xxx\n入参       \n入参描述     \n出参       \n出参描述     \n\n\n# 5.5 异常处理\n\n * 系统中的不确定异常，进行统一处理，响应"network error"\n * 埋点异步发送，不影响主要功能 _ ……\n\n> 异常处理也是需要考虑的地方，哪些异常可以吞掉，哪些异常需要降级，怎么到日志等。\n\n\n# 6. 风险评估\n\n\n# 6.1 已知风险\n\n * 对数据相关服务压力较大，用户分群、用户画像等数据服务崩溃风险\n * mq 存在堆积风险，导致用户收到消息延迟\n * qps 较高，数据库 cpu 飙升风险\n * ……\n\n\n# 6.2 可能风险\n\n * 场景类消息延迟，可能会影响交易相关流程，拉低转化率和成交率\n * ……\n\n\n# 7. 测试建议\n\n> 需求评审、设计阶段，都需要拉上测试同学，测试同学要对整体功能、性能，有比较清楚的了解。由于具体实现逻辑，开发会比较清楚，因此需要给测试同学一些建议，给测试的测试用例提供参考。\n\n\n# 7.1 功能测试\n\n功能       测试步骤     预期结果\n定时消息发送   创建定时消息   消息定时发送\n……                \n\n\n# 7.2 性能测试\n\n * xxx接口压测，预估单机 qps 1000。\n\n\n# 8. 上线准备\n\n * 运维搭建环境\n * 数据初始化\n * 添加配置\n * 消息队列创建\n * 依赖服务上线\n * 服务上线\n\n\n# 9. 评审意见\n\n评审意见                                  提出人   提出日期         解决意见     解决人   解决日期\nxxx接口需要考虑一下兼容性，建议xx字段，从object改为list   @李四   2023-01-02   修改字段类型   @张三   2023-02-01\n……                                                                      ',charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"张一鸣精选微博55条",frontmatter:{title:"张一鸣精选微博55条",date:"2023-01-31T09:33:44.000Z",permalink:"/pages/472d9e/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/130.%E5%BC%A0%E4%B8%80%E9%B8%A3%E7%B2%BE%E9%80%89%E5%BE%AE%E5%8D%9A55%E6%9D%A1.html",relativePath:"50.团队管理/130.张一鸣精选微博55条.md",key:"v-2744b25f",path:"/pages/472d9e/",headers:[{level:2,title:"01",slug:"_01",normalizedTitle:"01",charIndex:139},{level:2,title:"02",slug:"_02",normalizedTitle:"02",charIndex:183},{level:2,title:"03",slug:"_03",normalizedTitle:"03",charIndex:127},{level:2,title:"04",slug:"_04",normalizedTitle:"04",charIndex:271},{level:2,title:"05",slug:"_05",normalizedTitle:"05",charIndex:328},{level:2,title:"06",slug:"_06",normalizedTitle:"06",charIndex:432},{level:2,title:"07",slug:"_07",normalizedTitle:"07",charIndex:471},{level:2,title:"08",slug:"_08",normalizedTitle:"08",charIndex:511},{level:2,title:"09",slug:"_09",normalizedTitle:"09",charIndex:585},{level:2,title:"10",slug:"_10",normalizedTitle:"10",charIndex:615},{level:2,title:"11",slug:"_11",normalizedTitle:"11",charIndex:107},{level:2,title:"12",slug:"_12",normalizedTitle:"12",charIndex:731},{level:2,title:"13",slug:"_13",normalizedTitle:"13",charIndex:761},{level:2,title:"14",slug:"_14",normalizedTitle:"14",charIndex:811},{level:2,title:"15",slug:"_15",normalizedTitle:"15",charIndex:844},{level:2,title:"16",slug:"_16",normalizedTitle:"16",charIndex:879},{level:2,title:"17",slug:"_17",normalizedTitle:"17",charIndex:942},{level:2,title:"18",slug:"_18",normalizedTitle:"18",charIndex:965},{level:2,title:"19",slug:"_19",normalizedTitle:"19",charIndex:108},{level:2,title:"20",slug:"_20",normalizedTitle:"20",charIndex:1160},{level:2,title:"21",slug:"_21",normalizedTitle:"21",charIndex:1208},{level:2,title:"22",slug:"_22",normalizedTitle:"22",charIndex:113},{level:2,title:"23",slug:"_23",normalizedTitle:"23",charIndex:1349},{level:2,title:"24",slug:"_24",normalizedTitle:"24",charIndex:1388},{level:2,title:"25",slug:"_25",normalizedTitle:"25",charIndex:123},{level:2,title:"26",slug:"_26",normalizedTitle:"26",charIndex:1505},{level:2,title:"27",slug:"_27",normalizedTitle:"27",charIndex:1581},{level:2,title:"28",slug:"_28",normalizedTitle:"28",charIndex:1660},{level:2,title:"29",slug:"_29",normalizedTitle:"29",charIndex:1687},{level:2,title:"30",slug:"_30",normalizedTitle:"30",charIndex:1737},{level:2,title:"31",slug:"_31",normalizedTitle:"31",charIndex:1835},{level:2,title:"32",slug:"_32",normalizedTitle:"32",charIndex:1903},{level:2,title:"33",slug:"_33",normalizedTitle:"33",charIndex:2062},{level:2,title:"34",slug:"_34",normalizedTitle:"34",charIndex:2090},{level:2,title:"35",slug:"_35",normalizedTitle:"35",charIndex:2132},{level:2,title:"36",slug:"_36",normalizedTitle:"36",charIndex:128},{level:2,title:"37",slug:"_37",normalizedTitle:"37",charIndex:2194},{level:2,title:"38",slug:"_38",normalizedTitle:"38",charIndex:2221},{level:2,title:"39",slug:"_39",normalizedTitle:"39",charIndex:2382},{level:2,title:"40",slug:"_40",normalizedTitle:"40",charIndex:2574},{level:2,title:"41",slug:"_41",normalizedTitle:"41",charIndex:106},{level:2,title:"42",slug:"_42",normalizedTitle:"42",charIndex:112},{level:2,title:"43",slug:"_43",normalizedTitle:"43",charIndex:2689},{level:2,title:"44",slug:"_44",normalizedTitle:"44",charIndex:2773},{level:2,title:"45",slug:"_45",normalizedTitle:"45",charIndex:2889},{level:2,title:"46",slug:"_46",normalizedTitle:"46",charIndex:2933},{level:2,title:"47",slug:"_47",normalizedTitle:"47",charIndex:3004},{level:2,title:"48",slug:"_48",normalizedTitle:"48",charIndex:3058},{level:2,title:"49",slug:"_49",normalizedTitle:"49",charIndex:125},{level:2,title:"50",slug:"_50",normalizedTitle:"50",charIndex:3214},{level:2,title:"51",slug:"_51",normalizedTitle:"51",charIndex:3254},{level:2,title:"52",slug:"_52",normalizedTitle:"52",charIndex:3310},{level:2,title:"53",slug:"_53",normalizedTitle:"53",charIndex:3450},{level:2,title:"54",slug:"_54",normalizedTitle:"54",charIndex:111},{level:2,title:"55",slug:"_55",normalizedTitle:"55",charIndex:64},{level:2,title:"后记",slug:"后记",normalizedTitle:"后记",charIndex:3589}],headersStr:"01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 后记",content:'在张一鸣的微博中，记录了他创业依赖的思考，如果你认真看过张一鸣的微博，其实不难发现他成功的秘密。\n\n网友「雨过之后」摘录了张一鸣55条微博，原文地址：https://www.zhihu.com/question/411985422/answer/2549036773。\n\n\n# 01\n\n提示\n\n人常会不自觉记下对自己有利的部分，这是形成委屈的重要原因。\n\n\n\n\n# 02\n\n提示\n\n做不好的就别做了，要做就必须做到非常好。\n\n\n\n\n# 03\n\n提示\n\n当感到沟通困难的时候，最好的沟通方法不是想太多技巧和说法，而是更坦诚的沟通。\n\n\n\n\n# 04\n\n提示\n\n在无法选择或判断的时候，离远一步，远到用更重要的原则和更长的时间尺度来衡量就清楚了。\n\n\n\n\n# 05\n\n提示\n\n今天听王兴演讲的比喻：人生，和谁一起在路上，看什么风景很重要。我最近也在想，以后要让小孩多看看传记，包括电视剧《阿信》那样的也可以，看看别人的风景和旅程，更容易想清楚自己的选择。\n\n\n\n\n# 06\n\n提示\n\n谋事不求易成，具备强烈的成功动机和韧性才能成功。\n\n\n\n\n# 07\n\n提示\n\n参考别人的意见，只是判断线索，不可作为决定的决心。\n\n\n\n\n# 08\n\n提示\n\n三年前和朋友聊天，问他对合作者对人才看重什么，其它点我已经记不住了，唯记住：不装B。当时愣了一下，随后越发觉得有道理。\n\n\n\n\n# 09\n\n提示\n\n不停地想应该如何让未来更精彩。\n\n\n\n\n# 10\n\n提示\n\n年轻人不要试图追求安全感，特别是年轻的时候，周遭环境从来都不会有绝对的安全感，如果你觉得安全了，很可能开始暗藏危机。\n\n\n\n\n# 11\n\n提示\n\n短期交往说话，忽悠会有溢价，长期交往说话，实在会有溢价。\n\n\n\n\n# 12\n\n提示\n\n用心认真的折腾，是没有风险的。\n\n\n\n\n# 13\n\n提示\n\n看缺点有难度，权衡缺点看优点更难；避免犯错有难度，接受犯错以成功更难。\n\n\n\n\n# 14\n\n提示\n\n选择比努力更重要，观念比选择更重要。\n\n\n\n\n# 15\n\n提示\n\n在不来劲的时候来劲，在太来劲的时候淡定。\n\n\n\n\n# 16\n\n提示\n\n你最终会成为你想要的样子 - 如果你真的非常想。虽然听起来有点违心，但是强大的愿望确实非常重要。\n\n\n\n\n# 17\n\n提示\n\n不抱怨，想方法。\n\n\n\n\n# 18\n\n提示\n\n越朴实不虚荣所做出的选择，会越实际而可行。\n\n\n\n\n# 19\n\n提示\n\n研究聪明人如何犯错误，回报率很高。聪明人易犯错误：\n\n 1. 妒忌他人成功；\n 2. 自命不凡；\n 3. 过于相信自己判断；\n 4. 停止学习；\n 5. 认为世界是静止的，生活在过去荣耀中；\n 6. 任何事情都有自己一套言之有据，且深信不疑的说法和理论，忘记了没有调查研究，就没有发言权。\n\n\n\n\n# 20\n\n提示\n\n坚持原则很多时候是经济的，可以看做是一种短期浮亏而长期受益的投资。\n\n\n\n\n# 21\n\n提示\n\n发现保持体力充沛精力旺盛是一项基础工作。\n\n\n\n\n# 22\n\n提示\n\n在这个信息流动越来越快越来越透明的社会，从经济的角度来看，做一个表里如一的人成本越来越高，龌龊的人会越来越倒霉， 不装不但是一个道德品性优选，而且也是更经济的。很多人还未注意到这点。\n\n\n\n\n# 23\n\n提示\n\n口碑很重要，人品很重要，信用很重要，越老越重要。\n\n\n\n\n# 24\n\n提示\n\n将事情做满，还是将事情做好，其实是很不一样的。我们容易看到将事情做满，但是容易忽略把事情做好。\n\n\n\n\n# 25\n\n提示\n\n多数人，确实一开始就想绕过困难。好的问题就是一半的答案，剩下一半的答案就是奋斗。\n\n\n\n\n# 26\n\n提示\n\n想起2年前朋友说：如果不知道让小孩阅读什么，最适合的就是传记。最近在思考与回忆：关于品格、理想、动机的形成，觉得确实如此。\n\n\n\n\n# 27\n\n提示\n\n一件事情上，在心理想对方自私的时候，想一想自己：多数发现自己也蛮自私的。在骂对方贪婪的时候，想一想自己：多数发现自己也同样贪婪。\n\n\n\n\n# 28\n\n提示\n\n凡事就怕不认真、不思考。\n\n\n\n\n# 29\n\n提示\n\n人不逼一下自己，永远不知道自己潜力有多大。很多事情非不能也，是不为也。\n\n\n\n\n# 30\n\n提示\n\n我最近经常问自己：马上有什么可行动，你是行动派吗？很多问题它不会消失，不动（犹豫/抱怨/感叹）肯定是错误，行动就有力量，哪怕是行动的准备行动， 唯有行动方能改变事情。\n\n\n\n\n# 31\n\n提示\n\n我今天的处境，都是因为我有些应该做的事情我没有做，不应该做的事情我就全做，所以要改变现状，就要从自己开始。\n\n\n\n\n# 32\n\n提示\n\n执行力到底是什么？我认为的执行力是：说到做到，不找接口，完成别人都能完成的事情。而更强的人可以做到：完成别人完不成的事。 同样的一件事，交给不同的员工，会有不同的结果，完不成的人度会有各种理由来说服自己说服领导，讲一个小困难由点到面扩大化看待。 做一个NB的的人，从此刻开始，不再找借口。\n\n\n\n\n# 33\n\n提示\n\n平庸有重力，需要逃逸速度。\n\n\n\n\n# 34\n\n提示\n\n延迟满足感和解决告别懒惰，是「优秀」最重要的两块基石。\n\n\n\n\n# 35\n\n提示\n\n积极主动是广泛优秀的素质的基础。\n\n\n\n\n# 36\n\n提示\n\n牛逼的人找方法，傻逼的人找借口。\n\n\n\n\n# 37\n\n提示\n\n强烈的动机比方法更根本。\n\n\n\n\n# 38\n\n「围堵式招聘」，我们在别人公司旁边租了一间宾馆，天天蹲点，守在别人家门口。我们想要的人才罗列了一张名单，心仪的对象下班出现了，我们就走过去，"围堵"住他。 对于好的人才，我们愿意花双倍的时间，给双倍的工资。被拒绝后，那我也会一直惦记着他。过一段时间，我们会再去"围堵"他。三顾茅庐，一直到打动他为止。\n\n\n\n\n# 39\n\n提示\n\n「马拉松式招聘」， 雷军招人时的方法，小米团队刚刚创业做手机时，团队里面没有懂硬件的，需要找一支强大的硬件团队。雷军说，这个过程很痛苦。为了找来合适的人， 每天要谈 10 - 12 小时，连续谈一个星期。而且不光雷军去谈，很多人去帮他谈，大家一起上。雷军说这没有捷径，你必须得多谈。你只有多谈，才能在少部分被你打动的人里面，找到 最优秀和最厉害的人加入。\n\n\n\n\n# 40\n\n提示\n\n如果三顾茅庐没用，就三十次顾茅庐。\n\n\n\n\n# 41\n\n提示\n\n别装，做个坦诚实在的人。团队中都是坦诚真实的人，沟通成本将小很多。\n\n\n\n\n# 42\n\n提示\n\n能否坦诚沟通，是公司团队管理的主要问题。\n\n\n\n\n# 43\n\n提示\n\n对于创业者来说，找合适的人，常常是个不作为的借口，事实是合适的人是永远不存在的，要让自己变成最合适的人。创业者永远要作为半个 HR 存在。\n\n\n\n\n# 44\n\n提示\n\n团队淘汰个人的顺序往往如下：\n\n * 第一批，明显缺陷者、众人厌恶的说谎者；\n * 第二批，不愿交流者、不合群者；\n * 第三批，有能力且慵懒者、妄图坐享其成者；\n * 第四批，居功自高者，蔑视同僚者。\n\n\n\n\n# 45\n\n提示\n\n当你给一个人足够的信任和压力的时候，他总能比原来做得更好。\n\n\n\n\n# 46\n\n提示\n\n公平的文化和公平的信任，是非常重要的，奖罚分明，大家才相信游戏规则存在，才会挑战自己更大回报，才不会有侥幸心理。\n\n\n\n\n# 47\n\n提示\n\n对于组织而言，需要把优秀的标准清晰无误地传递且不断精进，含糊和混淆其实是牺牲。\n\n\n\n\n# 48\n\n提示\n\n对于一名 CEO 而言，最艰难的事，就是抵御住想自己解决问题的欲望。你曾经身经百战，你业务是最有经验最有资格去解决问题的人，但是这样一来，却无法建立一个优秀的管理团队。\n\n\n\n\n# 49\n\n提示\n\n选择越高级影响越大的人才，越要看一些基本素质：理性、逻辑、修养、企图心、自我控制力。\n\n\n\n\n# 50\n\n提示\n\n一个企业，战略家太多不是好事，抓细节的人越多越好。\n\n\n\n\n# 51\n\n提示\n\n注意力也是可以开源节流的，欲望和杂念分散注意力要节流，锻炼身体和注意力训练是开源。\n\n\n\n\n# 52\n\n提示\n\n关于勤奋，就我所知，罕有成功者不是工作时间极长的：通用电气的 CEO 每周工作一百小时，坚持了至少十年。巴菲特为了最早看到次日的华尔街日报，经常在凌晨四点去取报纸。勤奋不是一种形式，而是 一种心理状态；享受挑战极限的过程，保持热情和好奇心，坚持不懈。\n\n\n\n\n# 53\n\n提示\n\n看年轻人的潜力，看他周末几点起，周末在干嘛，下班在干嘛。甚至不一定要干嘛，只看他想些什么。\n\n\n\n\n# 54\n\n提示\n\n不断给自己小的承诺，并努力达到。\n\n\n\n\n# 55\n\n提示\n\n创业，有人想的是要赚笔钱，有人想的则是要做件事，我觉得自己是后者。\n\n\n\n\n# 后记\n\n其实，这55条微博都是一个风格，即一些基础的原则。如果你想找到石破天惊的秘籍，可能会失望了。但是你有没有发现， 很多人之所以一事无成，恰恰是因为不遵守这些基本的原则，总想寻找一条秘密通道，以省钱、省时、省力的达成目标。物理学中有个「守恒定律」，在现实中也 挺应验。前期你或许可以偷懒取巧，但越到后期你就会越发现，曾经偷的懒取的巧，会耗费你更多的钱、时、力，最终达到一种「守恒」状态。\n\n所以，我们要对那些基础的原则保持敬畏，抵御诱惑，长期坚守，就像张一鸣说的那样：坚持原则很多时候是经济的。可以看做是一种短期浮亏，但长期收益的投资。',normalizedContent:'在张一鸣的微博中，记录了他创业依赖的思考，如果你认真看过张一鸣的微博，其实不难发现他成功的秘密。\n\n网友「雨过之后」摘录了张一鸣55条微博，原文地址：https://www.zhihu.com/question/411985422/answer/2549036773。\n\n\n# 01\n\n提示\n\n人常会不自觉记下对自己有利的部分，这是形成委屈的重要原因。\n\n\n\n\n# 02\n\n提示\n\n做不好的就别做了，要做就必须做到非常好。\n\n\n\n\n# 03\n\n提示\n\n当感到沟通困难的时候，最好的沟通方法不是想太多技巧和说法，而是更坦诚的沟通。\n\n\n\n\n# 04\n\n提示\n\n在无法选择或判断的时候，离远一步，远到用更重要的原则和更长的时间尺度来衡量就清楚了。\n\n\n\n\n# 05\n\n提示\n\n今天听王兴演讲的比喻：人生，和谁一起在路上，看什么风景很重要。我最近也在想，以后要让小孩多看看传记，包括电视剧《阿信》那样的也可以，看看别人的风景和旅程，更容易想清楚自己的选择。\n\n\n\n\n# 06\n\n提示\n\n谋事不求易成，具备强烈的成功动机和韧性才能成功。\n\n\n\n\n# 07\n\n提示\n\n参考别人的意见，只是判断线索，不可作为决定的决心。\n\n\n\n\n# 08\n\n提示\n\n三年前和朋友聊天，问他对合作者对人才看重什么，其它点我已经记不住了，唯记住：不装b。当时愣了一下，随后越发觉得有道理。\n\n\n\n\n# 09\n\n提示\n\n不停地想应该如何让未来更精彩。\n\n\n\n\n# 10\n\n提示\n\n年轻人不要试图追求安全感，特别是年轻的时候，周遭环境从来都不会有绝对的安全感，如果你觉得安全了，很可能开始暗藏危机。\n\n\n\n\n# 11\n\n提示\n\n短期交往说话，忽悠会有溢价，长期交往说话，实在会有溢价。\n\n\n\n\n# 12\n\n提示\n\n用心认真的折腾，是没有风险的。\n\n\n\n\n# 13\n\n提示\n\n看缺点有难度，权衡缺点看优点更难；避免犯错有难度，接受犯错以成功更难。\n\n\n\n\n# 14\n\n提示\n\n选择比努力更重要，观念比选择更重要。\n\n\n\n\n# 15\n\n提示\n\n在不来劲的时候来劲，在太来劲的时候淡定。\n\n\n\n\n# 16\n\n提示\n\n你最终会成为你想要的样子 - 如果你真的非常想。虽然听起来有点违心，但是强大的愿望确实非常重要。\n\n\n\n\n# 17\n\n提示\n\n不抱怨，想方法。\n\n\n\n\n# 18\n\n提示\n\n越朴实不虚荣所做出的选择，会越实际而可行。\n\n\n\n\n# 19\n\n提示\n\n研究聪明人如何犯错误，回报率很高。聪明人易犯错误：\n\n 1. 妒忌他人成功；\n 2. 自命不凡；\n 3. 过于相信自己判断；\n 4. 停止学习；\n 5. 认为世界是静止的，生活在过去荣耀中；\n 6. 任何事情都有自己一套言之有据，且深信不疑的说法和理论，忘记了没有调查研究，就没有发言权。\n\n\n\n\n# 20\n\n提示\n\n坚持原则很多时候是经济的，可以看做是一种短期浮亏而长期受益的投资。\n\n\n\n\n# 21\n\n提示\n\n发现保持体力充沛精力旺盛是一项基础工作。\n\n\n\n\n# 22\n\n提示\n\n在这个信息流动越来越快越来越透明的社会，从经济的角度来看，做一个表里如一的人成本越来越高，龌龊的人会越来越倒霉， 不装不但是一个道德品性优选，而且也是更经济的。很多人还未注意到这点。\n\n\n\n\n# 23\n\n提示\n\n口碑很重要，人品很重要，信用很重要，越老越重要。\n\n\n\n\n# 24\n\n提示\n\n将事情做满，还是将事情做好，其实是很不一样的。我们容易看到将事情做满，但是容易忽略把事情做好。\n\n\n\n\n# 25\n\n提示\n\n多数人，确实一开始就想绕过困难。好的问题就是一半的答案，剩下一半的答案就是奋斗。\n\n\n\n\n# 26\n\n提示\n\n想起2年前朋友说：如果不知道让小孩阅读什么，最适合的就是传记。最近在思考与回忆：关于品格、理想、动机的形成，觉得确实如此。\n\n\n\n\n# 27\n\n提示\n\n一件事情上，在心理想对方自私的时候，想一想自己：多数发现自己也蛮自私的。在骂对方贪婪的时候，想一想自己：多数发现自己也同样贪婪。\n\n\n\n\n# 28\n\n提示\n\n凡事就怕不认真、不思考。\n\n\n\n\n# 29\n\n提示\n\n人不逼一下自己，永远不知道自己潜力有多大。很多事情非不能也，是不为也。\n\n\n\n\n# 30\n\n提示\n\n我最近经常问自己：马上有什么可行动，你是行动派吗？很多问题它不会消失，不动（犹豫/抱怨/感叹）肯定是错误，行动就有力量，哪怕是行动的准备行动， 唯有行动方能改变事情。\n\n\n\n\n# 31\n\n提示\n\n我今天的处境，都是因为我有些应该做的事情我没有做，不应该做的事情我就全做，所以要改变现状，就要从自己开始。\n\n\n\n\n# 32\n\n提示\n\n执行力到底是什么？我认为的执行力是：说到做到，不找接口，完成别人都能完成的事情。而更强的人可以做到：完成别人完不成的事。 同样的一件事，交给不同的员工，会有不同的结果，完不成的人度会有各种理由来说服自己说服领导，讲一个小困难由点到面扩大化看待。 做一个nb的的人，从此刻开始，不再找借口。\n\n\n\n\n# 33\n\n提示\n\n平庸有重力，需要逃逸速度。\n\n\n\n\n# 34\n\n提示\n\n延迟满足感和解决告别懒惰，是「优秀」最重要的两块基石。\n\n\n\n\n# 35\n\n提示\n\n积极主动是广泛优秀的素质的基础。\n\n\n\n\n# 36\n\n提示\n\n牛逼的人找方法，傻逼的人找借口。\n\n\n\n\n# 37\n\n提示\n\n强烈的动机比方法更根本。\n\n\n\n\n# 38\n\n「围堵式招聘」，我们在别人公司旁边租了一间宾馆，天天蹲点，守在别人家门口。我们想要的人才罗列了一张名单，心仪的对象下班出现了，我们就走过去，"围堵"住他。 对于好的人才，我们愿意花双倍的时间，给双倍的工资。被拒绝后，那我也会一直惦记着他。过一段时间，我们会再去"围堵"他。三顾茅庐，一直到打动他为止。\n\n\n\n\n# 39\n\n提示\n\n「马拉松式招聘」， 雷军招人时的方法，小米团队刚刚创业做手机时，团队里面没有懂硬件的，需要找一支强大的硬件团队。雷军说，这个过程很痛苦。为了找来合适的人， 每天要谈 10 - 12 小时，连续谈一个星期。而且不光雷军去谈，很多人去帮他谈，大家一起上。雷军说这没有捷径，你必须得多谈。你只有多谈，才能在少部分被你打动的人里面，找到 最优秀和最厉害的人加入。\n\n\n\n\n# 40\n\n提示\n\n如果三顾茅庐没用，就三十次顾茅庐。\n\n\n\n\n# 41\n\n提示\n\n别装，做个坦诚实在的人。团队中都是坦诚真实的人，沟通成本将小很多。\n\n\n\n\n# 42\n\n提示\n\n能否坦诚沟通，是公司团队管理的主要问题。\n\n\n\n\n# 43\n\n提示\n\n对于创业者来说，找合适的人，常常是个不作为的借口，事实是合适的人是永远不存在的，要让自己变成最合适的人。创业者永远要作为半个 hr 存在。\n\n\n\n\n# 44\n\n提示\n\n团队淘汰个人的顺序往往如下：\n\n * 第一批，明显缺陷者、众人厌恶的说谎者；\n * 第二批，不愿交流者、不合群者；\n * 第三批，有能力且慵懒者、妄图坐享其成者；\n * 第四批，居功自高者，蔑视同僚者。\n\n\n\n\n# 45\n\n提示\n\n当你给一个人足够的信任和压力的时候，他总能比原来做得更好。\n\n\n\n\n# 46\n\n提示\n\n公平的文化和公平的信任，是非常重要的，奖罚分明，大家才相信游戏规则存在，才会挑战自己更大回报，才不会有侥幸心理。\n\n\n\n\n# 47\n\n提示\n\n对于组织而言，需要把优秀的标准清晰无误地传递且不断精进，含糊和混淆其实是牺牲。\n\n\n\n\n# 48\n\n提示\n\n对于一名 ceo 而言，最艰难的事，就是抵御住想自己解决问题的欲望。你曾经身经百战，你业务是最有经验最有资格去解决问题的人，但是这样一来，却无法建立一个优秀的管理团队。\n\n\n\n\n# 49\n\n提示\n\n选择越高级影响越大的人才，越要看一些基本素质：理性、逻辑、修养、企图心、自我控制力。\n\n\n\n\n# 50\n\n提示\n\n一个企业，战略家太多不是好事，抓细节的人越多越好。\n\n\n\n\n# 51\n\n提示\n\n注意力也是可以开源节流的，欲望和杂念分散注意力要节流，锻炼身体和注意力训练是开源。\n\n\n\n\n# 52\n\n提示\n\n关于勤奋，就我所知，罕有成功者不是工作时间极长的：通用电气的 ceo 每周工作一百小时，坚持了至少十年。巴菲特为了最早看到次日的华尔街日报，经常在凌晨四点去取报纸。勤奋不是一种形式，而是 一种心理状态；享受挑战极限的过程，保持热情和好奇心，坚持不懈。\n\n\n\n\n# 53\n\n提示\n\n看年轻人的潜力，看他周末几点起，周末在干嘛，下班在干嘛。甚至不一定要干嘛，只看他想些什么。\n\n\n\n\n# 54\n\n提示\n\n不断给自己小的承诺，并努力达到。\n\n\n\n\n# 55\n\n提示\n\n创业，有人想的是要赚笔钱，有人想的则是要做件事，我觉得自己是后者。\n\n\n\n\n# 后记\n\n其实，这55条微博都是一个风格，即一些基础的原则。如果你想找到石破天惊的秘籍，可能会失望了。但是你有没有发现， 很多人之所以一事无成，恰恰是因为不遵守这些基本的原则，总想寻找一条秘密通道，以省钱、省时、省力的达成目标。物理学中有个「守恒定律」，在现实中也 挺应验。前期你或许可以偷懒取巧，但越到后期你就会越发现，曾经偷的懒取的巧，会耗费你更多的钱、时、力，最终达到一种「守恒」状态。\n\n所以，我们要对那些基础的原则保持敬畏，抵御诱惑，长期坚守，就像张一鸣说的那样：坚持原则很多时候是经济的。可以看做是一种短期浮亏，但长期收益的投资。',charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"项目理念与愿景",frontmatter:{title:"项目理念与愿景",date:"2023-01-31T09:58:32.000Z",permalink:"/pages/e96615/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/140.%E9%A1%B9%E7%9B%AE%E7%90%86%E5%BF%B5%E4%B8%8E%E6%84%BF%E6%99%AF.html",relativePath:"50.团队管理/140.项目理念与愿景.md",key:"v-2869af78",path:"/pages/e96615/",headers:[{level:2,title:"项目开发十大原则",slug:"项目开发十大原则",normalizedTitle:"项目开发十大原则",charIndex:104},{level:2,title:"推广项目五大措施",slug:"推广项目五大措施",normalizedTitle:"推广项目五大措施",charIndex:354},{level:2,title:"项目赋能业务",slug:"项目赋能业务",normalizedTitle:"项目赋能业务",charIndex:512}],headersStr:"项目开发十大原则 推广项目五大措施 项目赋能业务",content:"为什么需要项目理念与愿景?\n\n理念可以在平台调研、设计、开发以及后续推广过程中发挥指导作用；愿景可以帮助整个团队建立一个共同的奋斗目标。因此，平台理念与愿景可以让整个团队如何做好平台的决心更加坚定。\n\n\n# 项目开发十大原则\n\n 1.  关注真正的收益，而不是技术本身\n 2.  以对外服务的水平为视角，而不是资源和技术为视角\n 3.  选择最主流和成熟的技术\n 4.  完备性比性能更重要\n 5.  制定并遵循服从标准、规范和最佳实践\n 6.  重视架构的可扩展性和可运维性\n 7.  不要迁就老系统的「技术债」\n 8.  不要依赖自己的经验，要依赖于数据和学习\n 9.  千万要小心 X - Y 问题，要追问原始需求\n 10. 激进胜于保守，创新与实用并不冲突\n\n> 摘录自：💁‍♂️ 该文章\n\n\n# 推广项目五大措施\n\n 1. 简单易用的交互界面，是推广平台的第一步\n 2. 简洁易懂的指南和教程（文字、图文、视频结合等），降低用户的抵触心理\n 3. 多渠道进行推广（企业微信群、公司内部分享会、海报等）\n 4. 向熟悉的同事进行推广，或者借助大领导进行推广\n 5. 通过其他平台进行打广告引流，增加曝光量\n\n\n# 项目赋能业务\n\n 1. 任何项目都需要有一个使用交流群，全力支撑业务使用和答疑\n 2. 积极主动接受客户的反馈，对合理的反馈，进行快速高效的解决\n 3. 深入了解业务痛点，进行分析思考、优化项目\n 4. 罗马不是一日建成的，任何一个项目也不是一个版本迭代就能做好的\n 5. 通过项目埋点，让用户和项目形成数据闭环，以便后续的优化迭代",normalizedContent:"为什么需要项目理念与愿景?\n\n理念可以在平台调研、设计、开发以及后续推广过程中发挥指导作用；愿景可以帮助整个团队建立一个共同的奋斗目标。因此，平台理念与愿景可以让整个团队如何做好平台的决心更加坚定。\n\n\n# 项目开发十大原则\n\n 1.  关注真正的收益，而不是技术本身\n 2.  以对外服务的水平为视角，而不是资源和技术为视角\n 3.  选择最主流和成熟的技术\n 4.  完备性比性能更重要\n 5.  制定并遵循服从标准、规范和最佳实践\n 6.  重视架构的可扩展性和可运维性\n 7.  不要迁就老系统的「技术债」\n 8.  不要依赖自己的经验，要依赖于数据和学习\n 9.  千万要小心 x - y 问题，要追问原始需求\n 10. 激进胜于保守，创新与实用并不冲突\n\n> 摘录自：💁‍♂️ 该文章\n\n\n# 推广项目五大措施\n\n 1. 简单易用的交互界面，是推广平台的第一步\n 2. 简洁易懂的指南和教程（文字、图文、视频结合等），降低用户的抵触心理\n 3. 多渠道进行推广（企业微信群、公司内部分享会、海报等）\n 4. 向熟悉的同事进行推广，或者借助大领导进行推广\n 5. 通过其他平台进行打广告引流，增加曝光量\n\n\n# 项目赋能业务\n\n 1. 任何项目都需要有一个使用交流群，全力支撑业务使用和答疑\n 2. 积极主动接受客户的反馈，对合理的反馈，进行快速高效的解决\n 3. 深入了解业务痛点，进行分析思考、优化项目\n 4. 罗马不是一日建成的，任何一个项目也不是一个版本迭代就能做好的\n 5. 通过项目埋点，让用户和项目形成数据闭环，以便后续的优化迭代",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"项目版本号",frontmatter:{title:"项目版本号",date:"2023-01-31T10:00:46.000Z",permalink:"/pages/971682/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/150.%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7.html",relativePath:"50.团队管理/150.项目版本号.md",key:"v-2f0df8ba",path:"/pages/971682/",headers:[{level:2,title:"为什么需要项目版本号？",slug:"为什么需要项目版本号",normalizedTitle:"为什么需要项目版本号？",charIndex:2},{level:2,title:"版本号格式",slug:"版本号格式",normalizedTitle:"版本号格式",charIndex:249},{level:2,title:"遵循规范",slug:"遵循规范",normalizedTitle:"遵循规范",charIndex:396},{level:2,title:"版本号内容模板",slug:"版本号内容模板",normalizedTitle:"版本号内容模板",charIndex:686},{level:2,title:"项目",slug:"项目",normalizedTitle:"项目",charIndex:7},{level:2,title:"OAP 服务",slug:"oap-服务",normalizedTitle:"oap 服务",charIndex:769},{level:2,title:"UI",slug:"ui",normalizedTitle:"ui",charIndex:868},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:934},{level:2,title:"对外提供服务简化模式",slug:"对外提供服务简化模式",normalizedTitle:"对外提供服务简化模式",charIndex:987}],headersStr:"为什么需要项目版本号？ 版本号格式 遵循规范 版本号内容模板 项目 OAP 服务 UI 文档 对外提供服务简化模式",content:"# 为什么需要项目版本号？\n\n在实际的需求迭代过程中，我们发现大家在开发需求的过程中，在不同的版本迭代过程中，喜欢用：一期、二期等。\n\n说明\n\n在上图中，多个平台在开发的过程中，不自觉的用上了1期、一期、二期来表示，同一个功能在不停的更新迭代。这种描述，符合人的正常思维。但是，却无法清晰的描述出当前需求迭代的功能变更大小， 是否只是bug的修复，或者是新增了功能，甚至是大的功能演进等。\n\n目前，在软件版本号的控制有各种规范和守则，这里，简单的将平台版本号缩减为三级进行约束版本的更改。\n\n\n# 版本号格式\n\n版本格式： ${主版本号}.${次版本号}.${修定号}\n\n * ${主版本号}：当你做了不兼容的API修改，或者大的框架改动。\n * ${次版本号}：当你做了向下兼容的功能新增。\n * ${修订号}：当你做了向下兼容的问题修正，通常是修复系统的一些重要bug或者漏洞。\n\n\n# 遵循规范\n\n平台开发过程中严格遵循上述规范：\n\n>  * 针对修复问题（只包括：bug或者漏洞），且需要确保不新增功能以及影响代码的稳定性，则递增${修订号}；\n>  * 如果是API保持向下兼容的新增及修改时，则递增${次版本号}；\n>  * 如果是开发了向下不兼容的代码或者改动了已有的代码逻辑，导致已有的代码部分功能不能用，则递增${主版本号}。\n>  * 版本号的权重：${主版本号} > ${次版本号} > ${修订号}，因此，${修订号}的功能修复，也需要体现在${次版本号}和${主版本号}中；同理，${次版本号}的功能新增，也需要体现在${主版本号}中。\n\n\n# 版本号内容模板\n\nV1.0.0 范例\n\n\n# 项目\n\n * 支持 JDK 16 和 17 @张三\n * 添加支持 arm64 的 docker 镜像 @李四\n\n\n# OAP 服务\n\n * 增加 Jackson 的组件定义 @张三\n * 修复 zipkin-receiver 插件没有打包进 dist @张三\n * 支持 OAL 核心引擎的转换语句 @王五\n\n\n# UI\n\n * 优化端点依赖 @李四\n * 添加 ClickHouse logo @张三\n * 优化性能分析函数模块 @李四\n\n\n# 文档\n\n * 添加文档关于逻辑端点 @张三\n * 增强更多关于数据上报和查询的协议的文档 @张三\n\n\n# 对外提供服务简化模式\n\n> 说明：上述三级的版本号，适合于提供API等版本号的控制，但是在统一平台对外提供服务时，可以简化为两级版本号。\n\n版本格式： ${主版本号}.${次版本号}.${修定号} 在对外提供服务时，可简化为：${主版本号}.${次版本号} 即 删除掉 ${修订号}，避免让用户感知到频繁的变更版本。",normalizedContent:"# 为什么需要项目版本号？\n\n在实际的需求迭代过程中，我们发现大家在开发需求的过程中，在不同的版本迭代过程中，喜欢用：一期、二期等。\n\n说明\n\n在上图中，多个平台在开发的过程中，不自觉的用上了1期、一期、二期来表示，同一个功能在不停的更新迭代。这种描述，符合人的正常思维。但是，却无法清晰的描述出当前需求迭代的功能变更大小， 是否只是bug的修复，或者是新增了功能，甚至是大的功能演进等。\n\n目前，在软件版本号的控制有各种规范和守则，这里，简单的将平台版本号缩减为三级进行约束版本的更改。\n\n\n# 版本号格式\n\n版本格式： ${主版本号}.${次版本号}.${修定号}\n\n * ${主版本号}：当你做了不兼容的api修改，或者大的框架改动。\n * ${次版本号}：当你做了向下兼容的功能新增。\n * ${修订号}：当你做了向下兼容的问题修正，通常是修复系统的一些重要bug或者漏洞。\n\n\n# 遵循规范\n\n平台开发过程中严格遵循上述规范：\n\n>  * 针对修复问题（只包括：bug或者漏洞），且需要确保不新增功能以及影响代码的稳定性，则递增${修订号}；\n>  * 如果是api保持向下兼容的新增及修改时，则递增${次版本号}；\n>  * 如果是开发了向下不兼容的代码或者改动了已有的代码逻辑，导致已有的代码部分功能不能用，则递增${主版本号}。\n>  * 版本号的权重：${主版本号} > ${次版本号} > ${修订号}，因此，${修订号}的功能修复，也需要体现在${次版本号}和${主版本号}中；同理，${次版本号}的功能新增，也需要体现在${主版本号}中。\n\n\n# 版本号内容模板\n\nv1.0.0 范例\n\n\n# 项目\n\n * 支持 jdk 16 和 17 @张三\n * 添加支持 arm64 的 docker 镜像 @李四\n\n\n# oap 服务\n\n * 增加 jackson 的组件定义 @张三\n * 修复 zipkin-receiver 插件没有打包进 dist @张三\n * 支持 oal 核心引擎的转换语句 @王五\n\n\n# ui\n\n * 优化端点依赖 @李四\n * 添加 clickhouse logo @张三\n * 优化性能分析函数模块 @李四\n\n\n# 文档\n\n * 添加文档关于逻辑端点 @张三\n * 增强更多关于数据上报和查询的协议的文档 @张三\n\n\n# 对外提供服务简化模式\n\n> 说明：上述三级的版本号，适合于提供api等版本号的控制，但是在统一平台对外提供服务时，可以简化为两级版本号。\n\n版本格式： ${主版本号}.${次版本号}.${修定号} 在对外提供服务时，可简化为：${主版本号}.${次版本号} 即 删除掉 ${修订号}，避免让用户感知到频繁的变更版本。",charsets:{cjk:!0},lastUpdated:"2023/02/06, 09:35:40",lastUpdatedTimestamp:167564734e4},{title:"团队「奖优罚劣」14条军规",frontmatter:{title:"团队「奖优罚劣」14条军规",date:"2023-02-08T09:36:27.000Z",permalink:"/pages/143f32/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/18.%20%E5%9B%A2%E9%98%9F%E5%A5%96%E4%BC%98%E7%BD%9A%E5%8A%A314%E6%9D%A1%E5%86%9B%E8%A7%84.html",relativePath:"50.团队管理/18. 团队奖优罚劣14条军规.md",key:"v-43501259",path:"/pages/143f32/",headers:[{level:2,title:"我们不建议做的",slug:"我们不建议做的",normalizedTitle:"我们不建议做的",charIndex:2},{level:2,title:"我们建议做的",slug:"我们建议做的",normalizedTitle:"我们建议做的",charIndex:272},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:468}],headersStr:"我们不建议做的 我们建议做的 总结",content:"# 我们不建议做的\n\n 1. 触碰公司红线：员工之间讨论工资、公司代码外传、透露公司商业机密等；\n 2. 在团队内宣传不利于公司或者团队的负能量内容；\n 3. 开发的系统或功能，被用户吐槽；\n 4. 新功能上线没有写 CheckList，导致线上发布问题，不管有没影响用户，都要写 CaseStudy；\n 5. 由于上线新功能导致核心功能不可用，需要写 CaseStudy；\n 6. 由于告警通知未配置，导致一些业务反馈或者稳定性组通知，算一次警告；\n 7. 与开发、业务及产品等的配合工作被投诉，当了解具体情况，发现主要是个人原因；\n\n\n# 我们建议做的\n\n 1. 开发的项目有完善的文档以及完备的告警；\n 2. 对自己做的项目能够定期进行复盘，并给出基于价值的报告产出；\n 3. 主动推进并协调各方人员完成对公司有价值的事情；\n 4. 帮助团队一起完成高难度的事情；\n 5. 组织团队活动，帮助建设团队文化；\n 6. 在公司或者平台组进行高质量技术分享，提升个人或团队影响力；\n 7. 开发的项目或者功能被用户反馈说好用。\n\n\n# 总结\n\n上面的团队「奖优罚劣」的结果会具体在大家的绩效和晋升上有所体现。",normalizedContent:"# 我们不建议做的\n\n 1. 触碰公司红线：员工之间讨论工资、公司代码外传、透露公司商业机密等；\n 2. 在团队内宣传不利于公司或者团队的负能量内容；\n 3. 开发的系统或功能，被用户吐槽；\n 4. 新功能上线没有写 checklist，导致线上发布问题，不管有没影响用户，都要写 casestudy；\n 5. 由于上线新功能导致核心功能不可用，需要写 casestudy；\n 6. 由于告警通知未配置，导致一些业务反馈或者稳定性组通知，算一次警告；\n 7. 与开发、业务及产品等的配合工作被投诉，当了解具体情况，发现主要是个人原因；\n\n\n# 我们建议做的\n\n 1. 开发的项目有完善的文档以及完备的告警；\n 2. 对自己做的项目能够定期进行复盘，并给出基于价值的报告产出；\n 3. 主动推进并协调各方人员完成对公司有价值的事情；\n 4. 帮助团队一起完成高难度的事情；\n 5. 组织团队活动，帮助建设团队文化；\n 6. 在公司或者平台组进行高质量技术分享，提升个人或团队影响力；\n 7. 开发的项目或者功能被用户反馈说好用。\n\n\n# 总结\n\n上面的团队「奖优罚劣」的结果会具体在大家的绩效和晋升上有所体现。",charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:08:04",lastUpdatedTimestamp:1679468884e3},{title:"OKR 最佳实践",frontmatter:{title:"OKR 最佳实践",date:"2022-08-15T16:07:31.000Z",permalink:"/pages/a3aa7e/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/20.%20OKR%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html",relativePath:"50.团队管理/20. OKR 最佳实践.md",key:"v-3cecfe90",path:"/pages/a3aa7e/",headers:[{level:2,title:"1.背景",slug:"_1-背景",normalizedTitle:"1.背景",charIndex:2},{level:3,title:"1.1 什么是 OKR？",slug:"_1-1-什么是-okr",normalizedTitle:"1.1 什么是 okr？",charIndex:80},{level:3,title:"1.2 OKR 有哪些公司在用？",slug:"_1-2-okr-有哪些公司在用",normalizedTitle:"1.2 okr 有哪些公司在用？",charIndex:527},{level:2,title:"2. KPI 的弊端",slug:"_2-kpi-的弊端",normalizedTitle:"2. kpi 的弊端",charIndex:649},{level:3,title:"展现形式",slug:"展现形式",normalizedTitle:"展现形式",charIndex:1179},{level:3,title:"经营假设",slug:"经营假设",normalizedTitle:"经营假设",charIndex:1655},{level:2,title:"3. OKR 解决了什么问题？",slug:"_3-okr-解决了什么问题",normalizedTitle:"3. okr 解决了什么问题？",charIndex:1983},{level:2,title:"4. OKR 最佳实践",slug:"_4-okr-最佳实践",normalizedTitle:"4. okr 最佳实践",charIndex:2391},{level:3,title:"4.1 OKR 正反例子",slug:"_4-1-okr-正反例子",normalizedTitle:"4.1 okr 正反例子",charIndex:2407},{level:2,title:"5. 如何写好 OKR？",slug:"_5-如何写好-okr",normalizedTitle:"5. 如何写好 okr？",charIndex:4753},{level:3,title:"5.1 写好领导欣赏的 O",slug:"_5-1-写好领导欣赏的-o",normalizedTitle:"5.1 写好领导欣赏的 o",charIndex:4865},{level:3,title:"5.2 万能 KR 公式",slug:"_5-2-万能-kr-公式",normalizedTitle:"5.2 万能 kr 公式",charIndex:5691},{level:3,title:"5.3 写出高质量的 OKR",slug:"_5-3-写出高质量的-okr",normalizedTitle:"5.3 写出高质量的 okr",charIndex:7056},{level:2,title:"6. OKR 落地",slug:"_6-okr-落地",normalizedTitle:"6. okr 落地",charIndex:8128},{level:3,title:"6.1 OKR 工具",slug:"_6-1-okr-工具",normalizedTitle:"6.1 okr 工具",charIndex:8633},{level:3,title:"6.2 运用 OKR",slug:"_6-2-运用-okr",normalizedTitle:"6.2 运用 okr",charIndex:8945},{level:2,title:"7. OKR 推行常见难点",slug:"_7-okr-推行常见难点",normalizedTitle:"7. okr 推行常见难点",charIndex:9573},{level:3,title:"7.1 难点",slug:"_7-1-难点",normalizedTitle:"7.1 难点",charIndex:9591},{level:3,title:"7.2 经验教训",slug:"_7-2-经验教训",normalizedTitle:"7.2 经验教训",charIndex:9995},{level:2,title:"8. OKR 常见问题",slug:"_8-okr-常见问题",normalizedTitle:"8. okr 常见问题",charIndex:10364},{level:2,title:"9. 结语",slug:"_9-结语",normalizedTitle:"9. 结语",charIndex:10380},{level:2,title:"10. 推荐阅读",slug:"_10-推荐阅读",normalizedTitle:"10. 推荐阅读",charIndex:10627}],headersStr:"1.背景 1.1 什么是 OKR？ 1.2 OKR 有哪些公司在用？ 2. KPI 的弊端 展现形式 经营假设 3. OKR 解决了什么问题？ 4. OKR 最佳实践 4.1 OKR 正反例子 5. 如何写好 OKR？ 5.1 写好领导欣赏的 O 5.2 万能 KR 公式 5.3 写出高质量的 OKR 6. OKR 落地 6.1 OKR 工具 6.2 运用 OKR 7. OKR 推行常见难点 7.1 难点 7.2 经验教训 8. OKR 常见问题 9. 结语 10. 推荐阅读",content:'# 1.背景\n\n管理就是为了提高效率，目标管理的意义就是为了让我们能在组织目标维度，提高目标从指定到落地的效率，而效率一定是跟方法论和优秀实践相关的。\n\n\n# 1.1 什么是 OKR？\n\nOKR 的全称 Objective, Key Results，即目标与关键结果。OKR 本质是一套目标管理方法，是一个包括了从目标的制定，目标实现的管理，再到目标完成的效果评价的系统工程，由因特尔公司前首席执行官安迪·格鲁夫（Andy Grove）发明。\n\n其中，O：目标（Objective），指明了：我要去哪里？KR：关键结果（Key Results），给出了：我如何才能达到那里？ 多个KR 是为了支撑 一个O 的目标实现。\n\n我们也可以把 OKR 理解为下面的公式：\n\nOKR = 战略方向（O）+ 多个增长指标（KR）\n\n\n即 O 是选择的战略方向，KR 是所选方向的增长量化结果，每个组织会有多个战略方向（O），每个战略方向会有多个增长指标（KR）。\n\n> 战略解决了组织什么核心问题？战略要帮助组织解决解决增长的问题，并把增长反映在多维度的指标上。即：既要关心"财务"指标，也要关心"非财务指标"；既要关心"业务指标"，也要关心"组织"指标。\n\n\n# 1.2 OKR 有哪些公司在用？\n\n目前，国内外已经有多个大型公司正在使用 OKR 来进行目标管理。\n\nOKR 践行公司\n\n * 国内：华为、百度、阿里、腾讯、字节跳动、京东等\n * 国外：领英、亚马逊、Dropbox、Zynga 等\n\n\n# 2. KPI 的弊端\n\nKPI 的全称是 Key Performance Indicator，即关键绩效指标。KPI 是对组织战略目标的拆解，且在运用的过程中，KPI 符合一个重要的管理原理-"二八原理"（即组织中 80%的利润是由20%的人产生的）。\n\nKPI 基本假设：从上往下拆解战略目标，同时指标也是从上往下对齐分解。如果考核的数字能够达到，组织就能够获得成功，涉及 KPI 的业务和个人就能够获得组织红利。\n\nKPI 流行于20世纪90年代，用于组织绩效管理的方法，在那个年代，产品只要能够做出来就能够给公司带来价值，比如：某营业厅的KPI是"安装10部固化"。底下的员工只是被动的自上而下根据 上级的任务，机械的进行任务的拆分执行，只要任务完成了，默认就会有收益，即完成 KPI。在如今的 VUKA 时代，机会瞬息万变，另外任务完成不代表就会有收益。KPI 的管理模式是僵化的，且任务只有被动执行，缺少员工的自驱，从而减少员工的创造力。\n\nKPI：误认为只要把这个"关键绩效指标"拿出来，目标管理就完成了。\n\nOKR：先有方向，继而关注该方向所希望获得的"关键结果"。\n\n举个例子：\n\n关于年度带孩子成长目标的 OKR 和 KPI 写法\n\nOKR 展现形式                                KPI 展现形式\nO：让孩子快乐、健康的成长到10岁                       孩子长到10岁（太过于偏向数字结果）\nKR1：今年陪伴孩子至少出去旅游一次，让孩子了解大千世界\nKR2：今年让孩子掌握游泳体育运动，并和宝宝每个月能一起去游泳馆游一次\n今年鼓励宝宝读3本关于名人传记的书开拓宝宝的思维和认知（既有过程又有结果）\n\n即：目标管理一定是一个工作过程，不能只看结果数字。（没有过程的结果就是垃圾）\n\n\n# 展现形式\n\n在 OKR 应用的展示形式中，KR 的过程量化要求我们不断对实现目标的具体路径和方式进行讨论和共识，并要能把控按路径实现过程的进度、风险和变化情况。\n\nKPI 形成的时候：国内改革开放10多年，大部分企业正是改革开发以后才建立起来的，市场是一片蓝海，只要产品能够做出来就可以盈利。在那个产品稀缺的时代，组织绩效的获得是由组织自己决定和可掌控的。\n\n比如：用 KPI 来管理组织绩效：某区域装 10 个固话，直截了当，简单可实现。\n\n\n# 经营假设\n\n对于产品的选择权正在从企业转为用户，由用户来决定用不用你的产品，组织绩效便开始由外部决定，而用户的需求是多元易变的。\n\nOKR：期望及时管理好过程，拥抱过程中的变化，通过 OKR 管理的灵活性，来适应经营环境的 VUCA 变化。\n\n类型    绩效方式   经营假设\nKPI   固化方式   根植于对组织经营的外部环境是确定的可以掌控的假设\nOKR   灵活实现   基于当下组织环境是不确定的需要探索式前行的假设\n\n理由：\n\nKPI 是由 "上级管理者制定"（KPI 管的是目标，目标指导的是个人行为，即：上级动，我才懂；上级不动，我就在那等着）\n\nKPI 的缺点：基于 KPI 的绩效管理系统的设计不能及时地响应外部环境的变化。\n\n\n# 3. OKR 解决了什么问题？\n\nOKR 解决了哪些问题？\n\n 1. 解决 "唯 KPI 论" 难题，灵活获得组织绩效\n    * KPI 由于用来管理既定的计划，忽略了外部经营环境的不确定性。\n    * OKR 建立了一系列跟踪和回顾机制，对目标的持续检视和调整活动。\n 2. 解决组织增长问题，保证组织目标落地执行\n    * 通过更加结构化的方式，进行战略管理，承载了组织战略所要的增长。\n    * O 即战略方向，KR 即增长的量化指标。\n    * 同时具有，业务型 OKR + 非业务型 OKR。\n    * 通过自上而下对齐 O 把握方向。\n    * 通过 KR 对目标具体实现路径的讨论和共识，拆解和分工。\n 3. 提升组织文化建设和领导力，激活组织中的人\n    * 让工作能够更有目标感、要有自主性、要能够持续成长。\n\n> OKR 完整的完成了从制定到过程检视和调整再到闭环评估。\n\n\n# 4. OKR 最佳实践\n\n\n# 4.1 OKR 正反例子\n\n# 4.1.1 好的 OKR\n\n首先，我们先来看下百度 CEO 李彦宏 的 OKR：\n\n序号   O                                  KR1                                                  KR2                                                     KR3\n01   打造一个空前繁荣、强大的百度移动生态                 恪守安全可控、引人向上、忠诚服务、降低门槛的产品价值观，持续优化用户体验，提升百度系产品的总时长份额   恪守良币驱逐劣币的商业价值观，实现在爱惜品牌口碑、优化用户体验基础上的收入增长，收入 ** 亿，增长**%   产品要有创新，不能总是 me too, me later\n02   主流AI赛道模式跑通，实现可持续增长                 小度小度进入千家万户，日交互次数超过*亿。                                智能驾驶、智能交通找到规模化发展路径，2019、2020均能有*倍速收入成长                  云及AI2B业务至少在*个万亿级行业称为第一。\n03   提升百度的组织能力，有效支撑住业务规模的高速增长，不拖战略的后腿   全公司成功推行OKR制度，有效降低沟通协调成本，激励大家为更高目标奋斗取得比KPI管理更好的业绩     激发从ESTAFF到一线员工的主人翁意识，使之比2018年更有意愿有能力自我驱动管理好各自负责的领域      建立合理的管理人员新陈代谢机制，打造出不少于2名业界公认的优秀领军人物\n\n以及京东各个部门自上而下的 O 是如何制定的（掌握组织中不同阶级 OKR 的对齐规律，有利于制定支撑组织战略和对于组织有价值的 OKR）：\n\n * 京东零售的 O（公司层级）:\n   * O1：下沉市场\n   * O2：全渠道\n   * O3：平台生态 -> 平台生态部门支撑\n   * O4：大中台 -> 对应平台生态的 8 个战略方向\n * 平台生态部的 O（部门层级）:\n   * O1：构建自营生态\n   * O2：构建店铺价值\n   * O3：打造平台价值主张\n   * O4：多样化平台治理\n   * O5：提升平台基础能力\n   * O6：赋能商家，提升效率\n   * O7：提升组织协同能力 -> 对应个人的 3 个工作方向\n   * O8：促进商家成长\n * 个人 O（个人层级）:\n   * O1：提升京东敏捷影响力\n   * O2：提高产研效能\n   * O3：落地 OKR 方法\n\n最后，我们再来看下，飞书 OKR 给出的范例：\n\n序号   O                              KR1                                             KR2                                           KR3\n01   为××业务提供高效稳定的系统支持               优化××算法，缩短系统对客户需求的响应时间至0.1秒，同时维持Bug率不变 @王一、@王二   ××方案平稳落地，Bug率控制在3%之内，系统无重大事故 @王一、@王二          新建××评估方案与××模型，实现「系统稳定性」的可量化分析统计\n02   打造完善的企业数据中台，实现所有产品数据的可积累、可溯源   完成数据中台框架设计与方案设计，获得高管层、业务端一致通过 @王一、@王二           完成数据中台初代版本的模型搭建，稳定性保持在99.9%以上，无重大事故 @王一、@王二   初代版本达成后实现主营业务各环节数据 100% 可溯源、可统计\n03   为即将开始的××业务储备好充分的研发人才           招聘测试工程师 10 人（满足 ×× 要求），提升团队 ×× 能力               从一线大厂招聘有相似业务经历的 Leader 1 人，带来成熟的业务经验          新业务组全员进行××课程培训并全部通过测试（60分），确保××能力达标 @王一、@王二\n\n待补充： 好的 OKR，KR 是可追溯，即过程和结果必须是可量化的\n\n# 4.1.2 不好的 OKR\n\n我们来看个飞书上给的一个不好的 OKR：\n\nO：完成××产品上线\n\n * KR1：开展用户访谈、专家访谈和竞品分析\n * KR2：优化视频观看体验\n * KR3：完善长视频的搜索和观看体验|\n\n可以看到，这条 OKR 的 O 只是单一的短语，缺少方向感，团队成员也难以承接；KR1-3 都写成了 To-Do（代办事项）或者任务，只展现了需要做的动作，但没有具体的衡量标准，难以体现对 O 的支撑逻辑。\n\n接下来，我们来看下如何优化这条 OKR\n\nO：确定 A 产品的下一阶段规划，持续优化视频和观看体验、探索增长方式\n\n * KR1：通过用户和专家访谈及竞品分析等方式，梳理下一阶段的产品规划、和内部各合作方就目标和需求达成一致 @产品同学\n * KR2：优化视频观看体验，降低跳出率 XX%，提升用户回访率至 XX% @研发同学\n * KR3：完善长视频搜索和观看体验，探索长视频作为增长的可能性，双月内完成 2 次测试 @UG\n\n可以看到，相比原先版本，这条 OKR 的 O 更明确，更有方向感；KR1-3 增加了可衡量的标准，并且 @ 了需要协作的同事。\n\n\n# 5. 如何写好 OKR？\n\n我们先来看下个人 OKR 一般包括哪些组成，如下：\n\n个人 OKR 的生成规律\n\n 1. 部分来源于上级的 OKR 拆解\n 2. 部分来源于个体职责的自驱\n 3. 部分来源于对外部的支持\n\n\n# 5.1 写好领导欣赏的 O\n\n写好 O 需要遵循的 4 个原则\n\n 1. 纵向和横向对齐：O 需要对齐组织或者部门从上往下拆解下来的战略方向，把上下级方向上的一致性称为在制定 OKR 时的 "纵向对齐"；外部依赖和支持的方向称为制定 OKR 时的 "横向对齐"。\n 2. 本季度切实可行：每季度中所写的 O 要能在本季度可执行，不能执行的就不要写。本季度努力一把是够得着、达得到的，确保 O 实现的合理性，杜绝"虚荣目标"。\n 3. 聚焦性：每个人 O 的数量在 2-5 个是相对合理的，避免一个季度制定的 O 过多，出现不聚焦的情况，以防什么都做却什么都做不好。\n 4. 融入自驱&挑战理念：不能说老板让我做什么我才做什么，只完成老板布置的任务，要能自发着去挑战其他一些额外的对组织有价值有突破的工作，让每个人都能发挥价值，创造更多绩效。\n\nO 的选择维度：\n\n * 业务维度\n * 技术维度\n\nO 的选择类型：\n\n 1. 营收型\n 2. 用户型\n 3. 效率型\n 4. 能力提升型\n\n> 上述优先级依次递减，即：营收型 > 用户型 > 效率型 > 能力提升型\n\n即：一个商业组织，不仅仅要能营收，也要关注用户价值；不仅要关注内部效率，也要关注能力的沉淀和提升。\n\n案例1：京东某业务负责人 Q2 的 O：\n\n * O1：营销能力开放，提升商家 GMV =》 营收型\n * O2：提升开放安全能力，保障数据安全 =》 能力提升型\n * O3：提升 ISV 工具商业化金额 =》营收型\n * O4：ISV 工具 618 备战，确保无故障，提升用户 618 购物体验 =》用户型\n\n案例2：京东某技术负责人 Q2 的 O：\n\n * O1：前端梯队建设，推动团队成员成长 =》能力提升型\n * O2：建设前端工具能力，来持续提升前端开发效率，并给用户带来统一的页面体验 =》效率型\n * O3：商家后台和京麦两端融合，提升商家使用体验 =》用户型\n\n\n# 5.2 万能 KR 公式\n\nKR 需要量化，但是更重要的的是增长属性。\n\n> 战略就是要解决组织增长的问题，战略思维就是增长思维。\n\n一个组织失去了增长性，代表着财务、用户的增长停滞，内部效率和组织能力的提升停滞。\n\n写好 KR 需要遵守的 4 个原则\n\n（1）过程量化且结果量化\n\n * 案例1：通过每两周拍摄 1.5 个短视频的方式来记录所有敏捷团队的敏捷过程，在微信域每个视频平均阅读和传播达到 UV 300 以上。\n * 案例2：Q2 通过京粉为京东主站拉新 1000 万\n * 案例3：依靠快手极速版，春节前 DAU 峰值突破 3 亿\n\n问题：产研团队的阶段性工作内容，并不能直接用数值量化，那该如何写这类团队的 KR 呢？ 回答：通过 "时间" + "产出" 来进行量化\n\n> 对于产品开发而言，首先需要先上线，然后通过运营或者营销的方式来获得业务效果。\n\n比如：功能或版本是在 2 月底上线，直到 3 月份才能运营。\n\n那么研发，写的KR 应该是：在 2 月底，完成 ×× 功能的上线。\n\n项目型 OKR 的写法，可以跟研发部门的 KR 写法一样，用 "项目里程碑 + 产出" 的形式来写。\n\n（2）时限性 比如：每周两，Q2，春节前\n\n> KR 需要遵守时限原则的意义就是：为了效率。\n\n（3）多维度来支撑 O 的实现\n\n * KR 的粒度围绕在以两周或者以月为周期带来的产出或者带来的效果来进行判定。\n * KR 的粒度过大，需要把该 KR 进行再次梳理拆分多个 KR 去完成。\n\n> 比如：将 "在 Q2 底，完成 ×× 项目的上线" 改成如下： - KR1：在 4 月，完成需求的调研和论证 - KR2：在 5 月，完成方案的产出和开发准备 - KR3：在 6 月，完成项目的上线\n\n（4）具备挑战性 比如： UV 300 以上，拉新 1000 万，DAU 突破 3 亿。\n\n问题：到底定什么样的数值才具备挑战呢？ 回答：一个是跟行业比，一个是跟自己比。\n\nKR 的挑战性体现在于行业的竞争上，体现在自我业绩的比较上。\n\nKR的万能公式:\n\n * 通过×××方法，指具体实现目标的路径、措施或是手段\n * 解决用户/客户×××问题，指目标的指定必须能够给用户/客户带来价值\n * 在×××时间点，意味着要有时限的概念\n * 达成×××成效，要有获得结果的量化效果\n\n业务案例1：通过极简入驻的方法，Q3 缩短商家平均入驻时长达 10 天\n\n优化为：通过极简入驻的方法，解决商家入驻流程复杂学习成本高的问题，Q3 缩短商家平均入驻时长达 10 天。\n\n业务案例2：通过实践骨架屏技术，Q3 让商家满意度达 85 分\n\n优化为：通过实践骨架屏技术，解决前后端分离中页面加载白屏过长导致用户体验差的问题，Q3 让商家满意度达 85 分\n\n总结:\n\n * 在组织中，增长一定是基于目标的制定来实现\n * 结合 OKR，用好 KR 的增长属性，就帮助我们找到了一种管理组织业务增长的方法\n * 通过 KR的万能公式，从经营的用户、客户、组织痛点出发，明确实时增长的关键路径，促成组织目标的制定和详细沟通和快速共识，有效解决了组织经营的成长性\n\n警惕\n\n一定不要把 KR 写成 To-Do（代办事项）或者任务。\n\n\n# 5.3 写出高质量的 OKR\n\n案例1：京东某部门前端研发负责人 OKR\n\nO     建设前端工具能力，持续提升前端开发效率和用户体验\nKR1   通过实践骨架屏技术，解决前后端分离中页面加载白屏过长，导致用户体验差的问题，让商家满意度提升达 85 分\nKR2   通过升级 Wot Design 移动端组件库 UI，发布 2.0 版本，解决移动化中 H5 和小程序的插件页面与京麦\n      APP 整体前端规范不一致的问题，从而提升用户对京麦 APP 的使用体验，沉淀团队移动端组件库能力\nKR3   通过实践 PWA 渐进式网络应用技术，尝试将优秀的前端技术引入到业务项目中，从而提升项目的用户体验，沉淀团队的 PWA\n      实践经验\n\n> 在所有的 KR 制定中，更重要的是每个 KR 从内容上就能看出都是想要解决用户的问题，从而来提升用户体验。\n\n"用户视角" + "功能上线"\n\n案例3：京东某部门前端研发负责人 OKR\n\n> 项目型 OKR 如何编写？\n\nO     打造行业领先的商品运营阵地，为商家降本增效\nKR1   8月中旬，通过对行业调研及竞品分析、商家和事业部调研产出调研报告和结论，精准识别商家商品发布的痛点问题\nKR2   8月底，通过统计商品发布页面商家使用时长，用数据来验证识别的商家商品发布痛点问题的假设合理性\nKR3   9.30前，圈定商品发布改造的试点商家，通过试点类目的智能商品发布流程简化版MVP上线，灰度覆盖至少*个三级类目，保证商品信息自动填充料达×%以上\nKR4   在10.31前，完成*个三级类目的智能简化版商品发布的扩充和应用，确保商品信息自动填充率均达×%以上\n\n * 创始人 OKR\n * 公司战略型 OKR\n * 研发负责人 OKR\n * 项目型 OKR\n\n总结：\n\n类型      O                                           KR\n属性      迭代                                          增长\n遵守的原则   1. 纵向和横向对齐 2. 本季度切实可行 3. 聚焦性 4. 融入自驱&挑战理念   1. 过程量化且结果量化 2. 时限性 3. 多维度支撑 O 的实现 4. 具备挑战性\n类型和公式   O 的选择类型：营收、用户、效率和能力                         通过×××方法，解决(用户/客户)×××问题，在×××时间点，达到×××成效\n\n\n# 6. OKR 落地\n\nOKR 作为一个新事物，它的收益目前已经得到多家大型公司的验证，但是在实际推广的过程中，仍然可能会遇到各种"阻力"，所以需要我们进行科学的推广创新的理论。美国学者埃弗雷特·罗杰斯于20世纪60年代提出「创新扩散理论」，该理论是传播效果研究的经典理论之一，是一个关于通过媒介劝服人们接受新观念、新事物、新产品的理论，侧重大众传播对社会和文化的影响。\n\n该理论把用户划分为一下几种对象：\n\n 1. 创新者（Innovator） 2.5%：大胆热衷于尝试新观念，更见多识广的社会关系\n 2. 早期使用者（Early Adopters） 13.5%：地位受人尊敬，通常是社会系统内部最高层次的意见领袖。\n 3. 早期大众（Early Majority） 34%：深思熟虑，经常与同事沟通，但很少居于意见领袖的地位。\n 4. 后期大众（Late Majority） 34%：疑虑较多，通常是出于经济必要或社会关系压力。\n 5. 滞后者（Laggards） 16%：因循守旧，局限于地方观念，比较闭塞，参考资料是以往经验。\n\n对于任何的变化，进入一个群体后的扩散速度，就会有先后、快慢之分。\n\n\n# 6.1 OKR 工具\n\n目前，国内有不少提供 OKR 工具的 SasS 厂商，且做产品的思路不尽相同。\n\nOKR 从项目管理切入，典型的服务商包括：Worktile、Teambition、日事清、Tower 等；从人力资源切入，OKR 作为一个目标管理工具，激发个体的产出，最终带动组织的升级，典型 的服务商包括：飞书 OKR、叮当 OKR、Tita、腾讯 HR 助手、轻雀协作（快手旗下） 等。\n\n关于各种 OKR 的工具是各有利弊，飞书 OKR 的这边文档不同 OKR 工具的亮点功能中，进行了部分对比，仅供参考。\n\n由于公司背景以及飞书的整个生态体系相对比较完善，因此，这里的 OKR 工具采用飞书 OKR。\n\n\n# 6.2 运用 OKR\n\n需要让团队的成员真正明白 OKR 的益处，并且相信 OKR 能解决组织目标管理的问题。华为在组织管理中给出了一条经验："先僵化，再固化，再优化"。因此，OKR 的运用，需要给出一条让大家看得见、摸得着的固定套路模板。\n\n# 6.2.1 制定 OKR 的时机\n\nOKR 的制定周期可以是周、月、季度、年，没有一种固定的周期模式，需要选择一种合适自己的团队目标管理周期即可。对于互联网领域的行业比较推荐按照季度的维度，并且制定 OKR 的时机推荐在每个季度开始的，前半个月开始制定。\n\n> 每个季度的开始，提前半个月开始制定 OKR\n\n# 6.2.2 过程检视和调整\n\n周会剩余目标和信心指数跟踪 OKR 的三级对应关系：： O =》KR =》工作任务\n\n * 讨论既定 OKR 的完成进度，以及存在的变化、问题和风险。\n * 共识新增的 OKR 的情况。\n\n> 周会OKR目的：给上下级能够正式沟通的机会，互相探讨问题，交换意见，保持信息上下流动。\n\n# 6.2.3 季度末闭环管理\n\n 3. OKR 绩效如何评估 第一步：员工自评。 第二部：360°环评。 第三部：上级评估。 第四部：隔级校准。 不基于 OKR 完成率，而是实际产出的绩效评估方式。确保员工在设置挑战型目标时，没有后顾之忧。\n\n> OKR 是目标管理工具，绩效评估是绩效管理工具。两个是清晰分开的。目标管理工具用于价值的创造，绩效评估工具用于价值的评估。\n\n\n# 7. OKR 推行常见难点\n\n\n# 7.1 难点\n\n 1. 不坚定：组织从上而下没有下定决心要从 KPI 转型到 OKR，发现大家抗拒了，就放弃了。\n 2. 不彻底：HRBP 没能彻底对 OKR 的真正理念进行全员的培训学习。\n 3. 抵制：员工抵制 OKR，不认可 OKR 能够带来组织效益的提升。\n 4. 没办法量化：KR 力争让过程和结果可量化，但是很多项目根本不关注量化（数字化），进一步否定 OKR 没办法书写。\n 5. 只追求 0-1：很多项目追求 0-1 的目标，认为项目只要上线了，就能使公司获得最大收益，后续的数字化等后面再弄，然后不了了之。\n 6. 把KR 当成任务：员工在制定 OKR 的时候，把 KR 写成任务，即：套着 OKR 的外壳，做着 KPI 的事情。\n 7. 视野受限：研发侧一直以完成项目开发为责任，缺少产品意识（没能深入用户，进而缺少用户思维），导致做出来的东西没人用，没有为公司产生应有的价值。\n\n\n# 7.2 经验教训\n\n 1. KR 需要有负责人，没有负责人的 KR，就没有落地的可行性。 KR 的负责人不清会导致在团队中分工不明确，边界不清就会带来互相推脱，从而让 KR 的完成就没有了具体明确的承接和推动人。\n 2. 针对每个制定的 KR，如果有的 KR 涉及外部依赖，需要及时和依赖方、配合方确认可行性。 KR 的负责人要主动找人沟通，不让自己一个人产出的 KR 会有很多缺陷。\n 3. KR 的制定不是一次性就能完善梳理。 需要在不断实践过程中调整到最合适，不要希望 KR 能像 O 一样，能够很快地共识处理。\n 4. 作为团队或者部门 Leader 需要及早参与。 如果不能及时加入团队的 OKR 的指定过程，就会导致信息同步，带来很多重复思考和返工成本。\n 5. OKR 用着用着就变了形，做着做着就变成了 KPI。\n\n\n# 8. OKR 常见问题\n\n\n# 9. 结语\n\n"离代码很近，离用户很远。"\n\n马云说："人离职无外乎两个原因：要么钱少了，要么不爽了"\n\n在离职原因中，除了薪酬福利之外，价值观念、文化认同也成为影响离职的主要原因。\n\nOKR 拥抱不确定性、以人为本、增长导向、重视过程。\n\n如果在一个组织中，被分配的工作大部分不是自己想做的，就会导致个人目标和组织目标产生偏移。OKR 通过让个人\n\nOKR 注重公平、公平、公平，聚焦营收、用户、效率和能力维度，让制定的目标都是以价值为导向，不以苦劳（即：工作量的多少）为绩效导向。\n\n\n# 10. 推荐阅读\n\n 1. 字节跳动 OKR 文档',normalizedContent:'# 1.背景\n\n管理就是为了提高效率，目标管理的意义就是为了让我们能在组织目标维度，提高目标从指定到落地的效率，而效率一定是跟方法论和优秀实践相关的。\n\n\n# 1.1 什么是 okr？\n\nokr 的全称 objective, key results，即目标与关键结果。okr 本质是一套目标管理方法，是一个包括了从目标的制定，目标实现的管理，再到目标完成的效果评价的系统工程，由因特尔公司前首席执行官安迪·格鲁夫（andy grove）发明。\n\n其中，o：目标（objective），指明了：我要去哪里？kr：关键结果（key results），给出了：我如何才能达到那里？ 多个kr 是为了支撑 一个o 的目标实现。\n\n我们也可以把 okr 理解为下面的公式：\n\nokr = 战略方向（o）+ 多个增长指标（kr）\n\n\n即 o 是选择的战略方向，kr 是所选方向的增长量化结果，每个组织会有多个战略方向（o），每个战略方向会有多个增长指标（kr）。\n\n> 战略解决了组织什么核心问题？战略要帮助组织解决解决增长的问题，并把增长反映在多维度的指标上。即：既要关心"财务"指标，也要关心"非财务指标"；既要关心"业务指标"，也要关心"组织"指标。\n\n\n# 1.2 okr 有哪些公司在用？\n\n目前，国内外已经有多个大型公司正在使用 okr 来进行目标管理。\n\nokr 践行公司\n\n * 国内：华为、百度、阿里、腾讯、字节跳动、京东等\n * 国外：领英、亚马逊、dropbox、zynga 等\n\n\n# 2. kpi 的弊端\n\nkpi 的全称是 key performance indicator，即关键绩效指标。kpi 是对组织战略目标的拆解，且在运用的过程中，kpi 符合一个重要的管理原理-"二八原理"（即组织中 80%的利润是由20%的人产生的）。\n\nkpi 基本假设：从上往下拆解战略目标，同时指标也是从上往下对齐分解。如果考核的数字能够达到，组织就能够获得成功，涉及 kpi 的业务和个人就能够获得组织红利。\n\nkpi 流行于20世纪90年代，用于组织绩效管理的方法，在那个年代，产品只要能够做出来就能够给公司带来价值，比如：某营业厅的kpi是"安装10部固化"。底下的员工只是被动的自上而下根据 上级的任务，机械的进行任务的拆分执行，只要任务完成了，默认就会有收益，即完成 kpi。在如今的 vuka 时代，机会瞬息万变，另外任务完成不代表就会有收益。kpi 的管理模式是僵化的，且任务只有被动执行，缺少员工的自驱，从而减少员工的创造力。\n\nkpi：误认为只要把这个"关键绩效指标"拿出来，目标管理就完成了。\n\nokr：先有方向，继而关注该方向所希望获得的"关键结果"。\n\n举个例子：\n\n关于年度带孩子成长目标的 okr 和 kpi 写法\n\nokr 展现形式                                kpi 展现形式\no：让孩子快乐、健康的成长到10岁                       孩子长到10岁（太过于偏向数字结果）\nkr1：今年陪伴孩子至少出去旅游一次，让孩子了解大千世界\nkr2：今年让孩子掌握游泳体育运动，并和宝宝每个月能一起去游泳馆游一次\n今年鼓励宝宝读3本关于名人传记的书开拓宝宝的思维和认知（既有过程又有结果）\n\n即：目标管理一定是一个工作过程，不能只看结果数字。（没有过程的结果就是垃圾）\n\n\n# 展现形式\n\n在 okr 应用的展示形式中，kr 的过程量化要求我们不断对实现目标的具体路径和方式进行讨论和共识，并要能把控按路径实现过程的进度、风险和变化情况。\n\nkpi 形成的时候：国内改革开放10多年，大部分企业正是改革开发以后才建立起来的，市场是一片蓝海，只要产品能够做出来就可以盈利。在那个产品稀缺的时代，组织绩效的获得是由组织自己决定和可掌控的。\n\n比如：用 kpi 来管理组织绩效：某区域装 10 个固话，直截了当，简单可实现。\n\n\n# 经营假设\n\n对于产品的选择权正在从企业转为用户，由用户来决定用不用你的产品，组织绩效便开始由外部决定，而用户的需求是多元易变的。\n\nokr：期望及时管理好过程，拥抱过程中的变化，通过 okr 管理的灵活性，来适应经营环境的 vuca 变化。\n\n类型    绩效方式   经营假设\nkpi   固化方式   根植于对组织经营的外部环境是确定的可以掌控的假设\nokr   灵活实现   基于当下组织环境是不确定的需要探索式前行的假设\n\n理由：\n\nkpi 是由 "上级管理者制定"（kpi 管的是目标，目标指导的是个人行为，即：上级动，我才懂；上级不动，我就在那等着）\n\nkpi 的缺点：基于 kpi 的绩效管理系统的设计不能及时地响应外部环境的变化。\n\n\n# 3. okr 解决了什么问题？\n\nokr 解决了哪些问题？\n\n 1. 解决 "唯 kpi 论" 难题，灵活获得组织绩效\n    * kpi 由于用来管理既定的计划，忽略了外部经营环境的不确定性。\n    * okr 建立了一系列跟踪和回顾机制，对目标的持续检视和调整活动。\n 2. 解决组织增长问题，保证组织目标落地执行\n    * 通过更加结构化的方式，进行战略管理，承载了组织战略所要的增长。\n    * o 即战略方向，kr 即增长的量化指标。\n    * 同时具有，业务型 okr + 非业务型 okr。\n    * 通过自上而下对齐 o 把握方向。\n    * 通过 kr 对目标具体实现路径的讨论和共识，拆解和分工。\n 3. 提升组织文化建设和领导力，激活组织中的人\n    * 让工作能够更有目标感、要有自主性、要能够持续成长。\n\n> okr 完整的完成了从制定到过程检视和调整再到闭环评估。\n\n\n# 4. okr 最佳实践\n\n\n# 4.1 okr 正反例子\n\n# 4.1.1 好的 okr\n\n首先，我们先来看下百度 ceo 李彦宏 的 okr：\n\n序号   o                                  kr1                                                  kr2                                                     kr3\n01   打造一个空前繁荣、强大的百度移动生态                 恪守安全可控、引人向上、忠诚服务、降低门槛的产品价值观，持续优化用户体验，提升百度系产品的总时长份额   恪守良币驱逐劣币的商业价值观，实现在爱惜品牌口碑、优化用户体验基础上的收入增长，收入 ** 亿，增长**%   产品要有创新，不能总是 me too, me later\n02   主流ai赛道模式跑通，实现可持续增长                 小度小度进入千家万户，日交互次数超过*亿。                                智能驾驶、智能交通找到规模化发展路径，2019、2020均能有*倍速收入成长                  云及ai2b业务至少在*个万亿级行业称为第一。\n03   提升百度的组织能力，有效支撑住业务规模的高速增长，不拖战略的后腿   全公司成功推行okr制度，有效降低沟通协调成本，激励大家为更高目标奋斗取得比kpi管理更好的业绩     激发从estaff到一线员工的主人翁意识，使之比2018年更有意愿有能力自我驱动管理好各自负责的领域      建立合理的管理人员新陈代谢机制，打造出不少于2名业界公认的优秀领军人物\n\n以及京东各个部门自上而下的 o 是如何制定的（掌握组织中不同阶级 okr 的对齐规律，有利于制定支撑组织战略和对于组织有价值的 okr）：\n\n * 京东零售的 o（公司层级）:\n   * o1：下沉市场\n   * o2：全渠道\n   * o3：平台生态 -> 平台生态部门支撑\n   * o4：大中台 -> 对应平台生态的 8 个战略方向\n * 平台生态部的 o（部门层级）:\n   * o1：构建自营生态\n   * o2：构建店铺价值\n   * o3：打造平台价值主张\n   * o4：多样化平台治理\n   * o5：提升平台基础能力\n   * o6：赋能商家，提升效率\n   * o7：提升组织协同能力 -> 对应个人的 3 个工作方向\n   * o8：促进商家成长\n * 个人 o（个人层级）:\n   * o1：提升京东敏捷影响力\n   * o2：提高产研效能\n   * o3：落地 okr 方法\n\n最后，我们再来看下，飞书 okr 给出的范例：\n\n序号   o                              kr1                                             kr2                                           kr3\n01   为××业务提供高效稳定的系统支持               优化××算法，缩短系统对客户需求的响应时间至0.1秒，同时维持bug率不变 @王一、@王二   ××方案平稳落地，bug率控制在3%之内，系统无重大事故 @王一、@王二          新建××评估方案与××模型，实现「系统稳定性」的可量化分析统计\n02   打造完善的企业数据中台，实现所有产品数据的可积累、可溯源   完成数据中台框架设计与方案设计，获得高管层、业务端一致通过 @王一、@王二           完成数据中台初代版本的模型搭建，稳定性保持在99.9%以上，无重大事故 @王一、@王二   初代版本达成后实现主营业务各环节数据 100% 可溯源、可统计\n03   为即将开始的××业务储备好充分的研发人才           招聘测试工程师 10 人（满足 ×× 要求），提升团队 ×× 能力               从一线大厂招聘有相似业务经历的 leader 1 人，带来成熟的业务经验          新业务组全员进行××课程培训并全部通过测试（60分），确保××能力达标 @王一、@王二\n\n待补充： 好的 okr，kr 是可追溯，即过程和结果必须是可量化的\n\n# 4.1.2 不好的 okr\n\n我们来看个飞书上给的一个不好的 okr：\n\no：完成××产品上线\n\n * kr1：开展用户访谈、专家访谈和竞品分析\n * kr2：优化视频观看体验\n * kr3：完善长视频的搜索和观看体验|\n\n可以看到，这条 okr 的 o 只是单一的短语，缺少方向感，团队成员也难以承接；kr1-3 都写成了 to-do（代办事项）或者任务，只展现了需要做的动作，但没有具体的衡量标准，难以体现对 o 的支撑逻辑。\n\n接下来，我们来看下如何优化这条 okr\n\no：确定 a 产品的下一阶段规划，持续优化视频和观看体验、探索增长方式\n\n * kr1：通过用户和专家访谈及竞品分析等方式，梳理下一阶段的产品规划、和内部各合作方就目标和需求达成一致 @产品同学\n * kr2：优化视频观看体验，降低跳出率 xx%，提升用户回访率至 xx% @研发同学\n * kr3：完善长视频搜索和观看体验，探索长视频作为增长的可能性，双月内完成 2 次测试 @ug\n\n可以看到，相比原先版本，这条 okr 的 o 更明确，更有方向感；kr1-3 增加了可衡量的标准，并且 @ 了需要协作的同事。\n\n\n# 5. 如何写好 okr？\n\n我们先来看下个人 okr 一般包括哪些组成，如下：\n\n个人 okr 的生成规律\n\n 1. 部分来源于上级的 okr 拆解\n 2. 部分来源于个体职责的自驱\n 3. 部分来源于对外部的支持\n\n\n# 5.1 写好领导欣赏的 o\n\n写好 o 需要遵循的 4 个原则\n\n 1. 纵向和横向对齐：o 需要对齐组织或者部门从上往下拆解下来的战略方向，把上下级方向上的一致性称为在制定 okr 时的 "纵向对齐"；外部依赖和支持的方向称为制定 okr 时的 "横向对齐"。\n 2. 本季度切实可行：每季度中所写的 o 要能在本季度可执行，不能执行的就不要写。本季度努力一把是够得着、达得到的，确保 o 实现的合理性，杜绝"虚荣目标"。\n 3. 聚焦性：每个人 o 的数量在 2-5 个是相对合理的，避免一个季度制定的 o 过多，出现不聚焦的情况，以防什么都做却什么都做不好。\n 4. 融入自驱&挑战理念：不能说老板让我做什么我才做什么，只完成老板布置的任务，要能自发着去挑战其他一些额外的对组织有价值有突破的工作，让每个人都能发挥价值，创造更多绩效。\n\no 的选择维度：\n\n * 业务维度\n * 技术维度\n\no 的选择类型：\n\n 1. 营收型\n 2. 用户型\n 3. 效率型\n 4. 能力提升型\n\n> 上述优先级依次递减，即：营收型 > 用户型 > 效率型 > 能力提升型\n\n即：一个商业组织，不仅仅要能营收，也要关注用户价值；不仅要关注内部效率，也要关注能力的沉淀和提升。\n\n案例1：京东某业务负责人 q2 的 o：\n\n * o1：营销能力开放，提升商家 gmv =》 营收型\n * o2：提升开放安全能力，保障数据安全 =》 能力提升型\n * o3：提升 isv 工具商业化金额 =》营收型\n * o4：isv 工具 618 备战，确保无故障，提升用户 618 购物体验 =》用户型\n\n案例2：京东某技术负责人 q2 的 o：\n\n * o1：前端梯队建设，推动团队成员成长 =》能力提升型\n * o2：建设前端工具能力，来持续提升前端开发效率，并给用户带来统一的页面体验 =》效率型\n * o3：商家后台和京麦两端融合，提升商家使用体验 =》用户型\n\n\n# 5.2 万能 kr 公式\n\nkr 需要量化，但是更重要的的是增长属性。\n\n> 战略就是要解决组织增长的问题，战略思维就是增长思维。\n\n一个组织失去了增长性，代表着财务、用户的增长停滞，内部效率和组织能力的提升停滞。\n\n写好 kr 需要遵守的 4 个原则\n\n（1）过程量化且结果量化\n\n * 案例1：通过每两周拍摄 1.5 个短视频的方式来记录所有敏捷团队的敏捷过程，在微信域每个视频平均阅读和传播达到 uv 300 以上。\n * 案例2：q2 通过京粉为京东主站拉新 1000 万\n * 案例3：依靠快手极速版，春节前 dau 峰值突破 3 亿\n\n问题：产研团队的阶段性工作内容，并不能直接用数值量化，那该如何写这类团队的 kr 呢？ 回答：通过 "时间" + "产出" 来进行量化\n\n> 对于产品开发而言，首先需要先上线，然后通过运营或者营销的方式来获得业务效果。\n\n比如：功能或版本是在 2 月底上线，直到 3 月份才能运营。\n\n那么研发，写的kr 应该是：在 2 月底，完成 ×× 功能的上线。\n\n项目型 okr 的写法，可以跟研发部门的 kr 写法一样，用 "项目里程碑 + 产出" 的形式来写。\n\n（2）时限性 比如：每周两，q2，春节前\n\n> kr 需要遵守时限原则的意义就是：为了效率。\n\n（3）多维度来支撑 o 的实现\n\n * kr 的粒度围绕在以两周或者以月为周期带来的产出或者带来的效果来进行判定。\n * kr 的粒度过大，需要把该 kr 进行再次梳理拆分多个 kr 去完成。\n\n> 比如：将 "在 q2 底，完成 ×× 项目的上线" 改成如下： - kr1：在 4 月，完成需求的调研和论证 - kr2：在 5 月，完成方案的产出和开发准备 - kr3：在 6 月，完成项目的上线\n\n（4）具备挑战性 比如： uv 300 以上，拉新 1000 万，dau 突破 3 亿。\n\n问题：到底定什么样的数值才具备挑战呢？ 回答：一个是跟行业比，一个是跟自己比。\n\nkr 的挑战性体现在于行业的竞争上，体现在自我业绩的比较上。\n\nkr的万能公式:\n\n * 通过×××方法，指具体实现目标的路径、措施或是手段\n * 解决用户/客户×××问题，指目标的指定必须能够给用户/客户带来价值\n * 在×××时间点，意味着要有时限的概念\n * 达成×××成效，要有获得结果的量化效果\n\n业务案例1：通过极简入驻的方法，q3 缩短商家平均入驻时长达 10 天\n\n优化为：通过极简入驻的方法，解决商家入驻流程复杂学习成本高的问题，q3 缩短商家平均入驻时长达 10 天。\n\n业务案例2：通过实践骨架屏技术，q3 让商家满意度达 85 分\n\n优化为：通过实践骨架屏技术，解决前后端分离中页面加载白屏过长导致用户体验差的问题，q3 让商家满意度达 85 分\n\n总结:\n\n * 在组织中，增长一定是基于目标的制定来实现\n * 结合 okr，用好 kr 的增长属性，就帮助我们找到了一种管理组织业务增长的方法\n * 通过 kr的万能公式，从经营的用户、客户、组织痛点出发，明确实时增长的关键路径，促成组织目标的制定和详细沟通和快速共识，有效解决了组织经营的成长性\n\n警惕\n\n一定不要把 kr 写成 to-do（代办事项）或者任务。\n\n\n# 5.3 写出高质量的 okr\n\n案例1：京东某部门前端研发负责人 okr\n\no     建设前端工具能力，持续提升前端开发效率和用户体验\nkr1   通过实践骨架屏技术，解决前后端分离中页面加载白屏过长，导致用户体验差的问题，让商家满意度提升达 85 分\nkr2   通过升级 wot design 移动端组件库 ui，发布 2.0 版本，解决移动化中 h5 和小程序的插件页面与京麦\n      app 整体前端规范不一致的问题，从而提升用户对京麦 app 的使用体验，沉淀团队移动端组件库能力\nkr3   通过实践 pwa 渐进式网络应用技术，尝试将优秀的前端技术引入到业务项目中，从而提升项目的用户体验，沉淀团队的 pwa\n      实践经验\n\n> 在所有的 kr 制定中，更重要的是每个 kr 从内容上就能看出都是想要解决用户的问题，从而来提升用户体验。\n\n"用户视角" + "功能上线"\n\n案例3：京东某部门前端研发负责人 okr\n\n> 项目型 okr 如何编写？\n\no     打造行业领先的商品运营阵地，为商家降本增效\nkr1   8月中旬，通过对行业调研及竞品分析、商家和事业部调研产出调研报告和结论，精准识别商家商品发布的痛点问题\nkr2   8月底，通过统计商品发布页面商家使用时长，用数据来验证识别的商家商品发布痛点问题的假设合理性\nkr3   9.30前，圈定商品发布改造的试点商家，通过试点类目的智能商品发布流程简化版mvp上线，灰度覆盖至少*个三级类目，保证商品信息自动填充料达×%以上\nkr4   在10.31前，完成*个三级类目的智能简化版商品发布的扩充和应用，确保商品信息自动填充率均达×%以上\n\n * 创始人 okr\n * 公司战略型 okr\n * 研发负责人 okr\n * 项目型 okr\n\n总结：\n\n类型      o                                           kr\n属性      迭代                                          增长\n遵守的原则   1. 纵向和横向对齐 2. 本季度切实可行 3. 聚焦性 4. 融入自驱&挑战理念   1. 过程量化且结果量化 2. 时限性 3. 多维度支撑 o 的实现 4. 具备挑战性\n类型和公式   o 的选择类型：营收、用户、效率和能力                         通过×××方法，解决(用户/客户)×××问题，在×××时间点，达到×××成效\n\n\n# 6. okr 落地\n\nokr 作为一个新事物，它的收益目前已经得到多家大型公司的验证，但是在实际推广的过程中，仍然可能会遇到各种"阻力"，所以需要我们进行科学的推广创新的理论。美国学者埃弗雷特·罗杰斯于20世纪60年代提出「创新扩散理论」，该理论是传播效果研究的经典理论之一，是一个关于通过媒介劝服人们接受新观念、新事物、新产品的理论，侧重大众传播对社会和文化的影响。\n\n该理论把用户划分为一下几种对象：\n\n 1. 创新者（innovator） 2.5%：大胆热衷于尝试新观念，更见多识广的社会关系\n 2. 早期使用者（early adopters） 13.5%：地位受人尊敬，通常是社会系统内部最高层次的意见领袖。\n 3. 早期大众（early majority） 34%：深思熟虑，经常与同事沟通，但很少居于意见领袖的地位。\n 4. 后期大众（late majority） 34%：疑虑较多，通常是出于经济必要或社会关系压力。\n 5. 滞后者（laggards） 16%：因循守旧，局限于地方观念，比较闭塞，参考资料是以往经验。\n\n对于任何的变化，进入一个群体后的扩散速度，就会有先后、快慢之分。\n\n\n# 6.1 okr 工具\n\n目前，国内有不少提供 okr 工具的 sass 厂商，且做产品的思路不尽相同。\n\nokr 从项目管理切入，典型的服务商包括：worktile、teambition、日事清、tower 等；从人力资源切入，okr 作为一个目标管理工具，激发个体的产出，最终带动组织的升级，典型 的服务商包括：飞书 okr、叮当 okr、tita、腾讯 hr 助手、轻雀协作（快手旗下） 等。\n\n关于各种 okr 的工具是各有利弊，飞书 okr 的这边文档不同 okr 工具的亮点功能中，进行了部分对比，仅供参考。\n\n由于公司背景以及飞书的整个生态体系相对比较完善，因此，这里的 okr 工具采用飞书 okr。\n\n\n# 6.2 运用 okr\n\n需要让团队的成员真正明白 okr 的益处，并且相信 okr 能解决组织目标管理的问题。华为在组织管理中给出了一条经验："先僵化，再固化，再优化"。因此，okr 的运用，需要给出一条让大家看得见、摸得着的固定套路模板。\n\n# 6.2.1 制定 okr 的时机\n\nokr 的制定周期可以是周、月、季度、年，没有一种固定的周期模式，需要选择一种合适自己的团队目标管理周期即可。对于互联网领域的行业比较推荐按照季度的维度，并且制定 okr 的时机推荐在每个季度开始的，前半个月开始制定。\n\n> 每个季度的开始，提前半个月开始制定 okr\n\n# 6.2.2 过程检视和调整\n\n周会剩余目标和信心指数跟踪 okr 的三级对应关系：： o =》kr =》工作任务\n\n * 讨论既定 okr 的完成进度，以及存在的变化、问题和风险。\n * 共识新增的 okr 的情况。\n\n> 周会okr目的：给上下级能够正式沟通的机会，互相探讨问题，交换意见，保持信息上下流动。\n\n# 6.2.3 季度末闭环管理\n\n 3. okr 绩效如何评估 第一步：员工自评。 第二部：360°环评。 第三部：上级评估。 第四部：隔级校准。 不基于 okr 完成率，而是实际产出的绩效评估方式。确保员工在设置挑战型目标时，没有后顾之忧。\n\n> okr 是目标管理工具，绩效评估是绩效管理工具。两个是清晰分开的。目标管理工具用于价值的创造，绩效评估工具用于价值的评估。\n\n\n# 7. okr 推行常见难点\n\n\n# 7.1 难点\n\n 1. 不坚定：组织从上而下没有下定决心要从 kpi 转型到 okr，发现大家抗拒了，就放弃了。\n 2. 不彻底：hrbp 没能彻底对 okr 的真正理念进行全员的培训学习。\n 3. 抵制：员工抵制 okr，不认可 okr 能够带来组织效益的提升。\n 4. 没办法量化：kr 力争让过程和结果可量化，但是很多项目根本不关注量化（数字化），进一步否定 okr 没办法书写。\n 5. 只追求 0-1：很多项目追求 0-1 的目标，认为项目只要上线了，就能使公司获得最大收益，后续的数字化等后面再弄，然后不了了之。\n 6. 把kr 当成任务：员工在制定 okr 的时候，把 kr 写成任务，即：套着 okr 的外壳，做着 kpi 的事情。\n 7. 视野受限：研发侧一直以完成项目开发为责任，缺少产品意识（没能深入用户，进而缺少用户思维），导致做出来的东西没人用，没有为公司产生应有的价值。\n\n\n# 7.2 经验教训\n\n 1. kr 需要有负责人，没有负责人的 kr，就没有落地的可行性。 kr 的负责人不清会导致在团队中分工不明确，边界不清就会带来互相推脱，从而让 kr 的完成就没有了具体明确的承接和推动人。\n 2. 针对每个制定的 kr，如果有的 kr 涉及外部依赖，需要及时和依赖方、配合方确认可行性。 kr 的负责人要主动找人沟通，不让自己一个人产出的 kr 会有很多缺陷。\n 3. kr 的制定不是一次性就能完善梳理。 需要在不断实践过程中调整到最合适，不要希望 kr 能像 o 一样，能够很快地共识处理。\n 4. 作为团队或者部门 leader 需要及早参与。 如果不能及时加入团队的 okr 的指定过程，就会导致信息同步，带来很多重复思考和返工成本。\n 5. okr 用着用着就变了形，做着做着就变成了 kpi。\n\n\n# 8. okr 常见问题\n\n\n# 9. 结语\n\n"离代码很近，离用户很远。"\n\n马云说："人离职无外乎两个原因：要么钱少了，要么不爽了"\n\n在离职原因中，除了薪酬福利之外，价值观念、文化认同也成为影响离职的主要原因。\n\nokr 拥抱不确定性、以人为本、增长导向、重视过程。\n\n如果在一个组织中，被分配的工作大部分不是自己想做的，就会导致个人目标和组织目标产生偏移。okr 通过让个人\n\nokr 注重公平、公平、公平，聚焦营收、用户、效率和能力维度，让制定的目标都是以价值为导向，不以苦劳（即：工作量的多少）为绩效导向。\n\n\n# 10. 推荐阅读\n\n 1. 字节跳动 okr 文档',charsets:{cjk:!0},lastUpdated:"2022/12/15, 12:35:47",lastUpdatedTimestamp:1671078947e3},{title:"成为会带团队的技术人",frontmatter:{title:"成为会带团队的技术人",date:"2023-02-03T09:21:59.000Z",permalink:"/pages/cab062/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/15.%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA.html",relativePath:"50.团队管理/15.成为会带团队的技术人.md",key:"v-4260d978",path:"/pages/cab062/",headers:[{level:2,title:"稳定性：可用性治理的三个关键要点",slug:"稳定性-可用性治理的三个关键要点",normalizedTitle:"稳定性：可用性治理的三个关键要点",charIndex:2},{level:3,title:"变更会引起 90% 以上的故障",slug:"变更会引起-90-以上的故障",normalizedTitle:"变更会引起 90% 以上的故障",charIndex:93}],headersStr:"稳定性：可用性治理的三个关键要点 变更会引起 90% 以上的故障",content:'# 稳定性：可用性治理的三个关键要点\n\n从事故预防的角度聊一聊可用性治理的关键动作\n\n团队稳定性军规\n\n * 业务发展会带动系统演进\n * 围绕系统的风险隐患，建立 "防火墙"\n\n\n# 变更会引起 90% 以上的故障\n\n以年为单位统计了事故，得出了 90% 的数字\n\n * 互联网公司的研发模式基本都是"小步快走、高速迭代"\n * 系统复杂度的提高，增加了变更时所带来的不确定性 "发布三板斧"：\n   * 可监控\n   * 可回滚\n   * 可灰度\n * 发布需要监控\n   * 完善的监控告警比人工反馈响应更快\n   * 没有监控的变更就像盲人摸象\n   * 有效的监控需要回答三个问题：（1）是否有问题发生？（2）哪里发生了问题？（3）发生了什么问题？\n   * 结合业务配置有效的监控\n * 有效灰度必须有耐心：\n   * "灰度就是在生产环境进行小范围测试"，这句话是错误的，它本真是为了对抗"未知的不确定性"。需要更加谨慎地进行灰度，确保即使问题真的在生产环境出现，造成的影响也是可控的。\n   * "在灰度的落地与推进过程中，要注意有效性"。一个系统部署在 2 个机房，每个机房 4 个集群，灰度顺序应该是单机房单集群中部分节点、单机房单集群中全部节点、单机房中全部集群，然后另外一个机房重复这个步骤。\n   * 时间：每个灰度阶段至少有 5~10 min 的观察，在监控、日志和各方反馈没有异常后再扩大灰度范围，确保一些运行时异常或量变积累质变的问题可以暴露出来。\n   * 流量：有时一些业务场景需要满足特定的触发条件。\n   * 结合实际的情况与风险程度来确定灰度的程度\n * 回滚是变更的"后悔药"\n   * "何时回滚"以及"如何确保回滚"\n   * "已经产生了线上影响，并且可能有资损，怎么能过两天再修复？"，"发现问题第一时间就能解决的事儿，为什么不回滚？"\n   * 研发对事故的敬畏之心不足时，回滚也会失灵。\n   * 如何确保变更是可以回滚的呢？可回滚的本质是系统的兼容设计与实现，比如：常见的"只增不改"\n * 坚守 Design For Failure 的架构理念\n   * "Design for failure and nothing will fail" 最早是 AWS 的一条最佳实践，即面向失败进行系统设计。\n   * 考虑系统所有可能发生故障或不可用的情形，并假设这些可能都会发生，倒逼自己设计足够健壮的系统。\n     * 非关键路径都要可以降级\n     * 核心系统一定要熔断、限流、超时这些保护手段\n     * 架构上要避免单点\n   * 技术团队如何推行并落地这种理想？\n     * 正向：如何形成 Design For Failure 的系统设计习惯？\n     * 反向：如何确定系统真的可以 Failover?\n   * 通过演练验证预案设计：技术 Leader 要化被动为主动，有意识地推进故障演练，不论是以注入还是回放的方式制造可控的故障，以此验证应急处理的机制流程和预先设计的灾备方案是否有效。演练是一个逐步的过程，先从测试环境检验，然后在生产环境进行有预案的演练，最后进行真正的随机故障演练。\n   * 系统稳定性结果好快很大程度上取决于技术 Leader 的重视程度\n     * 要把稳定性当做一个机制和团队的文化去建设\n     * 不断加深大家对稳定性的认识以及和每个人切身利益的关联程度\n     * 进一步形成团队的氛围与文化\n   * 新人 Landing 从稳定性学习开始\n     1. 1~2 周的适应期\n     2. 学习并通过发布变更 SOP 考试，取得对应系统的发布权限\n     3. 学习这个部门最近半年发生的真实事故，并总结一篇总结邮件给部门内所有人（利用心理学中的"承诺一致性原则"）\n   * 每人不低于 35% 的稳定性 KPI：技术 Leader 的稳定性 KPI 占比在 35% 到 40%，一线研发的同学可能是 50% 以上。（避免出现口号响亮，但是落地无声的情况）\n   * 通过稳定性 KPI 的设计：将稳定性的结果与所有人的切身利益实实在在得绑定到一起。\n   * 好的坏的都要在阳光之下晒一晒\n     * 每个月做一次红黑榜单\n     * 以不同的维度公示部分内各团队的稳定性结果\n     * 维度统计可以是：事故数、冒烟数、1-5-10 达成率、本月严重事故……\n   * 奖惩不是目的而是手段：要选择合适的手段提高团队成员的稳定性意识，并且最终取得好的结果。\n\n总结：\n\n * 对于技术 Leader 而言，不能用重大事故让团队成员慢慢理解系统稳定性的重要性\n * 可用性的预防与治理需要投入大量的时间和精力\n * ',normalizedContent:'# 稳定性：可用性治理的三个关键要点\n\n从事故预防的角度聊一聊可用性治理的关键动作\n\n团队稳定性军规\n\n * 业务发展会带动系统演进\n * 围绕系统的风险隐患，建立 "防火墙"\n\n\n# 变更会引起 90% 以上的故障\n\n以年为单位统计了事故，得出了 90% 的数字\n\n * 互联网公司的研发模式基本都是"小步快走、高速迭代"\n * 系统复杂度的提高，增加了变更时所带来的不确定性 "发布三板斧"：\n   * 可监控\n   * 可回滚\n   * 可灰度\n * 发布需要监控\n   * 完善的监控告警比人工反馈响应更快\n   * 没有监控的变更就像盲人摸象\n   * 有效的监控需要回答三个问题：（1）是否有问题发生？（2）哪里发生了问题？（3）发生了什么问题？\n   * 结合业务配置有效的监控\n * 有效灰度必须有耐心：\n   * "灰度就是在生产环境进行小范围测试"，这句话是错误的，它本真是为了对抗"未知的不确定性"。需要更加谨慎地进行灰度，确保即使问题真的在生产环境出现，造成的影响也是可控的。\n   * "在灰度的落地与推进过程中，要注意有效性"。一个系统部署在 2 个机房，每个机房 4 个集群，灰度顺序应该是单机房单集群中部分节点、单机房单集群中全部节点、单机房中全部集群，然后另外一个机房重复这个步骤。\n   * 时间：每个灰度阶段至少有 5~10 min 的观察，在监控、日志和各方反馈没有异常后再扩大灰度范围，确保一些运行时异常或量变积累质变的问题可以暴露出来。\n   * 流量：有时一些业务场景需要满足特定的触发条件。\n   * 结合实际的情况与风险程度来确定灰度的程度\n * 回滚是变更的"后悔药"\n   * "何时回滚"以及"如何确保回滚"\n   * "已经产生了线上影响，并且可能有资损，怎么能过两天再修复？"，"发现问题第一时间就能解决的事儿，为什么不回滚？"\n   * 研发对事故的敬畏之心不足时，回滚也会失灵。\n   * 如何确保变更是可以回滚的呢？可回滚的本质是系统的兼容设计与实现，比如：常见的"只增不改"\n * 坚守 design for failure 的架构理念\n   * "design for failure and nothing will fail" 最早是 aws 的一条最佳实践，即面向失败进行系统设计。\n   * 考虑系统所有可能发生故障或不可用的情形，并假设这些可能都会发生，倒逼自己设计足够健壮的系统。\n     * 非关键路径都要可以降级\n     * 核心系统一定要熔断、限流、超时这些保护手段\n     * 架构上要避免单点\n   * 技术团队如何推行并落地这种理想？\n     * 正向：如何形成 design for failure 的系统设计习惯？\n     * 反向：如何确定系统真的可以 failover?\n   * 通过演练验证预案设计：技术 leader 要化被动为主动，有意识地推进故障演练，不论是以注入还是回放的方式制造可控的故障，以此验证应急处理的机制流程和预先设计的灾备方案是否有效。演练是一个逐步的过程，先从测试环境检验，然后在生产环境进行有预案的演练，最后进行真正的随机故障演练。\n   * 系统稳定性结果好快很大程度上取决于技术 leader 的重视程度\n     * 要把稳定性当做一个机制和团队的文化去建设\n     * 不断加深大家对稳定性的认识以及和每个人切身利益的关联程度\n     * 进一步形成团队的氛围与文化\n   * 新人 landing 从稳定性学习开始\n     1. 1~2 周的适应期\n     2. 学习并通过发布变更 sop 考试，取得对应系统的发布权限\n     3. 学习这个部门最近半年发生的真实事故，并总结一篇总结邮件给部门内所有人（利用心理学中的"承诺一致性原则"）\n   * 每人不低于 35% 的稳定性 kpi：技术 leader 的稳定性 kpi 占比在 35% 到 40%，一线研发的同学可能是 50% 以上。（避免出现口号响亮，但是落地无声的情况）\n   * 通过稳定性 kpi 的设计：将稳定性的结果与所有人的切身利益实实在在得绑定到一起。\n   * 好的坏的都要在阳光之下晒一晒\n     * 每个月做一次红黑榜单\n     * 以不同的维度公示部分内各团队的稳定性结果\n     * 维度统计可以是：事故数、冒烟数、1-5-10 达成率、本月严重事故……\n   * 奖惩不是目的而是手段：要选择合适的手段提高团队成员的稳定性意识，并且最终取得好的结果。\n\n总结：\n\n * 对于技术 leader 而言，不能用重大事故让团队成员慢慢理解系统稳定性的重要性\n * 可用性的预防与治理需要投入大量的时间和精力\n * ',charsets:{cjk:!0},lastUpdated:"2023/02/06, 09:35:40",lastUpdatedTimestamp:167564734e4},{title:"技术人员如何准备晋升答辩？【转载】",frontmatter:{title:"技术人员如何准备晋升答辩？【转载】",date:"2023-02-15T12:00:06.000Z",permalink:"/pages/b7ec49/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/35.%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E5%A6%82%E4%BD%95%E5%87%86%E5%A4%87%E6%99%8B%E5%8D%87%E7%AD%94%E8%BE%A9%EF%BC%9F.html",relativePath:"50.团队管理/35.技术人员如何准备晋升答辩？.md",key:"v-03230f20",path:"/pages/b7ec49/",headersStr:null,content:"原文地址\n\n加餐 技术人如何准备晋升答辩？\n\n岁末年初，转眼又到了绩效回顾、晋升答辩的时期，趁这个时间点，我想谈一谈我的个人经验，希望可以带给你点启发。\n\n这几年，我有幸作为答辩评委，参与过各个职级的晋升答辩，看到过形形色色的答辩现场。就在前阵子，我也花了不少时间在团队小伙伴的晋升辅导上，今天我就把一些晋升答辩的技巧和常见的坑和你唠一唠，在晋升之路上助你一臂之力。\n\n现在很多公司都有明确的《员工职级晋升管理制度》，晋升述职答辩已经非常常见了。既然是“答辩”，就涉及了准备内容、呈现内容及现场发挥，每一个环节都不容忽视。\n\n\n如何获得答辩机会\n\n有些公司的年度晋升是自主报名，每个人都有机会，但有些公司是提名制的，需要你自己争取答辩机会。下面我们就来聊一聊怎样才能获得提名资格。\n\n首先，你自身能力达到了下一个职级的要求，才有机会获得提名。但有些观点可能会认为，我晋升了才能具备下一个职级的能力。这就大错特错了。公司对人才的要求需要具备高度的确定性，通常不会冒太大风险去晋升能力不确定的人。因此你可以参考目标职级的同事，关注他们的技术深度和业务能力。如果你无法确定该往哪个方向努力，我建议你主动去和领导沟通，制定可落地的改进措施。其实上级对于希望成长的员工都是非常欢迎的。\n\n在获得答辩晋升机会后，就要开始为答辩做准备了。\n\n\n前期准备：学会生产素材而非积累素材\n\n述职答辩式的晋升需要你准备一份汇报 PPT，内容包含上次晋升以来或近一年的工作成果。在答辩时，为了防止出现刷脸，达到公平的效果，晋升答辩通常会跨团队邀请外部技术专家作为评委。他们不了解你的业务背景，因此你需要在短时间内将业务背景、工作成果介绍清楚。这对不善演讲的技术人来说，着实有着不小的挑战。\n\n那么，在日常工作中是否需要积累素材呢？我的答案是：并不需要！\n\n很多人可能都听过这样的说法：“如果你写答辩 PPT 没什么思路，那是因为平时没有积累素材。平时要做答辩素材的积累，才能就更好地编写答辩 PPT。”\n\n其实并不是这样。大部分公司的答辩时间一般在 20 分钟之内，也就是 5~10 页 PPT，只够你讲清楚 1~2 件事情。需要你在有限的时间里，展示在过去一年中做得最出彩的事情。我想这是不需要去素材库挑选的，应该瞬间跃然纸上的。如果你还要纠结一二，其实已经是问题了，因为每件事情都类似，成绩也会平淡无奇。\n\n因此我也给你一个建议，重点并不是要去记录素材，而是要生产素材。\n\n如果有机会，要尽可能多地去参与重难点项目建设，当然这可能会比较辛苦，但更容易得到价值收获。\n\n如果你没有参与过大型项目，另外一个生产素材的点，是技术深挖。比如线上产生一个问题——经常性地发生 CPU 占用突然飙高，停顿一两秒后又恢复正常。这对业务影响不大，所以很多人可能不会注意和处理这个问题。但如果你去深挖问题背后的底层原因，找到问题的根源并在团队内部分享，这就是很有价值的内容。因为你不仅主动解决了问题，还通过分享帮助了其他同学的成长。\n\n素材编写三原则\n\n确定了你准备讲解的素材案例后，在编写素材的方式上有三个原则需要遵循。\n\n原则一：不要只讲结果，要写问题和解决方式\n\n在上一年里，你负责了一个大型项目并成功完成了上线。切忌在 PPT 里花大篇幅介绍项目是什么及项目成功上线这一结果，因为评委无法通过结果评估你的能力和价值。\n\n在介绍素材时，首先要介绍背景。然后介绍这个素材案例中存在哪些问题，你是如何解决的。最后才是结果的讲述。评委主要通过你解决问题的手段，来评估你是否具备达到下一等级的能力。\n\n原则二：结果要有价值和数据体现\n\n在介绍结果时，很多人习惯讲解项目如期上线等内容，但在评委看来，这只是基本要求，并不是加分项。正确的做法是通过一些上线后的数据说话。比如介绍上线后的系统性能数据、质量等相关内容。\n\n这里我强调一点，很多研发同学习惯写上线后的一些业务数据，如新增用户数、带来的金额收入等。这类数据其实与产品、业务同学联系更紧密，毕竟需求是他们挖掘出来的。研发关注点应放在技术层面上。\n\n原则三：素材要符合职级定位\n\n如果你是从职级 6 升到职级 7，就要寻找符合职级 7 标准的素材。比如你对某一项工作成果很满意，但是职级 5 的同学也可以完成，建议就不要写了，这对你的晋升并没有帮助。\n\n如果你没有特别突出的素材，只能在过去工作内容里海选的话。在选择时，我给你 2 点建议：\n\n 1. 不要选择只有“苦劳”的内容。在工期非常赶的项目里，你加班加点的保障它如期上线，且获得了领导认可，得到了诸如绩效等嘉奖。类似的内容可不可以写呢？建议不要写，原因无法体现技术价值。你所有的“苦劳”都在绩效里体现了，你只要在 PPT 上展现你获得过几次绩优即可。\n\n 2. 无法量化和讲述出来的内容不要写。比如你做的某件事情被大领导点名表扬了，但是又很难通过文字量化出来，也不要写，因为评委感受不到。\n\nPPT 编写三建议\n\n选择了合适的素材后，就可以编写 PPT 了。有以下三个建议你可以参考。\n\n建议一：PPT 的基本格式要统一\n\n答辩的 PPT 不需要太绚丽的内容。除了要保证基本的工整，细节也很重要，比如：\n\n 1. 审查错字。有些评委会认为错别字多，可能写代码 BUG 也较多。\n\n 2. 统一字号。不要一页字大，一页字小。\n\n 3. 不要加过多动画。答辩重点是阐述内容，太多的动画容易出 BUG 且也会吸走一部分注意力。\n\n 4. 控制字数，重要的内容标红加粗。答辩一般都是集中评审，评委一天要评审很多人，没有耐心看太多字。把你想要表达的重点内容标红加粗，让评委快速吸收。\n\n建议二：不要放一张大而全的架构图\n\n很多同学都习惯在 PPT 里放一张大而全的架构图，如下图 1 所示，但在答辩时只讲解了图中的一部分内容——通过对用户写模块进行改造，以便完成对外接口的幂等性改造。\n\n\n\n图 1：大而全的架构图\n\n你认为，大而全的架构图可以彰显自己系统的完善性。但如果你只讲了其中一二，很难讲出价值内容，毕竟时间有限，反而容易给评委留下浮于表面的印象。在 PPT 编写时尽量不要出现这个情况。答辩最基本的要求是把问题说明白，然后才是高大上，此点要切记。\n\n对于用户写模块幂等性的优化改造，你可以采用更优的展现方式，如下图 2 所示，用具体问题的架构 + 细节问题描述代替大而全的架构图，这可以让评委快速了解问题的背景和你的解决手段，进而更准确地评判你到底做得好还是不好。\n\n\n\n图 2：幂等性的技改优化\n\n建议三：PPT 上不要“露马脚”\n\n我再多说一句，建议你不要放一张大而全的架构图，另一个原因是容易“露马脚”。我曾经遇到过，答辩人在 PPT 中写了“加密”两个字，我想他写出来的目的只是想表示使用了它。但评委一直对这个点“穷追不舍”，导致答辩人未能应变如流，最终答辩挂了。\n\n因此，写在 PPT 上的每一个字，你都需要十分了解，每一个内容都可能是地雷。\n\n答辩演练三建议\n\n写完 PPT 后， 正式答辩前的这段时间，就是属于你的练习时间，你要好好利用起来。在练习阶段有以下几点建议。\n\n建议一：写出答辩稿\n\n很多人没有写答辩稿的习惯，认为只要多练习就好了。撰写文字稿能够帮助你发现答辩的逻辑是否通畅。还能够框定你的表达内容，进而确定答辩时间。咱们前面提到过答辩有时间限制，如果没有固定的稿子，每次发挥的时长都不一样。最后很可能导因为超时，影响答辩效果。\n\n建议二：自己要准确按照答辩的时间要求，完整练习至少十遍以上（注意：非完整的零散练习和完整的练习节奏差别非常大。）\n\n建议三：选择正确的人做预答辩\n\n不同公司的晋升评委组成不同，有的是管理者、有的是技术专家，还有的是管理者 + 技术专家。因此，在做预答辩练习时，最好邀请相对应的人员帮助你辅导。答辩的角度需要根据评委组成做相应的调整。\n\n\n克服答辩紧张情绪\n\n焦急的等待之后，终于来到答辩时刻了。大家都会跟你说，答辩时不要紧张，会影响发挥。但过来人都知道，不紧张好像太难了。下面就说说具体有什么方式可以抑制紧张。\n\n首先还是上一小节的内容，答辩稿必须写出来，跟着演讲稿来。人在紧张时，智商和反应能力会指数级下滑，没有预先练习顺溜的稿子，你是临场发挥不出来的，只能满嘴跑火车或者照着 PPT 念，效果会大打折扣。\n\n另外一个能够避免紧张的好办法是做最坏假设。紧张是因为想要通过晋升。你可以想象下，此次晋升没有通过后的场景，你会怎么和这个结果共处并释怀？如果最坏的结果你都接纳了，还有什么不能面对的呢？这也能反过来激励你好好准备。\n\n此外，答辩一般都会有提问环节。很多时候，答辩演讲得很好，但回答得差，也可能会被一票否决，这种情况非常可惜。作为过来人，我在这里给你提几个醒：\n\n 1. 评委比较喜欢回答问题言简意赅、直达重点的人，印象分都比较高。评委听了一天的答辩，理解能力也下降得厉害，如果你半天说不到点子上，评委可能会认为你知识储备和逻辑能力薄弱。\n\n 2. 你无法提前预知评委的问题，短时间内该如何组织语言，才能达到言简意赅呢？有一个小技巧，在评委问完问题后，可以表述一遍自己理解的题目内容或者简单重复下评委的问题，来给自己争取一点思考和组织语言的时间。\n\n虽然不能预先拿到可能被问到的题目，但也可以提前做些准备的。评委的问题大多来源于PPT 和答辩稿里的内容，基本上不会凭空问你，所以最简单的应对方法便是深入思考其中每一个词语。比如，你写了一项较大幅度的技术优化，性能从 1000ms 优化至 50ms，但没有写具体如何实现，这就是评委提问的素材之一。\n\n最后，如果评委临场抛出了一个较难的问题，你可以短暂思考，尝试从几个角度简单回答一下，一定不要直接回答不知道。\n\n\n总结\n\n最后，再送给你一句鸡汤。有些人工作五年，但只有一年的经验；而有些人工作一年，却拥有了五年经验。那是因为一直在学习、思考和总结。希望正在学习本专栏的同学，能够在这里收获超过工作时间的经验。\n\n今天的加餐就到这里，下一模块我们讲解如何构建一个高性能的读服务。实战之旅即将开始，你准备好了吗？",normalizedContent:"原文地址\n\n加餐 技术人如何准备晋升答辩？\n\n岁末年初，转眼又到了绩效回顾、晋升答辩的时期，趁这个时间点，我想谈一谈我的个人经验，希望可以带给你点启发。\n\n这几年，我有幸作为答辩评委，参与过各个职级的晋升答辩，看到过形形色色的答辩现场。就在前阵子，我也花了不少时间在团队小伙伴的晋升辅导上，今天我就把一些晋升答辩的技巧和常见的坑和你唠一唠，在晋升之路上助你一臂之力。\n\n现在很多公司都有明确的《员工职级晋升管理制度》，晋升述职答辩已经非常常见了。既然是“答辩”，就涉及了准备内容、呈现内容及现场发挥，每一个环节都不容忽视。\n\n\n如何获得答辩机会\n\n有些公司的年度晋升是自主报名，每个人都有机会，但有些公司是提名制的，需要你自己争取答辩机会。下面我们就来聊一聊怎样才能获得提名资格。\n\n首先，你自身能力达到了下一个职级的要求，才有机会获得提名。但有些观点可能会认为，我晋升了才能具备下一个职级的能力。这就大错特错了。公司对人才的要求需要具备高度的确定性，通常不会冒太大风险去晋升能力不确定的人。因此你可以参考目标职级的同事，关注他们的技术深度和业务能力。如果你无法确定该往哪个方向努力，我建议你主动去和领导沟通，制定可落地的改进措施。其实上级对于希望成长的员工都是非常欢迎的。\n\n在获得答辩晋升机会后，就要开始为答辩做准备了。\n\n\n前期准备：学会生产素材而非积累素材\n\n述职答辩式的晋升需要你准备一份汇报 ppt，内容包含上次晋升以来或近一年的工作成果。在答辩时，为了防止出现刷脸，达到公平的效果，晋升答辩通常会跨团队邀请外部技术专家作为评委。他们不了解你的业务背景，因此你需要在短时间内将业务背景、工作成果介绍清楚。这对不善演讲的技术人来说，着实有着不小的挑战。\n\n那么，在日常工作中是否需要积累素材呢？我的答案是：并不需要！\n\n很多人可能都听过这样的说法：“如果你写答辩 ppt 没什么思路，那是因为平时没有积累素材。平时要做答辩素材的积累，才能就更好地编写答辩 ppt。”\n\n其实并不是这样。大部分公司的答辩时间一般在 20 分钟之内，也就是 5~10 页 ppt，只够你讲清楚 1~2 件事情。需要你在有限的时间里，展示在过去一年中做得最出彩的事情。我想这是不需要去素材库挑选的，应该瞬间跃然纸上的。如果你还要纠结一二，其实已经是问题了，因为每件事情都类似，成绩也会平淡无奇。\n\n因此我也给你一个建议，重点并不是要去记录素材，而是要生产素材。\n\n如果有机会，要尽可能多地去参与重难点项目建设，当然这可能会比较辛苦，但更容易得到价值收获。\n\n如果你没有参与过大型项目，另外一个生产素材的点，是技术深挖。比如线上产生一个问题——经常性地发生 cpu 占用突然飙高，停顿一两秒后又恢复正常。这对业务影响不大，所以很多人可能不会注意和处理这个问题。但如果你去深挖问题背后的底层原因，找到问题的根源并在团队内部分享，这就是很有价值的内容。因为你不仅主动解决了问题，还通过分享帮助了其他同学的成长。\n\n素材编写三原则\n\n确定了你准备讲解的素材案例后，在编写素材的方式上有三个原则需要遵循。\n\n原则一：不要只讲结果，要写问题和解决方式\n\n在上一年里，你负责了一个大型项目并成功完成了上线。切忌在 ppt 里花大篇幅介绍项目是什么及项目成功上线这一结果，因为评委无法通过结果评估你的能力和价值。\n\n在介绍素材时，首先要介绍背景。然后介绍这个素材案例中存在哪些问题，你是如何解决的。最后才是结果的讲述。评委主要通过你解决问题的手段，来评估你是否具备达到下一等级的能力。\n\n原则二：结果要有价值和数据体现\n\n在介绍结果时，很多人习惯讲解项目如期上线等内容，但在评委看来，这只是基本要求，并不是加分项。正确的做法是通过一些上线后的数据说话。比如介绍上线后的系统性能数据、质量等相关内容。\n\n这里我强调一点，很多研发同学习惯写上线后的一些业务数据，如新增用户数、带来的金额收入等。这类数据其实与产品、业务同学联系更紧密，毕竟需求是他们挖掘出来的。研发关注点应放在技术层面上。\n\n原则三：素材要符合职级定位\n\n如果你是从职级 6 升到职级 7，就要寻找符合职级 7 标准的素材。比如你对某一项工作成果很满意，但是职级 5 的同学也可以完成，建议就不要写了，这对你的晋升并没有帮助。\n\n如果你没有特别突出的素材，只能在过去工作内容里海选的话。在选择时，我给你 2 点建议：\n\n 1. 不要选择只有“苦劳”的内容。在工期非常赶的项目里，你加班加点的保障它如期上线，且获得了领导认可，得到了诸如绩效等嘉奖。类似的内容可不可以写呢？建议不要写，原因无法体现技术价值。你所有的“苦劳”都在绩效里体现了，你只要在 ppt 上展现你获得过几次绩优即可。\n\n 2. 无法量化和讲述出来的内容不要写。比如你做的某件事情被大领导点名表扬了，但是又很难通过文字量化出来，也不要写，因为评委感受不到。\n\nppt 编写三建议\n\n选择了合适的素材后，就可以编写 ppt 了。有以下三个建议你可以参考。\n\n建议一：ppt 的基本格式要统一\n\n答辩的 ppt 不需要太绚丽的内容。除了要保证基本的工整，细节也很重要，比如：\n\n 1. 审查错字。有些评委会认为错别字多，可能写代码 bug 也较多。\n\n 2. 统一字号。不要一页字大，一页字小。\n\n 3. 不要加过多动画。答辩重点是阐述内容，太多的动画容易出 bug 且也会吸走一部分注意力。\n\n 4. 控制字数，重要的内容标红加粗。答辩一般都是集中评审，评委一天要评审很多人，没有耐心看太多字。把你想要表达的重点内容标红加粗，让评委快速吸收。\n\n建议二：不要放一张大而全的架构图\n\n很多同学都习惯在 ppt 里放一张大而全的架构图，如下图 1 所示，但在答辩时只讲解了图中的一部分内容——通过对用户写模块进行改造，以便完成对外接口的幂等性改造。\n\n\n\n图 1：大而全的架构图\n\n你认为，大而全的架构图可以彰显自己系统的完善性。但如果你只讲了其中一二，很难讲出价值内容，毕竟时间有限，反而容易给评委留下浮于表面的印象。在 ppt 编写时尽量不要出现这个情况。答辩最基本的要求是把问题说明白，然后才是高大上，此点要切记。\n\n对于用户写模块幂等性的优化改造，你可以采用更优的展现方式，如下图 2 所示，用具体问题的架构 + 细节问题描述代替大而全的架构图，这可以让评委快速了解问题的背景和你的解决手段，进而更准确地评判你到底做得好还是不好。\n\n\n\n图 2：幂等性的技改优化\n\n建议三：ppt 上不要“露马脚”\n\n我再多说一句，建议你不要放一张大而全的架构图，另一个原因是容易“露马脚”。我曾经遇到过，答辩人在 ppt 中写了“加密”两个字，我想他写出来的目的只是想表示使用了它。但评委一直对这个点“穷追不舍”，导致答辩人未能应变如流，最终答辩挂了。\n\n因此，写在 ppt 上的每一个字，你都需要十分了解，每一个内容都可能是地雷。\n\n答辩演练三建议\n\n写完 ppt 后， 正式答辩前的这段时间，就是属于你的练习时间，你要好好利用起来。在练习阶段有以下几点建议。\n\n建议一：写出答辩稿\n\n很多人没有写答辩稿的习惯，认为只要多练习就好了。撰写文字稿能够帮助你发现答辩的逻辑是否通畅。还能够框定你的表达内容，进而确定答辩时间。咱们前面提到过答辩有时间限制，如果没有固定的稿子，每次发挥的时长都不一样。最后很可能导因为超时，影响答辩效果。\n\n建议二：自己要准确按照答辩的时间要求，完整练习至少十遍以上（注意：非完整的零散练习和完整的练习节奏差别非常大。）\n\n建议三：选择正确的人做预答辩\n\n不同公司的晋升评委组成不同，有的是管理者、有的是技术专家，还有的是管理者 + 技术专家。因此，在做预答辩练习时，最好邀请相对应的人员帮助你辅导。答辩的角度需要根据评委组成做相应的调整。\n\n\n克服答辩紧张情绪\n\n焦急的等待之后，终于来到答辩时刻了。大家都会跟你说，答辩时不要紧张，会影响发挥。但过来人都知道，不紧张好像太难了。下面就说说具体有什么方式可以抑制紧张。\n\n首先还是上一小节的内容，答辩稿必须写出来，跟着演讲稿来。人在紧张时，智商和反应能力会指数级下滑，没有预先练习顺溜的稿子，你是临场发挥不出来的，只能满嘴跑火车或者照着 ppt 念，效果会大打折扣。\n\n另外一个能够避免紧张的好办法是做最坏假设。紧张是因为想要通过晋升。你可以想象下，此次晋升没有通过后的场景，你会怎么和这个结果共处并释怀？如果最坏的结果你都接纳了，还有什么不能面对的呢？这也能反过来激励你好好准备。\n\n此外，答辩一般都会有提问环节。很多时候，答辩演讲得很好，但回答得差，也可能会被一票否决，这种情况非常可惜。作为过来人，我在这里给你提几个醒：\n\n 1. 评委比较喜欢回答问题言简意赅、直达重点的人，印象分都比较高。评委听了一天的答辩，理解能力也下降得厉害，如果你半天说不到点子上，评委可能会认为你知识储备和逻辑能力薄弱。\n\n 2. 你无法提前预知评委的问题，短时间内该如何组织语言，才能达到言简意赅呢？有一个小技巧，在评委问完问题后，可以表述一遍自己理解的题目内容或者简单重复下评委的问题，来给自己争取一点思考和组织语言的时间。\n\n虽然不能预先拿到可能被问到的题目，但也可以提前做些准备的。评委的问题大多来源于ppt 和答辩稿里的内容，基本上不会凭空问你，所以最简单的应对方法便是深入思考其中每一个词语。比如，你写了一项较大幅度的技术优化，性能从 1000ms 优化至 50ms，但没有写具体如何实现，这就是评委提问的素材之一。\n\n最后，如果评委临场抛出了一个较难的问题，你可以短暂思考，尝试从几个角度简单回答一下，一定不要直接回答不知道。\n\n\n总结\n\n最后，再送给你一句鸡汤。有些人工作五年，但只有一年的经验；而有些人工作一年，却拥有了五年经验。那是因为一直在学习、思考和总结。希望正在学习本专栏的同学，能够在这里收获超过工作时间的经验。\n\n今天的加餐就到这里，下一模块我们讲解如何构建一个高性能的读服务。实战之旅即将开始，你准备好了吗？",charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:08:04",lastUpdatedTimestamp:1679468884e3},{title:"超实用网址大全",frontmatter:{title:"超实用网址大全",date:"2023-01-31T09:44:58.000Z",permalink:"/pages/d6973a/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/30.%E8%B6%85%E5%AE%9E%E7%94%A8%E7%BD%91%E5%9D%80%E5%A4%A7%E5%85%A8.html",relativePath:"50.团队管理/30.超实用网址大全.md",key:"v-396373ac",path:"/pages/d6973a/",headersStr:null,content:"Mac 软件下载地址：\n\n 1. https://xclient.info/\n 2. https://macwk.com/\n\nWindows 软件下载地址：\n\n 1. https://www.wgbqr.com/\n\n收录各类编程资源的导航网站：\n\n 1. https://www.code-nav.cn/\n\n图片背景消除（快速抠图人像）https://www.remove.bg/zh\n\n阿里图标库 https://www.iconfont.cn/\n\n图之典http://tuzhidian.com/\n\n不求人导航https://www.bqrdh.com/\n\n__ Github Trendhttps://github.com/trending\n\nGitee GVPhttps://gitee.com/gvp\n\n极客时间https://time.geekbang.org/\n\n阿里云盘奈斯搜索 https://www.niceso.fun/\n\nVuepress-theme-vdoing-dochttps://github.com/xugaoyi/vuepress-theme-vdoing-doc\n\n百度统计 https://tongji.baidu.com/web/welcome/login\n\n流程图和架构图：draw.io [https://draw.io]\n\nutoolhttps://www.u.tools/\n\niconfonthttps://www.iconfont.cn/\n\n我的工具https://tooltt.com/#tooltt-info",normalizedContent:"mac 软件下载地址：\n\n 1. https://xclient.info/\n 2. https://macwk.com/\n\nwindows 软件下载地址：\n\n 1. https://www.wgbqr.com/\n\n收录各类编程资源的导航网站：\n\n 1. https://www.code-nav.cn/\n\n图片背景消除（快速抠图人像）https://www.remove.bg/zh\n\n阿里图标库 https://www.iconfont.cn/\n\n图之典http://tuzhidian.com/\n\n不求人导航https://www.bqrdh.com/\n\n__ github trendhttps://github.com/trending\n\ngitee gvphttps://gitee.com/gvp\n\n极客时间https://time.geekbang.org/\n\n阿里云盘奈斯搜索 https://www.niceso.fun/\n\nvuepress-theme-vdoing-dochttps://github.com/xugaoyi/vuepress-theme-vdoing-doc\n\n百度统计 https://tongji.baidu.com/web/welcome/login\n\n流程图和架构图：draw.io [https://draw.io]\n\nutoolhttps://www.u.tools/\n\niconfonthttps://www.iconfont.cn/\n\n我的工具https://tooltt.com/#tooltt-info",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"番茄工作法（简单易行的时间管理方法）",frontmatter:{title:"番茄工作法（简单易行的时间管理方法）",date:"2023-02-01T10:11:11.000Z",permalink:"/pages/91c182/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/40.%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%EF%BC%88%E7%AE%80%E5%8D%95%E6%98%93%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%96%B9%E6%B3%95%EF%BC%89.html",relativePath:"50.团队管理/40.番茄工作法（简单易行的时间管理方法）.md",key:"v-10ca27bc",path:"/pages/91c182/",headers:[{level:2,title:"概念",slug:"概念",normalizedTitle:"概念",charIndex:2},{level:2,title:"如何实施",slug:"如何实施",normalizedTitle:"如何实施",charIndex:148},{level:2,title:"实践心得",slug:"实践心得",normalizedTitle:"实践心得",charIndex:405}],headersStr:"概念 如何实施 实践心得",content:"# 概念\n\n让你在25分钟内，一次只做一件事情，集中精力只做当前任务的事情，意味着全力以赴，任何其他的事情都不得打断当前的任务。当时间到后，就立即放下手头的事情，休息5分钟，这5分钟不可以做任何和工作相关的事情，包括：回复邮件等事情，你可以去喝一杯咖啡，或者眯一会儿，让大脑休息一会儿。\n\n\n# 如何实施\n\n作者强调如果想改变25分钟这个时间安排，至少尝试两个礼拜，因为更长的时间意味着在此期间更容易被打断。\n\n在每天开始前，进行计划；每天结束时，进行记录、处理和可视化。\n\n番茄工作法的好处在于，可以持续的学习，特别适合备考阶段或者准备面试的阶段。\n\n番茄时钟也意在让你利用琐碎的时间，比如：每天上班做公交25分钟的时间内，专心做一件事情，充分利用时间。\n\n需要有一个活动清单，以及今日代办事情。以及每天回顾。 通常一个任务最多4个番茄时钟内要完成，如果完成不了的话，则要将该任务进行拆解成小任务。\n\n\n# 实践心得\n\n 1. 对于工作中经常做一件事情被打断，导致工作效率低下挺有帮助\n 2. 番茄时钟的长短，个人偏向于40分钟（这可能与读书期间一节课为40分钟有关，25分钟太短了）\n 3. 对于番茄工作法中提出的记录来可视化，这个挺有用的，可以量化自己的工作质量\n\n阅读：《番茄工作法图解：简单易行的时间管理方法》记录\n\n> 参考文献\n> \n>  1. 番茄工作法图解：简单易行的时间管理方法 [瑞典] Staffan Noteberg 著",normalizedContent:"# 概念\n\n让你在25分钟内，一次只做一件事情，集中精力只做当前任务的事情，意味着全力以赴，任何其他的事情都不得打断当前的任务。当时间到后，就立即放下手头的事情，休息5分钟，这5分钟不可以做任何和工作相关的事情，包括：回复邮件等事情，你可以去喝一杯咖啡，或者眯一会儿，让大脑休息一会儿。\n\n\n# 如何实施\n\n作者强调如果想改变25分钟这个时间安排，至少尝试两个礼拜，因为更长的时间意味着在此期间更容易被打断。\n\n在每天开始前，进行计划；每天结束时，进行记录、处理和可视化。\n\n番茄工作法的好处在于，可以持续的学习，特别适合备考阶段或者准备面试的阶段。\n\n番茄时钟也意在让你利用琐碎的时间，比如：每天上班做公交25分钟的时间内，专心做一件事情，充分利用时间。\n\n需要有一个活动清单，以及今日代办事情。以及每天回顾。 通常一个任务最多4个番茄时钟内要完成，如果完成不了的话，则要将该任务进行拆解成小任务。\n\n\n# 实践心得\n\n 1. 对于工作中经常做一件事情被打断，导致工作效率低下挺有帮助\n 2. 番茄时钟的长短，个人偏向于40分钟（这可能与读书期间一节课为40分钟有关，25分钟太短了）\n 3. 对于番茄工作法中提出的记录来可视化，这个挺有用的，可以量化自己的工作质量\n\n阅读：《番茄工作法图解：简单易行的时间管理方法》记录\n\n> 参考文献\n> \n>  1. 番茄工作法图解：简单易行的时间管理方法 [瑞典] staffan noteberg 著",charsets:{cjk:!0},lastUpdated:"2023/02/06, 09:35:40",lastUpdatedTimestamp:167564734e4},{title:"电商常见名词",frontmatter:{title:"电商常见名词",date:"2023-02-17T17:21:07.000Z",permalink:"/pages/356a91/"},regularPath:"/50.%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/60.%E7%94%B5%E5%95%86%E5%B8%B8%E8%A7%81%E5%90%8D%E8%AF%8D.html",relativePath:"50.团队管理/60.电商常见名词.md",key:"v-655da745",path:"/pages/356a91/",headersStr:null,content:"SKU\n\nSPU\n\n转化率\n\n留存率\n\nUV\n\nPV\n\nGMV\n\n拉新\n\n埋点\n\n * 客户端埋点\n * 服务端埋点\n * 全埋点\n\n漏斗\n\n转化",normalizedContent:"sku\n\nspu\n\n转化率\n\n留存率\n\nuv\n\npv\n\ngmv\n\n拉新\n\n埋点\n\n * 客户端埋点\n * 服务端埋点\n * 全埋点\n\n漏斗\n\n转化",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何一键生成项目树形结构",frontmatter:{title:"如何一键生成项目树形结构",date:"2022-03-26T15:54:04.000Z",permalink:"/pages/2b0da9/"},regularPath:"/60.%E8%BD%AF%E6%8A%80%E8%83%BD/06.%E5%A6%82%E4%BD%95%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84.html",relativePath:"60.软技能/06.如何一键生成项目树形结构.md",key:"v-37895d39",path:"/pages/2b0da9/",headers:[{level:2,title:"1. 背景",slug:"_1-背景",normalizedTitle:"1. 背景",charIndex:2},{level:2,title:"2. 使用 tree 优雅一键生成项目树形结构",slug:"_2-使用-tree-优雅一键生成项目树形结构",normalizedTitle:"2. 使用 tree 优雅一键生成项目树形结构",charIndex:143},{level:2,title:"3. mac 安装 tree 教程",slug:"_3-mac-安装-tree-教程",normalizedTitle:"3. mac 安装 tree 教程",charIndex:591},{level:2,title:"4. tree 使用教程",slug:"_4-tree-使用教程",normalizedTitle:"4. tree 使用教程",charIndex:1263}],headersStr:"1. 背景 2. 使用 tree 优雅一键生成项目树形结构 3. mac 安装 tree 教程 4. tree 使用教程",content:'# 1. 背景\n\n----------------------------------------\n\n我们在进行自己开发项目的介绍时，经常需要跟别人介绍我们自己项目的结构，这时候很多人可能会通过截图项目的工程，比如： 说明： 上述通过截图的方式，看起来不直观，而且显得不专业。\n\n\n# 2. 使用 tree 优雅一键生成项目树形结构\n\n----------------------------------------\n\n这里，我们建议通过第三方的工具 tree，进行优雅的一键生成树形目录结构。 命令如下：\n\ntree -d -L 1\n\n\n可以快速的展示出当前项目的主要目录如下：\n\n.\n├── admin\n├── data-simulator\n├── dynamic-rule-engine\t\n└── ip-profile\t\n\n\n\n下面分别简单介绍下每个目录。\n\n * admin : 反爬虫项目的后台管理模块，用于后台业务逻辑处理以及前台效果展示。\n * **data-simulator : ** 数据仿真模块，用于线下模拟数据。\n * **dynamic-rule-engine : ** 动态规则引擎，flink 在线实时计算数据。\n * ** ip-profile : ** ip 画像，提供 ip 的画像，并且动态规则引擎的数据可能会写入 ip 画像的库中。\n\n\n# 3. mac 安装 tree 教程\n\n----------------------------------------\n\nteee 是一种递归目录结构列表命令，产生一个深度缩进列表文件。 具体步骤入下：\n\n 1. 下载安装 tree 的包 地址：http://mama.indstate.edu/users/ice/tree/\n 2. 解压 tree-${版本号}.tgz 文件\n\ntar -zxvf tree-${版本号}.tgz\n\n\n 3. 进入解压后的目录中，并用ls查看\n\ncd tree-${版本号}\nls\n\n\n可以查看到有一个 Makefile文件\n\n 4. 修改 tree 的配置文件 Makefile。将其中55行左右的注释去掉，如下图：\n\n# Uncomment for OS X:\n# It is not allowed to install to /usr/bin on OS X any longer (SIP):\nprefix = /usr/local\nCC=cc\nCFLAGS=-O2 -Wall -fomit-frame-pointer -no-cpp-precomp\nLDFLAGS=\nMANDIR=/usr/share/man/man1\nOBJS+=strverscmp.o\n\n\n 5. 修改完成后，执行命令：\n\nmake\n\n\n 6. 使用管理员身份，执行如下命令：\n\nsudo cp tree /usr/local/bin\n\n\n 7. 测试 tree 是否安装成功\n\ntree --version\n\n\n\n# 4. tree 使用教程\n\n----------------------------------------\n\n格式： tree + 参数\n\n-a 显示所有文件和目录。\n-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。\n-C 在文件和目录清单加上色彩，便于区分各种类型。\n-d 显示目录名称而非内容。\n-D 列出文件或目录的更改时间。\n-f 在每个文件或目录之前，显示完整的相对路径名称。\n-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上"*","/","=","@","|"号。\n-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n-i 不以阶梯状列出文件或目录名称。\n-I 不显示符合范本样式的文件或目录名称。\n-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n-n 不在文件和目录清单加上色彩。\n-N 直接列出文件和目录名称，包括控制字符。\n-p 列出权限标示。\n-P 只显示符合范本样式的文件或目录名称。\n-q 用"?"号取代控制字符，列出文件和目录名称。\n-s 列出文件或目录大小。\n-t 用文件和目录的更改时间排序。\n-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。\n',normalizedContent:'# 1. 背景\n\n----------------------------------------\n\n我们在进行自己开发项目的介绍时，经常需要跟别人介绍我们自己项目的结构，这时候很多人可能会通过截图项目的工程，比如： 说明： 上述通过截图的方式，看起来不直观，而且显得不专业。\n\n\n# 2. 使用 tree 优雅一键生成项目树形结构\n\n----------------------------------------\n\n这里，我们建议通过第三方的工具 tree，进行优雅的一键生成树形目录结构。 命令如下：\n\ntree -d -l 1\n\n\n可以快速的展示出当前项目的主要目录如下：\n\n.\n├── admin\n├── data-simulator\n├── dynamic-rule-engine\t\n└── ip-profile\t\n\n\n\n下面分别简单介绍下每个目录。\n\n * admin : 反爬虫项目的后台管理模块，用于后台业务逻辑处理以及前台效果展示。\n * **data-simulator : ** 数据仿真模块，用于线下模拟数据。\n * **dynamic-rule-engine : ** 动态规则引擎，flink 在线实时计算数据。\n * ** ip-profile : ** ip 画像，提供 ip 的画像，并且动态规则引擎的数据可能会写入 ip 画像的库中。\n\n\n# 3. mac 安装 tree 教程\n\n----------------------------------------\n\nteee 是一种递归目录结构列表命令，产生一个深度缩进列表文件。 具体步骤入下：\n\n 1. 下载安装 tree 的包 地址：http://mama.indstate.edu/users/ice/tree/\n 2. 解压 tree-${版本号}.tgz 文件\n\ntar -zxvf tree-${版本号}.tgz\n\n\n 3. 进入解压后的目录中，并用ls查看\n\ncd tree-${版本号}\nls\n\n\n可以查看到有一个 makefile文件\n\n 4. 修改 tree 的配置文件 makefile。将其中55行左右的注释去掉，如下图：\n\n# uncomment for os x:\n# it is not allowed to install to /usr/bin on os x any longer (sip):\nprefix = /usr/local\ncc=cc\ncflags=-o2 -wall -fomit-frame-pointer -no-cpp-precomp\nldflags=\nmandir=/usr/share/man/man1\nobjs+=strverscmp.o\n\n\n 5. 修改完成后，执行命令：\n\nmake\n\n\n 6. 使用管理员身份，执行如下命令：\n\nsudo cp tree /usr/local/bin\n\n\n 7. 测试 tree 是否安装成功\n\ntree --version\n\n\n\n# 4. tree 使用教程\n\n----------------------------------------\n\n格式： tree + 参数\n\n-a 显示所有文件和目录。\n-a 使用asni绘图字符显示树状图而非以ascii字符组合。\n-c 在文件和目录清单加上色彩，便于区分各种类型。\n-d 显示目录名称而非内容。\n-d 列出文件或目录的更改时间。\n-f 在每个文件或目录之前，显示完整的相对路径名称。\n-f 在执行文件，目录，socket，符号连接，管道名称名称，各自加上"*","/","=","@","|"号。\n-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。\n-i 不以阶梯状列出文件或目录名称。\n-i 不显示符合范本样式的文件或目录名称。\n-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。\n-n 不在文件和目录清单加上色彩。\n-n 直接列出文件和目录名称，包括控制字符。\n-p 列出权限标示。\n-p 只显示符合范本样式的文件或目录名称。\n-q 用"?"号取代控制字符，列出文件和目录名称。\n-s 列出文件或目录大小。\n-t 用文件和目录的更改时间排序。\n-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。\n-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。\n',charsets:{cjk:!0},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:20:41.000Z",permalink:"/pages/92a016/"},regularPath:"/60.%E8%BD%AF%E6%8A%80%E8%83%BD/01.%E6%A6%82%E8%A6%81.html",relativePath:"60.软技能/01.概要.md",key:"v-3978ada8",path:"/pages/92a016/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"Markdown书写利器Typora最佳实践指南",frontmatter:{title:"Markdown书写利器Typora最佳实践指南",date:"2022-08-16T14:47:47.000Z",permalink:"/pages/f1c5a2/"},regularPath:"/60.%E8%BD%AF%E6%8A%80%E8%83%BD/15.Markdown%E4%B9%A6%E5%86%99%E5%88%A9%E5%99%A8Typora%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97.html",relativePath:"60.软技能/15.Markdown书写利器Typora最佳实践指南.md",key:"v-51154125",path:"/pages/f1c5a2/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"浅谈如何提升职场晋升力",frontmatter:{title:"浅谈如何提升职场晋升力",date:"2023-03-24T09:55:56.000Z",permalink:"/pages/023a9d/"},regularPath:"/60.%E8%BD%AF%E6%8A%80%E8%83%BD/20.%20%E6%B5%85%E8%B0%88%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E8%81%8C%E5%9C%BA%E6%99%8B%E5%8D%87%E5%8A%9B.html",relativePath:"60.软技能/20. 浅谈如何提升职场晋升力.md",key:"v-221fcdfb",path:"/pages/023a9d/",headers:[{level:2,title:"如何与人沟通",slug:"如何与人沟通",normalizedTitle:"如何与人沟通",charIndex:2},{level:2,title:"如何写好文档",slug:"如何写好文档",normalizedTitle:"如何写好文档",charIndex:105}],headersStr:"如何与人沟通 如何写好文档",content:"# 如何与人沟通\n\n 1. 不要私聊，尽量群聊\n\n 2. 做的成果尽量能够让隔级以上的领导知道\n\n 3. 要有目标思维，不要只会习惯做题，而不去思考需求背后的真实目的。\n\n 4. 学会复盘，复盘≠总结\n\n\n# 如何写好文档\n\n 1. 文档的一些技巧\n\n 2. 日报、周报、月报如何写？\n\n行业思维 & 商业思维\n\n向上管理\n\n面向线上编程\n\n数字化转型",normalizedContent:"# 如何与人沟通\n\n 1. 不要私聊，尽量群聊\n\n 2. 做的成果尽量能够让隔级以上的领导知道\n\n 3. 要有目标思维，不要只会习惯做题，而不去思考需求背后的真实目的。\n\n 4. 学会复盘，复盘=总结\n\n\n# 如何写好文档\n\n 1. 文档的一些技巧\n\n 2. 日报、周报、月报如何写？\n\n行业思维 & 商业思维\n\n向上管理\n\n面向线上编程\n\n数字化转型",charsets:{cjk:!0},lastUpdated:"2023/03/27, 10:53:20",lastUpdatedTimestamp:16798856e5},{title:"复盘的技巧：深度复盘的三个步骤【转载】",frontmatter:{title:"复盘的技巧：深度复盘的三个步骤【转载】",date:"2023-03-30T11:09:42.000Z",permalink:"/pages/de968f/"},regularPath:"/60.%E8%BD%AF%E6%8A%80%E8%83%BD/30.%E5%A4%8D%E7%9B%98%E7%9A%84%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%B7%B1%E5%BA%A6%E5%A4%8D%E7%9B%98%E7%9A%84%E4%B8%89%E4%B8%AA%E6%AD%A5%E9%AA%A4%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91.html",relativePath:"60.软技能/30.复盘的技巧：深度复盘的三个步骤【转载】.md",key:"v-7e8625ae",path:"/pages/de968f/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4671}],headersStr:"精选评论",content:"> 原文地址：拉钩教育的文章\n\n在你过往的工作中，有没有这样的懊恼时刻：\n\n * 手头完成一项工作，领导都会要求复盘一下，但自己写的复盘都不是领导想要的；\n\n * 每天都是努力的“打工人”，简历上写了三年工作经验，但又好像是一年的经验重复干了三年，与别人差别很大。\n\n为什么会这样呢？原因是你可能没有深度的工作复盘。有的同学可能会说，我知道复盘，工作中的复盘太多了，项目复盘、每日复盘等，但复盘不知道准备什么，大而全还是要有针对性？\n\n今天我就跟你详细聊一聊复盘思维，来帮你解决以上问题。\n\n\n复盘思维\n\n复盘其实是一个围棋术语，也称 “复局”，指的是“对局”完毕后，回顾推演这一盘棋的记录，以检查下棋的过程中招法的优劣与得失关键。把复盘放到工作中来说，就是通过剖析工作全貌，把其中每个局部拿出来进行仔细分析，以萃取核心工作经验与价值。\n\n但很多人对复盘有个误区，口上说着复盘，却做成了工作总结。\n\n工作总结≠工作复盘，总结是对结果好坏的分析，而复盘是对产生结果原因的深度分析。如果复盘中缺乏对于原因的深度剖析，就起不到复盘应该有的作用。\n\n一项工作结束的时候，一定不要忘记复盘，为什么？因为从一项工作中复盘，获得的通用性解决问题的经验和方法往往具有多重价值：\n\n * 对公司而言，复盘为公司积累了处理相关领域的宝贵经验，一次投入多重收益；\n\n * 对团队而言，复盘帮助团队成员共享了完整的经验方法，大家都能从中受益；\n\n * 对自己而言，复盘总结的经验知识，你可以复用在以后的类似工作中，省时省力更省心。\n\n那现在你可能就要说了，复盘的价值我都懂，但是我不知道如何复盘，复盘什么。\n\n\n工作深度复盘的三步骤\n\n关于工作复盘，根据我的实践经验，我认为可以大致分为以下三个步骤：\n\n 1. 梳理事情的完整过程和信息；\n\n 2. 深度剖析重要事件节点；\n\n 3. 总结重要的经验教训。\n\n下面我们逐一来看。\n\n1. 梳理事情的完整过程和信息\n\n在进行一项工作复盘的时候，首先要对事件的过程和信息进行完整的梳理。因为在做一件工作的时候，基于协作等因素，信息分散在不同的人和角落中。把这些信息进行系统的汇总，你对整件事情才会有完整的认知，复盘才会更全面。否则，信息的缺失，让你的复盘工作可能根本没法往下进行。\n\n对一项工作的完整过程及信息进行梳理，需要把时间线和事件线结合起来。\n\n * 时间线，就是工作进行的重要时间点构成的脉络。这有助于你从时间维度来梳理重要的事件，避免遗漏。\n\n * 事件线，就是重要事件，按照时间顺序进行的脉络，也是复盘架信息。\n\n这是我曾经梳理的某个项目的完整过程和信息。\n\n> 名片产品从 3 月 26 日上线第一个版本，截止到 6 月 15 日，3 个月时间上线 6 个版本，其中三个大版本。版本迭代路径如下：\n\n\n\n当然，这里我为了节省时间，只是列出了事件线的梗概。你在实际复盘的时候，一定把事件的关键详情都列出来，这样可以保证你在第二个环节剖析问题的时候，能把精力集中在剖析问题上，而不是放在回忆事件本身上。\n\n2. 深度剖析重要节点和事件\n\n复盘第二步就需要剖析重要的节点事件，从中寻找这些重要事件进展过程中存在的问题。这里可以从事和人两个层面入手。\n\n * 事的层面\n\n事的层面主要从两个方面来进行剖析：工作内容和工作方法。\n\n剖析工作内容要区分积极的事情和消极的事情，寻找做得好的方面和原因，以及不好的方面和原因。切记避免对积极的事情歌功颂德而对问题避而不谈，更要避免对消极的事情全面否定。因为只有在积极中看到瑕疵，在消极中看到闪光点，保持相对平衡的客观性，才能做好复盘工作。\n\n比如，我在复盘这个项目推广情况时，既分析了存在的问题，又分析了有价值的经验。\n\n\n\n工作方法指的是那些在开展工作、解决问题过程中的一些具有普适性的、技巧性的东西。\n\n复盘工作方法相对比较容易，因为它们是显性的东西，当你解决了一个问题之后，解决问题的方法好不好，自然非常容易判断。比如立项的时候到底需要哪些要素？还比如，当你在对项目的某个领域不熟悉的时候，如何带着团队继续前进。\n\n我在做名片产品项目的过程中，自己本身没有技术背景，而团队中大部分成员都是技术同学。为了项目更好地开展，我采取了双负责人制——业务负责人+技术负责人共同负责。这样技术负责人既能够和技术同学进行高效沟通，又能够以更大的主人翁精神对整个项目负责，从而使得项目的推进更加迅速。\n\n类似于这样有效的工作方法，你复盘出来，以后遇到类似的工作场景，就可以直接复用上去。\n\n * 人的层面\n\n任何工作都离不开人，其中不可避免地存在着各种各样与人相关的问题，对于人的剖析，可以从四个维度上来展开。\n\n第一，剖析人的情绪、决策行为，以及情绪对决策行为的影响。\n\n在对人进行复盘的时候，首先要复盘自己的情绪和决策行为，比如：\n\n * 你在做决策的时候，决策的情绪氛围如何，是一个相对良性的氛围，还是剑拔弩张的氛围？\n\n * 如果在整个项目过程中面临不良的决策氛围，你是否尝试过做出什么事情来改变？\n\n * 你在决策行为中是否受到不良情绪的影响，因此做出了不理性的决策行为？\n\n * ……\n\n因为人是情绪的动物，决策行为不可避免地会受到情绪的影响。你复盘的时候就是要看，在这些事情的进行中，是否有负面的情绪对决策行为产生了重要的影响。\n\n第二，剖析环境因素对于人的影响。\n\n人们在工作中做决策，总是脱离不开环境的影响，这个环境既包括整体的社会大环境，也包括公司的企业环境，甚至是部门和任务团队的环境。这些环境因素是否具有相对稳定性和连续性，它们对于这些决策行为是否产生了重要的影响，这些都需要进行深度复盘。\n\n比如，在我复盘名片产品项目的过程中，就发现因为公司对项目前景判断过于乐观，对项目产生了不切实际的期望，而这也为项目的失败埋下了一定的伏笔。\n\n第三，不仅剖析自己，还要剖析他人。\n\n在复盘人的因素时，不是仅仅针对自己复盘就可以了，还要对他人进行复盘，只有这样考虑了所有涉及人员的情况之后，对人的复盘才是相对完整的。\n\n比如，在做名片产品项目的过程中，虽然所有的团队成员工作态度都比较积极，尤其是大家都会主动加班来赶进度工作。但是，在对项目的策略方向上，团队成员几乎没有提供太多建议，基本上属于我自己一个人的独行。在项目进行的时候，我忙于项目本身，忽略了一些重要策略导致项目失败。\n\n试想，如果其他成员能够和我一起进行更多有效的讨论，给出我更多的建议，那么，我的很多决策可能就会离正确的轨道更近一步。所以，在人的复盘中，对他人的复盘也很重要。\n\n第四，对利益相关方的影响进行剖析。\n\n对利益相关人的分析之所以重要，是因为在一个项目进行中，大家聚到一起，可能有的是自愿，有的是被迫，大家当然会有共同的利益诉求——通过项目成功获得应有的职场回报。但是，也会有一些局部利益的分歧。\n\n比如，我上面提到的名片产品开发项目，因为最终失败了，所以，它对于当时参与这个项目的团队成员都不可避免地产生了负面的影响（主要是绩效和年底奖金方面）。但是，我在复盘的过程中，这部分内容没有引起我的重视。结果，后来在做新项目的时候，原有团队的部分成员就不愿意再支持我的项目。如果复盘的时候能够引起重视，采取一些积极的挽回措施，可能后面的情况就没有这么糟糕。\n\n3. 总结重要的经验教训\n\n在第二步的复盘中，你一定会分析出大量有价值的经验信息，但它们过于庞杂且相对孤立，这样的经验你即使总结出来，可能在下次遇到问题的时候也很难复用。\n\n所以，在这个环节你要对这些经验进行总结提炼，具体要做两件事。\n\n第一，寻找经验之间的联系，进行归类总结。\n\n通常一个稍微有点规模的工作任务或者项目，其中重要的事件节点肯定会有多个，在归类的时候，可以按照经验的相关属性进行归类。\n\n比如把决策类的经验归为一类，把方法论的经验归为一类，把团队协作的经验归为另外一类……也可以按照事件的反应链方法来进行经验归类。\n\n我自己在名片产品项目的复盘中，就对不同时间阶段的同类经验进行了归类汇总，把他们分为团队管理经验、产品开发经验、运营经验和项目管理经验。比如团队管理方面的经验是：找到参与度高的团队成员。\n\n第二，对经验进行重要性排序，记住关键经验。\n\n一个项目复盘得到的经验并不都是同等重要的，有的参考价值有限，你需要对这些经验的重要性进行排序，列出最重要的经验一二三来，它们就是你自己从这个项目中获得的最大的收获。\n\n另外，还有非常重要的一点，在总结经验的时候，一定要区分具体经验和通用性经验。\n\n * 具体经验就是对类似事情有参考价值的经验，它的适用范围相对有限；\n\n * 通用性经验是对很多事情都有参考价值的经验，它的适用范围相对比较广泛。\n\n你在进行优先级排序的时候，排在前面的应该是通用性经验才对。\n\n以上，是进行深度工作复盘的三步骤以及其中具体的方法技巧，我带你稍微总结一下。\n\n * 在梳理完整信息的过程中，要结合时间线和事件线来进行完整的梳理。\n\n * 在深度剖析重要事件时，不仅要从事的层面展开，还要从人的层面展开，人的层面的剖析尤其重要，这一点请你特别注意，因为这是很多人特别容易忽视的维度。\n\n * 在总结经验教训的时候，重要的是进行经验归类和排列优先级，找出对你最有价值的 2～3 条通用性的经验。\n\n\n复盘注意的两个注意要点\n\n在深度复盘的时候，还有两个要点是我特别想提醒你多加注意的。\n\n第一，不断发问。 为了达到深度复盘的目的，你需要不断地发问，在不断追问中找到问题的核心，提炼出有价值的经验教训。\n\n比如，对于一个项目的启动，你可以对当初启动任务的初衷，为什么会有这种初衷，解决问题的路径，以及为什么会采取这种路径不断地进行连环发问。\n\n> 当初我们为什么开始这件事情？\n> 当初我们是如何思考解决这个问题的？\n> 当时我们有几种解决方案？\n> 为什么最终我们会选择这种方案？\n> 当初认为最好的方案现在来看是最好的吗？\n> 在当初我们决定这样做的时候什么问题是没有考虑到的？\n> 在决定采取这个方案的时候谁的意见占了主导？\n\n第二，坦诚面对。 复盘的时候，坦诚面对是一个很大的挑战，尤其是对于失败事情的复盘，很多人缺乏自我剖析的勇气，觉得事情都已经失败了，再去揭伤疤太痛苦了。所以，有的人就会避重就轻、敷衍了事。\n\n你一定要坦诚面对自己，面对问题，以实事求是的态度来剖析其中的问题，越是让你感到不舒服、不愿意面对的问题，往往越是会产生启发和有价值经验的事情，对此一定要不轻易地放过，而是认认真真地去剖析、提炼、总结，相信它们一定不会辜负你的努力。\n\n\n小结\n\n如果你经常在同一件事上踩坑，你要复盘下这个坑是必须踩吗。不踩会有哪些路。\n\n如果你很长一段时间的进步不是很明显，你要去复盘一下造成这种困境的原因是什么。\n\n如果你觉得自己的经验不敌年限，你应该复盘自己，比如哪些是一开始就会的，哪些是后来才会的，第一年会了什么？第二年、第三年又会了什么？看看每年的长进是否可以更多维度、更多跨度地提升。\n\n相信我，复盘一定会有惊喜！\n\n最后，请你复盘下你最近完成的一个工作，或者是你的岗位中遇到的一个问题，复盘下自己之前是怎么做的，这次又是怎么做的。你有什么更好的复盘心得吗？把它写在留言区，共勉。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **赞：\n\n> 老师，对利益相关方的影响进行剖析这块提到，复盘的时候对这块重视不足，原有团队的部分成员就不愿意再支持我的项目，想请教下，后来您是怎么解决的这个问题的？\n\n# *健：\n\n> 老师讲的非常好，刚看到第三讲，这一讲我还得多看几遍。前两讲完全给我指明的方向，也让我发现自己工作中的欠缺，之前老大让我编写流程，我完全不知从何处下手；在做年终工作汇报的时候完全没有数据呈现，只是说做了这个，做了那个....。好丢人...。\n\n# **成：\n\n> 感觉挺有用的，准备对之前做的项目拿来练练手，我们每次进行需求评审，都会变成需求讨论，浪费很多时间，很多时候决策都是在剑拔弩张的氛围下定的。我粗略分析一下原因，1.项目本身历史包袱太重，项目一直在做滚雪球需求迭代，导致技术人员情绪消极没有耐心；2.产品对项目了解深度不够，决策过于主观，轻易试错；3.技术领导对下属过于严苛，任何事情都是第一时间找下属的问题，有时还在会上冷嘲热讽。我也是技术人员，也想把事情做好，到有时候受上述环境影响，也感到消极无奈。。。不知老师有何良策，还请指导一二\n\n#     讲师回复：\n\n>     同学你好，对于你的处境我感同身受，因为我们也遇到过这样的事情，从你提出的问题，能够感受到里面其实问题还挺多的。我说一下我们的经验和情况，在我所在公司里面出现这些混乱状态的时候，往往总会有一些同学会站出来，不管是技术，还是产品，会作为那个正能量的人，找到相关的可以直接沟通的同学，明确提出自己的意见来，包括当前我们需求评审存在的问题是什么，该如何改变，最后会发起专门针对如何进行需求评审规则流程制定的会议，确定一个好的流程，明确要求哪些事情是在需求评审会上做的，哪些是会前就必须完成的，并且建立责任人制度。从此之后混乱的情况有很大的改观。这是我们实践中的一些经验，也仅供参考，具体到你们公司，可能情况又不同，你所面对的情况，不知道是不是比较好改变，这些都需要考虑进去。我想说的一个核心观点就是：每个人其实都可以从正面积极的角度去思考如何改变现状，哪怕是很微小的一些改变，能够促动完成，对于自己来说可能都是一次处事能力的提高。\n\n# **5252：\n\n> 双负责人制——业务负责人+技术负责人共同负责。这个业务负责人是指产品经理/运营经理吗？\n\n# **生：\n\n> 最怕成了甩锅和背锅会\n\n#     讲师回复：\n\n>     同学你好，要是这样的话，那你就努力成为正能量的一方，引导大家向正能量的方向走。\n\n# **6312：\n\n> 复盘已经有很多成熟的流程框架了，根据框架来走效果会更好。同时在复盘前最好让大家有准备，有预期，有参与，避免成为少数人的一言堂\n\n# Steven：\n\n> 复盘做着做着就变总结了。扎心了..\n\n# Steven：\n\n> 复盘做着做着就变总结了。扎心了..",normalizedContent:"> 原文地址：拉钩教育的文章\n\n在你过往的工作中，有没有这样的懊恼时刻：\n\n * 手头完成一项工作，领导都会要求复盘一下，但自己写的复盘都不是领导想要的；\n\n * 每天都是努力的“打工人”，简历上写了三年工作经验，但又好像是一年的经验重复干了三年，与别人差别很大。\n\n为什么会这样呢？原因是你可能没有深度的工作复盘。有的同学可能会说，我知道复盘，工作中的复盘太多了，项目复盘、每日复盘等，但复盘不知道准备什么，大而全还是要有针对性？\n\n今天我就跟你详细聊一聊复盘思维，来帮你解决以上问题。\n\n\n复盘思维\n\n复盘其实是一个围棋术语，也称 “复局”，指的是“对局”完毕后，回顾推演这一盘棋的记录，以检查下棋的过程中招法的优劣与得失关键。把复盘放到工作中来说，就是通过剖析工作全貌，把其中每个局部拿出来进行仔细分析，以萃取核心工作经验与价值。\n\n但很多人对复盘有个误区，口上说着复盘，却做成了工作总结。\n\n工作总结=工作复盘，总结是对结果好坏的分析，而复盘是对产生结果原因的深度分析。如果复盘中缺乏对于原因的深度剖析，就起不到复盘应该有的作用。\n\n一项工作结束的时候，一定不要忘记复盘，为什么？因为从一项工作中复盘，获得的通用性解决问题的经验和方法往往具有多重价值：\n\n * 对公司而言，复盘为公司积累了处理相关领域的宝贵经验，一次投入多重收益；\n\n * 对团队而言，复盘帮助团队成员共享了完整的经验方法，大家都能从中受益；\n\n * 对自己而言，复盘总结的经验知识，你可以复用在以后的类似工作中，省时省力更省心。\n\n那现在你可能就要说了，复盘的价值我都懂，但是我不知道如何复盘，复盘什么。\n\n\n工作深度复盘的三步骤\n\n关于工作复盘，根据我的实践经验，我认为可以大致分为以下三个步骤：\n\n 1. 梳理事情的完整过程和信息；\n\n 2. 深度剖析重要事件节点；\n\n 3. 总结重要的经验教训。\n\n下面我们逐一来看。\n\n1. 梳理事情的完整过程和信息\n\n在进行一项工作复盘的时候，首先要对事件的过程和信息进行完整的梳理。因为在做一件工作的时候，基于协作等因素，信息分散在不同的人和角落中。把这些信息进行系统的汇总，你对整件事情才会有完整的认知，复盘才会更全面。否则，信息的缺失，让你的复盘工作可能根本没法往下进行。\n\n对一项工作的完整过程及信息进行梳理，需要把时间线和事件线结合起来。\n\n * 时间线，就是工作进行的重要时间点构成的脉络。这有助于你从时间维度来梳理重要的事件，避免遗漏。\n\n * 事件线，就是重要事件，按照时间顺序进行的脉络，也是复盘架信息。\n\n这是我曾经梳理的某个项目的完整过程和信息。\n\n> 名片产品从 3 月 26 日上线第一个版本，截止到 6 月 15 日，3 个月时间上线 6 个版本，其中三个大版本。版本迭代路径如下：\n\n\n\n当然，这里我为了节省时间，只是列出了事件线的梗概。你在实际复盘的时候，一定把事件的关键详情都列出来，这样可以保证你在第二个环节剖析问题的时候，能把精力集中在剖析问题上，而不是放在回忆事件本身上。\n\n2. 深度剖析重要节点和事件\n\n复盘第二步就需要剖析重要的节点事件，从中寻找这些重要事件进展过程中存在的问题。这里可以从事和人两个层面入手。\n\n * 事的层面\n\n事的层面主要从两个方面来进行剖析：工作内容和工作方法。\n\n剖析工作内容要区分积极的事情和消极的事情，寻找做得好的方面和原因，以及不好的方面和原因。切记避免对积极的事情歌功颂德而对问题避而不谈，更要避免对消极的事情全面否定。因为只有在积极中看到瑕疵，在消极中看到闪光点，保持相对平衡的客观性，才能做好复盘工作。\n\n比如，我在复盘这个项目推广情况时，既分析了存在的问题，又分析了有价值的经验。\n\n\n\n工作方法指的是那些在开展工作、解决问题过程中的一些具有普适性的、技巧性的东西。\n\n复盘工作方法相对比较容易，因为它们是显性的东西，当你解决了一个问题之后，解决问题的方法好不好，自然非常容易判断。比如立项的时候到底需要哪些要素？还比如，当你在对项目的某个领域不熟悉的时候，如何带着团队继续前进。\n\n我在做名片产品项目的过程中，自己本身没有技术背景，而团队中大部分成员都是技术同学。为了项目更好地开展，我采取了双负责人制——业务负责人+技术负责人共同负责。这样技术负责人既能够和技术同学进行高效沟通，又能够以更大的主人翁精神对整个项目负责，从而使得项目的推进更加迅速。\n\n类似于这样有效的工作方法，你复盘出来，以后遇到类似的工作场景，就可以直接复用上去。\n\n * 人的层面\n\n任何工作都离不开人，其中不可避免地存在着各种各样与人相关的问题，对于人的剖析，可以从四个维度上来展开。\n\n第一，剖析人的情绪、决策行为，以及情绪对决策行为的影响。\n\n在对人进行复盘的时候，首先要复盘自己的情绪和决策行为，比如：\n\n * 你在做决策的时候，决策的情绪氛围如何，是一个相对良性的氛围，还是剑拔弩张的氛围？\n\n * 如果在整个项目过程中面临不良的决策氛围，你是否尝试过做出什么事情来改变？\n\n * 你在决策行为中是否受到不良情绪的影响，因此做出了不理性的决策行为？\n\n * ……\n\n因为人是情绪的动物，决策行为不可避免地会受到情绪的影响。你复盘的时候就是要看，在这些事情的进行中，是否有负面的情绪对决策行为产生了重要的影响。\n\n第二，剖析环境因素对于人的影响。\n\n人们在工作中做决策，总是脱离不开环境的影响，这个环境既包括整体的社会大环境，也包括公司的企业环境，甚至是部门和任务团队的环境。这些环境因素是否具有相对稳定性和连续性，它们对于这些决策行为是否产生了重要的影响，这些都需要进行深度复盘。\n\n比如，在我复盘名片产品项目的过程中，就发现因为公司对项目前景判断过于乐观，对项目产生了不切实际的期望，而这也为项目的失败埋下了一定的伏笔。\n\n第三，不仅剖析自己，还要剖析他人。\n\n在复盘人的因素时，不是仅仅针对自己复盘就可以了，还要对他人进行复盘，只有这样考虑了所有涉及人员的情况之后，对人的复盘才是相对完整的。\n\n比如，在做名片产品项目的过程中，虽然所有的团队成员工作态度都比较积极，尤其是大家都会主动加班来赶进度工作。但是，在对项目的策略方向上，团队成员几乎没有提供太多建议，基本上属于我自己一个人的独行。在项目进行的时候，我忙于项目本身，忽略了一些重要策略导致项目失败。\n\n试想，如果其他成员能够和我一起进行更多有效的讨论，给出我更多的建议，那么，我的很多决策可能就会离正确的轨道更近一步。所以，在人的复盘中，对他人的复盘也很重要。\n\n第四，对利益相关方的影响进行剖析。\n\n对利益相关人的分析之所以重要，是因为在一个项目进行中，大家聚到一起，可能有的是自愿，有的是被迫，大家当然会有共同的利益诉求——通过项目成功获得应有的职场回报。但是，也会有一些局部利益的分歧。\n\n比如，我上面提到的名片产品开发项目，因为最终失败了，所以，它对于当时参与这个项目的团队成员都不可避免地产生了负面的影响（主要是绩效和年底奖金方面）。但是，我在复盘的过程中，这部分内容没有引起我的重视。结果，后来在做新项目的时候，原有团队的部分成员就不愿意再支持我的项目。如果复盘的时候能够引起重视，采取一些积极的挽回措施，可能后面的情况就没有这么糟糕。\n\n3. 总结重要的经验教训\n\n在第二步的复盘中，你一定会分析出大量有价值的经验信息，但它们过于庞杂且相对孤立，这样的经验你即使总结出来，可能在下次遇到问题的时候也很难复用。\n\n所以，在这个环节你要对这些经验进行总结提炼，具体要做两件事。\n\n第一，寻找经验之间的联系，进行归类总结。\n\n通常一个稍微有点规模的工作任务或者项目，其中重要的事件节点肯定会有多个，在归类的时候，可以按照经验的相关属性进行归类。\n\n比如把决策类的经验归为一类，把方法论的经验归为一类，把团队协作的经验归为另外一类……也可以按照事件的反应链方法来进行经验归类。\n\n我自己在名片产品项目的复盘中，就对不同时间阶段的同类经验进行了归类汇总，把他们分为团队管理经验、产品开发经验、运营经验和项目管理经验。比如团队管理方面的经验是：找到参与度高的团队成员。\n\n第二，对经验进行重要性排序，记住关键经验。\n\n一个项目复盘得到的经验并不都是同等重要的，有的参考价值有限，你需要对这些经验的重要性进行排序，列出最重要的经验一二三来，它们就是你自己从这个项目中获得的最大的收获。\n\n另外，还有非常重要的一点，在总结经验的时候，一定要区分具体经验和通用性经验。\n\n * 具体经验就是对类似事情有参考价值的经验，它的适用范围相对有限；\n\n * 通用性经验是对很多事情都有参考价值的经验，它的适用范围相对比较广泛。\n\n你在进行优先级排序的时候，排在前面的应该是通用性经验才对。\n\n以上，是进行深度工作复盘的三步骤以及其中具体的方法技巧，我带你稍微总结一下。\n\n * 在梳理完整信息的过程中，要结合时间线和事件线来进行完整的梳理。\n\n * 在深度剖析重要事件时，不仅要从事的层面展开，还要从人的层面展开，人的层面的剖析尤其重要，这一点请你特别注意，因为这是很多人特别容易忽视的维度。\n\n * 在总结经验教训的时候，重要的是进行经验归类和排列优先级，找出对你最有价值的 2～3 条通用性的经验。\n\n\n复盘注意的两个注意要点\n\n在深度复盘的时候，还有两个要点是我特别想提醒你多加注意的。\n\n第一，不断发问。 为了达到深度复盘的目的，你需要不断地发问，在不断追问中找到问题的核心，提炼出有价值的经验教训。\n\n比如，对于一个项目的启动，你可以对当初启动任务的初衷，为什么会有这种初衷，解决问题的路径，以及为什么会采取这种路径不断地进行连环发问。\n\n> 当初我们为什么开始这件事情？\n> 当初我们是如何思考解决这个问题的？\n> 当时我们有几种解决方案？\n> 为什么最终我们会选择这种方案？\n> 当初认为最好的方案现在来看是最好的吗？\n> 在当初我们决定这样做的时候什么问题是没有考虑到的？\n> 在决定采取这个方案的时候谁的意见占了主导？\n\n第二，坦诚面对。 复盘的时候，坦诚面对是一个很大的挑战，尤其是对于失败事情的复盘，很多人缺乏自我剖析的勇气，觉得事情都已经失败了，再去揭伤疤太痛苦了。所以，有的人就会避重就轻、敷衍了事。\n\n你一定要坦诚面对自己，面对问题，以实事求是的态度来剖析其中的问题，越是让你感到不舒服、不愿意面对的问题，往往越是会产生启发和有价值经验的事情，对此一定要不轻易地放过，而是认认真真地去剖析、提炼、总结，相信它们一定不会辜负你的努力。\n\n\n小结\n\n如果你经常在同一件事上踩坑，你要复盘下这个坑是必须踩吗。不踩会有哪些路。\n\n如果你很长一段时间的进步不是很明显，你要去复盘一下造成这种困境的原因是什么。\n\n如果你觉得自己的经验不敌年限，你应该复盘自己，比如哪些是一开始就会的，哪些是后来才会的，第一年会了什么？第二年、第三年又会了什么？看看每年的长进是否可以更多维度、更多跨度地提升。\n\n相信我，复盘一定会有惊喜！\n\n最后，请你复盘下你最近完成的一个工作，或者是你的岗位中遇到的一个问题，复盘下自己之前是怎么做的，这次又是怎么做的。你有什么更好的复盘心得吗？把它写在留言区，共勉。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **赞：\n\n> 老师，对利益相关方的影响进行剖析这块提到，复盘的时候对这块重视不足，原有团队的部分成员就不愿意再支持我的项目，想请教下，后来您是怎么解决的这个问题的？\n\n# *健：\n\n> 老师讲的非常好，刚看到第三讲，这一讲我还得多看几遍。前两讲完全给我指明的方向，也让我发现自己工作中的欠缺，之前老大让我编写流程，我完全不知从何处下手；在做年终工作汇报的时候完全没有数据呈现，只是说做了这个，做了那个....。好丢人...。\n\n# **成：\n\n> 感觉挺有用的，准备对之前做的项目拿来练练手，我们每次进行需求评审，都会变成需求讨论，浪费很多时间，很多时候决策都是在剑拔弩张的氛围下定的。我粗略分析一下原因，1.项目本身历史包袱太重，项目一直在做滚雪球需求迭代，导致技术人员情绪消极没有耐心；2.产品对项目了解深度不够，决策过于主观，轻易试错；3.技术领导对下属过于严苛，任何事情都是第一时间找下属的问题，有时还在会上冷嘲热讽。我也是技术人员，也想把事情做好，到有时候受上述环境影响，也感到消极无奈。。。不知老师有何良策，还请指导一二\n\n#     讲师回复：\n\n>     同学你好，对于你的处境我感同身受，因为我们也遇到过这样的事情，从你提出的问题，能够感受到里面其实问题还挺多的。我说一下我们的经验和情况，在我所在公司里面出现这些混乱状态的时候，往往总会有一些同学会站出来，不管是技术，还是产品，会作为那个正能量的人，找到相关的可以直接沟通的同学，明确提出自己的意见来，包括当前我们需求评审存在的问题是什么，该如何改变，最后会发起专门针对如何进行需求评审规则流程制定的会议，确定一个好的流程，明确要求哪些事情是在需求评审会上做的，哪些是会前就必须完成的，并且建立责任人制度。从此之后混乱的情况有很大的改观。这是我们实践中的一些经验，也仅供参考，具体到你们公司，可能情况又不同，你所面对的情况，不知道是不是比较好改变，这些都需要考虑进去。我想说的一个核心观点就是：每个人其实都可以从正面积极的角度去思考如何改变现状，哪怕是很微小的一些改变，能够促动完成，对于自己来说可能都是一次处事能力的提高。\n\n# **5252：\n\n> 双负责人制——业务负责人+技术负责人共同负责。这个业务负责人是指产品经理/运营经理吗？\n\n# **生：\n\n> 最怕成了甩锅和背锅会\n\n#     讲师回复：\n\n>     同学你好，要是这样的话，那你就努力成为正能量的一方，引导大家向正能量的方向走。\n\n# **6312：\n\n> 复盘已经有很多成熟的流程框架了，根据框架来走效果会更好。同时在复盘前最好让大家有准备，有预期，有参与，避免成为少数人的一言堂\n\n# steven：\n\n> 复盘做着做着就变总结了。扎心了..\n\n# steven：\n\n> 复盘做着做着就变总结了。扎心了..",charsets:{cjk:!0},lastUpdated:"2023/03/30, 11:13:59",lastUpdatedTimestamp:1680146039e3},{title:"中文技术文档写作规范（Markdown版）",frontmatter:{title:"中文技术文档写作规范（Markdown版）",date:"2022-04-25T15:36:47.000Z",permalink:"/pages/92a7c4/"},regularPath:"/60.%E8%BD%AF%E6%8A%80%E8%83%BD/40.%E5%A5%BD%E6%96%87%E6%A1%A3%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/03.%E4%B8%AD%E6%96%87%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83.html",relativePath:"60.软技能/40.好文档最佳实践/03.中文技术文档写作规范.md",key:"v-6ead5257",path:"/pages/92a7c4/",headers:[{level:2,title:"标题",slug:"标题",normalizedTitle:"标题",charIndex:79},{level:3,title:"层级",slug:"层级",normalizedTitle:"层级",charIndex:86},{level:3,title:"原则",slug:"原则",normalizedTitle:"原则",charIndex:227},{level:2,title:"文本",slug:"文本",normalizedTitle:"文本",charIndex:685},{level:3,title:"字间距",slug:"字间距",normalizedTitle:"字间距",charIndex:692},{level:3,title:"句子",slug:"句子",normalizedTitle:"句子",charIndex:1147},{level:3,title:"写作风格",slug:"写作风格",normalizedTitle:"写作风格",charIndex:1637},{level:3,title:"英文处理",slug:"英文处理",normalizedTitle:"英文处理",charIndex:2164},{level:2,title:"段落",slug:"段落",normalizedTitle:"段落",charIndex:2820},{level:3,title:"原则",slug:"原则-2",normalizedTitle:"原则",charIndex:227},{level:3,title:"引用",slug:"引用",normalizedTitle:"引用",charIndex:2995},{level:2,title:"数值",slug:"数值",normalizedTitle:"数值",charIndex:3180},{level:3,title:"半角数字",slug:"半角数字",normalizedTitle:"半角数字",charIndex:3187},{level:3,title:"千分号",slug:"千分号",normalizedTitle:"千分号",charIndex:3262},{level:3,title:"货币",slug:"货币",normalizedTitle:"货币",charIndex:3381},{level:3,title:"数值范围",slug:"数值范围",normalizedTitle:"数值范围",charIndex:3472},{level:3,title:"变化程度的表示法",slug:"变化程度的表示法",normalizedTitle:"变化程度的表示法",charIndex:3581},{level:2,title:"标点符号",slug:"标点符号",normalizedTitle:"标点符号",charIndex:1083},{level:3,title:"原则",slug:"原则-3",normalizedTitle:"原则",charIndex:227},{level:3,title:"句号",slug:"句号",normalizedTitle:"句号",charIndex:3919},{level:3,title:"逗号",slug:"逗号",normalizedTitle:"逗号",charIndex:1181},{level:3,title:"顿号",slug:"顿号",normalizedTitle:"顿号",charIndex:3931},{level:3,title:"分号",slug:"分号",normalizedTitle:"分号",charIndex:917},{level:3,title:"引号",slug:"引号",normalizedTitle:"引号",charIndex:2435},{level:3,title:"括号",slug:"括号",normalizedTitle:"括号",charIndex:2554},{level:3,title:"冒号",slug:"冒号",normalizedTitle:"冒号",charIndex:3937},{level:3,title:"省略号",slug:"省略号",normalizedTitle:"省略号",charIndex:2354},{level:3,title:"感叹号",slug:"感叹号",normalizedTitle:"感叹号",charIndex:5369},{level:3,title:"破折号",slug:"破折号",normalizedTitle:"破折号",charIndex:3993},{level:3,title:"连接号",slug:"连接号",normalizedTitle:"连接号",charIndex:3515},{level:2,title:"文档体系",slug:"文档体系",normalizedTitle:"文档体系",charIndex:5835},{level:3,title:"结构",slug:"结构",normalizedTitle:"结构",charIndex:261},{level:3,title:"文件名",slug:"文件名",normalizedTitle:"文件名",charIndex:6496},{level:2,title:"参考链接",slug:"参考链接",normalizedTitle:"参考链接",charIndex:6779}],headersStr:"标题 层级 原则 文本 字间距 句子 写作风格 英文处理 段落 原则 引用 数值 半角数字 千分号 货币 数值范围 变化程度的表示法 标点符号 原则 句号 逗号 顿号 分号 引号 括号 冒号 省略号 感叹号 破折号 连接号 文档体系 结构 文件名 参考链接",content:'Markdown是一种易用易读的「标记语言」，在中文技术文档写作中，您只需几分钟即可掌握其语法，便可写出漂亮的文档，下面给出中文技术文档的写作规范。\n\n\n# 标题\n\n\n# 层级\n\n标题分为四级。\n\n * 一级标题：文章的标题\n * 二级标题：文章主要部分的大标题\n * 三级标题：二级标题下面一级的小标题\n * 四级标题：三级标题下面某一方面的小标题\n\n下面是示例。\n\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n\n\n# 原则\n\n（1）一级标题下，不能直接出现三级标题。\n\n示例：下面的文章结构，缺少二级标题。\n\n# 一级标题\n\n### 三级标题\n\n\n（2）标题要避免孤立编号（即同级标题只有一个）。\n\n示例：下面的文章结构，二级标题 A只包含一个三级标题，完全可以省略三级标题 A。\n\n## 二级标题 A\n\n### 三级标题 A\n\n## 二级标题 B\n\n\n（3）下级标题不重复上一级标题的名字。\n\n示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。\n\n## 概述\n\n### 概述\n\n\n（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。\n\n如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。\n\n示例：下面的结构二要好于结构一。结构一适用的场景，主要是较长篇幅的内容。\n\n结构一\n\n### 三级标题\n\n#### 四级标题 A\n\n#### 四级标题 B\n\n#### 四级标题 C\n\n结构二\n\n### 三级标题\n\n**（1）A**\n\n**（2）B**\n\n**（3）C**\n\n\n\n# 文本\n\n\n# 字间距\n\n（1）全角中文字符与半角英文字符之间，应有一个半角空格。\n\n错误：本文介绍如何快速启动Windows系统。\n\n正确：本文介绍如何快速启动 Windows 系统。\n\n\n（2）全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。\n\n正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。\n\n正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。\n\n\n半角的百分号，视同阿拉伯数字。\n\n正确：今年我国经济增长率是6.5%。\n\n正确：今年我国经济增长率是 6.5%。\n\n\n（3）英文单位若不翻译，单位前的阿拉伯数字与单位符号之间，应留出适当的空隙。\n\n例1：一部容量为 16 GB 的智能手机\n\n例2：1 h = 60 min = 3,600 s\n\n\n（4）半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。\n\n错误：他的电脑是 MacBook Air 。\n\n正确：他的电脑是 MacBook Air。\n\n\n\n# 句子\n\n（1）避免使用长句。\n\n不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，任何情况下都不能接受。\n\n错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。\n\n正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。\n\n\n逗号分割的长句，总长度不应该超过 100 字或者正文的 3 行。\n\n（2）尽量使用简单句和并列句，避免使用复合句。\n\n并列句：他昨天生病了，没有参加会议。\n\n复合句：那个昨天生病的人没有参加会议。\n\n\n（3）同样一个意思，尽量使用肯定句表达，不使用否定句表达。\n\n错误：请确认没有接通装置的电源。\n\n正确：请确认装置的电源已关闭。\n\n\n（4）避免使用双重否定句。\n\n错误：没有删除权限的用户，不能删除此文件。\n\n正确：用户必须拥有删除权限，才能删除此文件。\n\n\n\n# 写作风格\n\n（1）尽量不使用被动语态，改为使用主动语态。\n\n错误：假如此软件尚未被安装，\n\n正确：假如尚未安装这个软件，\n\n\n（2）不使用非正式的语言风格。\n\n错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！\n\n正确：无法参加本次活动，我深感遗憾。\n\n\n（3）不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。\n\n错误：这是唯二的快速启动的方法。\n\n正确：这是仅有的两种快速启动的方法。\n\n\n（4）用对“的”、“地”、“得”。\n\n她露出了开心的笑容。\n（形容词＋的＋名词）\n\n她开心地笑了。\n（副词＋地＋动词）\n\n她笑得很开心。\n（动词＋得＋副词）\n\n\n（5）使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。\n\n错误：从管理系统可以监视中继系统和受其直接控制的分配系统。\n\n正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。\n\n\n（6）名词前不要使用过多的形容词。\n\n错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。\n\n正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。\n\n\n\n# 英文处理\n\n（1）英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。\n\n英文：...information stored in random access memory (RAMs)...\n\n中文：⋯⋯存储在随机存取存储器（RAM）里的信息⋯⋯\n\n\n（2）外文缩写可以使用半角圆点(.)表示缩写。\n\nU.S.A.\nApple, Inc.\n\n\n（3）表示中文时，英文省略号（...）应改为中文省略号（⋯⋯）。\n\n英文：5 minutes later...\n\n中文：5 分钟过去了⋯⋯\n\n\n（4）英文书名或电影名改用中文表达时，双引号应改为书名号。\n\n英文：He published an article entitled "The Future of the Aviation".\n\n中文：他发表了一篇名为《航空业的未来》的文章。\n\n\n（5）第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。\n\nIOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。\n\n\n（6）专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。\n\n“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。\n\n“online transaction processing”（在线事务处理）不是专有名词，不应大写。\n\n\n\n# 段落\n\n\n# 原则\n\n * 一个段落只能有一个主题，或一个中心句子。\n * 段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。\n * 一个段落的长度不能超过七行，最佳段落长度小于等于四行。\n * 段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。\n * 段落之间使用一个空行隔开。\n * 段落开头不要留出空白字符。\n\n\n# 引用\n\n引用第三方内容时，应注明出处。\n\nOne man’s constant is another man’s variable. — Alan Perlis\n\n\n如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。\n\n本文转载自 WikiQuote\n\n\n使用外部图片时，必须在图片下方或文末标明来源。\n\n本文部分图片来自 Wikipedia\n\n\n\n# 数值\n\n\n# 半角数字\n\n阿拉伯数字一律使用半角形式，不得使用全角形式。\n\n错误：这件商品的价格是１０００元。\n\n正确：这件商品的价格是 1000 元。\n\n\n\n# 千分号\n\n数值为千位以上，应添加千分号（半角逗号）。\n\nXXX 公司的实收资本为 ￥1,258,000 人民币。\n\n\n对于 4 位的数值，千分号是选用的，比如1000和1,000都可以接受。对于 4 位以上的数值，应添加千分号。\n\n\n# 货币\n\n货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。\n\n$1,000\n1,000 美元\n\n\n英文的货币名称，建议参考国际标准 ISO 4217。\n\n\n# 数值范围\n\n表示数值范围时，用波浪线（～）或一字线（—）连接。参见《标点符号》一节的“连接号”部分。\n\n带有单位或百分号时，两个数字建议都要加上单位或百分号。\n\n132 kg～234 kg\n\n67%～89%\n\n\n\n# 变化程度的表示法\n\n数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。\n\n增加到过去的两倍\n（过去为一，现在为二）\n\n增加了两倍\n（过去为一，现在为三）\n\n\n数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。\n\n降低到百分之八十\n（定额是一百，现在是八十）\n\n降低了百分之八十\n（原来是一百，现在是二十）\n\n\n不能用“降低 N 倍”或“减少 N 倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。\n\n\n# 标点符号\n\n\n# 原则\n\n（1）中文语句的标点符号，均应该采取全角符号，这样可以与全角文字保持视觉的一致。\n\n（2）如果整句为英文，则该句使用英文/半角标点。\n\n（3）句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。\n\n（4）点号（句号、逗号、顿号、分号、冒号）不得出现在标题的末尾，而标号（引号、括号、破折号、省略号、书名号、着重号、间隔号、叹号、问号）可以。\n\n\n# 句号\n\n（1）中文语句的结尾处应该用全角句号（。）。\n\n（2）句子末尾用括号加注时，句号应在括号之外。\n\n错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）\n\n正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。\n\n\n\n# 逗号\n\n（1）逗号（，）表示句子内部的一般性停顿。\n\n（2）注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。\n\n\n# 顿号\n\n（1）句子内部的并列词，应该用全角顿号(、) 分隔，而不用逗号，即使并列词是英语也是如此。\n\n错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。\n\n正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。\n\n\n（2）英文句子中，并列词语之间使用半角逗号（,）分隔。\n\n例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.\n\n\n（3）中文句子内部的并列词，最后一个尽量使用（和）来连接，使句子读起来更加连贯，下面两个句子都可以，第二个更优。\n\n正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里，以及百度等。\n\n正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。\n\n\n\n# 分号\n\n（1）分号（；）表示复句内部并列分句之间的停顿。\n\n\n# 引号\n\n（1）引用时，应该使用全角双引号（“ ”），注意前后双引号不同。\n\n例句：许多人都认为客户服务的核心是“友好”和“专业”。\n\n\n（2）引号里面还要用引号时，外面一层用双引号，里面一层用单引号（‘ ’），注意前后单引号不同。\n\n例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”\n\n\n\n# 括号\n\n（1）补充说明时，使用全角圆括号（（）），括号前后不加空格。\n\n例句：请确认所有的连接（电缆和接插件）均安装牢固。\n\n\n（2）几种括号的中英文名称。\n\n      英文                           中文\n{ }   braces 或 curly brackets      大括号\n[ ]   square brackets 或 brackets   方括号\n< >   angled brackets              尖括号\n( )   parentheses                  圆括号\n\n\n# 冒号\n\n（1）全角冒号（：）常用在需要解释的词语后边，引出解释和说明。\n\n例句：请确认以下几项内容：时间、地点、活动名称和来宾数量。\n\n\n（2）表示时间时，应使用半角冒号（:）。\n\n例句：早上 8:00\n\n\n\n# 省略号\n\n（1）省略号（⋯⋯）表示语句未完、或者语气的不连续。\n\n（2）省略号占两个汉字空间、包含六个省略点，不要使用。。。或...等非标准形式。\n\n（3）省略号不应与“等”这个词一起使用。\n\n错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。\n\n正确：我们为会餐准备了各色水果，有香蕉、苹果、梨⋯⋯\n\n正确：我们为会餐准备了香蕉、苹果、梨等各色水果。\n\n\n\n# 感叹号\n\n（1）应该使用平静的语气叙述，尽量避免使用感叹号（！）。\n\n（2）不得多个感叹号连用，比如！！和!!!。\n\n\n# 破折号\n\n（1）破折号————一般用于进一步解释。\n\n（2）破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。\n\n例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。\n\n例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。\n\n\n\n# 连接号\n\n（1）连接号用于连接两个类似的词。\n\n（2）以下场合应该使用直线连接号（-），占一个半角字符的位置。\n\n * 两个名词的复合\n * 图表编号\n\n例句：氧化-还原反应\n\n例句：图 1-1\n\n\n（3）数值范围（例如日期、时间或数字）应该使用波浪连接号（～）或一字号（—），占一个全角字符的位置。\n\n例句：2009 年～2011 年\n\n\n注意，波浪连接号前后两个值都建议加上单位。\n\n（4）波浪连接号也可以用汉字“至”代替。\n\n例句：周围温度：-20 °C 至 -10 °C\n\n\n\n# 文档体系\n\n\n# 结构\n\n软件手册是一部完整的书，建议采用下面的结构。\n\n * 简介（Introduction）：[必备] [文件] 提供对产品和文档本身的总体的、扼要的说明\n * 快速上手（Getting Started）：[可选] [文件] 如何最快速地使用产品\n * 入门篇（Basics）：[必备] [目录] 又称“使用篇”，提供初级的使用教程\n   * 环境准备（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件\n   * 安装（Installation）：[可选] [文件] 软件的安装方法\n   * 设置（Configuration）：[必备] [文件] 软件的设置\n * 进阶篇（Advanced)：[可选] [目录] 又称“开发篇”，提供中高级的开发教程\n * API（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍\n * FAQ：[可选] [文件] 常见问题解答\n * 附录（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容\n   * Glossary：[可选] [文件] 名词解释\n   * Recipes：[可选] [文件] 最佳实践\n   * Troubleshooting：[可选] [文件] 故障处理\n   * ChangeLog：[可选] [文件] 版本说明\n   * Feedback：[可选] [文件] 反馈方式\n\n下面是两个真实范例，可参考。\n\n * Redux 手册\n * Atom 手册\n\n\n# 文件名\n\n文档的文件名不得含有空格。\n\n文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。\n\n错误：名词解释.md\n\n正确：glossary.md\n\n\n文件名建议只使用小写字母，不使用大写字母。\n\n错误：TroubleShooting.md\n\n正确：troubleshooting.md\n\n\n为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。\n\n文件名包含多个单词时，单词之间建议使用半角的连词线（-）分隔。\n\n不佳：advanced_usage.md\n\n正确：advanced-usage.md\n\n\n\n# 参考链接\n\n * 产品手册中文写作规范, by 华为\n * 写作规范和格式规范, by DaoCloud\n * 技术写作技巧在日汉翻译中的应用, by 刘方\n * 简体中文规范指南, by lengoo\n * 文档风格指南, by LeanCloud\n * 豌豆荚文案风格指南, by 豌豆荚\n * 中文文案排版指北, by sparanoid\n * 中文排版需求, by W3C\n * 为什么文件名要小写？, by 阮一峰\n * Google Developer Documentation Style Guide, by Google\n * 出版物上数字用法的规定（国家标准GBT15835－2011）\n * GB 3100-1993 国际单位制及其应用\n\n> 本文文献摘录自💁‍♂️document-style-guide',normalizedContent:'markdown是一种易用易读的「标记语言」，在中文技术文档写作中，您只需几分钟即可掌握其语法，便可写出漂亮的文档，下面给出中文技术文档的写作规范。\n\n\n# 标题\n\n\n# 层级\n\n标题分为四级。\n\n * 一级标题：文章的标题\n * 二级标题：文章主要部分的大标题\n * 三级标题：二级标题下面一级的小标题\n * 四级标题：三级标题下面某一方面的小标题\n\n下面是示例。\n\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n\n\n# 原则\n\n（1）一级标题下，不能直接出现三级标题。\n\n示例：下面的文章结构，缺少二级标题。\n\n# 一级标题\n\n### 三级标题\n\n\n（2）标题要避免孤立编号（即同级标题只有一个）。\n\n示例：下面的文章结构，二级标题 a只包含一个三级标题，完全可以省略三级标题 a。\n\n## 二级标题 a\n\n### 三级标题 a\n\n## 二级标题 b\n\n\n（3）下级标题不重复上一级标题的名字。\n\n示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。\n\n## 概述\n\n### 概述\n\n\n（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。\n\n如果三级标题下有并列性的内容，建议只使用项目列表（item list）。\n\n示例：下面的结构二要好于结构一。结构一适用的场景，主要是较长篇幅的内容。\n\n结构一\n\n### 三级标题\n\n#### 四级标题 a\n\n#### 四级标题 b\n\n#### 四级标题 c\n\n结构二\n\n### 三级标题\n\n**（1）a**\n\n**（2）b**\n\n**（3）c**\n\n\n\n# 文本\n\n\n# 字间距\n\n（1）全角中文字符与半角英文字符之间，应有一个半角空格。\n\n错误：本文介绍如何快速启动windows系统。\n\n正确：本文介绍如何快速启动 windows 系统。\n\n\n（2）全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。\n\n正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。\n\n正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。\n\n\n半角的百分号，视同阿拉伯数字。\n\n正确：今年我国经济增长率是6.5%。\n\n正确：今年我国经济增长率是 6.5%。\n\n\n（3）英文单位若不翻译，单位前的阿拉伯数字与单位符号之间，应留出适当的空隙。\n\n例1：一部容量为 16 gb 的智能手机\n\n例2：1 h = 60 min = 3,600 s\n\n\n（4）半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。\n\n错误：他的电脑是 macbook air 。\n\n正确：他的电脑是 macbook air。\n\n\n\n# 句子\n\n（1）避免使用长句。\n\n不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，任何情况下都不能接受。\n\n错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。\n\n正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。\n\n\n逗号分割的长句，总长度不应该超过 100 字或者正文的 3 行。\n\n（2）尽量使用简单句和并列句，避免使用复合句。\n\n并列句：他昨天生病了，没有参加会议。\n\n复合句：那个昨天生病的人没有参加会议。\n\n\n（3）同样一个意思，尽量使用肯定句表达，不使用否定句表达。\n\n错误：请确认没有接通装置的电源。\n\n正确：请确认装置的电源已关闭。\n\n\n（4）避免使用双重否定句。\n\n错误：没有删除权限的用户，不能删除此文件。\n\n正确：用户必须拥有删除权限，才能删除此文件。\n\n\n\n# 写作风格\n\n（1）尽量不使用被动语态，改为使用主动语态。\n\n错误：假如此软件尚未被安装，\n\n正确：假如尚未安装这个软件，\n\n\n（2）不使用非正式的语言风格。\n\n错误：lady gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！\n\n正确：无法参加本次活动，我深感遗憾。\n\n\n（3）不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。\n\n错误：这是唯二的快速启动的方法。\n\n正确：这是仅有的两种快速启动的方法。\n\n\n（4）用对“的”、“地”、“得”。\n\n她露出了开心的笑容。\n（形容词＋的＋名词）\n\n她开心地笑了。\n（副词＋地＋动词）\n\n她笑得很开心。\n（动词＋得＋副词）\n\n\n（5）使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。\n\n错误：从管理系统可以监视中继系统和受其直接控制的分配系统。\n\n正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。\n\n\n（6）名词前不要使用过多的形容词。\n\n错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。\n\n正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。\n\n\n\n# 英文处理\n\n（1）英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。\n\n英文：...information stored in random access memory (rams)...\n\n中文：⋯⋯存储在随机存取存储器（ram）里的信息⋯⋯\n\n\n（2）外文缩写可以使用半角圆点(.)表示缩写。\n\nu.s.a.\napple, inc.\n\n\n（3）表示中文时，英文省略号（...）应改为中文省略号（⋯⋯）。\n\n英文：5 minutes later...\n\n中文：5 分钟过去了⋯⋯\n\n\n（4）英文书名或电影名改用中文表达时，双引号应改为书名号。\n\n英文：he published an article entitled "the future of the aviation".\n\n中文：他发表了一篇名为《航空业的未来》的文章。\n\n\n（5）第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。\n\nioc（international olympic committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“ioc”了。\n\n\n（6）专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。\n\n“american association of physicists in medicine”（美国医学物理学家协会）是专有名词，需要大写。\n\n“online transaction processing”（在线事务处理）不是专有名词，不应大写。\n\n\n\n# 段落\n\n\n# 原则\n\n * 一个段落只能有一个主题，或一个中心句子。\n * 段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。\n * 一个段落的长度不能超过七行，最佳段落长度小于等于四行。\n * 段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。\n * 段落之间使用一个空行隔开。\n * 段落开头不要留出空白字符。\n\n\n# 引用\n\n引用第三方内容时，应注明出处。\n\none man’s constant is another man’s variable. — alan perlis\n\n\n如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。\n\n本文转载自 wikiquote\n\n\n使用外部图片时，必须在图片下方或文末标明来源。\n\n本文部分图片来自 wikipedia\n\n\n\n# 数值\n\n\n# 半角数字\n\n阿拉伯数字一律使用半角形式，不得使用全角形式。\n\n错误：这件商品的价格是１０００元。\n\n正确：这件商品的价格是 1000 元。\n\n\n\n# 千分号\n\n数值为千位以上，应添加千分号（半角逗号）。\n\nxxx 公司的实收资本为 ￥1,258,000 人民币。\n\n\n对于 4 位的数值，千分号是选用的，比如1000和1,000都可以接受。对于 4 位以上的数值，应添加千分号。\n\n\n# 货币\n\n货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。\n\n$1,000\n1,000 美元\n\n\n英文的货币名称，建议参考国际标准 iso 4217。\n\n\n# 数值范围\n\n表示数值范围时，用波浪线（～）或一字线（—）连接。参见《标点符号》一节的“连接号”部分。\n\n带有单位或百分号时，两个数字建议都要加上单位或百分号。\n\n132 kg～234 kg\n\n67%～89%\n\n\n\n# 变化程度的表示法\n\n数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。\n\n增加到过去的两倍\n（过去为一，现在为二）\n\n增加了两倍\n（过去为一，现在为三）\n\n\n数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。\n\n降低到百分之八十\n（定额是一百，现在是八十）\n\n降低了百分之八十\n（原来是一百，现在是二十）\n\n\n不能用“降低 n 倍”或“减少 n 倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。\n\n\n# 标点符号\n\n\n# 原则\n\n（1）中文语句的标点符号，均应该采取全角符号，这样可以与全角文字保持视觉的一致。\n\n（2）如果整句为英文，则该句使用英文/半角标点。\n\n（3）句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。\n\n（4）点号（句号、逗号、顿号、分号、冒号）不得出现在标题的末尾，而标号（引号、括号、破折号、省略号、书名号、着重号、间隔号、叹号、问号）可以。\n\n\n# 句号\n\n（1）中文语句的结尾处应该用全角句号（。）。\n\n（2）句子末尾用括号加注时，句号应在括号之外。\n\n错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）\n\n正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。\n\n\n\n# 逗号\n\n（1）逗号（，）表示句子内部的一般性停顿。\n\n（2）注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。\n\n\n# 顿号\n\n（1）句子内部的并列词，应该用全角顿号(、) 分隔，而不用逗号，即使并列词是英语也是如此。\n\n错误：我最欣赏的科技公司有 google, facebook, 腾讯, 阿里和百度等。\n\n正确：我最欣赏的科技公司有 google、facebook、腾讯、阿里和百度等。\n\n\n（2）英文句子中，并列词语之间使用半角逗号（,）分隔。\n\n例句：microsoft office includes word, excel, powerpoint, outlook and other components.\n\n\n（3）中文句子内部的并列词，最后一个尽量使用（和）来连接，使句子读起来更加连贯，下面两个句子都可以，第二个更优。\n\n正确：我最欣赏的科技公司有 google、facebook、腾讯、阿里，以及百度等。\n\n正确：我最欣赏的科技公司有 google、facebook、腾讯、阿里和百度等。\n\n\n\n# 分号\n\n（1）分号（；）表示复句内部并列分句之间的停顿。\n\n\n# 引号\n\n（1）引用时，应该使用全角双引号（“ ”），注意前后双引号不同。\n\n例句：许多人都认为客户服务的核心是“友好”和“专业”。\n\n\n（2）引号里面还要用引号时，外面一层用双引号，里面一层用单引号（‘ ’），注意前后单引号不同。\n\n例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”\n\n\n\n# 括号\n\n（1）补充说明时，使用全角圆括号（（）），括号前后不加空格。\n\n例句：请确认所有的连接（电缆和接插件）均安装牢固。\n\n\n（2）几种括号的中英文名称。\n\n      英文                           中文\n{ }   braces 或 curly brackets      大括号\n[ ]   square brackets 或 brackets   方括号\n< >   angled brackets              尖括号\n( )   parentheses                  圆括号\n\n\n# 冒号\n\n（1）全角冒号（：）常用在需要解释的词语后边，引出解释和说明。\n\n例句：请确认以下几项内容：时间、地点、活动名称和来宾数量。\n\n\n（2）表示时间时，应使用半角冒号（:）。\n\n例句：早上 8:00\n\n\n\n# 省略号\n\n（1）省略号（⋯⋯）表示语句未完、或者语气的不连续。\n\n（2）省略号占两个汉字空间、包含六个省略点，不要使用。。。或...等非标准形式。\n\n（3）省略号不应与“等”这个词一起使用。\n\n错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。\n\n正确：我们为会餐准备了各色水果，有香蕉、苹果、梨⋯⋯\n\n正确：我们为会餐准备了香蕉、苹果、梨等各色水果。\n\n\n\n# 感叹号\n\n（1）应该使用平静的语气叙述，尽量避免使用感叹号（！）。\n\n（2）不得多个感叹号连用，比如！！和!!!。\n\n\n# 破折号\n\n（1）破折号————一般用于进一步解释。\n\n（2）破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。\n\n例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。\n\n例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。\n\n\n\n# 连接号\n\n（1）连接号用于连接两个类似的词。\n\n（2）以下场合应该使用直线连接号（-），占一个半角字符的位置。\n\n * 两个名词的复合\n * 图表编号\n\n例句：氧化-还原反应\n\n例句：图 1-1\n\n\n（3）数值范围（例如日期、时间或数字）应该使用波浪连接号（～）或一字号（—），占一个全角字符的位置。\n\n例句：2009 年～2011 年\n\n\n注意，波浪连接号前后两个值都建议加上单位。\n\n（4）波浪连接号也可以用汉字“至”代替。\n\n例句：周围温度：-20 °c 至 -10 °c\n\n\n\n# 文档体系\n\n\n# 结构\n\n软件手册是一部完整的书，建议采用下面的结构。\n\n * 简介（introduction）：[必备] [文件] 提供对产品和文档本身的总体的、扼要的说明\n * 快速上手（getting started）：[可选] [文件] 如何最快速地使用产品\n * 入门篇（basics）：[必备] [目录] 又称“使用篇”，提供初级的使用教程\n   * 环境准备（prerequisite）：[必备] [文件] 软件使用需要满足的前置条件\n   * 安装（installation）：[可选] [文件] 软件的安装方法\n   * 设置（configuration）：[必备] [文件] 软件的设置\n * 进阶篇（advanced)：[可选] [目录] 又称“开发篇”，提供中高级的开发教程\n * api（reference）：[可选] [目录|文件] 软件 api 的逐一介绍\n * faq：[可选] [文件] 常见问题解答\n * 附录（appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容\n   * glossary：[可选] [文件] 名词解释\n   * recipes：[可选] [文件] 最佳实践\n   * troubleshooting：[可选] [文件] 故障处理\n   * changelog：[可选] [文件] 版本说明\n   * feedback：[可选] [文件] 反馈方式\n\n下面是两个真实范例，可参考。\n\n * redux 手册\n * atom 手册\n\n\n# 文件名\n\n文档的文件名不得含有空格。\n\n文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。\n\n错误：名词解释.md\n\n正确：glossary.md\n\n\n文件名建议只使用小写字母，不使用大写字母。\n\n错误：troubleshooting.md\n\n正确：troubleshooting.md\n\n\n为了醒目，某些说明文件的文件名，可以使用大写字母，比如readme、license。\n\n文件名包含多个单词时，单词之间建议使用半角的连词线（-）分隔。\n\n不佳：advanced_usage.md\n\n正确：advanced-usage.md\n\n\n\n# 参考链接\n\n * 产品手册中文写作规范, by 华为\n * 写作规范和格式规范, by daocloud\n * 技术写作技巧在日汉翻译中的应用, by 刘方\n * 简体中文规范指南, by lengoo\n * 文档风格指南, by leancloud\n * 豌豆荚文案风格指南, by 豌豆荚\n * 中文文案排版指北, by sparanoid\n * 中文排版需求, by w3c\n * 为什么文件名要小写？, by 阮一峰\n * google developer documentation style guide, by google\n * 出版物上数字用法的规定（国家标准gbt15835－2011）\n * gb 3100-1993 国际单位制及其应用\n\n> 本文文献摘录自💁‍♂️document-style-guide',charsets:{cjk:!0},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"如何写出一份合格的技术文档",frontmatter:{title:"如何写出一份合格的技术文档",date:"2022-11-01T15:59:21.000Z",permalink:"/pages/b5407d/"},regularPath:"/60.%E8%BD%AF%E6%8A%80%E8%83%BD/40.%E5%A5%BD%E6%96%87%E6%A1%A3%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/04.%E5%A6%82%E4%BD%95%E5%9D%9A%E6%8C%81%E5%86%99%E5%87%BA%E4%B8%80%E4%BB%BD%E5%90%88%E6%A0%BC%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3.html",relativePath:"60.软技能/40.好文档最佳实践/04.如何坚持写出一份合格的技术文档.md",key:"v-65411ac6",path:"/pages/b5407d/",headers:[{level:2,title:"1. 引言",slug:"_1-引言",normalizedTitle:"1. 引言",charIndex:21},{level:2,title:"2. 排版规范化",slug:"_2-排版规范化",normalizedTitle:"2. 排版规范化",charIndex:467},{level:3,title:"2.1 空格",slug:"_2-1-空格",normalizedTitle:"2.1 空格",charIndex:480},{level:3,title:"2.2 标点符号",slug:"_2-2-标点符号",normalizedTitle:"2.2 标点符号",charIndex:991},{level:3,title:"2.3 中文和西文符号",slug:"_2-3-中文和西文符号",normalizedTitle:"2.3 中文和西文符号",charIndex:1445},{level:3,title:"2.4 专有名词",slug:"_2-4-专有名词",normalizedTitle:"2.4 专有名词",charIndex:1877},{level:3,title:"2.5 文字样式",slug:"_2-5-文字样式",normalizedTitle:"2.5 文字样式",charIndex:2485},{level:2,title:"3. 选题系统化",slug:"_3-选题系统化",normalizedTitle:"3. 选题系统化",charIndex:2683},{level:3,title:"3.1 主题分类",slug:"_3-1-主题分类",normalizedTitle:"3.1 主题分类",charIndex:2696},{level:3,title:"3.2 风格内容",slug:"_3-2-风格内容",normalizedTitle:"3.2 风格内容",charIndex:3998},{level:2,title:"4. 维护简单化",slug:"_4-维护简单化",normalizedTitle:"4. 维护简单化",charIndex:4394},{level:2,title:"5. 参考资料",slug:"_5-参考资料",normalizedTitle:"5. 参考资料",charIndex:4592}],headersStr:"1. 引言 2. 排版规范化 2.1 空格 2.2 标点符号 2.3 中文和西文符号 2.4 专有名词 2.5 文字样式 3. 选题系统化 3.1 主题分类 3.2 风格内容 4. 维护简单化 5. 参考资料",content:"原文地址\n\n如何坚持写技术博客？\n\n\n# 1. 引言\n\n写技术文档是大部分程序员都很想坚持却又总是断断续续的一件事。大家愿意写技术文档是因为有很多好处，例如：\n\n * 有助于整理平常的思考、梳理一个复杂难懂的技术细节；\n * 同时也可以满足分享与传播的欲望，幸运的话还能提升自己的 impact。\n\n为了能长久地坚持写技术文档，不让写技术文档成为一件麻烦事而丧失了写作的动力，需要做一定的工作来破除阻碍我们坚持写博客的障碍：\n\n1. 排版规范化： 排版规范化可以帮助我这种强迫症不必要纠结具体的格式，参考先进的排版规范会大大提高我们文章的可读性；\n\n2. 选题系统化： 技术博客说来说去也就是几种常见的内容类型，不同类型对应不同的场景与写作需求，需要我们花费不同的时间去完成。做一下简单的梳理帮助我们不必要苦恼内容的来源与分类；\n\n3. 维护简单化： 从功利的角度来讲，除非你是前端工程师，否则你的博客做得再花哨也不会为你的面试加分多少。理想的模式是我们只负责内容，技术文档的编译、发布、运行都交由第三方工具和服务商来完成。\n\n\n# 2. 排版规范化\n\n\n# 2.1 空格\n\n 1. 行文时，请在中文与英文、中文与数字、英文与数字之间增加空格。例如：\n\n * 正确： Github 于 2007 年 10 月 19 日正式上线。\n * 错误： Github于2007年10月19日正式上线。\n\n 2. 一段文字中有超链接的部分，在超链接的前后使用空格。例如：\n\n * 正确： 你可以前往 Linux 开源仓库 了解详情。\n * 错误： 你可以前往Linux 开源仓库了解详情。\n\n 3. 英文、数字前后接「中文全角标点符号」或「表示单位的角标符号」时，不需要加空格。例如：\n\n * 正确： 新 MacBook Pro 有 15% 的 CPU 性能提升。\n * 错误： 新 MacBook Pro 有 15 % 的 CPU 性能提升。\n * 正确： 我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。\n * 错误： 我家的光纤入户宽带有 10 Gbps ， SSD 一共有 20 TB 。\n\n 4. 对于有特殊用法的专有名词，如 4K、1080p、iOS 13 等，英文和数字之间是否空格以官方标准为准。\n\n 5. 每段文字的开头不需要空两格（不需要首行缩进）。\n\n\n# 2.2 标点符号\n\n 1. 中文内容引号请使用直角引号「」，而不是弯引号“”。\n\n * 推荐：「同学，『GitHub』的『GitHub Actions』服务免费额度是多少？」\n * 不推荐：「同学，“GitHub”的“GitHub Actions”服务免费额度是多少？」\n\n> 注意，这一点并无对错，只是推荐与否。实际上，如果所在内容平台的全角弯引号比较美观的话，还是可以使用的。但是知乎的全角弯引号很丑，就不要在知乎用全角弯引号了。\n\n 2. 省略号请使用「…… 」标准用法，正确输入方法是切到中文输入法然后按住shift + 6。不要使用三个句号「。。。」，也不要使用三个英文句点「...」。\n\n * 正确： 更多新的技术也随之孕育而生……\n * 错误： 更多新的技术也随之孕育而生。。。\n * 错误： 更多新的技术也随之孕育而生...\n\n 3. 不要重复使用标点符号，尤其是在表达强烈情感的时候。例如：\n\n * 推荐： 这个提议真棒！我喜欢。\n * 不推荐： 这个提议真棒！！！我喜欢~~~~\n\n\n# 2.3 中文和西文符号\n\n 1. 一般情况下，一个中文句子中出现了英文部分，仍然使用中文标点，即全角符号。例如：\n\n * 正确： 我常用的电子设备是 Kindle、iPad Pro、iPhone。\n * 错误： 我常用的电子设备是 Kindle, iPad Pro, iPhone.\n * 正确： 核磁共振成像（NMRI）是什么原理都不知道？JFGI！\n * 错误： 核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!\n\n 2. 如果引用一段完整的英文句子，或是出现在专有名词中的标点，则不需要更改标点符号。例如：\n\n * 正确： 乔布斯说「Stay hungry, Stay foolish.」\n * 错误： 乔布斯说「Stay hungry，Stay foolish。」\n * 正确： 我最喜欢的手机游戏是《Lifeline: Silent Night》。\n * 错误： 我最喜欢的手机游戏是《Lifeline：Silent Night》。\n\n\n# 2.4 专有名词\n\n 1. 专有名词使用正确的大小写。例如：\n\n * 正确： 使用 GitHub 登录\n * 错误： 使用 github 登录\n * 错误： 使用 GITHUB 登录\n * 错误： 使用 Github 登录\n * 正确： 我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。\n * 错误： 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。\n\n 2. 不要使用不地道的缩写。例如：\n\n * 正确： 我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。\n * 错误： 我们需要一位熟悉 JS、H5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。\n\n 3. 对不常见的缩写进行介绍。例如：\n\n * 推荐： OCR（Optical Character Recognition，光学字符识别）\n * 不推荐： OCR（光学字符识别，Optical Character Recognition）\n * 错误： OCR (Optical Character Recognition, 光学字符识别)\n\n\n# 2.5 文字样式\n\n文字样式的使用可以增加文章的可读性，但是过度使用则会造成排版混乱，因此建议大家正确、克制地为文字添加样式。\n\n例如，需要着重显示的部分请使用「加粗」功能，而不要使用「斜体」，更不要使用「加粗 + 斜体」的组合。\n\n注明引用来源\n\n * 文中有使用外站或外部内容的，务必在引用最后部分注明来源。\n * 若文章为全文翻译，必须在文中注明原作者及原文地址，并添加原文链接。\n\n\n# 3. 选题系统化\n\n\n# 3.1 主题分类\n\n> 主题分类因人而异，但是你必须形成自己的主题分类系统，这样才能作为一个起点帮助你发现写作灵感。 下面给出了一套主题分类作为例子。\n\n1. 技术细节型\n\n> 频率：每周 1~2次，15~30 分钟可以写完。\n\n * 《一文搞懂取余和取模的区别》\n * 《如何禁用 Homebrew 每次安装软件前的自动更新？》\n * 《DHCP Offer 报文为什么可以单播发送？》 这种主题类型主要来自于日常工作，但是好像写这一类的人不多。每天我们都会遇到不同的技术问题：如某个第三库更新，某个浏览器 bug，类似于面试八股文一样的某个技术细节问题。当然，也并非所有的技术细节都值得我们大书特书，我们应该判断问题的价值以及我们是否有可能后续还会遇到这个问题。\n\n取名建议\n\n其实这种类型更像是我们平常遇到问题会在 Google 中搜索的内容，如果你也擅长用Google的话，我想你就懂了奥秘。\n标题的前半部分是关键字，后半部分指名意图。\n\n2. 干货型\n\n> 频率：每月 1~2 次，1~2 小时可以搞定。\n\n * 《后端工程师不容错过的 10 个一站式前端模板》\n * 《20 个冷门好用的 Linux 命令》\n * 《使用 InfluxDB 和 Telegraf 为服务器搭建酷炫基础监控》\n\n通常来说，这一类型的文章都是作者一段时间对于某一个东西的总结，非常有收藏价值。\n\n故而，这种类型的文章会在 GitHub 或者聚合网站上比较受欢迎。 所以，它也更容易传播。但是写起来的难度比较大，这依赖于你的使用经验。 所以，也不是一天、两天就能搞定的。我个人认为这类文章不过分强调技术，只是我们对某个或某类技术工具的使用心得。\n\n取名建议\n\n有一点标题党的感觉。\n\n3. 实践总结型\n\n> 频率：每月 1～2 次，2+ 小时以上的时间。\n\n * 《Linux 内核剖析（一）—— BIOS加载内核》\n * 《Dubbo：从入门到放弃》\n * 《编辑 - 发布 - 开发分离：Git 作为 NoSQL 数据库》\n\n这有可能是一系列的文章，而这一系列的文章一般是连续写出来的。因此，我们可以发现很大的书都是由这一类的文章衍生出来的。\n\n这一类的文章更像是干货型和技术细节型的结合，面向特定领域的技术，也属于干货。对于这种类型的文章来说，更依赖于代码——读者需要依据代码一步步往下深入。所以在这一类型的文章中代码往往比较重要。\n\n取名建议\n\n听起来就很掉头发，需要很多时间来完成博文。（“干货型”虽然也需要时间，但这个时间是来自于我们日常工作的积累，可能写对应的博我只需要很短的时间）\n\n4. 杂谈与鸡汤型\n\n> 频率：每季度 1~2 次，少则几小时，动则上月。\n\n * 《为什么整个互联网行业都缺前端工程师？》\n * 《成为字节跳动 CTO 是怎样一种体验？》\n * 《程序调试必须使用调试工具吗？》\n\n简单地来说这一类文章基本上是没有技术的，都是一些以理论为主的概括。同时，写这一类文章的时候，也意料着可能在某一领域有一定的水平，写出来才会有人看。\n\n取名建议\n\n提问语句为主，引发思考。\n\n\n# 3.2 风格内容\n\n为了能让读者能够直观地理解你的观点，逻辑清晰、语句通顺是必须要做到的。同时，为了增加文章可读性，提出以下几点建议：\n\n 1. 理清文章结构，动笔之前可以先列一下写作大纲。\n 2. 用主动语态，不要用被动语态。一般情况下，主动语态比被动语态更有力。\n 3. 使用具体、明确、展示细节的词汇，能激发想象，使读者自己代入情境。「把硬币放进口袋里，他咧开嘴笑了」，远远强过「他满意地拿走了辛苦挣来的奖赏」。\n 4. 减少形容词的使用，少用 「的」。\n 5. 文中涉及到参数规格、数据的部分，要保证严谨性。\n 6. 文章完成之后通读一遍，记住，不要让读者猜测你在讲什么。\n 7. 试着去表达一些技术上的细节，也会省去一些技术上的细节。\n 8. 记得在文章开始配上 README 性质的引言。\n 9. 技术文档并非一次性写作，我们需要后续不断对历史文章进行校正、丰富、优化。\n\n\n# 4. 维护简单化\n\n我的技术文档的技术选型是：\n\n * 使用 Hexo 进行技术文档内容原信息的 META 管理、编译生成博客页面；\n * 使用 NexT 这一经典、稳定的技术文档主题；\n * 使用 飞书文档 来编技术文档内容，点击技术文档\n\n文章标题会跳转到对应的飞书文档。\n\n实现这一方案需要对 Hexo 和 NexT 的源代码做一点小改动，我准备了一个 开源仓库 包含了这些改动。\n\n\n# 5. 参考资料\n\n 1. 少数派写作排版指南 - 少数派\n 2. 中文文案排版指北\n 3. 程序员怎样才能写出一篇好的博客或者技术文章? - 知乎\n 4. Hexo-NexT-Index - 使用飞书享受博客写作乐趣",normalizedContent:"原文地址\n\n如何坚持写技术博客？\n\n\n# 1. 引言\n\n写技术文档是大部分程序员都很想坚持却又总是断断续续的一件事。大家愿意写技术文档是因为有很多好处，例如：\n\n * 有助于整理平常的思考、梳理一个复杂难懂的技术细节；\n * 同时也可以满足分享与传播的欲望，幸运的话还能提升自己的 impact。\n\n为了能长久地坚持写技术文档，不让写技术文档成为一件麻烦事而丧失了写作的动力，需要做一定的工作来破除阻碍我们坚持写博客的障碍：\n\n1. 排版规范化： 排版规范化可以帮助我这种强迫症不必要纠结具体的格式，参考先进的排版规范会大大提高我们文章的可读性；\n\n2. 选题系统化： 技术博客说来说去也就是几种常见的内容类型，不同类型对应不同的场景与写作需求，需要我们花费不同的时间去完成。做一下简单的梳理帮助我们不必要苦恼内容的来源与分类；\n\n3. 维护简单化： 从功利的角度来讲，除非你是前端工程师，否则你的博客做得再花哨也不会为你的面试加分多少。理想的模式是我们只负责内容，技术文档的编译、发布、运行都交由第三方工具和服务商来完成。\n\n\n# 2. 排版规范化\n\n\n# 2.1 空格\n\n 1. 行文时，请在中文与英文、中文与数字、英文与数字之间增加空格。例如：\n\n * 正确： github 于 2007 年 10 月 19 日正式上线。\n * 错误： github于2007年10月19日正式上线。\n\n 2. 一段文字中有超链接的部分，在超链接的前后使用空格。例如：\n\n * 正确： 你可以前往 linux 开源仓库 了解详情。\n * 错误： 你可以前往linux 开源仓库了解详情。\n\n 3. 英文、数字前后接「中文全角标点符号」或「表示单位的角标符号」时，不需要加空格。例如：\n\n * 正确： 新 macbook pro 有 15% 的 cpu 性能提升。\n * 错误： 新 macbook pro 有 15 % 的 cpu 性能提升。\n * 正确： 我家的光纤入户宽带有 10gbps，ssd 一共有 10tb。\n * 错误： 我家的光纤入户宽带有 10 gbps ， ssd 一共有 20 tb 。\n\n 4. 对于有特殊用法的专有名词，如 4k、1080p、ios 13 等，英文和数字之间是否空格以官方标准为准。\n\n 5. 每段文字的开头不需要空两格（不需要首行缩进）。\n\n\n# 2.2 标点符号\n\n 1. 中文内容引号请使用直角引号「」，而不是弯引号“”。\n\n * 推荐：「同学，『github』的『github actions』服务免费额度是多少？」\n * 不推荐：「同学，“github”的“github actions”服务免费额度是多少？」\n\n> 注意，这一点并无对错，只是推荐与否。实际上，如果所在内容平台的全角弯引号比较美观的话，还是可以使用的。但是知乎的全角弯引号很丑，就不要在知乎用全角弯引号了。\n\n 2. 省略号请使用「…… 」标准用法，正确输入方法是切到中文输入法然后按住shift + 6。不要使用三个句号「。。。」，也不要使用三个英文句点「...」。\n\n * 正确： 更多新的技术也随之孕育而生……\n * 错误： 更多新的技术也随之孕育而生。。。\n * 错误： 更多新的技术也随之孕育而生...\n\n 3. 不要重复使用标点符号，尤其是在表达强烈情感的时候。例如：\n\n * 推荐： 这个提议真棒！我喜欢。\n * 不推荐： 这个提议真棒！！！我喜欢~~~~\n\n\n# 2.3 中文和西文符号\n\n 1. 一般情况下，一个中文句子中出现了英文部分，仍然使用中文标点，即全角符号。例如：\n\n * 正确： 我常用的电子设备是 kindle、ipad pro、iphone。\n * 错误： 我常用的电子设备是 kindle, ipad pro, iphone.\n * 正确： 核磁共振成像（nmri）是什么原理都不知道？jfgi！\n * 错误： 核磁共振成像 (nmri) 是什么原理都不知道? jfgi!\n\n 2. 如果引用一段完整的英文句子，或是出现在专有名词中的标点，则不需要更改标点符号。例如：\n\n * 正确： 乔布斯说「stay hungry, stay foolish.」\n * 错误： 乔布斯说「stay hungry，stay foolish。」\n * 正确： 我最喜欢的手机游戏是《lifeline: silent night》。\n * 错误： 我最喜欢的手机游戏是《lifeline：silent night》。\n\n\n# 2.4 专有名词\n\n 1. 专有名词使用正确的大小写。例如：\n\n * 正确： 使用 github 登录\n * 错误： 使用 github 登录\n * 错误： 使用 github 登录\n * 错误： 使用 github 登录\n * 正确： 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。\n * 错误： 我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。\n\n 2. 不要使用不地道的缩写。例如：\n\n * 正确： 我们需要一位熟悉 javascript、html5，至少理解一种框架（如 backbone.js、angularjs、react 等）的前端开发者。\n * 错误： 我们需要一位熟悉 js、h5，至少理解一种框架（如 backbone、angular、rjs 等）的 fed。\n\n 3. 对不常见的缩写进行介绍。例如：\n\n * 推荐： ocr（optical character recognition，光学字符识别）\n * 不推荐： ocr（光学字符识别，optical character recognition）\n * 错误： ocr (optical character recognition, 光学字符识别)\n\n\n# 2.5 文字样式\n\n文字样式的使用可以增加文章的可读性，但是过度使用则会造成排版混乱，因此建议大家正确、克制地为文字添加样式。\n\n例如，需要着重显示的部分请使用「加粗」功能，而不要使用「斜体」，更不要使用「加粗 + 斜体」的组合。\n\n注明引用来源\n\n * 文中有使用外站或外部内容的，务必在引用最后部分注明来源。\n * 若文章为全文翻译，必须在文中注明原作者及原文地址，并添加原文链接。\n\n\n# 3. 选题系统化\n\n\n# 3.1 主题分类\n\n> 主题分类因人而异，但是你必须形成自己的主题分类系统，这样才能作为一个起点帮助你发现写作灵感。 下面给出了一套主题分类作为例子。\n\n1. 技术细节型\n\n> 频率：每周 1~2次，15~30 分钟可以写完。\n\n * 《一文搞懂取余和取模的区别》\n * 《如何禁用 homebrew 每次安装软件前的自动更新？》\n * 《dhcp offer 报文为什么可以单播发送？》 这种主题类型主要来自于日常工作，但是好像写这一类的人不多。每天我们都会遇到不同的技术问题：如某个第三库更新，某个浏览器 bug，类似于面试八股文一样的某个技术细节问题。当然，也并非所有的技术细节都值得我们大书特书，我们应该判断问题的价值以及我们是否有可能后续还会遇到这个问题。\n\n取名建议\n\n其实这种类型更像是我们平常遇到问题会在 google 中搜索的内容，如果你也擅长用google的话，我想你就懂了奥秘。\n标题的前半部分是关键字，后半部分指名意图。\n\n2. 干货型\n\n> 频率：每月 1~2 次，1~2 小时可以搞定。\n\n * 《后端工程师不容错过的 10 个一站式前端模板》\n * 《20 个冷门好用的 linux 命令》\n * 《使用 influxdb 和 telegraf 为服务器搭建酷炫基础监控》\n\n通常来说，这一类型的文章都是作者一段时间对于某一个东西的总结，非常有收藏价值。\n\n故而，这种类型的文章会在 github 或者聚合网站上比较受欢迎。 所以，它也更容易传播。但是写起来的难度比较大，这依赖于你的使用经验。 所以，也不是一天、两天就能搞定的。我个人认为这类文章不过分强调技术，只是我们对某个或某类技术工具的使用心得。\n\n取名建议\n\n有一点标题党的感觉。\n\n3. 实践总结型\n\n> 频率：每月 1～2 次，2+ 小时以上的时间。\n\n * 《linux 内核剖析（一）—— bios加载内核》\n * 《dubbo：从入门到放弃》\n * 《编辑 - 发布 - 开发分离：git 作为 nosql 数据库》\n\n这有可能是一系列的文章，而这一系列的文章一般是连续写出来的。因此，我们可以发现很大的书都是由这一类的文章衍生出来的。\n\n这一类的文章更像是干货型和技术细节型的结合，面向特定领域的技术，也属于干货。对于这种类型的文章来说，更依赖于代码——读者需要依据代码一步步往下深入。所以在这一类型的文章中代码往往比较重要。\n\n取名建议\n\n听起来就很掉头发，需要很多时间来完成博文。（“干货型”虽然也需要时间，但这个时间是来自于我们日常工作的积累，可能写对应的博我只需要很短的时间）\n\n4. 杂谈与鸡汤型\n\n> 频率：每季度 1~2 次，少则几小时，动则上月。\n\n * 《为什么整个互联网行业都缺前端工程师？》\n * 《成为字节跳动 cto 是怎样一种体验？》\n * 《程序调试必须使用调试工具吗？》\n\n简单地来说这一类文章基本上是没有技术的，都是一些以理论为主的概括。同时，写这一类文章的时候，也意料着可能在某一领域有一定的水平，写出来才会有人看。\n\n取名建议\n\n提问语句为主，引发思考。\n\n\n# 3.2 风格内容\n\n为了能让读者能够直观地理解你的观点，逻辑清晰、语句通顺是必须要做到的。同时，为了增加文章可读性，提出以下几点建议：\n\n 1. 理清文章结构，动笔之前可以先列一下写作大纲。\n 2. 用主动语态，不要用被动语态。一般情况下，主动语态比被动语态更有力。\n 3. 使用具体、明确、展示细节的词汇，能激发想象，使读者自己代入情境。「把硬币放进口袋里，他咧开嘴笑了」，远远强过「他满意地拿走了辛苦挣来的奖赏」。\n 4. 减少形容词的使用，少用 「的」。\n 5. 文中涉及到参数规格、数据的部分，要保证严谨性。\n 6. 文章完成之后通读一遍，记住，不要让读者猜测你在讲什么。\n 7. 试着去表达一些技术上的细节，也会省去一些技术上的细节。\n 8. 记得在文章开始配上 readme 性质的引言。\n 9. 技术文档并非一次性写作，我们需要后续不断对历史文章进行校正、丰富、优化。\n\n\n# 4. 维护简单化\n\n我的技术文档的技术选型是：\n\n * 使用 hexo 进行技术文档内容原信息的 meta 管理、编译生成博客页面；\n * 使用 next 这一经典、稳定的技术文档主题；\n * 使用 飞书文档 来编技术文档内容，点击技术文档\n\n文章标题会跳转到对应的飞书文档。\n\n实现这一方案需要对 hexo 和 next 的源代码做一点小改动，我准备了一个 开源仓库 包含了这些改动。\n\n\n# 5. 参考资料\n\n 1. 少数派写作排版指南 - 少数派\n 2. 中文文案排版指北\n 3. 程序员怎样才能写出一篇好的博客或者技术文章? - 知乎\n 4. hexo-next-index - 使用飞书享受博客写作乐趣",charsets:{cjk:!0},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"软件手册范例",frontmatter:{title:"软件手册范例",date:"2023-01-31T10:07:41.000Z",permalink:"/pages/e0044f/"},regularPath:"/60.%E8%BD%AF%E6%8A%80%E8%83%BD/40.%E5%A5%BD%E6%96%87%E6%A1%A3%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/20.%E8%BD%AF%E4%BB%B6%E6%89%8B%E5%86%8C%E8%8C%83%E4%BE%8B.html",relativePath:"60.软技能/40.好文档最佳实践/20.软件手册范例.md",key:"v-17cecf4f",path:"/pages/e0044f/",headersStr:null,content:"软件手册是一部完整的书，建议采用下面的结构。\n\n * 简介（Introduction）：[必备] [文件] 提供对产品和文档本身的总体的、扼要的说明\n * 快速上手（Getting Started）：[可选] [文件] 如何最快速地使用产品\n * 入门篇（Basics）：[必备] [目录] 又称“使用篇”，提供初级的使用教程\n   * 环境准备（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件\n   * 安装（Installation）：[可选] [文件] 软件的安装方法\n   * 设置（Configuration）：[必备] [文件] 软件的设置\n * 进阶篇（Advanced)：[可选] [目录] 又称“开发篇”，提供中高级的开发教程\n * API（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍\n * FAQ：[可选] [文件] 常见问题解答\n * 附录（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容\n   * Glossary：[可选] [文件] 名词解释\n   * Recipes：[可选] [文件] 最佳实践\n   * Troubleshooting：[可选] [文件] 故障处理\n   * ChangeLog：[可选] [文件] 版本说明\n   * Feedback：[可选] [文件] 反馈方式",normalizedContent:"软件手册是一部完整的书，建议采用下面的结构。\n\n * 简介（introduction）：[必备] [文件] 提供对产品和文档本身的总体的、扼要的说明\n * 快速上手（getting started）：[可选] [文件] 如何最快速地使用产品\n * 入门篇（basics）：[必备] [目录] 又称“使用篇”，提供初级的使用教程\n   * 环境准备（prerequisite）：[必备] [文件] 软件使用需要满足的前置条件\n   * 安装（installation）：[可选] [文件] 软件的安装方法\n   * 设置（configuration）：[必备] [文件] 软件的设置\n * 进阶篇（advanced)：[可选] [目录] 又称“开发篇”，提供中高级的开发教程\n * api（reference）：[可选] [目录|文件] 软件 api 的逐一介绍\n * faq：[可选] [文件] 常见问题解答\n * 附录（appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容\n   * glossary：[可选] [文件] 名词解释\n   * recipes：[可选] [文件] 最佳实践\n   * troubleshooting：[可选] [文件] 故障处理\n   * changelog：[可选] [文件] 版本说明\n   * feedback：[可选] [文件] 反馈方式",charsets:{cjk:!0},lastUpdated:"2023/01/31, 17:37:12",lastUpdatedTimestamp:1675157832e3},{title:"字节跳动优秀文档 8 大秘籍",frontmatter:{title:"字节跳动优秀文档 8 大秘籍",date:"2022-11-29T15:39:36.000Z",permalink:"/pages/514c10/"},regularPath:"/60.%E8%BD%AF%E6%8A%80%E8%83%BD/40.%E5%A5%BD%E6%96%87%E6%A1%A3%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/05.%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E4%BC%98%E7%A7%80%E6%96%87%E6%A1%A3%208%20%E5%A4%A7%E7%A7%98%E7%B1%8D.html",relativePath:"60.软技能/40.好文档最佳实践/05.字节跳动优秀文档 8 大秘籍.md",key:"v-9b3d3fe6",path:"/pages/514c10/",headers:[{level:2,title:"1. 无从下手？很多时候是没「想清楚」",slug:"_1-无从下手-很多时候是没「想清楚」",normalizedTitle:"1. 无从下手？很多时候是没「想清楚」",charIndex:26},{level:2,title:"2. 从「用户视角」出发",slug:"_2-从「用户视角」出发",normalizedTitle:"2. 从「用户视角」出发",charIndex:327},{level:2,title:"3. 用好的『结构』让读者理解你的思路",slug:"_3-用好的『结构』让读者理解你的思路",normalizedTitle:"3. 用好的『结构』让读者理解你的思路",charIndex:666},{level:2,title:"4. 选择合适的「呈现形式」，突出重点",slug:"_4-选择合适的「呈现形式」-突出重点",normalizedTitle:"4. 选择合适的「呈现形式」，突出重点",charIndex:978},{level:2,title:"5. 保持「精简」",slug:"_5-保持「精简」",normalizedTitle:"5. 保持「精简」",charIndex:1255},{level:2,title:"6. 「清晰」表达，别让读者猜",slug:"_6-「清晰」表达-别让读者猜",normalizedTitle:"6. 「清晰」表达，别让读者猜",charIndex:1456},{level:2,title:"7. 「细节」决定成败",slug:"_7-「细节」决定成败",normalizedTitle:"7. 「细节」决定成败",charIndex:1784},{level:2,title:"8. 保持输入，不断「迭代」",slug:"_8-保持输入-不断「迭代」",normalizedTitle:"8. 保持输入，不断「迭代」",charIndex:1997}],headersStr:"1. 无从下手？很多时候是没「想清楚」 2. 从「用户视角」出发 3. 用好的『结构』让读者理解你的思路 4. 选择合适的「呈现形式」，突出重点 5. 保持「精简」 6. 「清晰」表达，别让读者猜 7. 「细节」决定成败 8. 保持输入，不断「迭代」",content:'> 原文地址：字节跳动优秀文档 8 大秘籍\n\n\n# 1. 无从下手？很多时候是没「想清楚」\n\n大多数情况，文档是工作的一种呈现方式。如果说文档写得好是「表」，那么「里」其实包含了两个层面的问题：\n\n 1. 我们有没有想清楚？ - 「想清楚」是所有文档创作的前提。这考验着我们对这件事的思考是否深入、逻辑是否自洽、准备工作够不够扎实；\n 2. 我们有没有把这件事讲清楚？ - 有没有展示读者关心的内容，且清晰易懂。\n\n在平时的工作中，工作不是在已知中重复，而是不断闯过新的难关。所以如果你感到「无从下手」，不要太慌。试着定义清楚要解决什么问题、 收集资料、发散思考，再逐步收敛出结论或观点。\n\n完成这一步，我们就可以开始考虑如何呈现和组织信息了。\n\n\n# 2. 从「用户视角」出发\n\n将文档视作「产品」一样打造。\n\n从这个视角出发，读者无疑就是这个产品的「用户」。那么如何最快地转换视角呢？试试问自己三个问题：\n\n 1. 我沟通的目标是什么？ - 以写一份「产品需求文档」举例，沟通目标就是「评审一次过」！那么文档写的内容，能不能帮助我达到目标？\n 2. 我的「用户」都是谁？ - 结合文档的使用场景去看，例如一份双月汇报材料，读者往往包括：管理者 + 协作者 + 信息同步对象；\n 3. ta 知道什么？ - 我清楚掌握 100% 的背景信息，但我的用户们知道多少？\n 4. ta 想知道什么？ - 假想一下，如果只让对方提 3 个问题，ta 会问些什么？\n\n能想清楚这些问题，我们大概率对于要在文档里「写什么」有把握了。\n\n\n# 3. 用好的『结构』让读者理解你的思路\n\n就像一篇文章，文档往往也包含开头、正文、结尾，三部分内容各有分工。在这样的大框架下，正文结构就像骨骼，将文档要表达的观点串起来。\n\n我们将每个部分拆分开看：\n\n * 开头： 好的开头让读者更快『代入』解决问题的情景。将背景、要解决什么问题、建议方案精简地总结在开头，让读者快速浏览后心理产生一个问号？紧接着我们在用正文解答读者的疑问；\n * 正文：正文的划分维度就像预告片，为读者展现了你的解决思路。在实际操作中，建议每个部分结论先行，论据紧随，这也被称之为「金字塔结构」；\n * 结尾：结尾主要起到「敲黑板画重点」的作用，加强读者对问题的理解，同时明确下一个阶段的动作。\n\n\n# 4. 选择合适的「呈现形式」，突出重点\n\n结构梳理清楚后，在具体的呈现形式上，也有方法可循：\n\n 1. 借助图标\n    * 涉及到大量数据的，选择表格比打一堆文字更一目了然；\n    * 此外，还有甘特图、脑图、泳道图等不同的图形化表达方式，可以结合内容针对性选择；\n 2. 通过加粗/标记颜色/斜体等方式高亮重点信息\n    * 高亮内容适用于总结句或者关键数据，建议大家克制使用，否则会模糊真正的重点。\n\n不过，文档并不需要参与「选美」。选择合适的呈现形式更多是为了清晰传递信息，但不意味着我们需要「过度包装」，花费大量时间去美化和修饰。\n\n\n# 5. 保持「精简」\n\n敲下每个字都是心血，是在不知如何取舍？试试以下技巧：\n\n 1. 不要假设读者「什么都不知道」：避免事无巨细，信息过载；\n 2. 善于归纳总结：有理论指出，人的记忆条目是 7（±2）条，归类之后会减少人的记忆成本；\n 3. 对自己残忍一些！：拿捏不准的时候，问自己一个问题：如果去掉这部分，是否会明显出现信息的减损？如果答案不是一个肯定的 Yes，那就是一个肯定的 No。\n\n\n# 6. 「清晰」表达，别让读者猜\n\n在语言的表述上，简而言之就是三个字：说人话！\n\n各种黑话和高深词汇并不会让你的文档看起来高大上，对读者来说反而是一种负担。一个简单的参考标准是："新同学能读懂吗？"\n\n在信息组织上，「不要让读者猜」也可以作为参考原则--读者看到第一句话产生的疑问，下一句话就给ta答案。\n\n一个示例：如果在汇报中向 Leader 呈现"双月渗透率下贱"，那么 Leader 的心路历程和你要呈现的信息大概率会是这样：\n\n * 哈，下降了多少？ - 5-6月 PC 端渗透率下降了 3%；\n * 为什么下降了？ - 经过分析，下降原因主要是ABCD；\n * 那有什么解决办法吗？ - 接下来我们准备通过 EFG 等办法来提升渗透。\n\n\n# 7. 「细节」决定成败\n\n文档写好，临门一脚！但先别急。不断进行自我审查对于打造一篇优秀的文档至关重要，这几个坑我们邀请你一起避开：\n\n 1. 格式检查：并列呈现的信息要对齐，否则你的"房子"看起来会歪歪扭扭；\n 2. 错字要细节检查：错别字、大小写、全角/半角标点、单位保持统一、数字小数点等等。\n\n有时候，一个文档写得太久，容易深陷其中无法自拔。所以在最后关头可以发给几个同事共同检查，或许会带来意想不到的发现。\n\n\n# 8. 保持输入，不断「迭代」\n\n好的产品需要结合用户需求不断迭代，好的文档也是如此。\n\n例如，从知识库、公司内网等渠道选择"优秀作品"临摹；先去看这些文档分成几个板块，每个板块包含哪些内容，作者背后的思考逻辑是什么。将这些能够启发自己的文档收藏起来。',normalizedContent:'> 原文地址：字节跳动优秀文档 8 大秘籍\n\n\n# 1. 无从下手？很多时候是没「想清楚」\n\n大多数情况，文档是工作的一种呈现方式。如果说文档写得好是「表」，那么「里」其实包含了两个层面的问题：\n\n 1. 我们有没有想清楚？ - 「想清楚」是所有文档创作的前提。这考验着我们对这件事的思考是否深入、逻辑是否自洽、准备工作够不够扎实；\n 2. 我们有没有把这件事讲清楚？ - 有没有展示读者关心的内容，且清晰易懂。\n\n在平时的工作中，工作不是在已知中重复，而是不断闯过新的难关。所以如果你感到「无从下手」，不要太慌。试着定义清楚要解决什么问题、 收集资料、发散思考，再逐步收敛出结论或观点。\n\n完成这一步，我们就可以开始考虑如何呈现和组织信息了。\n\n\n# 2. 从「用户视角」出发\n\n将文档视作「产品」一样打造。\n\n从这个视角出发，读者无疑就是这个产品的「用户」。那么如何最快地转换视角呢？试试问自己三个问题：\n\n 1. 我沟通的目标是什么？ - 以写一份「产品需求文档」举例，沟通目标就是「评审一次过」！那么文档写的内容，能不能帮助我达到目标？\n 2. 我的「用户」都是谁？ - 结合文档的使用场景去看，例如一份双月汇报材料，读者往往包括：管理者 + 协作者 + 信息同步对象；\n 3. ta 知道什么？ - 我清楚掌握 100% 的背景信息，但我的用户们知道多少？\n 4. ta 想知道什么？ - 假想一下，如果只让对方提 3 个问题，ta 会问些什么？\n\n能想清楚这些问题，我们大概率对于要在文档里「写什么」有把握了。\n\n\n# 3. 用好的『结构』让读者理解你的思路\n\n就像一篇文章，文档往往也包含开头、正文、结尾，三部分内容各有分工。在这样的大框架下，正文结构就像骨骼，将文档要表达的观点串起来。\n\n我们将每个部分拆分开看：\n\n * 开头： 好的开头让读者更快『代入』解决问题的情景。将背景、要解决什么问题、建议方案精简地总结在开头，让读者快速浏览后心理产生一个问号？紧接着我们在用正文解答读者的疑问；\n * 正文：正文的划分维度就像预告片，为读者展现了你的解决思路。在实际操作中，建议每个部分结论先行，论据紧随，这也被称之为「金字塔结构」；\n * 结尾：结尾主要起到「敲黑板画重点」的作用，加强读者对问题的理解，同时明确下一个阶段的动作。\n\n\n# 4. 选择合适的「呈现形式」，突出重点\n\n结构梳理清楚后，在具体的呈现形式上，也有方法可循：\n\n 1. 借助图标\n    * 涉及到大量数据的，选择表格比打一堆文字更一目了然；\n    * 此外，还有甘特图、脑图、泳道图等不同的图形化表达方式，可以结合内容针对性选择；\n 2. 通过加粗/标记颜色/斜体等方式高亮重点信息\n    * 高亮内容适用于总结句或者关键数据，建议大家克制使用，否则会模糊真正的重点。\n\n不过，文档并不需要参与「选美」。选择合适的呈现形式更多是为了清晰传递信息，但不意味着我们需要「过度包装」，花费大量时间去美化和修饰。\n\n\n# 5. 保持「精简」\n\n敲下每个字都是心血，是在不知如何取舍？试试以下技巧：\n\n 1. 不要假设读者「什么都不知道」：避免事无巨细，信息过载；\n 2. 善于归纳总结：有理论指出，人的记忆条目是 7（±2）条，归类之后会减少人的记忆成本；\n 3. 对自己残忍一些！：拿捏不准的时候，问自己一个问题：如果去掉这部分，是否会明显出现信息的减损？如果答案不是一个肯定的 yes，那就是一个肯定的 no。\n\n\n# 6. 「清晰」表达，别让读者猜\n\n在语言的表述上，简而言之就是三个字：说人话！\n\n各种黑话和高深词汇并不会让你的文档看起来高大上，对读者来说反而是一种负担。一个简单的参考标准是："新同学能读懂吗？"\n\n在信息组织上，「不要让读者猜」也可以作为参考原则--读者看到第一句话产生的疑问，下一句话就给ta答案。\n\n一个示例：如果在汇报中向 leader 呈现"双月渗透率下贱"，那么 leader 的心路历程和你要呈现的信息大概率会是这样：\n\n * 哈，下降了多少？ - 5-6月 pc 端渗透率下降了 3%；\n * 为什么下降了？ - 经过分析，下降原因主要是abcd；\n * 那有什么解决办法吗？ - 接下来我们准备通过 efg 等办法来提升渗透。\n\n\n# 7. 「细节」决定成败\n\n文档写好，临门一脚！但先别急。不断进行自我审查对于打造一篇优秀的文档至关重要，这几个坑我们邀请你一起避开：\n\n 1. 格式检查：并列呈现的信息要对齐，否则你的"房子"看起来会歪歪扭扭；\n 2. 错字要细节检查：错别字、大小写、全角/半角标点、单位保持统一、数字小数点等等。\n\n有时候，一个文档写得太久，容易深陷其中无法自拔。所以在最后关头可以发给几个同事共同检查，或许会带来意想不到的发现。\n\n\n# 8. 保持输入，不断「迭代」\n\n好的产品需要结合用户需求不断迭代，好的文档也是如此。\n\n例如，从知识库、公司内网等渠道选择"优秀作品"临摹；先去看这些文档分成几个板块，每个板块包含哪些内容，作者背后的思考逻辑是什么。将这些能够启发自己的文档收藏起来。',charsets:{cjk:!0},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"他山之石",frontmatter:{title:"他山之石",date:"2023-02-22T16:28:27.000Z",permalink:"/pages/df3516/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/10.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3.html",relativePath:"65.他山之石/10.他山之石.md",key:"v-21fb9fb2",path:"/pages/df3516/",headers:[{level:2,title:"效率/工具",slug:"效率-工具",normalizedTitle:"效率/工具",charIndex:2},{level:2,title:"后端/架构",slug:"后端-架构",normalizedTitle:"后端/架构",charIndex:141}],headersStr:"效率/工具 后端/架构",content:"# 效率/工具\n\n《研发效率破局之道》\n\nconfig:\n    imgHeight: 75px\n    \ndata:\n  - img: http://www.baidu.com\n    link: /pages/3528dd/\n    name: 《研发效率破局之道》\n\n\n\n# 后端/架构\n\n《23讲搞定后台架构实战》\n\n《成为会带团队的技术人》\n\nconfig:\n    imgHeight: 75px\n    \ndata:\n  - img: http://www.baidu.com\n    link: /pages/783946/\n    name: 《23讲搞定后台架构实战》\n  - img: http://www.baidu.com\n    link: /pages/b6bb10/\n    name: 《成为会带团队的技术人》\n",normalizedContent:"# 效率/工具\n\n《研发效率破局之道》\n\nconfig:\n    imgheight: 75px\n    \ndata:\n  - img: http://www.baidu.com\n    link: /pages/3528dd/\n    name: 《研发效率破局之道》\n\n\n\n# 后端/架构\n\n《23讲搞定后台架构实战》\n\n《成为会带团队的技术人》\n\nconfig:\n    imgheight: 75px\n    \ndata:\n  - img: http://www.baidu.com\n    link: /pages/783946/\n    name: 《23讲搞定后台架构实战》\n  - img: http://www.baidu.com\n    link: /pages/b6bb10/\n    name: 《成为会带团队的技术人》\n",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:31:32",lastUpdatedTimestamp:1677054692e3},{title:"开篇词  跳出单点思维模式，才能真正理解架构设计",frontmatter:{title:"开篇词  跳出单点思维模式，才能真正理解架构设计",date:"2023-02-22T16:12:10.000Z",permalink:"/pages/0f9acf/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/01.%20%E5%BC%80%E7%AF%87%E8%AF%8D%20%20%E8%B7%B3%E5%87%BA%E5%8D%95%E7%82%B9%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F%EF%BC%8C%E6%89%8D%E8%83%BD%E7%9C%9F%E6%AD%A3%E7%90%86%E8%A7%A3%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/01. 开篇词  跳出单点思维模式，才能真正理解架构设计.md",key:"v-366e77f1",path:"/pages/0f9acf/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:3439}],headersStr:"精选评论",content:"你好，我是潘新宇，你也可以叫我 Jessen。目前我在京东集团担任团队架构负责人，常年深耕于业务一线从事业务后台的架构工作。\n\n其间，我成功带领团队完成架构转型，将多个电商模块从烟囱式升级到平台化，最终演升到中台化；将懒加载模式的技术架构升级为能够支撑并发百万的读服务，落地了能够随机切库实现高可用的写服务，以及将并发扣减从单机几十的 TPS 优化至单机万级左右。\n\n\n跳出单点知识去思考架构模式\n\n在经历了多个平台化项目的实战后，我发现虽然业务场景不同，但很多平台的底层技术架构都是类似的。比如在构建一个外卖平台时，需要查询用户信息、商品信息、价格信息及外卖订单信息等业务功能，底层的技术都是要实现一个高性能、高可用的读服务。\n\n如果能够掌握上述各个不同业务形态下的底层技术套路，我相信你在做架构设计时一定能够无往不利、事半功倍。因为不管业务形态如何变化，只要掌握底层技术套路，你就可以直接进行架构移植。\n\n总体而言，架构是一项需要经过各种不同场景项目的磨炼才能够真正掌握的技能。而刚工作几年的初、中级工程师，更多的是参与日常业务需求的开发，接触的业务场景和难点问题都比较受限。我相信很多同学都有过这样的经历：\n\n * 换工作跨行业后（比如从新闻资讯类公司跳到了电商公司），无法施展自己之前的架构经验，或者不知道如何复用；\n\n * 在学习了一些技术点后，比如 Redis，明白了它性能快的原因，但仍然不知道如何通过它架构一套支持百万并发的读服务；\n\n * 又比如在学习了多线程编程的技巧及数据库的 ACID 相关特性后，实际面对一个类似库存扣减的业务时，仍不知如何去设计一个能够支持高并发且不出现超卖的架构方案。\n\n * 很多时候，你知道怎么做架构设计，但不能真正理解这样设计的原因，情况稍有点变动，马上就栽跟头。\n\n出现以上种种情况的根本原因，是你没有将架构技能模式化、抽象化，而是从某一个技术点去学习，并长期在固定的“环境”中去应用，导致这些技能无法复用，做到一通百通。\n\n如果你有仔细研究各大互联网公司的后台开发和架构岗位的招聘要求，也能发现一些价值信息。虽然各公司业务各异，但对技术知识的要求其实是非常相似的，除了要求你掌握某种开发语言和相关框架外，还要掌握分布式、多线程、缓存、数据库等。\n\n\n\n（以上职位信息来源拉勾网）\n\n看到这里，你可能会说：“招聘描述上明明要求学习这些共性的技术点，而不是某个架构模式。”但其实恰恰相反，技术点都隶属于共性的架构模式，正因为架构模式需要技术点，它们才会被写进招聘要求里。\n\n也许你还会继续追问：“为什么不直接写要求你具备设计支撑百万并发的架构能力、掌握构建 7*24 不挂的高可用系统的能力呢？”因为太抽象了！如果你看到这样的招聘要求，是否清楚该如何准备面试呢？\n\n往往这些抽象的、可复用的模式才是隐藏在招聘信息背后最重要的内容。比如，为什么各大后台开发岗位都需要你掌握隶属于 NoSQL 的 Redis 呢？就是因为 Redis 在后台架构里可以极大地提升读写的性能。\n\n在微博的爆点吃瓜事件、电商的大促秒杀、分布式的并发防重、高并发的库存及支付扣减等场景里，Redis 都在架构方案里占据重要的角色，这才是它变得火爆的真正原因。因为 Redis 被架构验证，所以才被写进招聘要求里，并不是因为这个技术现在很“热”，才导致各大架构需要用到它。\n\n希望你能够抓住事物的本质弄清逻辑关系。\n\n\n业务场景的缺失，是你架构能力难以进阶的“原罪”\n\n那么，说到学习架构模式或者构建架构体系，很多同学有这样的意识，也付出过努力，但是不少人在学习过种种资料后仍然困惑不得要领：“学习这么多高度抽象的模式，面对具体场景时依然无从下手，还不如踏踏实实地去学习具体的技术点呢。”\n\n在我看来，虽然经久不衰的架构模式存在必有它的道理，但经过高度抽象、验证过的架构模式和准则太模式化了，导致很难准确地理解和应用在工作中。\n\n比如常见的架构准则都会提到“架构应该是简洁的、职责单一的”，但对此，我想不少同学会困惑，到底什么算简洁？所有代码都写在一个单体模块是简洁的，毕竟架构上，它就只有一个模块，没有分层和垂直拆分，非常简单吧。\n\n但我们知道事实并非如此。随着业务发展、客户增加，系统复杂度和耦合度也会越来越高，此时就会出现单体应用与业务扩展、客户体量、测试难度之间的矛盾。这会给整个部门乃至协作部门带来非常大的挑战，因此单体应用并不简洁。\n\n究其原因，你没有经历过这些模式被推导出来的过程，因此代入感很低。\n\n我相信你一定有这样的感受，对于亲身经历过的、事故频发、历经千难万苦的系统架构演化，从中获得的经验和道理一定能够让你刻骨铭记，并很容易在其他项目上复用。\n\n但在现实中，并不是每个人都有机会参与到此类项目的研发和架构设计，很多时候大厂的一些系统架构在早期已经固化了，后续介入的人只是参与日常需求开发，实际参与过互联网一线大厂日均上亿次调用的系统架构设计的人毕竟是少数。你很难有时间和机会去亲身经历后台系统的架构设计演化。\n\n以上种种困惑，我将在这个专栏中为你解答。\n\n\n跳出被动灌输，理解架构设计\n\n秉承可直接复用的原则，我尽可能把关键步骤全部展示给你，同时争取将一个技术点和方案的优缺点、适应场景、能够解决的问题通盘告诉你。\n\n在这个专栏中，我们会一起学习各种架构模式，但并不是直接灌输给你，而是基于实际案例的演化过程，带你搞懂什么是高性能读业务、高并发扣减业务和高可用的写业务的架构模式，以及为什么要这样设计，让你知其然并知其所以然。\n\n具体来讲，我按总-分-总的思路，将专栏分为 5 个模块。\n\n * 模块一：后台业务系统的架构模式\n\n我将对业务后台系统进行一个边界定义，对不同边界的后台系统分门别类，并分别介绍其实现上需要满足的架构要求。这个模块，我希望帮助你建立对后台系统的全局业务视角，打造对各类系统按业务（垂直拆分）及技术特点（水平拆分）进行架构设计的能力。\n\n模块二~模块四，将对后台系统架构设计的三大问题——高性能、高可用、高并发——进行深入探讨，并通过实际案例告诉你在解决问题时如何科学拆解、在选择实现方案时如何进行取舍。\n\n * 模块二：构建高性能的读服务\n\n读业务最重要的是提升性能。首先，我会介绍一个基本满足性能要求使用缓存懒加载模式的读业务实现方案；然后针对此方案存在的问题，手把手带你实现一个简单能规避缓存过期、穿透雪崩等问题的升级方案，以及读数据热点的应对方案。此外，我还会选取实际工作中的高频问题，教你如何大幅度降低读服务的测试回归时间，从而提升线上质量。\n\n * 模块三：构建高可用的数据写入服务\n\n写类型的业务最重要的是满足高可用。我将介绍如何使用分库分表完成一个基本的、高可用的写入方案；然后随着需求的增加，介绍如何构建一个无状态的写入存储，实现随时随地可以切库的高可用方案；最后介绍在分库分表后，如何满足跨分库路由的多维度查询。\n\n * 模块四：构建高并发的扣减服务\n\n扣减类业务最关键的是保障高并发的应对能力。首先，我会介绍扣减类服务在实现上需要满足哪些功能性诉求；然后，介绍 3 种递进式的实现方案及它们的适用场景（从纯数据库到纯缓存，再到数据库 + 缓存）；最后针对秒杀场景，讲解如何实现千万级并发均命中相同数据。\n\n * 模块五：通用架构模式\n\n将会对一些共性的问题进行深入讨论，带你掌握在上述架构方案之外的、构建一个微服务必不可少的架构技能，包含对外 SDK 设计、部署策略、服务解耦和分布式事务、立体化监控，以及如何应对系统重构等内容，进而帮助你构建一个更加完整的架构体系。\n\n\n\n\n讲师寄语\n\n学完本专栏后，我希望你能够掌握实现“三高”系统架构的通用方法论，并能够在自己所负责的系统中落地应用。\n\n我还希望你去面试或者入职一家新公司后，能够看穿披在业务面纱后的技术实现共同点，可以直接复用本专栏向你介绍的或者你沉淀消化后的架构模式。\n\n通过模式化的架构思维去分析和思考，这是我希望这个专栏可以传递给你的一个长期理念，相信你在成为后台系统架构师之路上会如虎添翼，一路乘风破浪，从技术骨干逐步成长为能够独立支撑一个技术方向的架构师。\n\n三人行必有我师，让我们一起在讨论中碰撞出意想不到的知识火花。\n\n----------------------------------------\n\n\n# 精选评论\n\n# felixwon：\n\n> 想问问电商的产品id，店铺id，订单id的编码规则是什么样的。如果不方便说，可以透露一下思想，多谢！\n\n#     讲师回复：\n\n>     在第八讲的分库分表里会有讲解，两种方式可选。第一是使用算法生成唯一字符串或数值型的id，但太长。如果需要存储的数据太大，不建议使用，好处是简单。其次，是使用基于数据库的id生成器的服务来生成相对顺序且长度较短的id。\n\n# **霖：\n\n> 我java 4年，c#2年，12月初到新公司，突然由我担任架构了，还没容得我学习了解公司的业务，就把一个新业务的架构交给我了。我这个没什么经验的架构师，突然有点慌。5个以上子系统，还是比较复杂的电商场景，我在上手前，可以自己做些什么呢？求指导\n\n#     讲师回复：\n\n>     经验是一个相对的事情，有些人工作的十多年依然成为不了架构师。对于现在情况，首先可以和之前维护这个系统的人进行一次复盘，总结出各自业务的模式。其次，就可以参考本专栏学习啦。最后，虽然技术是有套路的，如果现在负责的业务和以前的经验完全无关，建议多花时间学习业务知识，毕竟技术是服务于业务的。\n\n# *放：\n\n> 就像潘老师说的，一个公司里能够真正参与到项目的研发和架构设计中的人太少了，除了工作中的积累，如果想融会贯通，业余时间也应好好利用起来。\n\n# **河：\n\n> 老师的这门课很赞，站在一个新角度看待技术架构，突然有种豁然开朗的既视感，工作已经有几年了，但是对架构还是模模糊糊，你列的那几点问题都有，技术和业务不能很好的结合，希望通过该课程打通一下脉络，有些提高\n\n# **7680：\n\n> 结合大佬的分享，准备好好梳理下自己这几年的积累\n\n# **奥特曼17793265053：\n\n> 跟着大佬 希望少走很多路～～～\n\n# **南磊：\n\n> 刚工作3年，我看这个内容会不会经验浅了\n\n#     讲师回复：\n\n>     循序渐进的架构方案演进，帮你一步一步获取架构知识，而不是上来就讲最复杂的应对方案。要相信自己，没问题！\n\n# *贵：\n\n> 老师好，我目前维护一个医疗项目，目前平台业务是：发票创建是基于送货单创建的，创建一单就会生成一张对应的发票。现在和医院对接发现一个问题：医院可能存在重复的发票号，导致发票号重复的数据就推不上来。联系了之前负责这个项目的人员：给的答复是给不出解决方案。\n\n#     讲师回复：\n\n>     题目信息比较少，我试着回答下。我理解的意思是可能多张送货单对应一张发票？如果是这样话，可以在生成的时候，将送货单和发票号进行组合，生成唯一的编号。不知是否可以解答你的疑问？\n\n# JY：\n\n> 是不是提升更新速度，学完找工作，1月底公司裁员我踊跃报名了！工作求介绍啊\n\n#     编辑回复：\n\n>     咱们课程过年期间保持更新，小伙伴正好可以利用新年长假丰富自己的知识储备：）\n\n# **liang：\n\n> 2月底入职新公司，面试的时候说会给我让我参与一个新项目的研发，也会涉及架构设计。趁现在赶紧补补课，老师带我飞～\n\n# **0831：\n\n> 冲着国内各大互联网公司的业务场景来的 从我个人的工作经历来看，架构能力的提升是非常依赖于工作环境，但是如果工作环境不能给予我提升的空间。。。只能自己可劲儿学了\n\n# **岩：\n\n> 商品ID不能随便的OK，他是税务部门对特定的商品ID有要求的OK\n\n# **傲：\n\n> 跟着专栏一起学习，努力提升自己的架构设计能力，希望老师能多讲点实际案例和使用场景\n\n# **3961：\n\n> 多多学习😀\n\n# **8956：\n\n> 希望能坚持下去，都觉得自己现在止步不前了\n\n#     编辑回复：\n\n>     小编给你打气！！小伙伴加油哦～\n\n# **雷：\n\n> 很期待老师的课程，希望自己能从课程中学到东西，并加以实践。这样才能学以致用。",normalizedContent:"你好，我是潘新宇，你也可以叫我 jessen。目前我在京东集团担任团队架构负责人，常年深耕于业务一线从事业务后台的架构工作。\n\n其间，我成功带领团队完成架构转型，将多个电商模块从烟囱式升级到平台化，最终演升到中台化；将懒加载模式的技术架构升级为能够支撑并发百万的读服务，落地了能够随机切库实现高可用的写服务，以及将并发扣减从单机几十的 tps 优化至单机万级左右。\n\n\n跳出单点知识去思考架构模式\n\n在经历了多个平台化项目的实战后，我发现虽然业务场景不同，但很多平台的底层技术架构都是类似的。比如在构建一个外卖平台时，需要查询用户信息、商品信息、价格信息及外卖订单信息等业务功能，底层的技术都是要实现一个高性能、高可用的读服务。\n\n如果能够掌握上述各个不同业务形态下的底层技术套路，我相信你在做架构设计时一定能够无往不利、事半功倍。因为不管业务形态如何变化，只要掌握底层技术套路，你就可以直接进行架构移植。\n\n总体而言，架构是一项需要经过各种不同场景项目的磨炼才能够真正掌握的技能。而刚工作几年的初、中级工程师，更多的是参与日常业务需求的开发，接触的业务场景和难点问题都比较受限。我相信很多同学都有过这样的经历：\n\n * 换工作跨行业后（比如从新闻资讯类公司跳到了电商公司），无法施展自己之前的架构经验，或者不知道如何复用；\n\n * 在学习了一些技术点后，比如 redis，明白了它性能快的原因，但仍然不知道如何通过它架构一套支持百万并发的读服务；\n\n * 又比如在学习了多线程编程的技巧及数据库的 acid 相关特性后，实际面对一个类似库存扣减的业务时，仍不知如何去设计一个能够支持高并发且不出现超卖的架构方案。\n\n * 很多时候，你知道怎么做架构设计，但不能真正理解这样设计的原因，情况稍有点变动，马上就栽跟头。\n\n出现以上种种情况的根本原因，是你没有将架构技能模式化、抽象化，而是从某一个技术点去学习，并长期在固定的“环境”中去应用，导致这些技能无法复用，做到一通百通。\n\n如果你有仔细研究各大互联网公司的后台开发和架构岗位的招聘要求，也能发现一些价值信息。虽然各公司业务各异，但对技术知识的要求其实是非常相似的，除了要求你掌握某种开发语言和相关框架外，还要掌握分布式、多线程、缓存、数据库等。\n\n\n\n（以上职位信息来源拉勾网）\n\n看到这里，你可能会说：“招聘描述上明明要求学习这些共性的技术点，而不是某个架构模式。”但其实恰恰相反，技术点都隶属于共性的架构模式，正因为架构模式需要技术点，它们才会被写进招聘要求里。\n\n也许你还会继续追问：“为什么不直接写要求你具备设计支撑百万并发的架构能力、掌握构建 7*24 不挂的高可用系统的能力呢？”因为太抽象了！如果你看到这样的招聘要求，是否清楚该如何准备面试呢？\n\n往往这些抽象的、可复用的模式才是隐藏在招聘信息背后最重要的内容。比如，为什么各大后台开发岗位都需要你掌握隶属于 nosql 的 redis 呢？就是因为 redis 在后台架构里可以极大地提升读写的性能。\n\n在微博的爆点吃瓜事件、电商的大促秒杀、分布式的并发防重、高并发的库存及支付扣减等场景里，redis 都在架构方案里占据重要的角色，这才是它变得火爆的真正原因。因为 redis 被架构验证，所以才被写进招聘要求里，并不是因为这个技术现在很“热”，才导致各大架构需要用到它。\n\n希望你能够抓住事物的本质弄清逻辑关系。\n\n\n业务场景的缺失，是你架构能力难以进阶的“原罪”\n\n那么，说到学习架构模式或者构建架构体系，很多同学有这样的意识，也付出过努力，但是不少人在学习过种种资料后仍然困惑不得要领：“学习这么多高度抽象的模式，面对具体场景时依然无从下手，还不如踏踏实实地去学习具体的技术点呢。”\n\n在我看来，虽然经久不衰的架构模式存在必有它的道理，但经过高度抽象、验证过的架构模式和准则太模式化了，导致很难准确地理解和应用在工作中。\n\n比如常见的架构准则都会提到“架构应该是简洁的、职责单一的”，但对此，我想不少同学会困惑，到底什么算简洁？所有代码都写在一个单体模块是简洁的，毕竟架构上，它就只有一个模块，没有分层和垂直拆分，非常简单吧。\n\n但我们知道事实并非如此。随着业务发展、客户增加，系统复杂度和耦合度也会越来越高，此时就会出现单体应用与业务扩展、客户体量、测试难度之间的矛盾。这会给整个部门乃至协作部门带来非常大的挑战，因此单体应用并不简洁。\n\n究其原因，你没有经历过这些模式被推导出来的过程，因此代入感很低。\n\n我相信你一定有这样的感受，对于亲身经历过的、事故频发、历经千难万苦的系统架构演化，从中获得的经验和道理一定能够让你刻骨铭记，并很容易在其他项目上复用。\n\n但在现实中，并不是每个人都有机会参与到此类项目的研发和架构设计，很多时候大厂的一些系统架构在早期已经固化了，后续介入的人只是参与日常需求开发，实际参与过互联网一线大厂日均上亿次调用的系统架构设计的人毕竟是少数。你很难有时间和机会去亲身经历后台系统的架构设计演化。\n\n以上种种困惑，我将在这个专栏中为你解答。\n\n\n跳出被动灌输，理解架构设计\n\n秉承可直接复用的原则，我尽可能把关键步骤全部展示给你，同时争取将一个技术点和方案的优缺点、适应场景、能够解决的问题通盘告诉你。\n\n在这个专栏中，我们会一起学习各种架构模式，但并不是直接灌输给你，而是基于实际案例的演化过程，带你搞懂什么是高性能读业务、高并发扣减业务和高可用的写业务的架构模式，以及为什么要这样设计，让你知其然并知其所以然。\n\n具体来讲，我按总-分-总的思路，将专栏分为 5 个模块。\n\n * 模块一：后台业务系统的架构模式\n\n我将对业务后台系统进行一个边界定义，对不同边界的后台系统分门别类，并分别介绍其实现上需要满足的架构要求。这个模块，我希望帮助你建立对后台系统的全局业务视角，打造对各类系统按业务（垂直拆分）及技术特点（水平拆分）进行架构设计的能力。\n\n模块二~模块四，将对后台系统架构设计的三大问题——高性能、高可用、高并发——进行深入探讨，并通过实际案例告诉你在解决问题时如何科学拆解、在选择实现方案时如何进行取舍。\n\n * 模块二：构建高性能的读服务\n\n读业务最重要的是提升性能。首先，我会介绍一个基本满足性能要求使用缓存懒加载模式的读业务实现方案；然后针对此方案存在的问题，手把手带你实现一个简单能规避缓存过期、穿透雪崩等问题的升级方案，以及读数据热点的应对方案。此外，我还会选取实际工作中的高频问题，教你如何大幅度降低读服务的测试回归时间，从而提升线上质量。\n\n * 模块三：构建高可用的数据写入服务\n\n写类型的业务最重要的是满足高可用。我将介绍如何使用分库分表完成一个基本的、高可用的写入方案；然后随着需求的增加，介绍如何构建一个无状态的写入存储，实现随时随地可以切库的高可用方案；最后介绍在分库分表后，如何满足跨分库路由的多维度查询。\n\n * 模块四：构建高并发的扣减服务\n\n扣减类业务最关键的是保障高并发的应对能力。首先，我会介绍扣减类服务在实现上需要满足哪些功能性诉求；然后，介绍 3 种递进式的实现方案及它们的适用场景（从纯数据库到纯缓存，再到数据库 + 缓存）；最后针对秒杀场景，讲解如何实现千万级并发均命中相同数据。\n\n * 模块五：通用架构模式\n\n将会对一些共性的问题进行深入讨论，带你掌握在上述架构方案之外的、构建一个微服务必不可少的架构技能，包含对外 sdk 设计、部署策略、服务解耦和分布式事务、立体化监控，以及如何应对系统重构等内容，进而帮助你构建一个更加完整的架构体系。\n\n\n\n\n讲师寄语\n\n学完本专栏后，我希望你能够掌握实现“三高”系统架构的通用方法论，并能够在自己所负责的系统中落地应用。\n\n我还希望你去面试或者入职一家新公司后，能够看穿披在业务面纱后的技术实现共同点，可以直接复用本专栏向你介绍的或者你沉淀消化后的架构模式。\n\n通过模式化的架构思维去分析和思考，这是我希望这个专栏可以传递给你的一个长期理念，相信你在成为后台系统架构师之路上会如虎添翼，一路乘风破浪，从技术骨干逐步成长为能够独立支撑一个技术方向的架构师。\n\n三人行必有我师，让我们一起在讨论中碰撞出意想不到的知识火花。\n\n----------------------------------------\n\n\n# 精选评论\n\n# felixwon：\n\n> 想问问电商的产品id，店铺id，订单id的编码规则是什么样的。如果不方便说，可以透露一下思想，多谢！\n\n#     讲师回复：\n\n>     在第八讲的分库分表里会有讲解，两种方式可选。第一是使用算法生成唯一字符串或数值型的id，但太长。如果需要存储的数据太大，不建议使用，好处是简单。其次，是使用基于数据库的id生成器的服务来生成相对顺序且长度较短的id。\n\n# **霖：\n\n> 我java 4年，c#2年，12月初到新公司，突然由我担任架构了，还没容得我学习了解公司的业务，就把一个新业务的架构交给我了。我这个没什么经验的架构师，突然有点慌。5个以上子系统，还是比较复杂的电商场景，我在上手前，可以自己做些什么呢？求指导\n\n#     讲师回复：\n\n>     经验是一个相对的事情，有些人工作的十多年依然成为不了架构师。对于现在情况，首先可以和之前维护这个系统的人进行一次复盘，总结出各自业务的模式。其次，就可以参考本专栏学习啦。最后，虽然技术是有套路的，如果现在负责的业务和以前的经验完全无关，建议多花时间学习业务知识，毕竟技术是服务于业务的。\n\n# *放：\n\n> 就像潘老师说的，一个公司里能够真正参与到项目的研发和架构设计中的人太少了，除了工作中的积累，如果想融会贯通，业余时间也应好好利用起来。\n\n# **河：\n\n> 老师的这门课很赞，站在一个新角度看待技术架构，突然有种豁然开朗的既视感，工作已经有几年了，但是对架构还是模模糊糊，你列的那几点问题都有，技术和业务不能很好的结合，希望通过该课程打通一下脉络，有些提高\n\n# **7680：\n\n> 结合大佬的分享，准备好好梳理下自己这几年的积累\n\n# **奥特曼17793265053：\n\n> 跟着大佬 希望少走很多路～～～\n\n# **南磊：\n\n> 刚工作3年，我看这个内容会不会经验浅了\n\n#     讲师回复：\n\n>     循序渐进的架构方案演进，帮你一步一步获取架构知识，而不是上来就讲最复杂的应对方案。要相信自己，没问题！\n\n# *贵：\n\n> 老师好，我目前维护一个医疗项目，目前平台业务是：发票创建是基于送货单创建的，创建一单就会生成一张对应的发票。现在和医院对接发现一个问题：医院可能存在重复的发票号，导致发票号重复的数据就推不上来。联系了之前负责这个项目的人员：给的答复是给不出解决方案。\n\n#     讲师回复：\n\n>     题目信息比较少，我试着回答下。我理解的意思是可能多张送货单对应一张发票？如果是这样话，可以在生成的时候，将送货单和发票号进行组合，生成唯一的编号。不知是否可以解答你的疑问？\n\n# jy：\n\n> 是不是提升更新速度，学完找工作，1月底公司裁员我踊跃报名了！工作求介绍啊\n\n#     编辑回复：\n\n>     咱们课程过年期间保持更新，小伙伴正好可以利用新年长假丰富自己的知识储备：）\n\n# **liang：\n\n> 2月底入职新公司，面试的时候说会给我让我参与一个新项目的研发，也会涉及架构设计。趁现在赶紧补补课，老师带我飞～\n\n# **0831：\n\n> 冲着国内各大互联网公司的业务场景来的 从我个人的工作经历来看，架构能力的提升是非常依赖于工作环境，但是如果工作环境不能给予我提升的空间。。。只能自己可劲儿学了\n\n# **岩：\n\n> 商品id不能随便的ok，他是税务部门对特定的商品id有要求的ok\n\n# **傲：\n\n> 跟着专栏一起学习，努力提升自己的架构设计能力，希望老师能多讲点实际案例和使用场景\n\n# **3961：\n\n> 多多学习😀\n\n# **8956：\n\n> 希望能坚持下去，都觉得自己现在止步不前了\n\n#     编辑回复：\n\n>     小编给你打气！！小伙伴加油哦～\n\n# **雷：\n\n> 很期待老师的课程，希望自己能从课程中学到东西，并加以实践。这样才能学以致用。",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"为什么不同类型的业务后台架构模式是通用的？",frontmatter:{title:"为什么不同类型的业务后台架构模式是通用的？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/0c2e8b/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/02.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E6%98%AF%E9%80%9A%E7%94%A8%E7%9A%84%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/02. 为什么不同类型的业务后台架构模式是通用的？.md",key:"v-1ea96ed7",path:"/pages/0c2e8b/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4975}],headersStr:"精选评论",content:"从本讲开始，咱们将一起开启本专栏的学习之旅。\n\n国内的各大互联网公司业务模式非常丰富，所提供的业务服务也是形态各异，比如：\n\n * 腾讯主要提供即时通信、游戏等服务\n\n * 京东、阿里等电商提供商品购买、快递寄收件、金融投资等服务\n\n * 滴滴提供打车服务\n\n * 今日头条、新浪微博提供短视频、新闻资讯类阅读服务\n\n * 美团提供商品购买、外卖订购服务\n\n * 百度提供搜索查询服务\n\n虽然上述列举的公司业务类型不同，但对后台开发岗位的招聘要求却很相似。在拉勾网上可以看到，除了要求你掌握某种开发语言和相关框架外，还要掌握分布式、多线程、缓存、数据库等。\n\n\n\n（以上信息来源拉勾网）\n\n那么，产生这个现象的根本原因是什么呢？\n\n简单来说，是因为这些业务在技术实现上存在共性，比如技术点或者架构模式。在本讲我将和你一起探寻问题背后的原因，并向你提供一个分析业务架构共性的标准。学完本讲，希望你在面对层出不穷的新业务、新模式时，能够洞穿出背后的架构本质，套用通用架构模式，轻松应对各项技术指标，真正做到大道归宗。\n\n\n什么是业务后台系统\n\n在讨论一个议题之前，最重要的是确定它的定义和边界，这样才不至于在实施时出现偏差，导致事倍功半。因此，在开始本讲前，咱们先聊聊业务后台系统的定义。\n\n乍一听“业务后台系统”这个称呼，你可能有点摸不着头脑，不知道它是什么。其实，业务后台系统和你在拉勾网上看到的“后台开发”大体上是一个意思。我将以外卖订购服务为例，帮助你理解和明确它的定义和边界。\n\n\n\n图 1：外卖系统全局架构\n\n图 1 展示的是一个外卖系统全局架构，如果某公司要进军外卖业务，就需要开发一套外卖系统，其中包含用户可直接使用的各个终端，如 iOS 端、Android 端、M 页及 PC 站点。提供内容展示和系统交互，称为业务前台系统。\n\n业务前台系统中展示的内容，比如外卖商品种类、商品图片等信息，其实是由业务后台系统提供的，业务前台并没有这些数据，它只负责展示。当用户在前台选择商品点外卖后，实际接受并存储订单及调度配送的系统称为业务后台系统。\n\n总的来看，业务后台系统是指直接接受前台的请求，同时给前台返回数据或者保存前台数据的系统。“业务”这个词只是个代称，代指各类业务系统。\n\n很多公司有一些大数据、BI、数据挖掘等相关的系统，它们并不属于业务后台系统，可以称为业务大数据系统，现在时髦的叫法是：数据中台。数据中台有一个特点，不直接接受业务前台系统的请求也不直接生产数据，而是直接对业务后台系统产生的数据进行分析、再加工等。\n\n还有一些算法研究的岗位，他们主要对算法进行研究和调优，并将这些成熟的、可用于生产环境的算法提供给业务后台开发工程师。再由他们集成进业务后台系统里，提升业务的体验，比如推荐算法、语音识别算法等。\n\n至此，你应该对业务后台系统的边界有一个比较清晰的了解。通过上述案例，我们还可以举一反三，比如：\n\n * 在短视频和资讯类（微博、新闻）业务里，提供查询视频基本信息和资讯的系统、能够保存短视频的系统，都属于后台系统。\n\n * 在电商业务里，提供查询商品信息的系统、保存订单的系统，都属于后台系统。\n\n其他互联网公司提供的系统，你可以按此思路来判断它们的业务后台系统类别。\n\n\n后台系统的共性探究与归类\n\n在探讨不同业务后台系统的共性前，需要明确一个非常重要的概念，即目的性。如果不明确此概念，你会发现不同的业务后台系统的所有技术实现都是 CRUD（增、查、改、删），按此归类后，很难看出各类业务后台系统之间的区别，更别说从中提炼共性技术和通用架构模式了。\n\n因此，我们首先要确定归类的维度。具体来说，就是需要寻找一个新的维度来对业务后台系统进行归类，并基于此归类提炼技术共性。在我看来，这个维度就是目的性。在确定归类的维度后，就可以对各类业务后台进行分类了。\n\n接下来，我会以资讯、发布及购买、库存及支付这三类业务为案例，讲解如何基于目的性进行归类。\n\n资讯类业务\n\n下面请你思考一个问题：对于微博、知乎等类资讯业务系统，它们的目的性是什么？\n\n你可以从日常使用的角度来思考，显而易见，这类 App 主要为用户提供阅读和浏览信息的业务，这就是资讯业务系统的目的性。\n\n比如你平时上微博和知乎的目的是娱乐或者学习，我们总结为阅读“新鲜事”。当然，你偶尔也会发布几条动态。想象一下，如果系统出现 Bug，导致你曾经发布的某条消息丢失，当下你可能感知不到，除非某一天你去查看历史动态。但如果系统异常导致不能阅读“新鲜事”，用户当下即可感知到系统出现故障。而互联网时代舆论传播非常快，这会给公司带来很大的负面影响。因此这类事故产生的影响更大。\n\n我们总结一下，资讯类业务系统的主要目的性是尽最大的可能性保证读的可用性和优化用户体验。根据最终目标，我们称它为读类型的业务后台系统，或者叫读业务。\n\n到这里，你可能会有疑问，读业务和 CRUD 里的 R 不是一个意思吗？答案是：完全不同。它们主要有 2 点区别：\n\n 1. 这里的“读”是从目的性推导而来，是有限定要求的，它要求的“读”是能够满足用户体验的高性能及高可用；\n\n 2. 定义的面不同，读业务最重要的是保证系统可读，但此系统仍然会提供写删修的功能，但对这些功能的关注度和要求指标均较低。\n\n和上述读业务类似的场景有：\n\n * 短视频业务，在系统出现故障的极端情况下，可以不能发送新的短视频，但需要能够浏览历史视频；\n\n * 电商或者外卖业务里的商品系统，在系统出现故障的极端情况下，商家可以不能创建新的商品，但历史商品需要能够被客户浏览并下单。\n\n可以看到，上述第二个场景是某个业务中的一个系统，而第一个场景短视频则是一个大的业务。从这两个差异的场景案例可以看出，目的性这个衡量指标可以是某一个大的业务，也可以是某一个业务中的一个具体细小场景。\n\n除了读业务之外，还有另外两个场景，分别是数据写场景和扣减场景。\n\n发布及购买类业务\n\n这里请你思考一个问题：对于电商、外卖和打车等交易类的业务场景，它们最重要的目的性是什么？\n\n不管这些业务里有多少形形色色的系统，当出现一些难以恢复的故障时，比如钻石会员不能使用优先打车通道、不能显示此次打的是出租车还是快车等，但只要用户能够提交订单打车即可。因为如果不能提交订单，将直接减少企业真金白银的收入，在商业上是不允许的。因此提单的写入是此类业务场景中的重中之重，也是提供电商、外卖和打车服务的企业的最终目的。所以提供一个高可用的写入服务十分重要。\n\n库存及支付类业务\n\n最后，我们再来聊聊库存及支付类业务的目的性。\n\n\n\n图 2：提单扣减流程\n\n图 2 展示的是扣减场景中的提单扣减流程，属于一个大型业务之下的某个系统的技术诉求，比如库存的扣减、次数的限制、支付金额的扣减等。虽然这几个系统都会对外提供诸如查询库存、次数等能力，但它最重要的是保障扣减的高可用，因为一般扣减都是和提单共同发生。如果扣减失败，那么提单也无法成功，所以，扣减业务也是一个需要重点保障的场景。\n\n以上，我们使用目的性这个维度对不同类型的公司业务（短视频、微博、新闻资讯、电商、打车等）梳理分类，得出结论 1：\n\n业务后台系统在系统实现上均可分为读业务、写业务、扣减业务。\n\n因为业务类型是可归类的、通用的，所以得出结论 2：\n\n这三大类业务后台系统在技术实现上也是类似的，甚至可以说是统一的。\n\n\n各类型的技术实现关注点\n\n通过将形态各异的业务分成三大类，你应该能够解答本讲开篇提出的问题：为什么不同公司的业务后台开发岗的招聘要求有很多重叠？可以把你的思考和答案写在留言区，再来看我接下来的分析。\n\n因为很多公司的业务或者其中的某一个系统，都归属于同一大类，而这些类别的技术实现基本上大同小异，因此所有招聘或者任职要求都是类似的。\n\n上一小节，我从业务场景的角度介绍了读业务、写业务、扣减业务，接下来我们再来看看这三大类场景在技术实现上各自有哪些要求。\n\n读业务是越快越好\n\n首先介绍的是读业务场景。任何业务最基本的要求是高可用，随时保障服务可用。那么读业务除了此要求之外还有其他什么要求吗？\n\n从上述的几个案例中，你会发现资讯类业务（微博、知乎、短视频），它们的“写”即发微博、发短视频，和用户的“读”即浏览新鲜事的次数相差非差大。一个正常的用户，可能阅读了 100 条微博，才会发 1 条微博。这里的读写比例在十倍、百倍的量级，因此读的并发量级非常大。\n\n另外，阅读作为一切业务发起的起点，对于速度的要求至关重要。不管是电商还是现在短视频、微博里的直播带货，首先要保障用户能够快速浏览和切换商品，然后才是进入下一步的购买页面。你可以想象一下，如果一个商品图片加载很慢，或一个资讯类应用新闻半天不展示，你还会耐心等待吗？\n\n因此，作为大多数业务的起点，除了完成高可用外，读业务的实现还要求能够在海量读请求下保障高性能。\n\n写业务需要 101% 高可用\n\n在上一小节，我们在读业务的技术实现分析里提到，保障高可用是基本要求。那么，写入业务如提交订单等场景，还需要再提及高可用吗？\n\n答案当然是要，此小节的标题我用了一个夸张的写法“101% 高可用”。我在本讲写入的场景介绍里提到，写入基本上是提交订单，它和实实在在的企业收入相关。因此，我们需要尽“101%” 的努力去保障可用性。\n\n如果读服务出现存储或应用故障，可以在前端或者终端进行前置缓存抗一段时间。缓存给研发或者运维提供了分钟级别的故障处理、数据修复的可能。\n\n但写入服务是无法使用缓存的。此外，对于各大电商、打车、外卖平台来说，故障恢复的时间需要在一分钟内或者秒级别。故我们在架构设计时需要做到“101%”的高可用，这样在实际生产环境才能高效应对故障的发生。\n\n扣减业务要抗住并发和保障数据一致性\n\n对于扣减业务，从目的性上讲，最重要的就是抗住并发的扣减量。除开高可用外，你会觉得扣减和写入有很多类似的地方，甚至可以归为一类。\n\n对于写入业务，以提交订单为例，在写入的时候，所有的数据都是用户从表单里提交过来的，比如购买商品的名称和数量、收货地址等，这些数据是这个用户私有的。在技术实现上，我们只要能够尽“101%”的可能性把它保存下来即可。\n\n而对于扣减则不是，以库存为例，扣减的请求只会包含购买的商品和对应的数量，而具体能不能买，则依赖后台系统存储的当前剩余库存数量。另外，不同用户在同一时刻可能购买同一个商品，此处就存在并发更新，这种在并发情况下的扣减一致性需要格外注意。\n\n虽然，扣减类业务也会对外提供一些诸如剩余数量和金额的查询接口，但扣减类系统提供的最重要的能力是被各类订单所依赖的扣减接口。它的稳定性决定了提交订单的稳定性。因此，扣减类业务的重点就是在并发情况下保障扣减的准确性和抗击高并发的能力。\n\n\n总结\n\n在本讲，我向你提供了一个对形态各异的业务模式归类的方法。不管各大公司提供的具体业务是什么，从技术的目的性上看，它们都是提供了三大类技术角度的业务。这也就解答了，为什么各大公司的后台开发岗位的招聘要求是类似的，穿过业务的外皮，它们底层逻辑相同。\n\n另外，有一个点需要你注意，本讲对各公司大的业务层面进行了划分，相信你已经对谁属于读业务、谁又属于写业务有了通透的理解。此时不妨尝试问自己一个问题：是不是经过上述定性后，就可以认为某个公司的系统都是某一特性的业务了（不是读业务就是写业务）？\n\n其实不然，如订单系统，从大的目的性来看它属于写业务。但进一步剖析，会发现它对外提供的订单详情和列表是读业务。本讲的案例只是在一个比较高的维度对各大公司进行了划分，你可以继续利用目的性对它们做进一步的划分。\n\n通过不断地划分，你可以将你负责的系统与本讲介绍的三大类业务进行对应，并将你现在负责的业务架构和本专栏后续讲解的技术架构进行对照，有针对性地学习。\n\n最后，给你留一道思考题。你所负责或者了解的属于这三大类型的业务形态有哪些？可以试着举一些例子写在留言区，咱们一起讨论吧。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **9790：\n\n> 架构设计从业务场景分析包括三个场景方向，读业务，写业务，以及扣减业务。而真对这三种业务场景，需要保证的是读业务的快速，写业务的可靠，以及扣减业务数据的一致性。面对不同的业务需求需要考虑需要考虑使用对应了哪些场景从而选择相应的技术方案。感谢大佬的精心讲解，期待后续学习如何实现这三种业务场景的架构方法。如何保证消息的可靠到达等问题是否是在架构中需要考虑的问题？还是直接使用中间件来实现？中间件的选型是否也和业务场景相关，能否介绍一下？\n\n#     讲师回复：\n\n>     首先，技术是服务于业务的，各类中间件的出现就是来解决不同的业务场景问题的，比如缓存的出现就是为了解决性能的问题，因此，中间件的选型要紧贴业务场景的诉求。 消息是否要可靠达到看你的业务场景，如果场景是做日志收集，则不完全需要。但如果是金融资产的对账等场景，则必须保证数据一定不能丢。 至于是业务架构保障还是中间件保障，则要看中间件的能力了，如果可以就交给中间件，没必要重复造轮子。\n\n# **豪：\n\n> 按照这样的划分，的确很清晰，并且能看出这是实践的总结。\n\n# **默：\n\n> 老师好，可以剧透下全量缓存的技术选型吗，目前正在做这块的技术调研。😀\n\n#     讲师回复：\n\n>     全缓存一个重要的技术点是如何进行数据同步，因为全缓存是指全以缓存中的数据服务于业务，此时从数据库到缓存的数据同步的性能、简单性、最终一致性就非常重要。落地上，可以采用binlog来进行全缓存的数据同步。\n\n# **5799：\n\n> 内容非常干货，跟着老师学还赶的上金三银四\n\n# **安：\n\n> 老师，设计购物车功能时应该注意哪几点？目前我采用将购物车数据保存到缓存，通过MQ进行通知将缓存数据搬到数据库\n\n#     讲师回复：\n\n>     建议可以缓存双集群，出现故障时可以灾备。写完缓存再发送消息存在分布式事务问题，在发送消息处，可以增加告警、日志等降级方案，来应对缓存写入成功，而MQ发送失败的场景。\n\n# **福：\n\n> 业务后台是不是要进一步拆分成业务中台和技术中台\n\n#     讲师回复：\n\n>     是的，可以这样划分。技术中台主要负责中间件的建设，比如缓存集群、数据库集群、RPC框架、消息中间件等的建设。业务中台是在这些中间件基础上建立的，面向业务的中台，如用户中台、评论中台等业务模块。\n\n# **波：\n\n> 目的性，值得去停下几分钟思考下，没有这个纬度，所有的系统都是CRUD，但是因为目的不同，不同系统间才有了差异，读取和写入的调用比例天差地别，对一个服务而言，要问问这个服务是干啥的，技术是为业务服务，为业务提供解决方案\n\n# *中：\n\n> 老师，我看你讲库存扣减。有个疑问-购物车商品库存批量扣减是怎么实现的，mysql批量更新容易死锁\n\n#     讲师回复：\n\n>     导致死锁的主要原因是批量+并发。对于商品的批量+并发的扣减场景，并不适合采用数据库进行扣减。可以参考本专栏的第13、14讲里介绍的采用缓存的方案\n\n# **前：\n\n> 不同类型的业务使用的技术大同小异，比如读业务，主要是提供读的可靠性及性能，使用高速缓存、数据保存多副本；写服务，提供高可用性、在极端情况下使用降级、限流，保证基本交易能正常进行；扣减业务、保证事务的一致性、使用分布式事务。\n\n# *明：\n\n> 系统简单来讲，就是查看和录入。只要保证这两点即可。\n\n# **福：\n\n> 可以归类为读，写，扣等\n\n# 我：\n\n> 期待，学习\n\n# **8956：\n\n> 不错不错",normalizedContent:"从本讲开始，咱们将一起开启本专栏的学习之旅。\n\n国内的各大互联网公司业务模式非常丰富，所提供的业务服务也是形态各异，比如：\n\n * 腾讯主要提供即时通信、游戏等服务\n\n * 京东、阿里等电商提供商品购买、快递寄收件、金融投资等服务\n\n * 滴滴提供打车服务\n\n * 今日头条、新浪微博提供短视频、新闻资讯类阅读服务\n\n * 美团提供商品购买、外卖订购服务\n\n * 百度提供搜索查询服务\n\n虽然上述列举的公司业务类型不同，但对后台开发岗位的招聘要求却很相似。在拉勾网上可以看到，除了要求你掌握某种开发语言和相关框架外，还要掌握分布式、多线程、缓存、数据库等。\n\n\n\n（以上信息来源拉勾网）\n\n那么，产生这个现象的根本原因是什么呢？\n\n简单来说，是因为这些业务在技术实现上存在共性，比如技术点或者架构模式。在本讲我将和你一起探寻问题背后的原因，并向你提供一个分析业务架构共性的标准。学完本讲，希望你在面对层出不穷的新业务、新模式时，能够洞穿出背后的架构本质，套用通用架构模式，轻松应对各项技术指标，真正做到大道归宗。\n\n\n什么是业务后台系统\n\n在讨论一个议题之前，最重要的是确定它的定义和边界，这样才不至于在实施时出现偏差，导致事倍功半。因此，在开始本讲前，咱们先聊聊业务后台系统的定义。\n\n乍一听“业务后台系统”这个称呼，你可能有点摸不着头脑，不知道它是什么。其实，业务后台系统和你在拉勾网上看到的“后台开发”大体上是一个意思。我将以外卖订购服务为例，帮助你理解和明确它的定义和边界。\n\n\n\n图 1：外卖系统全局架构\n\n图 1 展示的是一个外卖系统全局架构，如果某公司要进军外卖业务，就需要开发一套外卖系统，其中包含用户可直接使用的各个终端，如 ios 端、android 端、m 页及 pc 站点。提供内容展示和系统交互，称为业务前台系统。\n\n业务前台系统中展示的内容，比如外卖商品种类、商品图片等信息，其实是由业务后台系统提供的，业务前台并没有这些数据，它只负责展示。当用户在前台选择商品点外卖后，实际接受并存储订单及调度配送的系统称为业务后台系统。\n\n总的来看，业务后台系统是指直接接受前台的请求，同时给前台返回数据或者保存前台数据的系统。“业务”这个词只是个代称，代指各类业务系统。\n\n很多公司有一些大数据、bi、数据挖掘等相关的系统，它们并不属于业务后台系统，可以称为业务大数据系统，现在时髦的叫法是：数据中台。数据中台有一个特点，不直接接受业务前台系统的请求也不直接生产数据，而是直接对业务后台系统产生的数据进行分析、再加工等。\n\n还有一些算法研究的岗位，他们主要对算法进行研究和调优，并将这些成熟的、可用于生产环境的算法提供给业务后台开发工程师。再由他们集成进业务后台系统里，提升业务的体验，比如推荐算法、语音识别算法等。\n\n至此，你应该对业务后台系统的边界有一个比较清晰的了解。通过上述案例，我们还可以举一反三，比如：\n\n * 在短视频和资讯类（微博、新闻）业务里，提供查询视频基本信息和资讯的系统、能够保存短视频的系统，都属于后台系统。\n\n * 在电商业务里，提供查询商品信息的系统、保存订单的系统，都属于后台系统。\n\n其他互联网公司提供的系统，你可以按此思路来判断它们的业务后台系统类别。\n\n\n后台系统的共性探究与归类\n\n在探讨不同业务后台系统的共性前，需要明确一个非常重要的概念，即目的性。如果不明确此概念，你会发现不同的业务后台系统的所有技术实现都是 crud（增、查、改、删），按此归类后，很难看出各类业务后台系统之间的区别，更别说从中提炼共性技术和通用架构模式了。\n\n因此，我们首先要确定归类的维度。具体来说，就是需要寻找一个新的维度来对业务后台系统进行归类，并基于此归类提炼技术共性。在我看来，这个维度就是目的性。在确定归类的维度后，就可以对各类业务后台进行分类了。\n\n接下来，我会以资讯、发布及购买、库存及支付这三类业务为案例，讲解如何基于目的性进行归类。\n\n资讯类业务\n\n下面请你思考一个问题：对于微博、知乎等类资讯业务系统，它们的目的性是什么？\n\n你可以从日常使用的角度来思考，显而易见，这类 app 主要为用户提供阅读和浏览信息的业务，这就是资讯业务系统的目的性。\n\n比如你平时上微博和知乎的目的是娱乐或者学习，我们总结为阅读“新鲜事”。当然，你偶尔也会发布几条动态。想象一下，如果系统出现 bug，导致你曾经发布的某条消息丢失，当下你可能感知不到，除非某一天你去查看历史动态。但如果系统异常导致不能阅读“新鲜事”，用户当下即可感知到系统出现故障。而互联网时代舆论传播非常快，这会给公司带来很大的负面影响。因此这类事故产生的影响更大。\n\n我们总结一下，资讯类业务系统的主要目的性是尽最大的可能性保证读的可用性和优化用户体验。根据最终目标，我们称它为读类型的业务后台系统，或者叫读业务。\n\n到这里，你可能会有疑问，读业务和 crud 里的 r 不是一个意思吗？答案是：完全不同。它们主要有 2 点区别：\n\n 1. 这里的“读”是从目的性推导而来，是有限定要求的，它要求的“读”是能够满足用户体验的高性能及高可用；\n\n 2. 定义的面不同，读业务最重要的是保证系统可读，但此系统仍然会提供写删修的功能，但对这些功能的关注度和要求指标均较低。\n\n和上述读业务类似的场景有：\n\n * 短视频业务，在系统出现故障的极端情况下，可以不能发送新的短视频，但需要能够浏览历史视频；\n\n * 电商或者外卖业务里的商品系统，在系统出现故障的极端情况下，商家可以不能创建新的商品，但历史商品需要能够被客户浏览并下单。\n\n可以看到，上述第二个场景是某个业务中的一个系统，而第一个场景短视频则是一个大的业务。从这两个差异的场景案例可以看出，目的性这个衡量指标可以是某一个大的业务，也可以是某一个业务中的一个具体细小场景。\n\n除了读业务之外，还有另外两个场景，分别是数据写场景和扣减场景。\n\n发布及购买类业务\n\n这里请你思考一个问题：对于电商、外卖和打车等交易类的业务场景，它们最重要的目的性是什么？\n\n不管这些业务里有多少形形色色的系统，当出现一些难以恢复的故障时，比如钻石会员不能使用优先打车通道、不能显示此次打的是出租车还是快车等，但只要用户能够提交订单打车即可。因为如果不能提交订单，将直接减少企业真金白银的收入，在商业上是不允许的。因此提单的写入是此类业务场景中的重中之重，也是提供电商、外卖和打车服务的企业的最终目的。所以提供一个高可用的写入服务十分重要。\n\n库存及支付类业务\n\n最后，我们再来聊聊库存及支付类业务的目的性。\n\n\n\n图 2：提单扣减流程\n\n图 2 展示的是扣减场景中的提单扣减流程，属于一个大型业务之下的某个系统的技术诉求，比如库存的扣减、次数的限制、支付金额的扣减等。虽然这几个系统都会对外提供诸如查询库存、次数等能力，但它最重要的是保障扣减的高可用，因为一般扣减都是和提单共同发生。如果扣减失败，那么提单也无法成功，所以，扣减业务也是一个需要重点保障的场景。\n\n以上，我们使用目的性这个维度对不同类型的公司业务（短视频、微博、新闻资讯、电商、打车等）梳理分类，得出结论 1：\n\n业务后台系统在系统实现上均可分为读业务、写业务、扣减业务。\n\n因为业务类型是可归类的、通用的，所以得出结论 2：\n\n这三大类业务后台系统在技术实现上也是类似的，甚至可以说是统一的。\n\n\n各类型的技术实现关注点\n\n通过将形态各异的业务分成三大类，你应该能够解答本讲开篇提出的问题：为什么不同公司的业务后台开发岗的招聘要求有很多重叠？可以把你的思考和答案写在留言区，再来看我接下来的分析。\n\n因为很多公司的业务或者其中的某一个系统，都归属于同一大类，而这些类别的技术实现基本上大同小异，因此所有招聘或者任职要求都是类似的。\n\n上一小节，我从业务场景的角度介绍了读业务、写业务、扣减业务，接下来我们再来看看这三大类场景在技术实现上各自有哪些要求。\n\n读业务是越快越好\n\n首先介绍的是读业务场景。任何业务最基本的要求是高可用，随时保障服务可用。那么读业务除了此要求之外还有其他什么要求吗？\n\n从上述的几个案例中，你会发现资讯类业务（微博、知乎、短视频），它们的“写”即发微博、发短视频，和用户的“读”即浏览新鲜事的次数相差非差大。一个正常的用户，可能阅读了 100 条微博，才会发 1 条微博。这里的读写比例在十倍、百倍的量级，因此读的并发量级非常大。\n\n另外，阅读作为一切业务发起的起点，对于速度的要求至关重要。不管是电商还是现在短视频、微博里的直播带货，首先要保障用户能够快速浏览和切换商品，然后才是进入下一步的购买页面。你可以想象一下，如果一个商品图片加载很慢，或一个资讯类应用新闻半天不展示，你还会耐心等待吗？\n\n因此，作为大多数业务的起点，除了完成高可用外，读业务的实现还要求能够在海量读请求下保障高性能。\n\n写业务需要 101% 高可用\n\n在上一小节，我们在读业务的技术实现分析里提到，保障高可用是基本要求。那么，写入业务如提交订单等场景，还需要再提及高可用吗？\n\n答案当然是要，此小节的标题我用了一个夸张的写法“101% 高可用”。我在本讲写入的场景介绍里提到，写入基本上是提交订单，它和实实在在的企业收入相关。因此，我们需要尽“101%” 的努力去保障可用性。\n\n如果读服务出现存储或应用故障，可以在前端或者终端进行前置缓存抗一段时间。缓存给研发或者运维提供了分钟级别的故障处理、数据修复的可能。\n\n但写入服务是无法使用缓存的。此外，对于各大电商、打车、外卖平台来说，故障恢复的时间需要在一分钟内或者秒级别。故我们在架构设计时需要做到“101%”的高可用，这样在实际生产环境才能高效应对故障的发生。\n\n扣减业务要抗住并发和保障数据一致性\n\n对于扣减业务，从目的性上讲，最重要的就是抗住并发的扣减量。除开高可用外，你会觉得扣减和写入有很多类似的地方，甚至可以归为一类。\n\n对于写入业务，以提交订单为例，在写入的时候，所有的数据都是用户从表单里提交过来的，比如购买商品的名称和数量、收货地址等，这些数据是这个用户私有的。在技术实现上，我们只要能够尽“101%”的可能性把它保存下来即可。\n\n而对于扣减则不是，以库存为例，扣减的请求只会包含购买的商品和对应的数量，而具体能不能买，则依赖后台系统存储的当前剩余库存数量。另外，不同用户在同一时刻可能购买同一个商品，此处就存在并发更新，这种在并发情况下的扣减一致性需要格外注意。\n\n虽然，扣减类业务也会对外提供一些诸如剩余数量和金额的查询接口，但扣减类系统提供的最重要的能力是被各类订单所依赖的扣减接口。它的稳定性决定了提交订单的稳定性。因此，扣减类业务的重点就是在并发情况下保障扣减的准确性和抗击高并发的能力。\n\n\n总结\n\n在本讲，我向你提供了一个对形态各异的业务模式归类的方法。不管各大公司提供的具体业务是什么，从技术的目的性上看，它们都是提供了三大类技术角度的业务。这也就解答了，为什么各大公司的后台开发岗位的招聘要求是类似的，穿过业务的外皮，它们底层逻辑相同。\n\n另外，有一个点需要你注意，本讲对各公司大的业务层面进行了划分，相信你已经对谁属于读业务、谁又属于写业务有了通透的理解。此时不妨尝试问自己一个问题：是不是经过上述定性后，就可以认为某个公司的系统都是某一特性的业务了（不是读业务就是写业务）？\n\n其实不然，如订单系统，从大的目的性来看它属于写业务。但进一步剖析，会发现它对外提供的订单详情和列表是读业务。本讲的案例只是在一个比较高的维度对各大公司进行了划分，你可以继续利用目的性对它们做进一步的划分。\n\n通过不断地划分，你可以将你负责的系统与本讲介绍的三大类业务进行对应，并将你现在负责的业务架构和本专栏后续讲解的技术架构进行对照，有针对性地学习。\n\n最后，给你留一道思考题。你所负责或者了解的属于这三大类型的业务形态有哪些？可以试着举一些例子写在留言区，咱们一起讨论吧。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **9790：\n\n> 架构设计从业务场景分析包括三个场景方向，读业务，写业务，以及扣减业务。而真对这三种业务场景，需要保证的是读业务的快速，写业务的可靠，以及扣减业务数据的一致性。面对不同的业务需求需要考虑需要考虑使用对应了哪些场景从而选择相应的技术方案。感谢大佬的精心讲解，期待后续学习如何实现这三种业务场景的架构方法。如何保证消息的可靠到达等问题是否是在架构中需要考虑的问题？还是直接使用中间件来实现？中间件的选型是否也和业务场景相关，能否介绍一下？\n\n#     讲师回复：\n\n>     首先，技术是服务于业务的，各类中间件的出现就是来解决不同的业务场景问题的，比如缓存的出现就是为了解决性能的问题，因此，中间件的选型要紧贴业务场景的诉求。 消息是否要可靠达到看你的业务场景，如果场景是做日志收集，则不完全需要。但如果是金融资产的对账等场景，则必须保证数据一定不能丢。 至于是业务架构保障还是中间件保障，则要看中间件的能力了，如果可以就交给中间件，没必要重复造轮子。\n\n# **豪：\n\n> 按照这样的划分，的确很清晰，并且能看出这是实践的总结。\n\n# **默：\n\n> 老师好，可以剧透下全量缓存的技术选型吗，目前正在做这块的技术调研。😀\n\n#     讲师回复：\n\n>     全缓存一个重要的技术点是如何进行数据同步，因为全缓存是指全以缓存中的数据服务于业务，此时从数据库到缓存的数据同步的性能、简单性、最终一致性就非常重要。落地上，可以采用binlog来进行全缓存的数据同步。\n\n# **5799：\n\n> 内容非常干货，跟着老师学还赶的上金三银四\n\n# **安：\n\n> 老师，设计购物车功能时应该注意哪几点？目前我采用将购物车数据保存到缓存，通过mq进行通知将缓存数据搬到数据库\n\n#     讲师回复：\n\n>     建议可以缓存双集群，出现故障时可以灾备。写完缓存再发送消息存在分布式事务问题，在发送消息处，可以增加告警、日志等降级方案，来应对缓存写入成功，而mq发送失败的场景。\n\n# **福：\n\n> 业务后台是不是要进一步拆分成业务中台和技术中台\n\n#     讲师回复：\n\n>     是的，可以这样划分。技术中台主要负责中间件的建设，比如缓存集群、数据库集群、rpc框架、消息中间件等的建设。业务中台是在这些中间件基础上建立的，面向业务的中台，如用户中台、评论中台等业务模块。\n\n# **波：\n\n> 目的性，值得去停下几分钟思考下，没有这个纬度，所有的系统都是crud，但是因为目的不同，不同系统间才有了差异，读取和写入的调用比例天差地别，对一个服务而言，要问问这个服务是干啥的，技术是为业务服务，为业务提供解决方案\n\n# *中：\n\n> 老师，我看你讲库存扣减。有个疑问-购物车商品库存批量扣减是怎么实现的，mysql批量更新容易死锁\n\n#     讲师回复：\n\n>     导致死锁的主要原因是批量+并发。对于商品的批量+并发的扣减场景，并不适合采用数据库进行扣减。可以参考本专栏的第13、14讲里介绍的采用缓存的方案\n\n# **前：\n\n> 不同类型的业务使用的技术大同小异，比如读业务，主要是提供读的可靠性及性能，使用高速缓存、数据保存多副本；写服务，提供高可用性、在极端情况下使用降级、限流，保证基本交易能正常进行；扣减业务、保证事务的一致性、使用分布式事务。\n\n# *明：\n\n> 系统简单来讲，就是查看和录入。只要保证这两点即可。\n\n# **福：\n\n> 可以归类为读，写，扣等\n\n# 我：\n\n> 期待，学习\n\n# **8956：\n\n> 不错不错",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何利用“拆分”降低架构复杂度？",frontmatter:{title:"如何利用“拆分”降低架构复杂度？",date:"2023-02-22T16:15:53.000Z",permalink:"/pages/909a7c/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/03.%20%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E2%80%9C%E6%8B%86%E5%88%86%E2%80%9D%E9%99%8D%E4%BD%8E%E6%9E%B6%E6%9E%84%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/03. 如何利用“拆分”降低架构复杂度？.md",key:"v-498b12ca",path:"/pages/909a7c/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:5507}],headersStr:"精选评论",content:"今天将开始介绍如何利用“拆分”降低架构复杂度。\n\n上一讲我们从技术的目的性这个维度，将业务后台系统的类型归为三大类，读业务、写业务及扣减业务。除了基于技术维度的拆分，在后台架构里还有很多其他形式的拆分，比如上一讲提到的外卖系统架构，整个后台可以拆分为了用户、订单、商品、价格等模块。\n\n通过拆分可以将一个涉及面广、复杂度高的系统拆解为多个小模块，让各个团队单独负责并专项击破。拆分是架构设计大型复杂系统的第一步，对降低系统复杂性有着决定性的意义，它也是架构师的必备技能之一。\n\n在本讲，我会给出一个实际业务场景，手把手带你做一次完整的系统拆分，通过理论和实战两个层面，帮助你快速掌握这项可以有效降低系统复杂度的技能。\n\n\n为什么要做拆分\n\n人解决复杂问题的能力是有限的，当问题涉及面广、情况复杂时，自然会去寻找方法提升效率。我们的业务后台系统就是一个“复杂问题”，而解决“这个问题”的方法便是拆分——将复杂问题拆解为多个相对简单的小问题，分而治之、各个击破，这样做极大地提高了解决复杂问题的可能性和效率。\n\n以电商系统为例，建设一个支持千万用户同时使用、日均流量上亿的电商系统也是一个十分庞大、复杂、涉及面广的工程。至少需要上百名研发、产品、测试等不同职能的人员共建。想象一下，如果没有系统拆分，所有人聚集在一起，开会讨论需求和技术方案的场景。\n\n先不说别的，把所有人召集齐都是一项十分费时的事情，应该是一个顶级的项目经理才能做到。其次是沟通的效率，上百人一起开会，七嘴八舌，一天都得不出什么重要结论，更别说梳理出细节流程了。最后，在开发的时候，上百名研发使用同一个代码仓库，每天你至少需要花费几个小时在解决代码冲突的问题上。使用此方式推进项目，上线可能遥遥无期了。即使能够上线，线上质量也是堪忧。\n\n面对这样的情况，我们该如何解决呢？\n\n首先，应该是几个业务专家、技术架构一起对整个系统进行全面的梳理和分析。然后便是对系统进行拆分，将大系统按一定的规则拆分成多个小模块。注意，这里我多说一句，“一定的规则”便是我们前面所讲的“按照不同维度”。\n\n拆分后，上百人的产研测团队就可以认领工作了，各个团队安心处理自己模块内的工作（产品设计、代码开发等）。对于模块间需要交互的地方，每个团队出一个资深的产品和架构师进行沟通即可。沟通成本降低了，效率自然也就提升了。\n\n通过上述案例，可以看出拆分在大型系统开发中的重要作用。一个好的拆分能够降低各个模块间的耦合性，极大地降低效率消耗，提升系统成功的可能性。如果你立志成为架构师，那么就必须将此项重要技能收入囊中。\n\n何时拆分\n\n此外，一些系统在建设时并没有预计到最终会发展到什么量级，为了满足快速上线的要求，没有经过拆分就直接采用了单体架构的模式进行落地。对于此类系统，是不是需要立马做拆分呢？\n\n其实并不是。当单体架构存在以下 3 类问题时，建议考虑进行拆分。\n\n1. 系统常年处于多需求并行开发，导致代码维护成本太大\n\n如果一个系统变得非常庞大，它的需求及并行的需求就会非常多。每个并行需求都会有一个开发分支，当开发需求完成陆续上线，那么在代码合并时就会产生冲突，比如你写的一个功能块被别人改了、新增了一个类似的公共类等，此时就可以考虑进行系统拆分。\n\n2. 在开发一个需求时，花费几天时间阅读代码，而开发只要一半甚至更少的时间\n\n在一个过于庞大的系统里，如果你长期处于熟悉代码的时间和实际编写的时间配比不对等的情况，此时就应考虑进行系统拆分。因为信息过载了，你无法完全掌握此系统。如果不拆分，每次重新熟悉代码并进行修改，可能会导致 Bug 频发，线上质量低下。\n\n经过拆分后，你只需负责你熟悉的小模块，其他部分依赖第三方接口即可，让更专业的人保证它的质量。\n\n3. 在一个需求上线前，需要召集上百人对齐上线风险和上线步骤\n\n对于上面的第二个问题，你可能会说，我找不同的人负责系统里的不同部分不就好了。这虽然可以解决熟悉的问题，但耦合度是解决不了的。一个需求由十个人开发一个系统和三波人开发三个系统，这期间的沟通成本、耦合度等是无法比拟的。想象一下，一屋子开会的人你一言我一语和确定好边界后，三波人单独开会，一定是后者更高效。\n\n拆分的前提条件\n\n如果你所负责的系统满足上述三个场景，我想你已经准备好大干一场了。但在开始拆分之前，我有几个点要提醒你。\n\n第一是团队和人员的准备。 拆分的主要原因是信息过载，因此在拆分后，对应的系统也要划分给新增的团队，而不是原有人员继续维护，这样只是换汤不换药，信息依然过载。亚马逊的 CEO 曾提出“两个比萨”理论——一个团队的人员能够吃下两个比萨刚好。因此拆分后，建议以三个人左右为单位进行组织和划分。\n\n第二是在进行拆分后，各个模块不在一个进程内，需要采用接口依赖的形式。此时，对于 RPC 框架及对应的监控、降级等中间件基础设施要求较高了。如果公司的中间件和基础设施跟不上，建议先将此加强再进行拆分，以免拆分后还要填此处留下的坑。\n\n\n如何进行拆分\n\n接下来我们再来看看到底如何进行拆分。\n\n其实拆分就和切蛋糕类似，将一整块蛋糕切分成多个小块的方法有很多。你可以横着切或者竖着切，不管怎么切，蛋糕最终都将被分成很多小块。只是选择不同的切法，最终得到的蛋糕形状不一样。同样架构的拆分也有很多方式，对一个业务系统采用不同的拆分方法将会得到不同的子模块。\n\n在上一讲中，我们采用了“目的性”这个维度，将后台业务系统拆分或者说归类为三大类，读服务、写服务和扣减服务。这里你可能会有疑问，拆分后可以得到三种类型的模块，难道所有的后台系统都只有这三个模块？\n\n\n\n图 1：电商后台拆分架构\n\n以上图 1 的电商后台拆分架构为例，电商后台一般包含用户模块、商品模块、促销模块、购物车模块、订单模块等。其实，这正好验证了我们前面提到的，架构拆分有很多方式，只是不同拆法得到的结果不一样。\n\n“目的性”是一种偏技术视角的拆分方式，而图 1 展示的则是一种偏业务视角的拆分方式。可以发现拆分后的模块和你平时购物的流程极为相似，比如，你在购物时，要先通过认证登录 App，再浏览商品、查看促销活动及价格，确认购买后添加购物车并提交订单。这种按用户使用流程进行拆分的方法叫作业务流拆分法。\n\n并没有哪一种架构拆分绝对正确，因为架构是论述题而不是选择题。在实战中，你需要针对不同复杂度的业务类型灵活选择。不管经过多少次重复拆分和组合，目标只有一个——降低系统复杂度、减少耦合提升效率。\n\n对于复杂的系统架构，先竖着切一刀，称为垂直拆分。经过垂直拆分后，如果系统还是太复杂，就可以横着再来一刀，称为水平拆分或者分层拆分。在实际场景中，你可以根据需求重复做垂直拆分或者水平拆分。每一次拆分的依据可以不一样，可以依据业务流程，也可以依据纯技术。\n\n虽没有绝对的架构拆分标准，但从我的经验来看，大型系统通常先采用两次垂直拆分再加一次水平拆分。这两次垂直拆分有一定的先后顺序，先按业务维度再按技术维度。接下来，我将以最近经常使用的微信读书作为分析案例，和你一起从零开始对一个陌生的后台架构进行拆分。\n\n首先，我们先来分析一下微信读书的业务流程，然后再开始第一步的垂直拆分。使用微信读书阅读大致经过以下几个步骤：\n\n 1. 注册并登录 App；\n\n 2. 在书城里查找你想要阅读的图书，并浏览书籍的版本目录和介绍；\n\n 3. 确定是你想要的书籍并且价格适合，就会产生购买；\n\n 4. 支付完成之后，开始阅读。\n\n为了方便你理解，我制作了一张微信读书业务流程图，如下所示：\n\n\n\n图 2：微信读书业务流程图\n\n结合前面的文字描述与图 2 的流程图展示之后，我想你应该知道第一次垂直拆分的结果了。\n\n 1. 注册和登录应该是用户模块。\n\n 2. 在微信读书里书籍属于售卖商品，因此浏览书籍称为商品模块。\n\n 3. 书籍价格展示区域称为价格模块或者叫促销模块，有些时候价格是根据运营节奏或者用户是否为会员等条件计算出来的，这种经过计算输出价格的区域叫促销模块。\n\n 4. 购买是订单模块。\n\n 5. 最后完成支付则是支付模块。\n\n 6. 支付完成后支持实际阅读的区域是阅读模块，它记录了我每次的阅读进度、书签、笔记等。\n\n至此，我们一起按照业务流程完成了对微信读书后台的第一次拆分，得到了微信读书的六大后台模块。因为第二次按技术维度的垂直拆分较通用，上述每个模块均可以按此进行拆分，所以这里我只选取用户模块和支付模块进行分析。\n\n用户模块对外会提供两个基本功能，一个是用户注册，另一个则是登录验证，可以称为查询，因为除了验证之外，App 里还显示了用户的名称及其他信息。按技术维度进行拆分时，可以将注册和修改归为写业务。\n\n除此之外均为读业务，包含验证、查询基本信息、查询用户是否为会员等。经过第二次拆分后，用户模块一分为二——用户读模块和用户写模块。按此套路，我们可以将用户读模块进一步拆分。这里只是讲解拆分的思想，并不是鼓励你一直拆分下去。拆分太细会出现多个模块，如果团队人手不够，即使利用“拆分”也达不到降低复杂度的目的。\n\n另外，支付模块通常会对外提供余额查询与支付扣减的能力，此处可以将支付模块分为额度查询模块和支付扣减模块，同样完成了支付模块的第二次技术维度的垂直划分。拆分结果如下图 3 所示：\n\n\n\n图 3：技术维度的垂直拆分架构\n\n至此，我们已经完成了两次垂直维度的拆分。拆分的结果与后台系统的三大类：读模块、写模块及扣减模块基本一致，只是本讲的模块都带上了具体的业务前缀。这里我再强调一点，任何技术都是服务于业务的，脱离业务的技术无法发挥它的价值。本专栏讲解时去掉了具体的业务前缀，不是不关注业务，而是希望你能够深入理解这些业务背后的通用点，从而更好地服务于业务。\n\n\n\n完成两次垂直拆分后，就可以做最后一步拆分了，即水平拆分或者叫作分层拆分。水平拆分的依据是按易变度或共性度 。经过水平拆分，上层的称为易变模块，下层的称为非易变模块。越靠下面的模块越稳定、越共性、越不易变化。\n\n拆分后，对于非易变的模块，我们只需要编写、修改一次或者零星几次即可，对于易变的模块则需要投入更多的人力去维护。因为易变与非易变模块已经拆开，易变模块进行需求改造对非易变模块基本上没有任何影响。下面我们以第二步垂直拆分形成的模块作为分层拆分的实战。\n\n经过第二步按技术维度的垂直拆分，形成了用户的读模块、写模块、任务模块等。在设计或者开发时，你会发现这些模块都会连接数据库或者其他存储。对于这些连接数据库的代码，基本都是对象映射，将入参的对象转换为数据库 ER 格式的对象。\n\n如果是 Java 应用，还会包含 MyBatis 或者 Hibernate 相关的数据库 ORM 映射的脚手架代码，其他语言以此类推。这些通用的代码只编写一次即可形成一个模块，比如数据访问模块，可以供用户的读模块和写模块共同使用，这就是水平拆分的结果，它的上层是读写模块、下层为共性的数据访问模块。具体形式见下图 4：\n\n\n\n图 4：共性维度的水平拆分架构\n\n如果单独部署水平拆分得到的数据访问模块会因为网络、数据序列化等因素降低读写模块的性能。为了规避此问题，在实际应用中，可以将数据访问模块的代码单独一个工程，但在编译时以动态包的形式链接进用户读模块、用户写模块里，这样就两全其美了。\n\n至此我们一起完成了两次垂直拆分、一次水平拆分的架构拆分实战。在实战中，你可以根据需求选择比此次实践多或少的拆分。另外，架构和历史也是一样，分久必合合久必分，但在分分合合的过程中应遵循上述原则和手段。\n\n最后我想说，架构拆分不是完美无缺的，它也会存在一些问题，比如拆分后带来的分布式事务、调用链路变长、模块变多消耗机器变多等问题。针对这些问题，我将在模块五详细讲解。\n\n\n总结\n\n在本讲，我向你介绍了为什么要做服务架构的拆分以及哪些情况可以暂不进行拆分。我们再来复习一下系统拆分的几个主要原因。\n\n 1. 当需求不断叠加导致并行开发和上线时，通过拆分可以减少相互影响。\n\n 2. 当维护一个覆盖范围比较广的业务系统，从而导致研发人员业务专业度不够高时，通过拆分可以适当聚焦，提升专业度。\n\n 3. 当一个系统范围较广同时线上 Bug 不断时，就需要适当拆分，逐个击破。\n\n在落地进行拆分时，有几个重要准则需要你牢牢记住。\n\n 1. 拆分是按维度逐层进行，从顶层逐步向下。在顶层按业务及业务流程进行垂直拆分，而不是按技术或其他。\n\n 2. 在此之后，对于拆分得到的具体模块，可以按读写分离、在线离线分离、快慢分离、场景分离等方式做进一步的水平拆分。\n\n 3. 在模块内部的垂直拆分完成之后，可以按易变与稳定、共性与非共性进行水平拆分。需要注意的是，第二步的垂直拆分和最后的水平拆分是交替进行的，并无非常清晰的边界和先手顺序。\n\n通过拆分我们得到了可以独自进行详细架构设计的读服务模块、写服务模块及扣减服务模块，你可以对各个类型的模块进行逐个击破了。\n\n最后，我再留给你一道思考题，你现在使用的是单体架构还是经过拆分的微服务架构？拆分维度是什么？可以在留言区写下按此维度拆分的原因，我会选取一位同学的内容做点评分析。\n\n这一讲就到这里，下一模块我们讲解如何构建一个高性能的读服务。实战之旅即将开始，你准备好了吗？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **用户9527：\n\n> “但在编译时以动态包的形式链接进用户读模块、用户写模块里，这样就两全其美了” 请教下，这句话信息含量很大，能再具体一下吗\n\n#     讲师回复：\n\n>     以java举例，就是把数据访问层编译为jar包，在读模块里，通过maven依赖上述的jar包。在部署时，数据访问层和读模块就在同一个进程里了，避免了网络开销等这些问题。\n\n# **用户7042：\n\n> 讲的真的很好，我们整体系统的架构也是做了一次垂直拆分和一次水平拆分，主要是业务复杂，并发方面还好。但是也渐渐的要进行第二次垂直拆分了，提升稳定性和性能优化\n\n# **普：\n\n> 写得真好，膜拜\n\n# **9790：\n\n> 总结描述：从why、when、how三个维度讲解拆分的必要性、时机和方法。拆分的目的是降低系统的维护成本和提高系统的可维护性，即所谓的高内聚低耦合。而一个拆分需要考虑新项目和已经存在的单体项目，新项目在设计之初就应该考虑如何拆分问题，而对于已经存在的单体项目，从三个点进行判断：系统常年处于多需求并行开发，导致代码维护成本太大；在开发一个需求时，花费几天时间阅读代码，而开发只要一半甚至更少的时间；在一个需求上线前，需要召集上百人对齐上线风险和上线步骤。这三个点的思考非常受益，感谢！重点还是在于如何拆分的问题：主要是两个拆分维度垂直拆分和水平拆分，老师讲解了非常通用的一个基本原则即按照业务拆分，读写扣减操作，共性非共性，灵活性稳定性进行的拆分。其中个人理解：前两者一般作为垂直拆分对象，而后两者作为水平拆分对象。关于当前项目：目前使用的是拆分后的微服务架构，拆分是按照业务和技术功能进行拆分的，同样是水平拆分与垂直拆分相结合。但个人理解并不是十分理想的，所以有一下问题。问题：1. 对于微服务架构的设计思想，是否需要强大的中间件支撑，而开源的中间件是否需要专门的团队维护。2. 拆分的粒度是如何把控的呢？感谢！\n\n#     讲师回复：\n\n>     问题一:需要有相关的中间件支撑，如果有相应的团队能够支持且使用该中间件的人数足够多，可以独立出来团队去维护。如果就只有你的团队使用，可以不着急一定要有团队维护了才采用该中间件。 问题二：拆分的粒度坦言说，没有绝对的答案。如果要有一个绝对可参考的标准，可以参考第二讲里的，基于人数的原则。拆分出来的一个模块，3~5个人可以维护过来。\n\n# **锐：\n\n> 目前公司的项目基本做到了两次垂直拆分和两次水平拆分，但是都没有真正的百分完全，始终有部分项目存在历史遗留问题。\n\n# **春：\n\n> 拆分容易，聚合就很讲究了，拆开的业务为了保证事务一致性，就要用到分布式事务了。拆分开的业务碰到有聚合数据的需求，是不是需要在拆分的业务基础上搭建聚合服务呢？\n\n#     讲师回复：\n\n>     需要。拆分是从设计者的角度看的，而从使用者角度来看是需要聚合层的。随着拆分的不断细化，微服务越来越多，使用者的使用成本就非常高了。\n\n# **用户7042：\n\n> 我们拆分的思路是领域驱动。也用的中台思想，讲讲中台架构呗？\n\n#     讲师回复：\n\n>     参考本专栏的最后一讲，会有中台相关的内容介绍\n\n# *庚：\n\n> 我们是微服务架构的，跟数据处理有关的业务。垂直一刀拆为用户模块，商品模块，认证模块，质量模块。再水平一刀把商品模块拆为业务模块，数据模块。\n\n# *华：\n\n> 数据访问层即使打成jar包，也要通过网络来访问数据库吧\n\n#     讲师回复：\n\n>     是的\n\n# **鑫：\n\n> 开脑洞啦，公司系统是微服务版本，拆分场景是以业务为导向，需求结合。\n\n# **峰：\n\n> 老师，读写模块和数据访问模块的拆分还是不明白，意思是把数据查询单独抽出来只进行数据的增删改查，然后业务模块处理组装数据？可以以go需要举例吗？特别不明白\n\n#     讲师回复：\n\n>     你的理解是对的，就是把增删改查单独形成一个模块，并独立部署，形成一个进程。业务模块在查询和写入数据时，都通过RPC调用这个单独的模块。其实，这个和语言没有太大的关系。\n\n# *旭：\n\n> 学到了\n\n# **运：\n\n> 目前系统采用微服务架构，按业务场景拆分成独立的微服务，各个业务对应的微服务职能明确，开发升级上线互不干扰。同时抽取公共服务调用层用于跨服务调用\n\n# 我：\n\n> 老师，关于数据层以动态包加载怎么做的\n\n#     讲师回复：\n\n>     在java中，就是把数据访问层的代码打包成jar文件，供上层的业务应用通过jar包方式进行访问，打包和集成可以依赖maven来完成。对于C/C++，在Linux下可以将数据访问层编译为.so格式的动态包，供上层的业务应用内嵌使用，打包和集成可以依赖makefile来完成。\n\n# *亮：\n\n> 我觉得最主要的是 比如服务间调用如何保证事物一致性、效率、联通追踪",normalizedContent:"今天将开始介绍如何利用“拆分”降低架构复杂度。\n\n上一讲我们从技术的目的性这个维度，将业务后台系统的类型归为三大类，读业务、写业务及扣减业务。除了基于技术维度的拆分，在后台架构里还有很多其他形式的拆分，比如上一讲提到的外卖系统架构，整个后台可以拆分为了用户、订单、商品、价格等模块。\n\n通过拆分可以将一个涉及面广、复杂度高的系统拆解为多个小模块，让各个团队单独负责并专项击破。拆分是架构设计大型复杂系统的第一步，对降低系统复杂性有着决定性的意义，它也是架构师的必备技能之一。\n\n在本讲，我会给出一个实际业务场景，手把手带你做一次完整的系统拆分，通过理论和实战两个层面，帮助你快速掌握这项可以有效降低系统复杂度的技能。\n\n\n为什么要做拆分\n\n人解决复杂问题的能力是有限的，当问题涉及面广、情况复杂时，自然会去寻找方法提升效率。我们的业务后台系统就是一个“复杂问题”，而解决“这个问题”的方法便是拆分——将复杂问题拆解为多个相对简单的小问题，分而治之、各个击破，这样做极大地提高了解决复杂问题的可能性和效率。\n\n以电商系统为例，建设一个支持千万用户同时使用、日均流量上亿的电商系统也是一个十分庞大、复杂、涉及面广的工程。至少需要上百名研发、产品、测试等不同职能的人员共建。想象一下，如果没有系统拆分，所有人聚集在一起，开会讨论需求和技术方案的场景。\n\n先不说别的，把所有人召集齐都是一项十分费时的事情，应该是一个顶级的项目经理才能做到。其次是沟通的效率，上百人一起开会，七嘴八舌，一天都得不出什么重要结论，更别说梳理出细节流程了。最后，在开发的时候，上百名研发使用同一个代码仓库，每天你至少需要花费几个小时在解决代码冲突的问题上。使用此方式推进项目，上线可能遥遥无期了。即使能够上线，线上质量也是堪忧。\n\n面对这样的情况，我们该如何解决呢？\n\n首先，应该是几个业务专家、技术架构一起对整个系统进行全面的梳理和分析。然后便是对系统进行拆分，将大系统按一定的规则拆分成多个小模块。注意，这里我多说一句，“一定的规则”便是我们前面所讲的“按照不同维度”。\n\n拆分后，上百人的产研测团队就可以认领工作了，各个团队安心处理自己模块内的工作（产品设计、代码开发等）。对于模块间需要交互的地方，每个团队出一个资深的产品和架构师进行沟通即可。沟通成本降低了，效率自然也就提升了。\n\n通过上述案例，可以看出拆分在大型系统开发中的重要作用。一个好的拆分能够降低各个模块间的耦合性，极大地降低效率消耗，提升系统成功的可能性。如果你立志成为架构师，那么就必须将此项重要技能收入囊中。\n\n何时拆分\n\n此外，一些系统在建设时并没有预计到最终会发展到什么量级，为了满足快速上线的要求，没有经过拆分就直接采用了单体架构的模式进行落地。对于此类系统，是不是需要立马做拆分呢？\n\n其实并不是。当单体架构存在以下 3 类问题时，建议考虑进行拆分。\n\n1. 系统常年处于多需求并行开发，导致代码维护成本太大\n\n如果一个系统变得非常庞大，它的需求及并行的需求就会非常多。每个并行需求都会有一个开发分支，当开发需求完成陆续上线，那么在代码合并时就会产生冲突，比如你写的一个功能块被别人改了、新增了一个类似的公共类等，此时就可以考虑进行系统拆分。\n\n2. 在开发一个需求时，花费几天时间阅读代码，而开发只要一半甚至更少的时间\n\n在一个过于庞大的系统里，如果你长期处于熟悉代码的时间和实际编写的时间配比不对等的情况，此时就应考虑进行系统拆分。因为信息过载了，你无法完全掌握此系统。如果不拆分，每次重新熟悉代码并进行修改，可能会导致 bug 频发，线上质量低下。\n\n经过拆分后，你只需负责你熟悉的小模块，其他部分依赖第三方接口即可，让更专业的人保证它的质量。\n\n3. 在一个需求上线前，需要召集上百人对齐上线风险和上线步骤\n\n对于上面的第二个问题，你可能会说，我找不同的人负责系统里的不同部分不就好了。这虽然可以解决熟悉的问题，但耦合度是解决不了的。一个需求由十个人开发一个系统和三波人开发三个系统，这期间的沟通成本、耦合度等是无法比拟的。想象一下，一屋子开会的人你一言我一语和确定好边界后，三波人单独开会，一定是后者更高效。\n\n拆分的前提条件\n\n如果你所负责的系统满足上述三个场景，我想你已经准备好大干一场了。但在开始拆分之前，我有几个点要提醒你。\n\n第一是团队和人员的准备。 拆分的主要原因是信息过载，因此在拆分后，对应的系统也要划分给新增的团队，而不是原有人员继续维护，这样只是换汤不换药，信息依然过载。亚马逊的 ceo 曾提出“两个比萨”理论——一个团队的人员能够吃下两个比萨刚好。因此拆分后，建议以三个人左右为单位进行组织和划分。\n\n第二是在进行拆分后，各个模块不在一个进程内，需要采用接口依赖的形式。此时，对于 rpc 框架及对应的监控、降级等中间件基础设施要求较高了。如果公司的中间件和基础设施跟不上，建议先将此加强再进行拆分，以免拆分后还要填此处留下的坑。\n\n\n如何进行拆分\n\n接下来我们再来看看到底如何进行拆分。\n\n其实拆分就和切蛋糕类似，将一整块蛋糕切分成多个小块的方法有很多。你可以横着切或者竖着切，不管怎么切，蛋糕最终都将被分成很多小块。只是选择不同的切法，最终得到的蛋糕形状不一样。同样架构的拆分也有很多方式，对一个业务系统采用不同的拆分方法将会得到不同的子模块。\n\n在上一讲中，我们采用了“目的性”这个维度，将后台业务系统拆分或者说归类为三大类，读服务、写服务和扣减服务。这里你可能会有疑问，拆分后可以得到三种类型的模块，难道所有的后台系统都只有这三个模块？\n\n\n\n图 1：电商后台拆分架构\n\n以上图 1 的电商后台拆分架构为例，电商后台一般包含用户模块、商品模块、促销模块、购物车模块、订单模块等。其实，这正好验证了我们前面提到的，架构拆分有很多方式，只是不同拆法得到的结果不一样。\n\n“目的性”是一种偏技术视角的拆分方式，而图 1 展示的则是一种偏业务视角的拆分方式。可以发现拆分后的模块和你平时购物的流程极为相似，比如，你在购物时，要先通过认证登录 app，再浏览商品、查看促销活动及价格，确认购买后添加购物车并提交订单。这种按用户使用流程进行拆分的方法叫作业务流拆分法。\n\n并没有哪一种架构拆分绝对正确，因为架构是论述题而不是选择题。在实战中，你需要针对不同复杂度的业务类型灵活选择。不管经过多少次重复拆分和组合，目标只有一个——降低系统复杂度、减少耦合提升效率。\n\n对于复杂的系统架构，先竖着切一刀，称为垂直拆分。经过垂直拆分后，如果系统还是太复杂，就可以横着再来一刀，称为水平拆分或者分层拆分。在实际场景中，你可以根据需求重复做垂直拆分或者水平拆分。每一次拆分的依据可以不一样，可以依据业务流程，也可以依据纯技术。\n\n虽没有绝对的架构拆分标准，但从我的经验来看，大型系统通常先采用两次垂直拆分再加一次水平拆分。这两次垂直拆分有一定的先后顺序，先按业务维度再按技术维度。接下来，我将以最近经常使用的微信读书作为分析案例，和你一起从零开始对一个陌生的后台架构进行拆分。\n\n首先，我们先来分析一下微信读书的业务流程，然后再开始第一步的垂直拆分。使用微信读书阅读大致经过以下几个步骤：\n\n 1. 注册并登录 app；\n\n 2. 在书城里查找你想要阅读的图书，并浏览书籍的版本目录和介绍；\n\n 3. 确定是你想要的书籍并且价格适合，就会产生购买；\n\n 4. 支付完成之后，开始阅读。\n\n为了方便你理解，我制作了一张微信读书业务流程图，如下所示：\n\n\n\n图 2：微信读书业务流程图\n\n结合前面的文字描述与图 2 的流程图展示之后，我想你应该知道第一次垂直拆分的结果了。\n\n 1. 注册和登录应该是用户模块。\n\n 2. 在微信读书里书籍属于售卖商品，因此浏览书籍称为商品模块。\n\n 3. 书籍价格展示区域称为价格模块或者叫促销模块，有些时候价格是根据运营节奏或者用户是否为会员等条件计算出来的，这种经过计算输出价格的区域叫促销模块。\n\n 4. 购买是订单模块。\n\n 5. 最后完成支付则是支付模块。\n\n 6. 支付完成后支持实际阅读的区域是阅读模块，它记录了我每次的阅读进度、书签、笔记等。\n\n至此，我们一起按照业务流程完成了对微信读书后台的第一次拆分，得到了微信读书的六大后台模块。因为第二次按技术维度的垂直拆分较通用，上述每个模块均可以按此进行拆分，所以这里我只选取用户模块和支付模块进行分析。\n\n用户模块对外会提供两个基本功能，一个是用户注册，另一个则是登录验证，可以称为查询，因为除了验证之外，app 里还显示了用户的名称及其他信息。按技术维度进行拆分时，可以将注册和修改归为写业务。\n\n除此之外均为读业务，包含验证、查询基本信息、查询用户是否为会员等。经过第二次拆分后，用户模块一分为二——用户读模块和用户写模块。按此套路，我们可以将用户读模块进一步拆分。这里只是讲解拆分的思想，并不是鼓励你一直拆分下去。拆分太细会出现多个模块，如果团队人手不够，即使利用“拆分”也达不到降低复杂度的目的。\n\n另外，支付模块通常会对外提供余额查询与支付扣减的能力，此处可以将支付模块分为额度查询模块和支付扣减模块，同样完成了支付模块的第二次技术维度的垂直划分。拆分结果如下图 3 所示：\n\n\n\n图 3：技术维度的垂直拆分架构\n\n至此，我们已经完成了两次垂直维度的拆分。拆分的结果与后台系统的三大类：读模块、写模块及扣减模块基本一致，只是本讲的模块都带上了具体的业务前缀。这里我再强调一点，任何技术都是服务于业务的，脱离业务的技术无法发挥它的价值。本专栏讲解时去掉了具体的业务前缀，不是不关注业务，而是希望你能够深入理解这些业务背后的通用点，从而更好地服务于业务。\n\n\n\n完成两次垂直拆分后，就可以做最后一步拆分了，即水平拆分或者叫作分层拆分。水平拆分的依据是按易变度或共性度 。经过水平拆分，上层的称为易变模块，下层的称为非易变模块。越靠下面的模块越稳定、越共性、越不易变化。\n\n拆分后，对于非易变的模块，我们只需要编写、修改一次或者零星几次即可，对于易变的模块则需要投入更多的人力去维护。因为易变与非易变模块已经拆开，易变模块进行需求改造对非易变模块基本上没有任何影响。下面我们以第二步垂直拆分形成的模块作为分层拆分的实战。\n\n经过第二步按技术维度的垂直拆分，形成了用户的读模块、写模块、任务模块等。在设计或者开发时，你会发现这些模块都会连接数据库或者其他存储。对于这些连接数据库的代码，基本都是对象映射，将入参的对象转换为数据库 er 格式的对象。\n\n如果是 java 应用，还会包含 mybatis 或者 hibernate 相关的数据库 orm 映射的脚手架代码，其他语言以此类推。这些通用的代码只编写一次即可形成一个模块，比如数据访问模块，可以供用户的读模块和写模块共同使用，这就是水平拆分的结果，它的上层是读写模块、下层为共性的数据访问模块。具体形式见下图 4：\n\n\n\n图 4：共性维度的水平拆分架构\n\n如果单独部署水平拆分得到的数据访问模块会因为网络、数据序列化等因素降低读写模块的性能。为了规避此问题，在实际应用中，可以将数据访问模块的代码单独一个工程，但在编译时以动态包的形式链接进用户读模块、用户写模块里，这样就两全其美了。\n\n至此我们一起完成了两次垂直拆分、一次水平拆分的架构拆分实战。在实战中，你可以根据需求选择比此次实践多或少的拆分。另外，架构和历史也是一样，分久必合合久必分，但在分分合合的过程中应遵循上述原则和手段。\n\n最后我想说，架构拆分不是完美无缺的，它也会存在一些问题，比如拆分后带来的分布式事务、调用链路变长、模块变多消耗机器变多等问题。针对这些问题，我将在模块五详细讲解。\n\n\n总结\n\n在本讲，我向你介绍了为什么要做服务架构的拆分以及哪些情况可以暂不进行拆分。我们再来复习一下系统拆分的几个主要原因。\n\n 1. 当需求不断叠加导致并行开发和上线时，通过拆分可以减少相互影响。\n\n 2. 当维护一个覆盖范围比较广的业务系统，从而导致研发人员业务专业度不够高时，通过拆分可以适当聚焦，提升专业度。\n\n 3. 当一个系统范围较广同时线上 bug 不断时，就需要适当拆分，逐个击破。\n\n在落地进行拆分时，有几个重要准则需要你牢牢记住。\n\n 1. 拆分是按维度逐层进行，从顶层逐步向下。在顶层按业务及业务流程进行垂直拆分，而不是按技术或其他。\n\n 2. 在此之后，对于拆分得到的具体模块，可以按读写分离、在线离线分离、快慢分离、场景分离等方式做进一步的水平拆分。\n\n 3. 在模块内部的垂直拆分完成之后，可以按易变与稳定、共性与非共性进行水平拆分。需要注意的是，第二步的垂直拆分和最后的水平拆分是交替进行的，并无非常清晰的边界和先手顺序。\n\n通过拆分我们得到了可以独自进行详细架构设计的读服务模块、写服务模块及扣减服务模块，你可以对各个类型的模块进行逐个击破了。\n\n最后，我再留给你一道思考题，你现在使用的是单体架构还是经过拆分的微服务架构？拆分维度是什么？可以在留言区写下按此维度拆分的原因，我会选取一位同学的内容做点评分析。\n\n这一讲就到这里，下一模块我们讲解如何构建一个高性能的读服务。实战之旅即将开始，你准备好了吗？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **用户9527：\n\n> “但在编译时以动态包的形式链接进用户读模块、用户写模块里，这样就两全其美了” 请教下，这句话信息含量很大，能再具体一下吗\n\n#     讲师回复：\n\n>     以java举例，就是把数据访问层编译为jar包，在读模块里，通过maven依赖上述的jar包。在部署时，数据访问层和读模块就在同一个进程里了，避免了网络开销等这些问题。\n\n# **用户7042：\n\n> 讲的真的很好，我们整体系统的架构也是做了一次垂直拆分和一次水平拆分，主要是业务复杂，并发方面还好。但是也渐渐的要进行第二次垂直拆分了，提升稳定性和性能优化\n\n# **普：\n\n> 写得真好，膜拜\n\n# **9790：\n\n> 总结描述：从why、when、how三个维度讲解拆分的必要性、时机和方法。拆分的目的是降低系统的维护成本和提高系统的可维护性，即所谓的高内聚低耦合。而一个拆分需要考虑新项目和已经存在的单体项目，新项目在设计之初就应该考虑如何拆分问题，而对于已经存在的单体项目，从三个点进行判断：系统常年处于多需求并行开发，导致代码维护成本太大；在开发一个需求时，花费几天时间阅读代码，而开发只要一半甚至更少的时间；在一个需求上线前，需要召集上百人对齐上线风险和上线步骤。这三个点的思考非常受益，感谢！重点还是在于如何拆分的问题：主要是两个拆分维度垂直拆分和水平拆分，老师讲解了非常通用的一个基本原则即按照业务拆分，读写扣减操作，共性非共性，灵活性稳定性进行的拆分。其中个人理解：前两者一般作为垂直拆分对象，而后两者作为水平拆分对象。关于当前项目：目前使用的是拆分后的微服务架构，拆分是按照业务和技术功能进行拆分的，同样是水平拆分与垂直拆分相结合。但个人理解并不是十分理想的，所以有一下问题。问题：1. 对于微服务架构的设计思想，是否需要强大的中间件支撑，而开源的中间件是否需要专门的团队维护。2. 拆分的粒度是如何把控的呢？感谢！\n\n#     讲师回复：\n\n>     问题一:需要有相关的中间件支撑，如果有相应的团队能够支持且使用该中间件的人数足够多，可以独立出来团队去维护。如果就只有你的团队使用，可以不着急一定要有团队维护了才采用该中间件。 问题二：拆分的粒度坦言说，没有绝对的答案。如果要有一个绝对可参考的标准，可以参考第二讲里的，基于人数的原则。拆分出来的一个模块，3~5个人可以维护过来。\n\n# **锐：\n\n> 目前公司的项目基本做到了两次垂直拆分和两次水平拆分，但是都没有真正的百分完全，始终有部分项目存在历史遗留问题。\n\n# **春：\n\n> 拆分容易，聚合就很讲究了，拆开的业务为了保证事务一致性，就要用到分布式事务了。拆分开的业务碰到有聚合数据的需求，是不是需要在拆分的业务基础上搭建聚合服务呢？\n\n#     讲师回复：\n\n>     需要。拆分是从设计者的角度看的，而从使用者角度来看是需要聚合层的。随着拆分的不断细化，微服务越来越多，使用者的使用成本就非常高了。\n\n# **用户7042：\n\n> 我们拆分的思路是领域驱动。也用的中台思想，讲讲中台架构呗？\n\n#     讲师回复：\n\n>     参考本专栏的最后一讲，会有中台相关的内容介绍\n\n# *庚：\n\n> 我们是微服务架构的，跟数据处理有关的业务。垂直一刀拆为用户模块，商品模块，认证模块，质量模块。再水平一刀把商品模块拆为业务模块，数据模块。\n\n# *华：\n\n> 数据访问层即使打成jar包，也要通过网络来访问数据库吧\n\n#     讲师回复：\n\n>     是的\n\n# **鑫：\n\n> 开脑洞啦，公司系统是微服务版本，拆分场景是以业务为导向，需求结合。\n\n# **峰：\n\n> 老师，读写模块和数据访问模块的拆分还是不明白，意思是把数据查询单独抽出来只进行数据的增删改查，然后业务模块处理组装数据？可以以go需要举例吗？特别不明白\n\n#     讲师回复：\n\n>     你的理解是对的，就是把增删改查单独形成一个模块，并独立部署，形成一个进程。业务模块在查询和写入数据时，都通过rpc调用这个单独的模块。其实，这个和语言没有太大的关系。\n\n# *旭：\n\n> 学到了\n\n# **运：\n\n> 目前系统采用微服务架构，按业务场景拆分成独立的微服务，各个业务对应的微服务职能明确，开发升级上线互不干扰。同时抽取公共服务调用层用于跨服务调用\n\n# 我：\n\n> 老师，关于数据层以动态包加载怎么做的\n\n#     讲师回复：\n\n>     在java中，就是把数据访问层的代码打包成jar文件，供上层的业务应用通过jar包方式进行访问，打包和集成可以依赖maven来完成。对于c/c++，在linux下可以将数据访问层编译为.so格式的动态包，供上层的业务应用内嵌使用，打包和集成可以依赖makefile来完成。\n\n# *亮：\n\n> 我觉得最主要的是 比如服务间调用如何保证事物一致性、效率、联通追踪",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何使用简洁的架构实现高性能读服务？",frontmatter:{title:"如何使用简洁的架构实现高性能读服务？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/935af1/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/04.%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%AE%80%E6%B4%81%E7%9A%84%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E8%AF%BB%E6%9C%8D%E5%8A%A1%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/04. 如何使用简洁的架构实现高性能读服务？.md",key:"v-7df21b81",path:"/pages/935af1/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4925}],headersStr:"精选评论",content:"在模块一我们采用“目的性”这一维度，将后台系统的架构归类为读业务、写业务及扣减类业务。在实际业务中，绝大多数情况都是读场景高于写场景，可以想象一下，你浏览多少次商品才会下一单？一天看多少条朋友圈、才会发几条朋友圈？\n\n因此，我将先从读业务入手，带你开启本专栏的实战之旅。具体包括读业务在实现上需要满足的功能特点、遵守的基本原则及常见的实现方案存在的优缺点。\n\n> 说明：读业务这个名词偏业务和产品，研发在做系统设计或日常沟通中，会采用偏技术实现的名词，如读接口或者读服务。在本讲的后续内容中，我统一用读服务代指读业务。\n\n\n读服务的功能实现要求\n\n读服务在实现流程上，基本上是纯粹地从存储中一次或者多次获取原始数据，进行简单的逻辑加工，或者直接返回给用户/前端业务系统。它是无状态的或者是无副作用的，也就是说每一次执行都不会在存储中记录数据或者修改数据，每一次读请求都和上一次无关。\n\n比如，打开资讯类 App，你会看到两类场景，一类是业务后台系统直接从存储中获取今日的新闻列表，另一类是推荐系统生成一个新闻推荐列表，给到业务前台系统并展示给用户。\n\n亦如在电商 App 里，首页展示的商品和促销等信息，是运营根据营销策略配置的，业务后台接收到读请求，然后直接去存储获取数据并进行加工后返回给业务前台系统。其他业务亦然，此处不再赘述。\n\n结合前面两讲和上述介绍，我们可以分析出读服务在实现上需要满足的功能要求，主要有以下 3 点。\n\n 1. 保证高可用；其实不管是不是读服务，都需要满足高可用。\n\n 2. 保证高性能。我先定义一个较大的指标，TP 999 要在 100ms 以内。比如你去浏览新闻和电商 App，如果首页打开得非常慢，体验一定非常差。\n\n 3. 支持的 QPS 非常高（如上万~百万的峰值 QPS）。因为大部分业务场景都是“读多写少”。\n\n针对这些技术功能性指标，下面将讲解如何实现。\n\n\n架构尽量不要分层\n\n在“02 讲”我们介绍了如何利用拆分降低系统架构复杂度，通过水平拆分将一些共性的、不易变的代码逻辑单独封装成一个模块对外服务。这样能够减少重复，提升效率。此时的读服务架构如下图 1 所示：\n\n\n\n图 1：分层架构的读服务\n\n但在实际的应用中，通过监控图可以发现此种架构下，读服务性能的平均值离 TP99 或 TP999 有较大的差距，通常在一倍以上。另外，性能的毛刺也比较多。产生这种情况有以下两个原因。\n\n * 一方面是因为采用分层架构之后，网络传输相比不分层的架构多了一倍。\n\n * 另一方面，读服务的业务逻辑都比较简单，性能主要消耗在网络传输上。因此，请求查询的数据越少，性能越好，假设为 10ms；数据多时，性能则较差，假设为 50ms。当叠加上分层架构，性能就会翻倍。比如数据少时，从 10ms 变成 20ms；数据多时，从 50ms 变成 100ms。分层后，数据的多与少带来的性能差距达到了 80ms，这也是产生毛刺差的原因。\n\n因此，为了提高查询的性能减少毛刺同时降低部署机器的数量，可以将水平拆分的数据访问层代码工程保留独立，但在实际编译时，直接编译到读服务里。以 Java 举例，直接将数据访问层编译为 JAR 包并由读服务进行依赖。这样在部署时，它们在同一个进程里，去掉网络传输升级后的架构如下图 2 所示：\n\n\n\n图 2：内嵌的读服务架构\n\n在实际的案例中，当进行此项升级后。性能有了较明显变化，TP999 基本降了一半，平均性能降了 20%~30% 。下图 3 展示了一个大致效果图，你可以感受一下：\n\n\n\n图 3：内嵌后的性能效果图\n\n上述优化的隐含原则是，读服务要尽可能和数据靠近，减少网络传输。此项原则其实已经应用在很多类似的场景里了。比如：\n\n 1. 现在很多浏览器都自带本地缓存的功能，你浏览一个网页后，在一段时间内再次访问时，此网页的数据就是从浏览器缓存里获取的，直观感觉就是网页打开速度非常快。\n\n 2. 另外 CDN 也是一样的道理，把你需要的数据推送到和你最近的机房里，缩短网络传输的距离。\n\n这两种场景里提升性能的方式又称为数据前置。但数据前置也会带来另一个问题——数据更新不及时。关于这块内容，我会在“04 讲”里详细介绍，并给出有效的解决方案。\n\n\n代码尽可能简单\n\n读服务的实现流程非常简单，为了方便你理解，这里我把读服务执行的大致流程画在了一张大图里，如下图 4 所示：\n\n\n\n图 4：读服务执行流程图\n\n结合图 4 所展示的内容，我们再来看一下读服务的执行步骤，接口在接受请求时：\n\n 1. 首先会将外部的入参解析成内部模型并进行校验；\n\n 2. 之后会根据具体的存储类型使用内部模型构建查询条件并请求对应的存储；\n\n 3. 获取到数据后，进行反序列化转换为内部模型；\n\n 4. 根据业务情况进行适当地处理；\n\n 5. 将处理后的数据转换为对外 SDK 的模型并返回。\n\n在上述流程里，有大量的模型映射，比如将外部的模型映射为代码中的内部模型、将内部模型映射为查询条件等。这些不同层次的模型，字段都差不多。为了提升映射效率，有时可能会借助一些框架对相同的字段进行自动化的转换。\n\n对于其他能够提升效率的地方，你可能也会引入一些框架。在读服务对于性能要求非常严格的情况下，要尽可能地减少引入框架。如果一定要引入，必须经过严格的压测。在实际的应用中，很多能够提升效率的框架性能都非常差。比如 Java 中的 Bean.copyProperties，它采用了反射的机制进行字段 copy，在数据量较大时，性能较低。\n\n另外，在读服务的处理链路上，为了方便排查问题，经常会直接将请求的入参及从存储中获取的数据，使用JSON进行序列化为字符串，并进行日志打印。这种粗暴的方式，对性能也会有非常大的消耗，建议不要直接全量序列化，而是精细化地按需打印。\n\n最后。对于读取的内容要在存储处按需取，而不是全量取回后再在服务内部进行过滤。如果存储为 MySQL，则不要使用 select *，需要手动指定你要查询的字段。如果存储为 Redis，则使用 Redis 的 hash 结构存储数据，因为 hash 结构可以让你在查询时指定需要返回哪些字段。其他存储结构，如 ElasticSearch 等亦然。\n\n\n存储的选型和架构\n\n读服务最主要依赖的中间件是存储，因此存储的性能很大程度上决定了读服务的性能。对于 MySQL、HBase等数据库，即使使用分库分表、读写分离、索引优化等手段，在并发量大时，性能也很难达到 200ms 以内。\n\n为了提升性能，实战中的架构通常选用基于内存的、性能更好的 Redis 作为主存储，MySQL 作为兜底来构建，如下图 5 所示的架构：\n\n\n\n图 5：缓存+数据库的读服务架构\n\n此架构称为懒加载模式。在初始的时候，所有数据都存储在数据库中。当读服务接受请求时，会先去缓存中查询数据，如果没有查询到数据，就会降级到数据库中查询，并将查询结果保存在 Redis 中，以供下一次请求进行查询。保存在 Redis 中的数据会设置一个过期时间，防止数据库的数据变更了，请求还一直读取缓存中的脏数据。\n\n上述的架构设计简单清晰且实现成本较低，但还存在一些潜在的问题，不能满足本讲第一小节里提到的高可用及完全高性能的要求。主要有以下几大类问题：\n\n1. 存在缓存穿透的风险\n\n如果恶意请求不断使用缓存中不存在的数据发送请求，就会导致该请求每次都会被降级到数据库中。因为数据库能够支持的并发有限，如果请求量很大，可能会把数据库打挂，进而引起读服务不可用。这也就不满足高可用这个要求。\n\n针对数据库中没有的数据，可以在缓存中设置一个占位符。在第二次请求处理时，读取缓存中的占位符即可识别数据库中没有此数据，然后直接返回给业务前台系统即可。\n\n使用占位符虽然解决了穿透的问题，但也带来了另外一个问题。如果恶意请求不断变换请求的条件，同时这些条件对应的数据在数据库中均不存在，那么缓存中存储的表示无数据的占位符也会把整个缓存撑爆，进而导致有效数据被缓存清理策略清除或者整个读服务宕机。\n\n对于此种恶意请求，就需要在业务上着手处理。对于请求的参数可以内置一些 token 或者一些验证数据，在读服务中前置进行校验并拦截，而不是透传到缓存或数据库中。\n\n2. 缓存集中过期导致雪崩\n\n对存储在缓存中的数据设置过期时间是为了定期获取数据库中的变更，但如果设置不合理，可能会导致缓存集中过期，进而所有的读请求都会因缓存未命中，而直接请求到数据库。因缓存支持的量级至少是数据库的十倍以上，此类瞬间高并发的流量会直接将数据库打挂，进而宕机。\n\n对于数据库的过期时间，可以在设置时进行加盐操作。假设原先统一是 2 个小时过期，设置时根据随机算法在一个区间内获取一个随机值，在 2 个小时的过期时间上再加上此随机值，这就做到了各个缓存的过期时间不一致，同时过期的缓存数量最可控。\n\n3. 懒加载无法感知实时变更\n\n在缓存中设置过期时间，虽然可以让用户感知到数据的变更。但感知并不是实时的，会有一定延迟。在某些对于数据变更不敏感的场景是可以的，比如编辑新发布了一个新闻，但你没有看到，因为你都不知道编辑新发布了一个新闻。\n\n如果想要做到实时看到数据的变更，可以将架构升级。升级后的架构如下图 6 所示：\n\n\n\n图 6：主动推送变更的架构\n\n在每次修改完数据之后，主动将数据更新至缓存里。此种方案下，缓存里的数据均和数据库保持一致。\n\n但在细节上，还是存在一些问题。如果你修改完了数据库再更新缓存，在异常情况下，可能出现数据库更新成功了，但缓存更新失败了的情况。因为数据库和缓存是两个存储，如果没有分布式事务的机制，缓存更新失败了，数据库的数据是不会回滚的。此时，缓存和数据库中的数据依然不一致，因此这个方案并没有完美解决问题。如果先更新缓存，再更新数据库，同样会因为没有分布式事务的保障，出现缓存中存在脏数据的问题。\n\n另外，在更新数据库后主动更新缓存的模式，在实际的实施层面很容易出现遗漏。因为你需要在所有更新数据库的地方都加上主动更新缓存的代码，当开发人员不断变更时，很容易出现遗漏的情况，比如在某一个需求里，开发人员只更新了数据库而没有更新缓存。\n\n除了容易遗漏之外，在所有更新数据库的地方，都利用缓存和数据库的分布式事务来保证数据完全一致的成本较高，在实际工作中，成本也是一个必须要考虑的问题。这里做一个预告，我将在 “04 讲”介绍一种更简单的方式来解决此遗漏问题。\n\n4. 懒加载无法摆脱毛刺的困扰\n\n使用懒加载的缓存过期方案，还有一个无法避免的问题，就是性能毛刺。当缓存过期时，读服务的请求都会穿透到数据库中，对于穿透请求的性能和使用缓存的性能差距非常大，时常是毫秒和秒级别的差异。\n\n大部分普通业务场景可以容忍此问题，但在一些对性能要求极高的场景里，比如 App 首页，毛刺问题仍需重视和解决。关于此问题的解决方法，我将放在“04 讲”进行讲解。\n\n至此，懒加载架构的四个问题及对应的潜在解决方案已讲解完毕。虽然懒加载架构存在一些问题，但在实际应用中，此方案及其变种方案因为实现简单、成本低，仍是使用较多的解决方案。\n\n\n总结\n\n在本讲里，我们介绍了读服务在实现时应该满足的技术功能性要求，由此确定了读服务实现时应该满足的目标——应该遵守两个基本原则：架构尽量不要分层、代码尽可能简单。在此原则之上，我们提供了一个在实战中常见的架构方案，指出了此方案存在的四点不足，并提供了相对应的应对方案。\n\n在理解了上述的方案后，现在我给你留一道思考题。你所负责过的或者你公司里的读服务架构和本讲的架构有差异吗？对于上述的几个问题，你是如何应对的？欢迎在留言区留下你的想法，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，下一讲我们将介绍 04 |如何利用全量缓存打造毫秒级的读服务？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **3961：\n\n> 两大原则： 减少分层，简单代码懒加载问题： 缓存穿透，雪崩，感知实时更新，性能毛刺\n\n# *西：\n\n> 对于此种恶意请求，就需要在业务上着手处理。对于请求的参数可以内置一些 token 或者一些验证数据，在读服务中前置进行校验并拦截，而不是透传到缓存或数据库中。老师你好，这句话不是很理解，这里说的token具体指什么呢？是用户登陆认证后的token吗？\n\n#     讲师回复：\n\n>     这里的token是前端计算出来的或者从机器上获取的，它可以是用户的ip、调用方的网卡mac地址。通过这些唯一标示，可以识别是不是同一个调用方在不断变换数据，恶意刷新数据。\n\n# **鑫：\n\n> 基础数据使用懒加载，使用消息队列同步数据。老师我想问下占位符，如何解决数据库跌机？\n\n#     讲师回复：\n\n>     宕机之后，再次加载一次占位符数据即可。也只会加载一次\n\n# **棚：\n\n> 赞\n\n# **9564：\n\n> 不会存在缓存击穿的情况么？\n\n#     讲师回复：\n\n>     04讲里会有如何避免缓存穿透，可以参考阅读\n\n# **义：\n\n> 为啥不能分层,这个和网上答案都一样\n\n#     讲师回复：\n\n>     是读服务不要分层，并不是所有的业务都不要分层。 分层的目的是降低逻辑复杂度。但读服务的业务逻辑非常简单，没有太大必要进行分层。其次，分层会增大网络传输，降低接口性能，且读服务除了业务之外，最关注的点之一是性能，因此建议在读服务中可以把读服务去掉。其它业务类型视复杂度进行分层的架构设计\n\n# **烽：\n\n> 基于这些指标的考量，前提还是需要有一套性能监控工具，基于目前公司的业务好像还没有很多的落实。任重道远😀\n\n# *庚：\n\n> 性能优化的本质是减少不必要的数据拷贝。\n\n# *庚：\n\n> 大道至简，但是系统设计的难度也会更大。\n\n#     讲师回复：\n\n>     将一个难度大的系统设计简单、可靠。便是架构设计的主要目的，也是考验架构能力时候。架构能力需要不断历练、学习和总结。\n\n# **乐：\n\n> 架构不要分层，不太清楚什么意思(;｀O´)o\n\n#     讲师回复：\n\n>     在没有特别充足的理由时，可以不用将一个进程拆分成两个通过RPC通信的独立进程。因为这会增加网络通信、以及维护成本等。\n\n# **思：\n\n> 妙啊！！！学到了！\n\n#     编辑回复：\n\n>     给你点个赞",normalizedContent:"在模块一我们采用“目的性”这一维度，将后台系统的架构归类为读业务、写业务及扣减类业务。在实际业务中，绝大多数情况都是读场景高于写场景，可以想象一下，你浏览多少次商品才会下一单？一天看多少条朋友圈、才会发几条朋友圈？\n\n因此，我将先从读业务入手，带你开启本专栏的实战之旅。具体包括读业务在实现上需要满足的功能特点、遵守的基本原则及常见的实现方案存在的优缺点。\n\n> 说明：读业务这个名词偏业务和产品，研发在做系统设计或日常沟通中，会采用偏技术实现的名词，如读接口或者读服务。在本讲的后续内容中，我统一用读服务代指读业务。\n\n\n读服务的功能实现要求\n\n读服务在实现流程上，基本上是纯粹地从存储中一次或者多次获取原始数据，进行简单的逻辑加工，或者直接返回给用户/前端业务系统。它是无状态的或者是无副作用的，也就是说每一次执行都不会在存储中记录数据或者修改数据，每一次读请求都和上一次无关。\n\n比如，打开资讯类 app，你会看到两类场景，一类是业务后台系统直接从存储中获取今日的新闻列表，另一类是推荐系统生成一个新闻推荐列表，给到业务前台系统并展示给用户。\n\n亦如在电商 app 里，首页展示的商品和促销等信息，是运营根据营销策略配置的，业务后台接收到读请求，然后直接去存储获取数据并进行加工后返回给业务前台系统。其他业务亦然，此处不再赘述。\n\n结合前面两讲和上述介绍，我们可以分析出读服务在实现上需要满足的功能要求，主要有以下 3 点。\n\n 1. 保证高可用；其实不管是不是读服务，都需要满足高可用。\n\n 2. 保证高性能。我先定义一个较大的指标，tp 999 要在 100ms 以内。比如你去浏览新闻和电商 app，如果首页打开得非常慢，体验一定非常差。\n\n 3. 支持的 qps 非常高（如上万~百万的峰值 qps）。因为大部分业务场景都是“读多写少”。\n\n针对这些技术功能性指标，下面将讲解如何实现。\n\n\n架构尽量不要分层\n\n在“02 讲”我们介绍了如何利用拆分降低系统架构复杂度，通过水平拆分将一些共性的、不易变的代码逻辑单独封装成一个模块对外服务。这样能够减少重复，提升效率。此时的读服务架构如下图 1 所示：\n\n\n\n图 1：分层架构的读服务\n\n但在实际的应用中，通过监控图可以发现此种架构下，读服务性能的平均值离 tp99 或 tp999 有较大的差距，通常在一倍以上。另外，性能的毛刺也比较多。产生这种情况有以下两个原因。\n\n * 一方面是因为采用分层架构之后，网络传输相比不分层的架构多了一倍。\n\n * 另一方面，读服务的业务逻辑都比较简单，性能主要消耗在网络传输上。因此，请求查询的数据越少，性能越好，假设为 10ms；数据多时，性能则较差，假设为 50ms。当叠加上分层架构，性能就会翻倍。比如数据少时，从 10ms 变成 20ms；数据多时，从 50ms 变成 100ms。分层后，数据的多与少带来的性能差距达到了 80ms，这也是产生毛刺差的原因。\n\n因此，为了提高查询的性能减少毛刺同时降低部署机器的数量，可以将水平拆分的数据访问层代码工程保留独立，但在实际编译时，直接编译到读服务里。以 java 举例，直接将数据访问层编译为 jar 包并由读服务进行依赖。这样在部署时，它们在同一个进程里，去掉网络传输升级后的架构如下图 2 所示：\n\n\n\n图 2：内嵌的读服务架构\n\n在实际的案例中，当进行此项升级后。性能有了较明显变化，tp999 基本降了一半，平均性能降了 20%~30% 。下图 3 展示了一个大致效果图，你可以感受一下：\n\n\n\n图 3：内嵌后的性能效果图\n\n上述优化的隐含原则是，读服务要尽可能和数据靠近，减少网络传输。此项原则其实已经应用在很多类似的场景里了。比如：\n\n 1. 现在很多浏览器都自带本地缓存的功能，你浏览一个网页后，在一段时间内再次访问时，此网页的数据就是从浏览器缓存里获取的，直观感觉就是网页打开速度非常快。\n\n 2. 另外 cdn 也是一样的道理，把你需要的数据推送到和你最近的机房里，缩短网络传输的距离。\n\n这两种场景里提升性能的方式又称为数据前置。但数据前置也会带来另一个问题——数据更新不及时。关于这块内容，我会在“04 讲”里详细介绍，并给出有效的解决方案。\n\n\n代码尽可能简单\n\n读服务的实现流程非常简单，为了方便你理解，这里我把读服务执行的大致流程画在了一张大图里，如下图 4 所示：\n\n\n\n图 4：读服务执行流程图\n\n结合图 4 所展示的内容，我们再来看一下读服务的执行步骤，接口在接受请求时：\n\n 1. 首先会将外部的入参解析成内部模型并进行校验；\n\n 2. 之后会根据具体的存储类型使用内部模型构建查询条件并请求对应的存储；\n\n 3. 获取到数据后，进行反序列化转换为内部模型；\n\n 4. 根据业务情况进行适当地处理；\n\n 5. 将处理后的数据转换为对外 sdk 的模型并返回。\n\n在上述流程里，有大量的模型映射，比如将外部的模型映射为代码中的内部模型、将内部模型映射为查询条件等。这些不同层次的模型，字段都差不多。为了提升映射效率，有时可能会借助一些框架对相同的字段进行自动化的转换。\n\n对于其他能够提升效率的地方，你可能也会引入一些框架。在读服务对于性能要求非常严格的情况下，要尽可能地减少引入框架。如果一定要引入，必须经过严格的压测。在实际的应用中，很多能够提升效率的框架性能都非常差。比如 java 中的 bean.copyproperties，它采用了反射的机制进行字段 copy，在数据量较大时，性能较低。\n\n另外，在读服务的处理链路上，为了方便排查问题，经常会直接将请求的入参及从存储中获取的数据，使用json进行序列化为字符串，并进行日志打印。这种粗暴的方式，对性能也会有非常大的消耗，建议不要直接全量序列化，而是精细化地按需打印。\n\n最后。对于读取的内容要在存储处按需取，而不是全量取回后再在服务内部进行过滤。如果存储为 mysql，则不要使用 select *，需要手动指定你要查询的字段。如果存储为 redis，则使用 redis 的 hash 结构存储数据，因为 hash 结构可以让你在查询时指定需要返回哪些字段。其他存储结构，如 elasticsearch 等亦然。\n\n\n存储的选型和架构\n\n读服务最主要依赖的中间件是存储，因此存储的性能很大程度上决定了读服务的性能。对于 mysql、hbase等数据库，即使使用分库分表、读写分离、索引优化等手段，在并发量大时，性能也很难达到 200ms 以内。\n\n为了提升性能，实战中的架构通常选用基于内存的、性能更好的 redis 作为主存储，mysql 作为兜底来构建，如下图 5 所示的架构：\n\n\n\n图 5：缓存+数据库的读服务架构\n\n此架构称为懒加载模式。在初始的时候，所有数据都存储在数据库中。当读服务接受请求时，会先去缓存中查询数据，如果没有查询到数据，就会降级到数据库中查询，并将查询结果保存在 redis 中，以供下一次请求进行查询。保存在 redis 中的数据会设置一个过期时间，防止数据库的数据变更了，请求还一直读取缓存中的脏数据。\n\n上述的架构设计简单清晰且实现成本较低，但还存在一些潜在的问题，不能满足本讲第一小节里提到的高可用及完全高性能的要求。主要有以下几大类问题：\n\n1. 存在缓存穿透的风险\n\n如果恶意请求不断使用缓存中不存在的数据发送请求，就会导致该请求每次都会被降级到数据库中。因为数据库能够支持的并发有限，如果请求量很大，可能会把数据库打挂，进而引起读服务不可用。这也就不满足高可用这个要求。\n\n针对数据库中没有的数据，可以在缓存中设置一个占位符。在第二次请求处理时，读取缓存中的占位符即可识别数据库中没有此数据，然后直接返回给业务前台系统即可。\n\n使用占位符虽然解决了穿透的问题，但也带来了另外一个问题。如果恶意请求不断变换请求的条件，同时这些条件对应的数据在数据库中均不存在，那么缓存中存储的表示无数据的占位符也会把整个缓存撑爆，进而导致有效数据被缓存清理策略清除或者整个读服务宕机。\n\n对于此种恶意请求，就需要在业务上着手处理。对于请求的参数可以内置一些 token 或者一些验证数据，在读服务中前置进行校验并拦截，而不是透传到缓存或数据库中。\n\n2. 缓存集中过期导致雪崩\n\n对存储在缓存中的数据设置过期时间是为了定期获取数据库中的变更，但如果设置不合理，可能会导致缓存集中过期，进而所有的读请求都会因缓存未命中，而直接请求到数据库。因缓存支持的量级至少是数据库的十倍以上，此类瞬间高并发的流量会直接将数据库打挂，进而宕机。\n\n对于数据库的过期时间，可以在设置时进行加盐操作。假设原先统一是 2 个小时过期，设置时根据随机算法在一个区间内获取一个随机值，在 2 个小时的过期时间上再加上此随机值，这就做到了各个缓存的过期时间不一致，同时过期的缓存数量最可控。\n\n3. 懒加载无法感知实时变更\n\n在缓存中设置过期时间，虽然可以让用户感知到数据的变更。但感知并不是实时的，会有一定延迟。在某些对于数据变更不敏感的场景是可以的，比如编辑新发布了一个新闻，但你没有看到，因为你都不知道编辑新发布了一个新闻。\n\n如果想要做到实时看到数据的变更，可以将架构升级。升级后的架构如下图 6 所示：\n\n\n\n图 6：主动推送变更的架构\n\n在每次修改完数据之后，主动将数据更新至缓存里。此种方案下，缓存里的数据均和数据库保持一致。\n\n但在细节上，还是存在一些问题。如果你修改完了数据库再更新缓存，在异常情况下，可能出现数据库更新成功了，但缓存更新失败了的情况。因为数据库和缓存是两个存储，如果没有分布式事务的机制，缓存更新失败了，数据库的数据是不会回滚的。此时，缓存和数据库中的数据依然不一致，因此这个方案并没有完美解决问题。如果先更新缓存，再更新数据库，同样会因为没有分布式事务的保障，出现缓存中存在脏数据的问题。\n\n另外，在更新数据库后主动更新缓存的模式，在实际的实施层面很容易出现遗漏。因为你需要在所有更新数据库的地方都加上主动更新缓存的代码，当开发人员不断变更时，很容易出现遗漏的情况，比如在某一个需求里，开发人员只更新了数据库而没有更新缓存。\n\n除了容易遗漏之外，在所有更新数据库的地方，都利用缓存和数据库的分布式事务来保证数据完全一致的成本较高，在实际工作中，成本也是一个必须要考虑的问题。这里做一个预告，我将在 “04 讲”介绍一种更简单的方式来解决此遗漏问题。\n\n4. 懒加载无法摆脱毛刺的困扰\n\n使用懒加载的缓存过期方案，还有一个无法避免的问题，就是性能毛刺。当缓存过期时，读服务的请求都会穿透到数据库中，对于穿透请求的性能和使用缓存的性能差距非常大，时常是毫秒和秒级别的差异。\n\n大部分普通业务场景可以容忍此问题，但在一些对性能要求极高的场景里，比如 app 首页，毛刺问题仍需重视和解决。关于此问题的解决方法，我将放在“04 讲”进行讲解。\n\n至此，懒加载架构的四个问题及对应的潜在解决方案已讲解完毕。虽然懒加载架构存在一些问题，但在实际应用中，此方案及其变种方案因为实现简单、成本低，仍是使用较多的解决方案。\n\n\n总结\n\n在本讲里，我们介绍了读服务在实现时应该满足的技术功能性要求，由此确定了读服务实现时应该满足的目标——应该遵守两个基本原则：架构尽量不要分层、代码尽可能简单。在此原则之上，我们提供了一个在实战中常见的架构方案，指出了此方案存在的四点不足，并提供了相对应的应对方案。\n\n在理解了上述的方案后，现在我给你留一道思考题。你所负责过的或者你公司里的读服务架构和本讲的架构有差异吗？对于上述的几个问题，你是如何应对的？欢迎在留言区留下你的想法，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，下一讲我们将介绍 04 |如何利用全量缓存打造毫秒级的读服务？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **3961：\n\n> 两大原则： 减少分层，简单代码懒加载问题： 缓存穿透，雪崩，感知实时更新，性能毛刺\n\n# *西：\n\n> 对于此种恶意请求，就需要在业务上着手处理。对于请求的参数可以内置一些 token 或者一些验证数据，在读服务中前置进行校验并拦截，而不是透传到缓存或数据库中。老师你好，这句话不是很理解，这里说的token具体指什么呢？是用户登陆认证后的token吗？\n\n#     讲师回复：\n\n>     这里的token是前端计算出来的或者从机器上获取的，它可以是用户的ip、调用方的网卡mac地址。通过这些唯一标示，可以识别是不是同一个调用方在不断变换数据，恶意刷新数据。\n\n# **鑫：\n\n> 基础数据使用懒加载，使用消息队列同步数据。老师我想问下占位符，如何解决数据库跌机？\n\n#     讲师回复：\n\n>     宕机之后，再次加载一次占位符数据即可。也只会加载一次\n\n# **棚：\n\n> 赞\n\n# **9564：\n\n> 不会存在缓存击穿的情况么？\n\n#     讲师回复：\n\n>     04讲里会有如何避免缓存穿透，可以参考阅读\n\n# **义：\n\n> 为啥不能分层,这个和网上答案都一样\n\n#     讲师回复：\n\n>     是读服务不要分层，并不是所有的业务都不要分层。 分层的目的是降低逻辑复杂度。但读服务的业务逻辑非常简单，没有太大必要进行分层。其次，分层会增大网络传输，降低接口性能，且读服务除了业务之外，最关注的点之一是性能，因此建议在读服务中可以把读服务去掉。其它业务类型视复杂度进行分层的架构设计\n\n# **烽：\n\n> 基于这些指标的考量，前提还是需要有一套性能监控工具，基于目前公司的业务好像还没有很多的落实。任重道远😀\n\n# *庚：\n\n> 性能优化的本质是减少不必要的数据拷贝。\n\n# *庚：\n\n> 大道至简，但是系统设计的难度也会更大。\n\n#     讲师回复：\n\n>     将一个难度大的系统设计简单、可靠。便是架构设计的主要目的，也是考验架构能力时候。架构能力需要不断历练、学习和总结。\n\n# **乐：\n\n> 架构不要分层，不太清楚什么意思(;｀o´)o\n\n#     讲师回复：\n\n>     在没有特别充足的理由时，可以不用将一个进程拆分成两个通过rpc通信的独立进程。因为这会增加网络通信、以及维护成本等。\n\n# **思：\n\n> 妙啊！！！学到了！\n\n#     编辑回复：\n\n>     给你点个赞",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"写好文档检查清单",frontmatter:{title:"写好文档检查清单",date:"2022-11-29T15:39:04.000Z",permalink:"/pages/bed5b4/"},regularPath:"/60.%E8%BD%AF%E6%8A%80%E8%83%BD/40.%E5%A5%BD%E6%96%87%E6%A1%A3%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/10.%E5%86%99%E5%A5%BD%E6%96%87%E6%A1%A3%E6%A3%80%E6%9F%A5%E6%B8%85%E5%8D%95.html",relativePath:"60.软技能/40.好文档最佳实践/10.写好文档检查清单.md",key:"v-4e03753c",path:"/pages/bed5b4/",headers:[{level:2,title:"1. Why - 目标",slug:"_1-why-目标",normalizedTitle:"1. why - 目标",charIndex:48},{level:2,title:"2. Who - 读者",slug:"_2-who-读者",normalizedTitle:"2. who - 读者",charIndex:151},{level:2,title:"3. How - 结构",slug:"_3-how-结构",normalizedTitle:"3. how - 结构",charIndex:391},{level:2,title:"4. What - 内容",slug:"_4-what-内容",normalizedTitle:"4. what - 内容",charIndex:506},{level:3,title:"4.1 突出重点",slug:"_4-1-突出重点",normalizedTitle:"4.1 突出重点",charIndex:523},{level:3,title:"4.2 精简内容",slug:"_4-2-精简内容",normalizedTitle:"4.2 精简内容",charIndex:681},{level:3,title:"4.3 清晰表达",slug:"_4-3-清晰表达",normalizedTitle:"4.3 清晰表达",charIndex:866},{level:3,title:"4.4 格式检查",slug:"_4-4-格式检查",normalizedTitle:"4.4 格式检查",charIndex:988},{level:3,title:"4.5 不断迭代",slug:"_4-5-不断迭代",normalizedTitle:"4.5 不断迭代",charIndex:1093}],headersStr:"1. Why - 目标 2. Who - 读者 3. How - 结构 4. What - 内容 4.1 突出重点 4.2 精简内容 4.3 清晰表达 4.4 格式检查 4.5 不断迭代",content:'适用场景\n\n * 写文档前，参考以下问题梳理思路\n * 写文档后，结合以下清单自查优化\n\n\n# 1. Why - 目标\n\n问题              答案\n要解决的核心问题是什么？    「一句话说清楚核心问题」\n我的核心观点和建议是什么？   「我的核心判断是什么？不超过 3 个要点」\n\n\n# 2. Who - 读者\n\n问题            答案\n目标读者有谁？       「谁是最重要的读者」\nTa 们知道什么？     「有哪些背景信息，我需要让他们也提前理解？」 「他们可能知道哪些额外信息，可对我提供帮助？」\n他们最关心的点是什么？   「每个角色，提炼最关心的点，如：1. 决策者：方案全面性、ROI、关键建议与风险 2.\n              协作者：对业务有什么影响和收益，需要我配合做什么？ 3. 信息同步对象：知道最关键的信息即可」\n\n\n# 3. How - 结构\n\n问题            答案\n文档整体结构是否清晰？   「参考金字塔原理来构建」、「文档目录一目了然，可以快速定位重点」\n关键结论是否前置？     「最关键的结论前置在前面，再展开细节」\n\n\n# 4. What - 内容\n\n\n# 4.1 突出重点\n\n问题                答案\n关键结论是否前置          「最关键的结论在前面，再展开细节」\n段落是否要醒目？          「可使用加粗、高亮等突出重点」\n复杂问题，可否用图标清晰表达？   「一图胜千言，这个问题，用流程图、表格图标画一下，会不会更好理解？」\n\n\n# 4.2 精简内容\n\n问题                       答案\n有哪些信息读者已经知道了，可以不写或者简写？   「能少则少」\n是否可以提炼为几个要点？             「人的记忆条目是 7（±2）条，归类之后会减少人的记忆成本」\n如果去掉这部分，是否会明显出现信息的减损？    「如果答案不是一个肯定的 Yes，那就是一个否定的 No」\n\n\n# 4.3 清晰表达\n\n问题               答案\n是否用了一些黑话和高深词汇？   「一个简单的参考标准:"新同学能读懂吗？"」\n读者可能会有哪些疑问？      「读者看到第一句话所产生的疑问，下一句话就要给 ta 答案」\n\n\n# 4.4 格式检查\n\n问题     答案\n对齐     「标题、正文、图片、表格对齐」\n错别字    中英文都检查下，避免同音词、拼写错误\n标点符号   大小写、全角/半角标点、单位保持统一、数字小数点\n\n\n# 4.5 不断迭代\n\n问题                     答案\n是否可以提前发给同事看看？          「收集下其他人的反馈？」\n公司内、互联网上，有哪些好文档可以学习？   「他们写得好的原因是什么？提炼下思路复用」\n上次的文档，大家给过哪些反馈？        同一个坑，不掉两次',normalizedContent:'适用场景\n\n * 写文档前，参考以下问题梳理思路\n * 写文档后，结合以下清单自查优化\n\n\n# 1. why - 目标\n\n问题              答案\n要解决的核心问题是什么？    「一句话说清楚核心问题」\n我的核心观点和建议是什么？   「我的核心判断是什么？不超过 3 个要点」\n\n\n# 2. who - 读者\n\n问题            答案\n目标读者有谁？       「谁是最重要的读者」\nta 们知道什么？     「有哪些背景信息，我需要让他们也提前理解？」 「他们可能知道哪些额外信息，可对我提供帮助？」\n他们最关心的点是什么？   「每个角色，提炼最关心的点，如：1. 决策者：方案全面性、roi、关键建议与风险 2.\n              协作者：对业务有什么影响和收益，需要我配合做什么？ 3. 信息同步对象：知道最关键的信息即可」\n\n\n# 3. how - 结构\n\n问题            答案\n文档整体结构是否清晰？   「参考金字塔原理来构建」、「文档目录一目了然，可以快速定位重点」\n关键结论是否前置？     「最关键的结论前置在前面，再展开细节」\n\n\n# 4. what - 内容\n\n\n# 4.1 突出重点\n\n问题                答案\n关键结论是否前置          「最关键的结论在前面，再展开细节」\n段落是否要醒目？          「可使用加粗、高亮等突出重点」\n复杂问题，可否用图标清晰表达？   「一图胜千言，这个问题，用流程图、表格图标画一下，会不会更好理解？」\n\n\n# 4.2 精简内容\n\n问题                       答案\n有哪些信息读者已经知道了，可以不写或者简写？   「能少则少」\n是否可以提炼为几个要点？             「人的记忆条目是 7（±2）条，归类之后会减少人的记忆成本」\n如果去掉这部分，是否会明显出现信息的减损？    「如果答案不是一个肯定的 yes，那就是一个否定的 no」\n\n\n# 4.3 清晰表达\n\n问题               答案\n是否用了一些黑话和高深词汇？   「一个简单的参考标准:"新同学能读懂吗？"」\n读者可能会有哪些疑问？      「读者看到第一句话所产生的疑问，下一句话就要给 ta 答案」\n\n\n# 4.4 格式检查\n\n问题     答案\n对齐     「标题、正文、图片、表格对齐」\n错别字    中英文都检查下，避免同音词、拼写错误\n标点符号   大小写、全角/半角标点、单位保持统一、数字小数点\n\n\n# 4.5 不断迭代\n\n问题                     答案\n是否可以提前发给同事看看？          「收集下其他人的反馈？」\n公司内、互联网上，有哪些好文档可以学习？   「他们写得好的原因是什么？提炼下思路复用」\n上次的文档，大家给过哪些反馈？        同一个坑，不掉两次',charsets:{cjk:!0},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"如何利用全量缓存打造毫秒级的读服务？",frontmatter:{title:"如何利用全量缓存打造毫秒级的读服务？",date:"2023-02-22T16:12:18.000Z",permalink:"/pages/e69306/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/05.%20%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%85%A8%E9%87%8F%E7%BC%93%E5%AD%98%E6%89%93%E9%80%A0%E6%AF%AB%E7%A7%92%E7%BA%A7%E7%9A%84%E8%AF%BB%E6%9C%8D%E5%8A%A1%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/05. 如何利用全量缓存打造毫秒级的读服务？.md",key:"v-16f5ccf4",path:"/pages/e69306/",headersStr:null,content:"上一讲我们介绍了一个简单易实现，且成本较低的高性能读服务方案及其升级方案，但其中仍有两个问题暂未完全解决：\n\n * 第一个问题是为了保证缓存更新实时性而带来的分布式事务的问题；\n\n * 第二个问题是懒加载导致的毛刺问题。\n\n在本讲里，我将针对上述两个问题，和你一起利用全量缓存打造一个无毛刺、平均性能在 100ms 以内的读服务。\n\n\n全量缓存的基本架构\n\n全量缓存是指将数据库中的所有数据都存储在缓存中，同时在缓存中不设置过期时间的一种实现方式，此实现的架构如下图 1 所示：\n\n\n\n图 1：全量缓存的架构图\n\n因为所有数据都存储在缓存里，读服务在查询时不会再降级到数据库里，所有的请求都完全依赖缓存。此时，因降级到数据库导致的毛刺问题就解决了。\n\n但全量缓存并没有解决更新时的分布式事务问题，反而把问题放大了。因为全量缓存对数据更新要求更加严格，要求所有数据库已有数据和实时更新的数据必须完全同步至缓存，不能有遗漏。\n\n对于此问题，一种有效的方案是采用订阅数据库的 Binlog 实现数据同步。\n\n\n基于 Binlog 的全量缓存架构\n\n在实施基于 Binlog 的架构方案前，我先简单介绍下 Binlog，更加详细的介绍我将在“05 讲”里和你讨论。首先看下 Binlog 的原理，如下图 2 所示：\n\n\n\n图 2：Binlog 原理图\n\nBinlog 是 MySQL 及大部分主流数据库的主从数据同步方案。主数据库会将所有的变更按一定格式写入它本机的 Binlog 文件中。在主从同步时，从数据库会和主数据库建立连接，通过特定的协议串行地读取主数据库的 Binlog 文件，并在从库进行 Binlog 的回放，进而完成主从复制。\n\n现在很多开源工具（如阿里的 Canal、MySQL_Streamer、Maxwell、Linkedin 的 Databus 等）可以模拟主从复制的协议。通过模拟协议读取主数据库的 Binlog 文件，从而获取主库的所有变更。对于这些变更，它们开放了各种接口供业务服务获取数据。\n\n基于 Binlog 的全量缓存架构正是依赖此类中间件完来成数据同步的，架构如下图 3 所示：\n\n\n\n图 3：基于 Binlog 的缓存同步架构图",normalizedContent:"上一讲我们介绍了一个简单易实现，且成本较低的高性能读服务方案及其升级方案，但其中仍有两个问题暂未完全解决：\n\n * 第一个问题是为了保证缓存更新实时性而带来的分布式事务的问题；\n\n * 第二个问题是懒加载导致的毛刺问题。\n\n在本讲里，我将针对上述两个问题，和你一起利用全量缓存打造一个无毛刺、平均性能在 100ms 以内的读服务。\n\n\n全量缓存的基本架构\n\n全量缓存是指将数据库中的所有数据都存储在缓存中，同时在缓存中不设置过期时间的一种实现方式，此实现的架构如下图 1 所示：\n\n\n\n图 1：全量缓存的架构图\n\n因为所有数据都存储在缓存里，读服务在查询时不会再降级到数据库里，所有的请求都完全依赖缓存。此时，因降级到数据库导致的毛刺问题就解决了。\n\n但全量缓存并没有解决更新时的分布式事务问题，反而把问题放大了。因为全量缓存对数据更新要求更加严格，要求所有数据库已有数据和实时更新的数据必须完全同步至缓存，不能有遗漏。\n\n对于此问题，一种有效的方案是采用订阅数据库的 binlog 实现数据同步。\n\n\n基于 binlog 的全量缓存架构\n\n在实施基于 binlog 的架构方案前，我先简单介绍下 binlog，更加详细的介绍我将在“05 讲”里和你讨论。首先看下 binlog 的原理，如下图 2 所示：\n\n\n\n图 2：binlog 原理图\n\nbinlog 是 mysql 及大部分主流数据库的主从数据同步方案。主数据库会将所有的变更按一定格式写入它本机的 binlog 文件中。在主从同步时，从数据库会和主数据库建立连接，通过特定的协议串行地读取主数据库的 binlog 文件，并在从库进行 binlog 的回放，进而完成主从复制。\n\n现在很多开源工具（如阿里的 canal、mysql_streamer、maxwell、linkedin 的 databus 等）可以模拟主从复制的协议。通过模拟协议读取主数据库的 binlog 文件，从而获取主库的所有变更。对于这些变更，它们开放了各种接口供业务服务获取数据。\n\n基于 binlog 的全量缓存架构正是依赖此类中间件完来成数据同步的，架构如下图 3 所示：\n\n\n\n图 3：基于 binlog 的缓存同步架构图",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何做到异构数据的同步一致性？",frontmatter:{title:"如何做到异构数据的同步一致性？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/6746e1/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/06.%20%20%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E5%BC%82%E6%9E%84%E6%95%B0%E6%8D%AE%E7%9A%84%E5%90%8C%E6%AD%A5%E4%B8%80%E8%87%B4%E6%80%A7%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/06.  如何做到异构数据的同步一致性？.md",key:"v-d1276644",path:"/pages/6746e1/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:7397}],headersStr:"精选评论",content:'在上一讲里，我介绍了基于 Binlog 完成数据同步的全量缓存的读服务架构方案，可以实现平均性能在一百毫秒以内的高可用方案。此方案不仅可以满足缓存同步的实时性要求，还能够降低同步的复杂度，以及解决分布式事务问题。\n\n那是不是上述方案已经十分完善，可以直接进行落地复用了呢？其实还有很多重要的点待明确。在上一讲里，我只是介绍了 Binlog 可以实现最终一致性和低延迟，但是具体如何实现及相关细节、实现中有哪些坑需要规避及最佳实践等内容均没有介绍。在本讲里，我将带你把这些内容一一攻破。\n\n\n基于 Binlog 的全量缓存架构问题分析\n\n为了方便你理解，我首先展示一张基于 Binlog 的数据同步全景图，如下图 1 所示：\n\n注：本讲的后续内容将基于这张架构图来讨论存在的问题。\n\n\n\n图 1：同步架构全景图\n\n问题一：Binlog 延迟低是指纯 MySQL 的主从同步\n\n从上图 1 中可以看出，基于 Binlog 的缓存数据同步和纯 MySQL 的主从同步在架构上是存在区别的，主要有以下 4 个区别。\n\n 1. 因为 MySQL 的主从同步是纯的数据同步，格式和协议完全适配，因此性能损耗极低。而自己使用 Binlog 同步是经过协议转换的，有一定的性能损耗。\n\n 2. 其次，上图基于 Binlog的同步比MySQL的主从同步多了两个模块，因此整体链路比也较长。\n\n 3. 在实际场景里，为了保持稳定性，同步的是从库的 Binlog，这也会导致延迟进一步加大。\n\n 4. 最后，因为 Binlog 是串行的，这会导致同步的吞吐量太低，进一步加大同步的延迟。\n\n以上这 4 个问题，都会导致 Binlog 的实际延迟时间要比预期的要高。\n\n问题二：如何做 Binlog 格式解析？\n\n抽象来看，程序其实是数据和逻辑的组合。所有的程序都要按照一定的业务规则对某种数据处理才能产生价值。\n\nBinlog 的同步程序也是一样，Binlog 同步转换程序处理的是 Binlog 的数据。那 Binlog 的格式是什么样的？是每次变更的 SQL，还是其他维度的数据？这关系到同步程序的设计方案，以及对应的实现的复杂度。\n\n问题三：如何保证数据不丢失或错误？\n\nMySQL 的主从同步逻辑是和业务数据无关的，正式版本发布之后，修改的频率比较低。而基于 Binlog 实现的业务数据同步程序是易变的，因为互联网业务需求迭代周期非常快，在业务高速迭代的过程中，如何保证开发人员写出没有 Bug 的代码？如何保证同步的数据不丢失、不出错呢？\n\n问题四：如何设计缓存数据格式？\n\n最后便是如何设计存储在缓存里的数据格式了。现在主流的数据库（如 Memcache、Redis 等）不只提供 Key-Value 的数据结构，还提供了其他丰富的数据结构类型。如何利用和设计这些数据结构，来提升数据查询和写入时的性能，同时降低代码的复杂度呢？\n\n下面我将逐一讲解解决上述四类问题的场景手段。\n\n\n如何发送Binlog\n\n此处的方案，我将以互联网中使用最多的 MySQL 作为示例进行讲解，其他类型的数据库可以以此类推。MySQL 的 Binlog 分为三种数据格式：statement、row 及 mixed 格式，我将基于下面展示的示例表来分别介绍上述三种格式：\n\ncreate table demo_table{\n  id bigint not null auto_increment comment \'主键\',\n  message varchar(100) not null comment \'消息\',\n  status tinyint not null comment \'状态\',\n  created datetime not null \'创建时间\',\n  modified datetime not null \'修改时间\',\n  primary key (\'id\') using btree\n}\n\n\n1. statement 格式\n\nstatement 格式是把每次执行的 SQL 语句记录到 Binlog 文件里，在主从复制时，基于 Binlog 里的 SQL 语句进行回放来完成主从复制。比如执行了如下 SQL 成功后：\n\nupdate demo_table set status=\'无效\' where id =1\n\n\nBinlog 中记录的便是上述这条具体的 SQL。采用 SQL 格式的 Binlog 的好处是内容太少，传输速度快。但存在一个问题，在基于 Binlog 进行数据同步时，需要解析上述的 SQL 获取变更的字段，存在一定的开发成本。\n\n2. row 格式\n\nrow 格式的 Binlog 会把当次执行的 SQL 命中的那条数据库行的变更前和变更后的内容，都记录到 Binlog 文件里。以上述 statement 格式里的 SQL 作为示例，该 SQL 在 row 格式下执行后会产生如下的数据：\n\n{\n  "before":{\n    "id":1,\n    "message":"文本"，\n    "status":"有效",\n    "created":"xxxx-xx-xx",\n    "modified":"xxxx-xx-xx"\n  },\n  "after":{\n    "id":1,\n    "message":"文本"，\n    "status":"无效",\n    "created":"xxxx-xx-xx",\n    "modified":"xxxx-xx-xx"\n  },\n  "change_fields":["status"]\n}\n\n\n上述案例记录的 Binlog 数据非常全面，包含了 demo_table 中所有字段对应的变更和未变更的数据，同时标记了具体哪些字段发生了变更。在数据同步时，可以完全以它为准。基于上述格式的数据同步的实现代码会非常简单，但缺点是，上述格式产生的数据量较大。\n\n3. mixed 模式\n\nmixed 模式是上述两种模式的动态结合。采用 mixed 模式的 Binlog 会根据每一条执行的 SQL 动态判断是记录为 row 格式还是 statement 格式。比如一些 DDL 语句，如新增加字段的 SQL，就没有必要记录为 row 模式，记录为 statement 即可，因为它本身并没有涉及数据变更。\n\n在实际应用中，推荐使用 row 模式或者 mixed 模式，主要有以下两个原因。\n\n原因一：这两种格式的数据量全，可以让你做更多的逻辑。因为随着业务需求的发展，同步逻辑会出现非常多的个性化需求，越多信息的数据，在编写代码时会越简单。\n\n原因二：row 模式无须解析SQL，实现复杂度非常低。在执行的 SQL 非常复杂时，对 statement 模式里记录的 SQL 的解析需要耗费大量开发精力，越复杂的解析越容易产生 Bug，所以推荐更加简单的 row 模式的数据格式。\n\n\nBinlog 如何高效消费\n\n在上一小节里确定了 Binlog 发送的格式后，紧接着需要确定的便是 Binlog 数据该如何消费的问题。在技术上，数据消费有两种常见模式：串行和并行。下面将对这两种模式逐一讲解，并对它们存在的优缺点进行讨论。\n\n1. 全串行的方式进行消费\n\n以 MySQL为例，不管是表还是 SQL 维度的数据，都需要将整个实例的所有数据变更写入一个 Binlog 文件。在消费时，对此 Binlog 文件使用 ACK 机制进行串行消费，每消费一条确认一条，然后再消费一条，以此重复。具体消费形式如下图 2 所示：\n\n\n\n图 2：基于 ACK 的串行消费图\n\n此类模式的消费存在两个问题。\n\n问题一：串行消费效率低，延迟大。假设一次同步 20ms 左右，同步 10W 条数据就需要 30min 左右。\n\n问题二：单线程无法利用水平扩展，架构有缺陷。当前数据量小，可以满足。但当数据量增大后，此模式是无法通过水平扩展来提升性能。\n\n2. 采用并行的方式提升吞吐量及扩展性\n\nBinlog 的单文件及 ACK 机制，导致我们必须去串行消费。但实际上，通过一些技术手段我们是能够对 Binlog 文件里的不同库、不同表的数据进行并行消费的。因为不同库之间的数据是不相关的，为了在 Binlog 原有的串行机制下完成按库的并行消费，整体架构需要进行一定升级，具体如图 3 所示：\n\n\n\n图 3：升级后的并行消费方案\n\n上述架构里，借用了 MQ 进行拆分。在 Binlog 处仍然进行串行消费，但只是 ACK 数据。ACK 后数据直接发送到 MQ 的某一个 Topic 里即可。因为只做 ACK 并转发至 MQ，不涉及业务逻辑，所以性能消耗非常小，大概只有几毫秒或纳秒。\n\n现在大部分的 MQ 中间件都支持数据并行消费，在开发时，上图 3 中的数据转换模块在消费数据时，开启并行乱序消费即可。此时虽然完成了从串行消费到并行消费的升级，提升了吞吐量和扩展性，但也因并行性带来了数据乱序的问题。\n\n比如你对某一条微博连续修改了两次，第一次为 A1，第二次为 A2。如果使用了并行消费，可能因为乱序的原因，先接收到 A2 并写入缓存再接受到 A1。此时，微博中就展示了 A1 的内容，但缓存中的数据 A1 是脏数据，实际数据应该是 A2。\n\n因此我们需要继续对升级后的方案进行改造。对于并行带来的数据错乱问题，有两个解决方案。\n\n方案一：加分布式锁实现细粒度的串行\n\n此方案和 Binlog 的串行区别是粒度。以上述修改微博为例，在数据同步时，只需要保证对同一条微博的多次修改串行消费即可，而多条微博动态之间在业务上没有关系，仍然可以并行消费。在实施时，加锁的维度可以根据数据是否需要串行处理而定，它可以是表中的一个字段，也可以是多个字段的组合。\n\n确定加锁的维度后，数据库中的多张表可根据需要使用此维度进行串行消费，具体示例可参考本讲后面的“缓存数据结构设计及写入”小节。此方案虽然可以解决乱序问题，但引入了分布式锁，且需要业务系统自己实现，出错率及复杂度均较高。\n\n方案二：依赖 MQ 中间件的串行通道特性进行支持\n\n采用此方案后，整个同步的实现会更加简单。还是以上述修改微博为例，在“Binlog 订阅及转发模块”转发 Binlog 数据前，会按业务规则判断转发的 Binlog 数据是否在并发后仍需要串行消费，比如上面提到的同一条微博的多次修改就需要串行消费，而多条微博间的修改则可以并行消费，它不存在并发问题。\n\n判断需要串行消费的数据，比如同一条微博数据，都会发送到 MQ 中间件的串行通道内。在同步模块进行同步时，MQ 中间件里的串行通道的数据均会串行执行，而多个串行通道间则可以并发执行。借助 MQ 中间件的此特性，既解决了乱序问题又保证了吞吐量。很多开源的 MQ 实现都具备此小节介绍的功能，如 Kafka 提供的 Partition 功能。改造后的架构如图 4 所示：\n\n\n\n图 4：并行+串行的架构方案\n\n最后，在采用了 MQ 进行纯串行转并行时，将 Binlog 发送到 MQ 可以根据情况进行调整，当数据量很大或者未来很大时，可以将 Binlog 的数据按表维度发送到不同的 Topic。一是能够实现扩展性；二是可以提升性能；三是通过不同表使用不同的 Topic，可以起到隔离的作用，减少表之间的相互影响。\n\n\n缓存数据结构设计及写入\n\n现在常用的缓存大多数为 Redis 或者它的变种，所以此处我们就以 Redis 支持的为准，来讨论缓存结构设计。你使用的非 Redis 缓存提供的数据结构可能有所差异，但思路是类似的。\n\n数据库表是按技术的范式来设计的，会将数据按一对一或一对多拆分成多张表，而缓存中则是面向业务设计的，会尽可能地将业务上一次查询的数据存储为缓存中的一个 Value 值。\n\n比如订单至少要包含订单基本信息和用户的购买商品列表。在数据库中会设计订单基本信息表和商品表。而在缓存中，会直接将订单基本信息和商品信息存储为一个 Value 值，方便直接满足用户查询订单详情的需求，减少和 Redis 的交互次数。\n\n这种在数据库中多张表存储，而在缓存中只用 K-V 结构进行冗余存储的数据结构，需要我们在数据同步的时候进行并发控制，防止因为多张表的变更导致并发写入，从而产生数据错乱。\n\n多张表间共享分布式锁进行协调\n\n以上述订单为例，数据库中的订单信息表和商品表均存储了订单号，在数据同步时，可以使用订单号进行加锁。\n\n当订单基本信息或订单中的商品同时发生变更后，因为使用了订单号进行加锁控制，在数据同步时，两张表归属同一订单号的数据实际为串行执行。因缓存中同一个订单的基本信息和商品是存储在一起的，更新时需要把缓存中的数据读取至同步程序并替换掉此次变更的内容（如某一个发生变更的商品信息），再回写至缓存中即可。在 Redis 中，可以考虑使用 Lua 脚本完成上述过程。\n\n此方式虽然可以解决因 Redis 和数据库表设计不匹配带来的问题，当多张表之间加锁又降低了吞吐量。\n\n采用反查的方式进行全量覆盖\n\n在同步时，可以采用反查数据库的方式来补齐 Redis 需要的数据。以上述订单为例，当订单基本信息变更时，可以在同步模块通过数据库反查此订单下的所有商品信息，按 Redis 的格式组装后，直接更新缓存即可。\n\n采用反查的方式虽然简单，但反查库会带来一定性能消耗和机器资源（如 CPU、网络等）的浪费。而且在变更量大的情况下，反查的量可能会把数据库打挂。因此，在采用反查方案时，建议反查发送 Binlog 的从库，从而保障主库的稳定性。\n\n采用 Redis 的 Hash 结构进行局部更新\n\n参考数据库的多张表设计，缓存中也可以进行多部分存储。在 Redis 中，可以采用 Hash 结构。对于一个订单下的不同表的数据，在 Redis 中存储至各个 field 下即可，同时 Redis 支持对单个 field 的局部更新。结构如下图 5 所示：\n\n\n\n图 5：Hash 结构缓存\n\n在上述订单案例的多张表变更时，同步程序无须对多张表间进行分布式加锁协调，哪张表变更就去更新缓存中对应的局部信息即可。不管是同步性能还是实现难度均较好。\n\n在查询时，直接使用订单号即可查询到所有信息。为什么使用 Hash 结构，而不使用所有缓存都支持的 Key+Value 的结构呢？其中，Key 设计为订单号+子表标识，如 Key 为 OrderId_BaseInfo，表示某一个订单的基本信息，或者 Key 为 OrderId_SkuId，表示某一个订单下的某个商品基本信息。\n\n主要有以下 3 个原因。\n\n 1. 首先，使用了 KV 结构后，查询时需要使用多个命令。如果提供了批量命令，也可以使用批量命令解决此问题。\n\n 2. 其次，一个订单下的商品是动态的，无法提前固定。如果全部改为 KV 结构，就无法查询到订单详情了。除非再异构一份订单下所有商品的 ID 列表。\n\n 3. 最后，现在主流缓存都是分布式部署的。如果采用 KV 的分割设计，很有可能一个订单的基本信息和商品信息被存储在两个分片上，此处查询的性能和复杂度也会上升。因 Redis 是使用 Key 进行分布式路由的，采用 Hash 结构的数据都存储在同一个分片上，不会出现跨分片查询的问题。\n\n\n数据对比发现错误\n\n数据同步模块是基于业务进行数据转换的，在开发过程中，需要基于业务规则不断地迭代。此外，为了保证吞吐量和性能，整个基于 Binlog 的同步方案在本讲了做了很多升级和改造。在这个不断迭代的过程中，难免会出现一些 Bug，导致缓存和数据库不一致的情况。为了保障数据的一致性，可以采用数据对比进行应对，架构如下图 6 所示：\n\n\n\n图6：数据对比架构图\n\n数据对比以数据库中的数据为基准，定期轮询对比缓存和数据库的数据。如果发现不一致后，可以增加延迟重试，再次对比。如果多次对比不一致后，可以增加报警并保留当时的数据，之后以数据库中的数据为准刷新缓存。延迟重试是为了防止因同步的时差，出现短暂的数据不一致但最终数据一致的情况。其次，保留出错现场的数据是为了排查定位问题。\n\n\n最后的兜底，直接写入\n\n虽然上述在提升同步吞吐量上做了非常多地设计，但不可否认延迟总是存在的，即使是纯数据库主从同步间也会因为网络抖动和写入量大的情况出现毫秒或者秒级延迟，本讲基于 Binlog 的改良方案自然不例外。\n\n绝大部分的业务和场景，对于毫秒或秒级延迟无感知。但为了方案的完整性和极端场景的应对，可以在异步同步的基础上，增加主动同步。方案如下图 7 所示：\n\n\n\n图 7：主动写入的同步方案\n\n上述的架构是对一些关键场景在写完数据库后，主动将数据写入缓存中去。但对于写入缓存可能出现的失败可以不处理，因为主动写入是为了解决缓存延迟的问题，主动写入导致的丢失数据由 Binlog 保障最终一致性。此架构是一个技术互补的策略，Binlog 保证最终一致性但可能存在延迟，主动写入保障无延迟但存在丢数据。在架构中，你也可以采用此思路。一个单项技术无法完美解决问题时，可以对短板寻找增量方案，而不是整个方案完全替换。\n\n\n总结\n\n在本讲里详细介绍了采用 Binlog 同步数据存在的延迟、数据丢失、格式解析和缓存数据结构设计这四大类问题。并采用结构化的方式进行了解答，从 Binlog 如何发送、如何消费、数据如何写入缓存，以及如何进行数据对比发现问题这四大步骤进行了解答。相信你看完本讲后，可以直接在你所负责的模块里，落地基于 Binlog 的数据同步，并根据环境要求，选择适合的最佳组合方案。\n\n最后我再给你留一个讨论题，你使用过基于 Binlog 或者其他方式的同步方案吗？使用中存在什么问题，你又是如何解决的？欢迎写在留言区，我们一起进行讨论。\n\n----------------------------------------\n\n\n# 精选评论\n\n# *中：\n\n> 你好，数据比对怎样设计会好一点\n\n#     讲师回复：\n\n>     数据对比需要寻找一个基准对比源。比如缓存和数据库的数据对比，一般会选择数据库作为基准源，因为数据库具备ACID，数据原则上是准的。\n\n在对比时，需要规避因为对比带来的技术问题。因为对比实现时，很多时候是基于数据库进行扫描，此扫描的速度有可能很大，有可能会把数据库打挂。建议在对比时，使用数据库的从库对比缓存的从分片。\n\n最后，对比时，对于错误数据需要多次重复对比。因为某一次对比有可能是因为数据延迟导致的，再对比一次就ok了。如果多次对比均错误，才判断为错误数据。\n\n# **军：\n\n> 数据对比方案，以数据库为基准，如果每条记录逐一对比，数据量大的话占用资源。如果按update_time对比，无法解决物理删除记录的问题。\n\n#     讲师回复：\n\n>     对于物理删除的情况，可以基于binlog进行监听发现\n\n# **迈：\n\n> 当多个用户同时修改一个值时，直接写缓存就会出现脏数据，兜底直接写入应该怎么处理这样的情况\n\n#     讲师回复：\n\n>     缓存中可以记录数据的版本号。同时，在数据库中，每一个表里都需要有一个版本号字段，为version。在每一次修改数据库中的数据式，可以使用乐观锁的方式，对版本号进行加1。在使用binlog刷新缓存时，基于版本号进行并发控制即可。\n\n# **2974：\n\n> 你这种缓存方式，怎么解决多条件的查询和分页查询？？？难道把用户订单全部拿到，再在代码里按条件筛选和分页？？？\n\n#     讲师回复：\n\n>     如果多条件的查询也需要很高的性能，可以采用空间换时间的方式，将数据按查询的条件异构到缓存里。 而对于翻页查询，一般来说都隶属于管理后台，对于性能要求中等，可以使用ElasticSearch来实现支持\n\n# **默：\n\n> 老师好，感谢分享。如果没有全量的binog，除了手动写job走全量，还有什么好的方案先做一次全量吗。\n\n#     讲师回复：\n\n>     如果不使用binlog，最简单的方式便是job。但在执行时，job需要去扫从库，看到很多场景，因为跑全量job把主库打挂，进而影响业务的。\n\n# **安：\n\n> mysql支持并行复制的',normalizedContent:'在上一讲里，我介绍了基于 binlog 完成数据同步的全量缓存的读服务架构方案，可以实现平均性能在一百毫秒以内的高可用方案。此方案不仅可以满足缓存同步的实时性要求，还能够降低同步的复杂度，以及解决分布式事务问题。\n\n那是不是上述方案已经十分完善，可以直接进行落地复用了呢？其实还有很多重要的点待明确。在上一讲里，我只是介绍了 binlog 可以实现最终一致性和低延迟，但是具体如何实现及相关细节、实现中有哪些坑需要规避及最佳实践等内容均没有介绍。在本讲里，我将带你把这些内容一一攻破。\n\n\n基于 binlog 的全量缓存架构问题分析\n\n为了方便你理解，我首先展示一张基于 binlog 的数据同步全景图，如下图 1 所示：\n\n注：本讲的后续内容将基于这张架构图来讨论存在的问题。\n\n\n\n图 1：同步架构全景图\n\n问题一：binlog 延迟低是指纯 mysql 的主从同步\n\n从上图 1 中可以看出，基于 binlog 的缓存数据同步和纯 mysql 的主从同步在架构上是存在区别的，主要有以下 4 个区别。\n\n 1. 因为 mysql 的主从同步是纯的数据同步，格式和协议完全适配，因此性能损耗极低。而自己使用 binlog 同步是经过协议转换的，有一定的性能损耗。\n\n 2. 其次，上图基于 binlog的同步比mysql的主从同步多了两个模块，因此整体链路比也较长。\n\n 3. 在实际场景里，为了保持稳定性，同步的是从库的 binlog，这也会导致延迟进一步加大。\n\n 4. 最后，因为 binlog 是串行的，这会导致同步的吞吐量太低，进一步加大同步的延迟。\n\n以上这 4 个问题，都会导致 binlog 的实际延迟时间要比预期的要高。\n\n问题二：如何做 binlog 格式解析？\n\n抽象来看，程序其实是数据和逻辑的组合。所有的程序都要按照一定的业务规则对某种数据处理才能产生价值。\n\nbinlog 的同步程序也是一样，binlog 同步转换程序处理的是 binlog 的数据。那 binlog 的格式是什么样的？是每次变更的 sql，还是其他维度的数据？这关系到同步程序的设计方案，以及对应的实现的复杂度。\n\n问题三：如何保证数据不丢失或错误？\n\nmysql 的主从同步逻辑是和业务数据无关的，正式版本发布之后，修改的频率比较低。而基于 binlog 实现的业务数据同步程序是易变的，因为互联网业务需求迭代周期非常快，在业务高速迭代的过程中，如何保证开发人员写出没有 bug 的代码？如何保证同步的数据不丢失、不出错呢？\n\n问题四：如何设计缓存数据格式？\n\n最后便是如何设计存储在缓存里的数据格式了。现在主流的数据库（如 memcache、redis 等）不只提供 key-value 的数据结构，还提供了其他丰富的数据结构类型。如何利用和设计这些数据结构，来提升数据查询和写入时的性能，同时降低代码的复杂度呢？\n\n下面我将逐一讲解解决上述四类问题的场景手段。\n\n\n如何发送binlog\n\n此处的方案，我将以互联网中使用最多的 mysql 作为示例进行讲解，其他类型的数据库可以以此类推。mysql 的 binlog 分为三种数据格式：statement、row 及 mixed 格式，我将基于下面展示的示例表来分别介绍上述三种格式：\n\ncreate table demo_table{\n  id bigint not null auto_increment comment \'主键\',\n  message varchar(100) not null comment \'消息\',\n  status tinyint not null comment \'状态\',\n  created datetime not null \'创建时间\',\n  modified datetime not null \'修改时间\',\n  primary key (\'id\') using btree\n}\n\n\n1. statement 格式\n\nstatement 格式是把每次执行的 sql 语句记录到 binlog 文件里，在主从复制时，基于 binlog 里的 sql 语句进行回放来完成主从复制。比如执行了如下 sql 成功后：\n\nupdate demo_table set status=\'无效\' where id =1\n\n\nbinlog 中记录的便是上述这条具体的 sql。采用 sql 格式的 binlog 的好处是内容太少，传输速度快。但存在一个问题，在基于 binlog 进行数据同步时，需要解析上述的 sql 获取变更的字段，存在一定的开发成本。\n\n2. row 格式\n\nrow 格式的 binlog 会把当次执行的 sql 命中的那条数据库行的变更前和变更后的内容，都记录到 binlog 文件里。以上述 statement 格式里的 sql 作为示例，该 sql 在 row 格式下执行后会产生如下的数据：\n\n{\n  "before":{\n    "id":1,\n    "message":"文本"，\n    "status":"有效",\n    "created":"xxxx-xx-xx",\n    "modified":"xxxx-xx-xx"\n  },\n  "after":{\n    "id":1,\n    "message":"文本"，\n    "status":"无效",\n    "created":"xxxx-xx-xx",\n    "modified":"xxxx-xx-xx"\n  },\n  "change_fields":["status"]\n}\n\n\n上述案例记录的 binlog 数据非常全面，包含了 demo_table 中所有字段对应的变更和未变更的数据，同时标记了具体哪些字段发生了变更。在数据同步时，可以完全以它为准。基于上述格式的数据同步的实现代码会非常简单，但缺点是，上述格式产生的数据量较大。\n\n3. mixed 模式\n\nmixed 模式是上述两种模式的动态结合。采用 mixed 模式的 binlog 会根据每一条执行的 sql 动态判断是记录为 row 格式还是 statement 格式。比如一些 ddl 语句，如新增加字段的 sql，就没有必要记录为 row 模式，记录为 statement 即可，因为它本身并没有涉及数据变更。\n\n在实际应用中，推荐使用 row 模式或者 mixed 模式，主要有以下两个原因。\n\n原因一：这两种格式的数据量全，可以让你做更多的逻辑。因为随着业务需求的发展，同步逻辑会出现非常多的个性化需求，越多信息的数据，在编写代码时会越简单。\n\n原因二：row 模式无须解析sql，实现复杂度非常低。在执行的 sql 非常复杂时，对 statement 模式里记录的 sql 的解析需要耗费大量开发精力，越复杂的解析越容易产生 bug，所以推荐更加简单的 row 模式的数据格式。\n\n\nbinlog 如何高效消费\n\n在上一小节里确定了 binlog 发送的格式后，紧接着需要确定的便是 binlog 数据该如何消费的问题。在技术上，数据消费有两种常见模式：串行和并行。下面将对这两种模式逐一讲解，并对它们存在的优缺点进行讨论。\n\n1. 全串行的方式进行消费\n\n以 mysql为例，不管是表还是 sql 维度的数据，都需要将整个实例的所有数据变更写入一个 binlog 文件。在消费时，对此 binlog 文件使用 ack 机制进行串行消费，每消费一条确认一条，然后再消费一条，以此重复。具体消费形式如下图 2 所示：\n\n\n\n图 2：基于 ack 的串行消费图\n\n此类模式的消费存在两个问题。\n\n问题一：串行消费效率低，延迟大。假设一次同步 20ms 左右，同步 10w 条数据就需要 30min 左右。\n\n问题二：单线程无法利用水平扩展，架构有缺陷。当前数据量小，可以满足。但当数据量增大后，此模式是无法通过水平扩展来提升性能。\n\n2. 采用并行的方式提升吞吐量及扩展性\n\nbinlog 的单文件及 ack 机制，导致我们必须去串行消费。但实际上，通过一些技术手段我们是能够对 binlog 文件里的不同库、不同表的数据进行并行消费的。因为不同库之间的数据是不相关的，为了在 binlog 原有的串行机制下完成按库的并行消费，整体架构需要进行一定升级，具体如图 3 所示：\n\n\n\n图 3：升级后的并行消费方案\n\n上述架构里，借用了 mq 进行拆分。在 binlog 处仍然进行串行消费，但只是 ack 数据。ack 后数据直接发送到 mq 的某一个 topic 里即可。因为只做 ack 并转发至 mq，不涉及业务逻辑，所以性能消耗非常小，大概只有几毫秒或纳秒。\n\n现在大部分的 mq 中间件都支持数据并行消费，在开发时，上图 3 中的数据转换模块在消费数据时，开启并行乱序消费即可。此时虽然完成了从串行消费到并行消费的升级，提升了吞吐量和扩展性，但也因并行性带来了数据乱序的问题。\n\n比如你对某一条微博连续修改了两次，第一次为 a1，第二次为 a2。如果使用了并行消费，可能因为乱序的原因，先接收到 a2 并写入缓存再接受到 a1。此时，微博中就展示了 a1 的内容，但缓存中的数据 a1 是脏数据，实际数据应该是 a2。\n\n因此我们需要继续对升级后的方案进行改造。对于并行带来的数据错乱问题，有两个解决方案。\n\n方案一：加分布式锁实现细粒度的串行\n\n此方案和 binlog 的串行区别是粒度。以上述修改微博为例，在数据同步时，只需要保证对同一条微博的多次修改串行消费即可，而多条微博动态之间在业务上没有关系，仍然可以并行消费。在实施时，加锁的维度可以根据数据是否需要串行处理而定，它可以是表中的一个字段，也可以是多个字段的组合。\n\n确定加锁的维度后，数据库中的多张表可根据需要使用此维度进行串行消费，具体示例可参考本讲后面的“缓存数据结构设计及写入”小节。此方案虽然可以解决乱序问题，但引入了分布式锁，且需要业务系统自己实现，出错率及复杂度均较高。\n\n方案二：依赖 mq 中间件的串行通道特性进行支持\n\n采用此方案后，整个同步的实现会更加简单。还是以上述修改微博为例，在“binlog 订阅及转发模块”转发 binlog 数据前，会按业务规则判断转发的 binlog 数据是否在并发后仍需要串行消费，比如上面提到的同一条微博的多次修改就需要串行消费，而多条微博间的修改则可以并行消费，它不存在并发问题。\n\n判断需要串行消费的数据，比如同一条微博数据，都会发送到 mq 中间件的串行通道内。在同步模块进行同步时，mq 中间件里的串行通道的数据均会串行执行，而多个串行通道间则可以并发执行。借助 mq 中间件的此特性，既解决了乱序问题又保证了吞吐量。很多开源的 mq 实现都具备此小节介绍的功能，如 kafka 提供的 partition 功能。改造后的架构如图 4 所示：\n\n\n\n图 4：并行+串行的架构方案\n\n最后，在采用了 mq 进行纯串行转并行时，将 binlog 发送到 mq 可以根据情况进行调整，当数据量很大或者未来很大时，可以将 binlog 的数据按表维度发送到不同的 topic。一是能够实现扩展性；二是可以提升性能；三是通过不同表使用不同的 topic，可以起到隔离的作用，减少表之间的相互影响。\n\n\n缓存数据结构设计及写入\n\n现在常用的缓存大多数为 redis 或者它的变种，所以此处我们就以 redis 支持的为准，来讨论缓存结构设计。你使用的非 redis 缓存提供的数据结构可能有所差异，但思路是类似的。\n\n数据库表是按技术的范式来设计的，会将数据按一对一或一对多拆分成多张表，而缓存中则是面向业务设计的，会尽可能地将业务上一次查询的数据存储为缓存中的一个 value 值。\n\n比如订单至少要包含订单基本信息和用户的购买商品列表。在数据库中会设计订单基本信息表和商品表。而在缓存中，会直接将订单基本信息和商品信息存储为一个 value 值，方便直接满足用户查询订单详情的需求，减少和 redis 的交互次数。\n\n这种在数据库中多张表存储，而在缓存中只用 k-v 结构进行冗余存储的数据结构，需要我们在数据同步的时候进行并发控制，防止因为多张表的变更导致并发写入，从而产生数据错乱。\n\n多张表间共享分布式锁进行协调\n\n以上述订单为例，数据库中的订单信息表和商品表均存储了订单号，在数据同步时，可以使用订单号进行加锁。\n\n当订单基本信息或订单中的商品同时发生变更后，因为使用了订单号进行加锁控制，在数据同步时，两张表归属同一订单号的数据实际为串行执行。因缓存中同一个订单的基本信息和商品是存储在一起的，更新时需要把缓存中的数据读取至同步程序并替换掉此次变更的内容（如某一个发生变更的商品信息），再回写至缓存中即可。在 redis 中，可以考虑使用 lua 脚本完成上述过程。\n\n此方式虽然可以解决因 redis 和数据库表设计不匹配带来的问题，当多张表之间加锁又降低了吞吐量。\n\n采用反查的方式进行全量覆盖\n\n在同步时，可以采用反查数据库的方式来补齐 redis 需要的数据。以上述订单为例，当订单基本信息变更时，可以在同步模块通过数据库反查此订单下的所有商品信息，按 redis 的格式组装后，直接更新缓存即可。\n\n采用反查的方式虽然简单，但反查库会带来一定性能消耗和机器资源（如 cpu、网络等）的浪费。而且在变更量大的情况下，反查的量可能会把数据库打挂。因此，在采用反查方案时，建议反查发送 binlog 的从库，从而保障主库的稳定性。\n\n采用 redis 的 hash 结构进行局部更新\n\n参考数据库的多张表设计，缓存中也可以进行多部分存储。在 redis 中，可以采用 hash 结构。对于一个订单下的不同表的数据，在 redis 中存储至各个 field 下即可，同时 redis 支持对单个 field 的局部更新。结构如下图 5 所示：\n\n\n\n图 5：hash 结构缓存\n\n在上述订单案例的多张表变更时，同步程序无须对多张表间进行分布式加锁协调，哪张表变更就去更新缓存中对应的局部信息即可。不管是同步性能还是实现难度均较好。\n\n在查询时，直接使用订单号即可查询到所有信息。为什么使用 hash 结构，而不使用所有缓存都支持的 key+value 的结构呢？其中，key 设计为订单号+子表标识，如 key 为 orderid_baseinfo，表示某一个订单的基本信息，或者 key 为 orderid_skuid，表示某一个订单下的某个商品基本信息。\n\n主要有以下 3 个原因。\n\n 1. 首先，使用了 kv 结构后，查询时需要使用多个命令。如果提供了批量命令，也可以使用批量命令解决此问题。\n\n 2. 其次，一个订单下的商品是动态的，无法提前固定。如果全部改为 kv 结构，就无法查询到订单详情了。除非再异构一份订单下所有商品的 id 列表。\n\n 3. 最后，现在主流缓存都是分布式部署的。如果采用 kv 的分割设计，很有可能一个订单的基本信息和商品信息被存储在两个分片上，此处查询的性能和复杂度也会上升。因 redis 是使用 key 进行分布式路由的，采用 hash 结构的数据都存储在同一个分片上，不会出现跨分片查询的问题。\n\n\n数据对比发现错误\n\n数据同步模块是基于业务进行数据转换的，在开发过程中，需要基于业务规则不断地迭代。此外，为了保证吞吐量和性能，整个基于 binlog 的同步方案在本讲了做了很多升级和改造。在这个不断迭代的过程中，难免会出现一些 bug，导致缓存和数据库不一致的情况。为了保障数据的一致性，可以采用数据对比进行应对，架构如下图 6 所示：\n\n\n\n图6：数据对比架构图\n\n数据对比以数据库中的数据为基准，定期轮询对比缓存和数据库的数据。如果发现不一致后，可以增加延迟重试，再次对比。如果多次对比不一致后，可以增加报警并保留当时的数据，之后以数据库中的数据为准刷新缓存。延迟重试是为了防止因同步的时差，出现短暂的数据不一致但最终数据一致的情况。其次，保留出错现场的数据是为了排查定位问题。\n\n\n最后的兜底，直接写入\n\n虽然上述在提升同步吞吐量上做了非常多地设计，但不可否认延迟总是存在的，即使是纯数据库主从同步间也会因为网络抖动和写入量大的情况出现毫秒或者秒级延迟，本讲基于 binlog 的改良方案自然不例外。\n\n绝大部分的业务和场景，对于毫秒或秒级延迟无感知。但为了方案的完整性和极端场景的应对，可以在异步同步的基础上，增加主动同步。方案如下图 7 所示：\n\n\n\n图 7：主动写入的同步方案\n\n上述的架构是对一些关键场景在写完数据库后，主动将数据写入缓存中去。但对于写入缓存可能出现的失败可以不处理，因为主动写入是为了解决缓存延迟的问题，主动写入导致的丢失数据由 binlog 保障最终一致性。此架构是一个技术互补的策略，binlog 保证最终一致性但可能存在延迟，主动写入保障无延迟但存在丢数据。在架构中，你也可以采用此思路。一个单项技术无法完美解决问题时，可以对短板寻找增量方案，而不是整个方案完全替换。\n\n\n总结\n\n在本讲里详细介绍了采用 binlog 同步数据存在的延迟、数据丢失、格式解析和缓存数据结构设计这四大类问题。并采用结构化的方式进行了解答，从 binlog 如何发送、如何消费、数据如何写入缓存，以及如何进行数据对比发现问题这四大步骤进行了解答。相信你看完本讲后，可以直接在你所负责的模块里，落地基于 binlog 的数据同步，并根据环境要求，选择适合的最佳组合方案。\n\n最后我再给你留一个讨论题，你使用过基于 binlog 或者其他方式的同步方案吗？使用中存在什么问题，你又是如何解决的？欢迎写在留言区，我们一起进行讨论。\n\n----------------------------------------\n\n\n# 精选评论\n\n# *中：\n\n> 你好，数据比对怎样设计会好一点\n\n#     讲师回复：\n\n>     数据对比需要寻找一个基准对比源。比如缓存和数据库的数据对比，一般会选择数据库作为基准源，因为数据库具备acid，数据原则上是准的。\n\n在对比时，需要规避因为对比带来的技术问题。因为对比实现时，很多时候是基于数据库进行扫描，此扫描的速度有可能很大，有可能会把数据库打挂。建议在对比时，使用数据库的从库对比缓存的从分片。\n\n最后，对比时，对于错误数据需要多次重复对比。因为某一次对比有可能是因为数据延迟导致的，再对比一次就ok了。如果多次对比均错误，才判断为错误数据。\n\n# **军：\n\n> 数据对比方案，以数据库为基准，如果每条记录逐一对比，数据量大的话占用资源。如果按update_time对比，无法解决物理删除记录的问题。\n\n#     讲师回复：\n\n>     对于物理删除的情况，可以基于binlog进行监听发现\n\n# **迈：\n\n> 当多个用户同时修改一个值时，直接写缓存就会出现脏数据，兜底直接写入应该怎么处理这样的情况\n\n#     讲师回复：\n\n>     缓存中可以记录数据的版本号。同时，在数据库中，每一个表里都需要有一个版本号字段，为version。在每一次修改数据库中的数据式，可以使用乐观锁的方式，对版本号进行加1。在使用binlog刷新缓存时，基于版本号进行并发控制即可。\n\n# **2974：\n\n> 你这种缓存方式，怎么解决多条件的查询和分页查询？？？难道把用户订单全部拿到，再在代码里按条件筛选和分页？？？\n\n#     讲师回复：\n\n>     如果多条件的查询也需要很高的性能，可以采用空间换时间的方式，将数据按查询的条件异构到缓存里。 而对于翻页查询，一般来说都隶属于管理后台，对于性能要求中等，可以使用elasticsearch来实现支持\n\n# **默：\n\n> 老师好，感谢分享。如果没有全量的binog，除了手动写job走全量，还有什么好的方案先做一次全量吗。\n\n#     讲师回复：\n\n>     如果不使用binlog，最简单的方式便是job。但在执行时，job需要去扫从库，看到很多场景，因为跑全量job把主库打挂，进而影响业务的。\n\n# **安：\n\n> mysql支持并行复制的',charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何应对热点数据的查询？",frontmatter:{title:"如何应对热点数据的查询？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/078442/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/07.%20%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9F%A5%E8%AF%A2%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/07. 如何应对热点数据的查询？.md",key:"v-45ee571f",path:"/pages/078442/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4468}],headersStr:"精选评论",content:"在“04 讲和 05 讲”里，我们介绍了基于 Binlog 实现的全量缓存的读服务，以及如何实现一个低延迟、可扩展的同步架构。通过这两讲的学习，你可以构建出一个无毛刺且平均性能在 100ms 以内的读接口。对缓存进行分布式部署后，抗住秒级百万的 QPS 毫无压力。不管是在面试还是在实战中，关于“如何架构一个高性能的读服务”，我相信你都能够轻松应对。\n\n但上述的“百万 QPS”有一个非常重要的限制条件，即这百万的 QPS 都是分属于不同用户的。我们先不讨论是否可能，试想一下如果这百万 QPS 都属于同一个用户，系统还扛得住吗？\n\n如果采用前两讲的架构，必然抗扛不住的！因此本讲将站在一个全新的视角，带你分析此架构待改善的方向，并探寻新的架构优化方案来应对百万 QPS的流量。\n\n\n为什么扛不住相同用户百万的流量\n\n当百万的 QPS 属于不同用户时，因缓存是集群化的，所有到达业务后台的请求会根据一定路由规则（如 Hash），分散到请求缓存集群中的某一个节点，具体架构如下图 1 所示：\n\n\n\n图 1：百万请求属于不同用户的架构图\n\n假设一个节点最大能够支撑 10W QPS，我们只需要在集群中部署 10 台节点即可支持百万流量。但当百万 QPS 都属于同一用户时，即使缓存是集群化的，同一个用户的请求都会被路由至集群中的某一个节点，整体架构如图 2 所示：\n\n\n\n图 2：百万请求属于相同用户的架构图\n\n即使此节点的机器配置非常好，当前能够支持住百万 QPS。但随着流量上涨，它也无法满足未来的流量诉求。原因有 2 点：\n\n 1. 单台机器无法无限升级；\n\n 2. 缓存程序本身也是有性能上限的。\n\n此类并发次数非常大、数据完全相同的请求称为热点查询。类似的场景还有热点写，区别在于它在请求后会对数据进行写入或变更，如何应对热点写，我将在“16 讲”进行详细讲解。\n\n有哪些热点查询场景\n\n除了我在本讲开始介绍的，一个用户并发百万次请求产生热查询的案例外，在实际的日常生活中，会导致热查询的案例也非常多。\n\n 1. 微博热点吃瓜事件，百万用户同一时间查询某条微博内容。对此条微博的查询就是热查询。\n\n 2. 电商里的秒杀或者低价薅羊毛活动，为了第一时间抢到心仪的商品，成百上千万的用户会不断地刷新商品页面，等待秒杀倒计时。对此商品的查看就是热查询。\n\n\n主从复制进行垂直扩容\n\n虽然单机的机器配置和程序的性能是有上限的，但我们可以利用节点间的主从复制功能来进行节点间的扩容。主从复制开启后，一个主节点可以挂一至多个从。升级后的架构如下图 3 所示（方案解读在架构图中）：\n\n\n\n图 3：主从复制应对热点的架构图\n\n在查询时，将应用内的缓存客户端开启主从随机读。此时，包含一个从的分片的并发能力，可以提升至原来的一倍。随着从节点的增加，单分片的并发性能会不断翻倍。这对于所有请求只会命中某一个固定单分片的热点查询能够很好地应对。\n\n但此方案存在一个较大的问题，就是浪费资源。\n\n主从复制除了有应对热点的功能，另外一个主要作用是为了高可用。当集群中的某一个主节点发生故障后，集群高可用模块会自动对该节点进行故障迁移，从该节点所属分片里选举一个从节点为主节点。为了高可用模块在故障转移时的逻辑能够简单清晰并做到统一，会将集群的从节点数量设置为相同数量。\n\n相同从节点数量也带来了较大的资源浪费。为了应对热点查询，需要不断扩容从分片。但热点查询只会命中其中一个分片，这就导致所有其他分片的从节点全部浪费了。为了节约资源，可以对高可用模块进行改造，不强制所有分片的从节点必须相同，但这个代价也是非常高昂的。另外，热点查询很多时候是随时出现的，并不能提前预测，所以提前扩容某一个分片意义并不大。\n\n总的来说，主从复制能够解决一定流量的热点查询且实施起来较简单。但不具备扩展性，在应对更大流量的热点时会有些吃力。\n\n\n利用应用内的前置缓存\n\n热点查询是对相同的数据进行不断重复查询的一种场景。特点是次数多，但需要存储的数据少，因为数据都是相同的。\n\n针对此类业务特性，我们可以将热点数据前置缓存在应用程序内来应对热点查询，并解决前一小节里主从复制方案的扩展性问题。使用了前置缓存的架构如下图 4 所示：\n\n\n\n图 4：前置缓存的架构图\n\n应用内的缓存存储的均是热点数据。当应用扩容后，热点缓存的数量也随之增加。在采用了前置缓存后，在面对热查询时只需扩容应用即可。因为所有应用内均存储了所有的热点数据，且前端负载均衡器（如 Nginx 等）会将所有请求平均地分发到各应用中去。\n\n使用应用内的前置缓存应对热点查询时，仍有以下几个问题需要重点关注。\n\n首先是应用内缓存需要设置上限\n\n应用所属宿主机的内存是有限的，且其内存还要支持业务应用使用。固在使用应用内的前置缓存时，必须设置容量的上限且设置容量满时的逐出策略。逐出策略可以是 LRU，将最少使用的缓存在容量满时清理掉，因为热点缓存需要存储的是访问次数多的数据。\n\n此外，前置缓存也需要设置过期时间，毕竟太久无访问的缓存也肯定是非热点数据，所以可以及时清理掉，提前释放内存空间。\n\n其次是根据业务对待延迟的问题\n\n前置缓存的延迟问题的解决方案和“04 讲”“05 讲”的思路基本类似。要么采用定期刷新，要么采用主动刷新。\n\n如果业务上可以容忍一定时间的延迟，可以在缓存数据上设置一个刷新时间即可。实现起来非常简单。\n\n如果想要实时感知变化，可以采用 Binlog 的方式，在变更时主动刷新。但前置缓存的主动感知不能在前置缓存的应用里实现，因为应用代码也运行在此机器上，通过 MQ 感知变更会消耗非常多的 CPU 和内存资源。另外，前置缓存里数据很少，很多变更消息都会因不在前置缓存中而被忽略掉。为了实现前置缓存的更新，可以将前置缓存的数据异构一份出来用作判断，升级的方案如下图 5 所示：\n\n\n\n图 5：前置缓存实时更新方案图\n\n通过异构前置缓存用作判断，可以过滤出需要处理的数据，并实时调用对应机器更新即可。此方案实现起来较复杂且异构本来也导致了延迟，实际上大部分场景设置刷新时间即可满足。\n\n再者要把控好瞬间的逃逸流量\n\n应用初始化时，前置缓存是空的。假设在初始化时，瞬间出现热点查询，所有的热点请求都会逃逸到后端缓存里。可能这个瞬间热点就会把后端缓存打挂。\n\n其次，如果前置缓存采用定期过期，在过期时若将数据清理掉，那么所有的请求都会逃逸至后端加载最新的缓存，也有可能把后端缓存打挂。这两种情况对应的流程图如下图 6 所示：\n\n\n\n图 6：逃逸流量的架构图\n\n对于这两种情况，可以对逃逸流量进行前置等待或使用历史数据的方案。不管是初始化还是数据过期，在从后端加载数据时，只允许一个请求逃逸。这样最大的逃逸流量为部署的应用总数，量级可控。架构如下图 7 所示：\n\n\n\n图 7：逃逸流量控制的架构图\n\n对于数据初始化为空时，其他非逃逸的请求可以等待前置缓存的数据并设置一个超时时间。对于数据过期需要更新时，并不主动清理掉数据。其他非逃逸请求使用历史脏数据，而逃逸的那一个请求负责把数据取回来并刷新前置缓存。\n\n最后如何发现热点缓存并前置\n\n除了需要应对热点缓存，另外一个重点就是如何发现热点缓存。对于发现热点有两个方式，一种是被动发现，另外一种是主动发现。\n\n被动发现是借助前置缓存有容量上限实现的。在被动发现的方案里，读服务接受到的所有请求都会默认从前置缓存中获取数据，如不存在，则从缓存服务器进行加载。因为前置缓存的容量淘汰策略是 LRU，如果数据是热点，它的访问次数一定非常高，因此它一定会在前置缓存中。借助前置缓存的容量上限和淘汰策略，即实现了热点发现。\n\n但此方式也存在一个问题——所有的请求都优先从前置缓存获取数据，并在未查询到时加载服务端数据到本地的前置缓存里，此方式也会把非热点数据存储至前置缓存里，导致非热点数据产生非必要的延迟性。\n\n主动发现则需要借助一些外部计数工具来实现热点的发现。外部计数工具的思路大体比较类似，都是在一个集中的位置对于请求进行计数，并根据配置的阈值判断某请求是否会命中数据。对于判定为热点的数据，主动的推送至应用内的前置缓存即可。下图 8 为在缓存服务器进行计数的架构方案：\n\n\n\n图 8：主动发现热点缓存架构图\n\n采用主动发现的架构后，读服务接受到请求后仍然会默认的从前置缓存获取数据，如获取到即直接返回。如未获取到，会穿透去查询后端缓存的数据并直接返回。但穿透获取到的数据并不会写入本地前置缓存。数据是否为热点且是否要写入前置缓存，均由计数工具来决定。此方案很好地解决了因误判断带来的延迟问题。\n\n\n降级兜底不可少\n\n在采用了前置缓存并解决了上述四大类问题之后，当你再次遇到百万级并发时，基本没什么疑难问题了。但这里还存在一个前置条件，即当热点查询发生时，你所部署的容器数量所能支撑的 QPS 要大于热点查询的 QPS。\n\n但实际情况并非如此，你所部署的机器能够支持的 QPS 未必都能够大于当次的热点查询。对于可能出现的超预期流量，可以使用前置限流的策略进行应对。在系统上线前，对于开启了前置缓存的应用进行压测，得到单机最大的 QPS。根据压测值设置单机的限流阈值，阈值可以设置为压测值的一半或者更低。设置为压测阈值的一半或更低，是因为压测时应用 CPU 基本已达到 100%，为了保证线上应用能够正常运转，是不能让 CPU 达到 100% 的。架构如下图 9 所示：\n\n\n\n图 9：前置限流的架构图\n\n根据此方案你可以看到，在做架构设计时，即使已经做了非常多的应对方案，最后的兜底降级还是必不可少，因为超出预期的事情说来就来。\n\n\n其他前置策略\n\n本专栏讨论的是业务后端架构中的各类套路和各项问题的应对方案。但其实在应对热点查询时，除了采用后端应用内的前置缓存进行应对外，在前端的架构里也有一些应对手段。比如在接入层（如 Nginx）进行前置缓存、数据前置至离用户更近的 CDN 及开启浏览器缓存。因专栏定位，此处就不展开讨论，如果你感兴趣，可以订阅拉勾教育里其他关于 CDN 和前端架构的专栏。\n\n\n总结\n\n本讲介绍了什么是热点查询，以及为什么前两讲的架构支持不了热点查询的并发流量。\n\n在本讲里，介绍了如何使用主从复制，以及前置缓存应对热点查询。同时，对于前置缓存中存在的四大类问题，缓存上限、延迟问题、逃逸流量应对，以及热点数据发现逐一讲解了应对方案。最后，还介绍了在流量超出预期之后，如何进行降低兜底，以及在使用了后端的各种应对策略之后，在前端和接入层有哪些架构方案可供选择。相信你在学习了本讲的内容之后，后续在面对热点查询的场景时，能够轻松应对。\n\n留一个讨论题，你所负责的业务里有热点读的场景吗？你是如何解决的？欢迎留言，我们一起讨论。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **2937：\n\n> 异构的前置缓存，数据是存在于哪里？是redis ，还是跟前置缓存一样都存在于应用服务器？\n\n#     讲师回复：\n\n>     不在同一台应用里，可以单独做个工具出来。异构缓存的目的是过滤出在应用内的缓存条目，进而减轻全量数据变更的压力。\n\n# **2937：\n\n> 异构的前置缓存跟前置缓存都存在于一台服务器吗？\n\n#     讲师回复：\n\n>     不在同一台应用里，可以单独做个工具出来。异构缓存的目的是过滤出在应用内的缓存条目，进而减轻全量数据变更的压力。\n\n# **3961：\n\n> 应对热点方案，发现热点（主动、被动），兜底策略\n\n# **春：\n\n> 你好！binlog数据读取到redis的hash中，取数据是时候排序怎么弄，还是这种排序需要放到ES中？\n\n#     讲师回复：\n\n>     redis中支持排序的类型是zset，你可以查看是否能够满足你的需求。其它的排序方式有，1）使用redis存储数据，将数据查询到应用代码中，进行排序。2）正如你所说的，使用es等其它类型的存储进行排序\n\n# **4123：\n\n> 有两个疑问，第一：如何做到只有一个逃逸流量从应用发出。第二，如何判定是逃逸流量，它和正式流量怎么区分呢\n\n#     讲师回复：\n\n>     caffeine这个java实现的缓存，可以做到只有一个逃逸流量从应用发出。当本地缓存过期了，才会有逃逸流量。它的作用是更新本地缓存的数据。",normalizedContent:"在“04 讲和 05 讲”里，我们介绍了基于 binlog 实现的全量缓存的读服务，以及如何实现一个低延迟、可扩展的同步架构。通过这两讲的学习，你可以构建出一个无毛刺且平均性能在 100ms 以内的读接口。对缓存进行分布式部署后，抗住秒级百万的 qps 毫无压力。不管是在面试还是在实战中，关于“如何架构一个高性能的读服务”，我相信你都能够轻松应对。\n\n但上述的“百万 qps”有一个非常重要的限制条件，即这百万的 qps 都是分属于不同用户的。我们先不讨论是否可能，试想一下如果这百万 qps 都属于同一个用户，系统还扛得住吗？\n\n如果采用前两讲的架构，必然抗扛不住的！因此本讲将站在一个全新的视角，带你分析此架构待改善的方向，并探寻新的架构优化方案来应对百万 qps的流量。\n\n\n为什么扛不住相同用户百万的流量\n\n当百万的 qps 属于不同用户时，因缓存是集群化的，所有到达业务后台的请求会根据一定路由规则（如 hash），分散到请求缓存集群中的某一个节点，具体架构如下图 1 所示：\n\n\n\n图 1：百万请求属于不同用户的架构图\n\n假设一个节点最大能够支撑 10w qps，我们只需要在集群中部署 10 台节点即可支持百万流量。但当百万 qps 都属于同一用户时，即使缓存是集群化的，同一个用户的请求都会被路由至集群中的某一个节点，整体架构如图 2 所示：\n\n\n\n图 2：百万请求属于相同用户的架构图\n\n即使此节点的机器配置非常好，当前能够支持住百万 qps。但随着流量上涨，它也无法满足未来的流量诉求。原因有 2 点：\n\n 1. 单台机器无法无限升级；\n\n 2. 缓存程序本身也是有性能上限的。\n\n此类并发次数非常大、数据完全相同的请求称为热点查询。类似的场景还有热点写，区别在于它在请求后会对数据进行写入或变更，如何应对热点写，我将在“16 讲”进行详细讲解。\n\n有哪些热点查询场景\n\n除了我在本讲开始介绍的，一个用户并发百万次请求产生热查询的案例外，在实际的日常生活中，会导致热查询的案例也非常多。\n\n 1. 微博热点吃瓜事件，百万用户同一时间查询某条微博内容。对此条微博的查询就是热查询。\n\n 2. 电商里的秒杀或者低价薅羊毛活动，为了第一时间抢到心仪的商品，成百上千万的用户会不断地刷新商品页面，等待秒杀倒计时。对此商品的查看就是热查询。\n\n\n主从复制进行垂直扩容\n\n虽然单机的机器配置和程序的性能是有上限的，但我们可以利用节点间的主从复制功能来进行节点间的扩容。主从复制开启后，一个主节点可以挂一至多个从。升级后的架构如下图 3 所示（方案解读在架构图中）：\n\n\n\n图 3：主从复制应对热点的架构图\n\n在查询时，将应用内的缓存客户端开启主从随机读。此时，包含一个从的分片的并发能力，可以提升至原来的一倍。随着从节点的增加，单分片的并发性能会不断翻倍。这对于所有请求只会命中某一个固定单分片的热点查询能够很好地应对。\n\n但此方案存在一个较大的问题，就是浪费资源。\n\n主从复制除了有应对热点的功能，另外一个主要作用是为了高可用。当集群中的某一个主节点发生故障后，集群高可用模块会自动对该节点进行故障迁移，从该节点所属分片里选举一个从节点为主节点。为了高可用模块在故障转移时的逻辑能够简单清晰并做到统一，会将集群的从节点数量设置为相同数量。\n\n相同从节点数量也带来了较大的资源浪费。为了应对热点查询，需要不断扩容从分片。但热点查询只会命中其中一个分片，这就导致所有其他分片的从节点全部浪费了。为了节约资源，可以对高可用模块进行改造，不强制所有分片的从节点必须相同，但这个代价也是非常高昂的。另外，热点查询很多时候是随时出现的，并不能提前预测，所以提前扩容某一个分片意义并不大。\n\n总的来说，主从复制能够解决一定流量的热点查询且实施起来较简单。但不具备扩展性，在应对更大流量的热点时会有些吃力。\n\n\n利用应用内的前置缓存\n\n热点查询是对相同的数据进行不断重复查询的一种场景。特点是次数多，但需要存储的数据少，因为数据都是相同的。\n\n针对此类业务特性，我们可以将热点数据前置缓存在应用程序内来应对热点查询，并解决前一小节里主从复制方案的扩展性问题。使用了前置缓存的架构如下图 4 所示：\n\n\n\n图 4：前置缓存的架构图\n\n应用内的缓存存储的均是热点数据。当应用扩容后，热点缓存的数量也随之增加。在采用了前置缓存后，在面对热查询时只需扩容应用即可。因为所有应用内均存储了所有的热点数据，且前端负载均衡器（如 nginx 等）会将所有请求平均地分发到各应用中去。\n\n使用应用内的前置缓存应对热点查询时，仍有以下几个问题需要重点关注。\n\n首先是应用内缓存需要设置上限\n\n应用所属宿主机的内存是有限的，且其内存还要支持业务应用使用。固在使用应用内的前置缓存时，必须设置容量的上限且设置容量满时的逐出策略。逐出策略可以是 lru，将最少使用的缓存在容量满时清理掉，因为热点缓存需要存储的是访问次数多的数据。\n\n此外，前置缓存也需要设置过期时间，毕竟太久无访问的缓存也肯定是非热点数据，所以可以及时清理掉，提前释放内存空间。\n\n其次是根据业务对待延迟的问题\n\n前置缓存的延迟问题的解决方案和“04 讲”“05 讲”的思路基本类似。要么采用定期刷新，要么采用主动刷新。\n\n如果业务上可以容忍一定时间的延迟，可以在缓存数据上设置一个刷新时间即可。实现起来非常简单。\n\n如果想要实时感知变化，可以采用 binlog 的方式，在变更时主动刷新。但前置缓存的主动感知不能在前置缓存的应用里实现，因为应用代码也运行在此机器上，通过 mq 感知变更会消耗非常多的 cpu 和内存资源。另外，前置缓存里数据很少，很多变更消息都会因不在前置缓存中而被忽略掉。为了实现前置缓存的更新，可以将前置缓存的数据异构一份出来用作判断，升级的方案如下图 5 所示：\n\n\n\n图 5：前置缓存实时更新方案图\n\n通过异构前置缓存用作判断，可以过滤出需要处理的数据，并实时调用对应机器更新即可。此方案实现起来较复杂且异构本来也导致了延迟，实际上大部分场景设置刷新时间即可满足。\n\n再者要把控好瞬间的逃逸流量\n\n应用初始化时，前置缓存是空的。假设在初始化时，瞬间出现热点查询，所有的热点请求都会逃逸到后端缓存里。可能这个瞬间热点就会把后端缓存打挂。\n\n其次，如果前置缓存采用定期过期，在过期时若将数据清理掉，那么所有的请求都会逃逸至后端加载最新的缓存，也有可能把后端缓存打挂。这两种情况对应的流程图如下图 6 所示：\n\n\n\n图 6：逃逸流量的架构图\n\n对于这两种情况，可以对逃逸流量进行前置等待或使用历史数据的方案。不管是初始化还是数据过期，在从后端加载数据时，只允许一个请求逃逸。这样最大的逃逸流量为部署的应用总数，量级可控。架构如下图 7 所示：\n\n\n\n图 7：逃逸流量控制的架构图\n\n对于数据初始化为空时，其他非逃逸的请求可以等待前置缓存的数据并设置一个超时时间。对于数据过期需要更新时，并不主动清理掉数据。其他非逃逸请求使用历史脏数据，而逃逸的那一个请求负责把数据取回来并刷新前置缓存。\n\n最后如何发现热点缓存并前置\n\n除了需要应对热点缓存，另外一个重点就是如何发现热点缓存。对于发现热点有两个方式，一种是被动发现，另外一种是主动发现。\n\n被动发现是借助前置缓存有容量上限实现的。在被动发现的方案里，读服务接受到的所有请求都会默认从前置缓存中获取数据，如不存在，则从缓存服务器进行加载。因为前置缓存的容量淘汰策略是 lru，如果数据是热点，它的访问次数一定非常高，因此它一定会在前置缓存中。借助前置缓存的容量上限和淘汰策略，即实现了热点发现。\n\n但此方式也存在一个问题——所有的请求都优先从前置缓存获取数据，并在未查询到时加载服务端数据到本地的前置缓存里，此方式也会把非热点数据存储至前置缓存里，导致非热点数据产生非必要的延迟性。\n\n主动发现则需要借助一些外部计数工具来实现热点的发现。外部计数工具的思路大体比较类似，都是在一个集中的位置对于请求进行计数，并根据配置的阈值判断某请求是否会命中数据。对于判定为热点的数据，主动的推送至应用内的前置缓存即可。下图 8 为在缓存服务器进行计数的架构方案：\n\n\n\n图 8：主动发现热点缓存架构图\n\n采用主动发现的架构后，读服务接受到请求后仍然会默认的从前置缓存获取数据，如获取到即直接返回。如未获取到，会穿透去查询后端缓存的数据并直接返回。但穿透获取到的数据并不会写入本地前置缓存。数据是否为热点且是否要写入前置缓存，均由计数工具来决定。此方案很好地解决了因误判断带来的延迟问题。\n\n\n降级兜底不可少\n\n在采用了前置缓存并解决了上述四大类问题之后，当你再次遇到百万级并发时，基本没什么疑难问题了。但这里还存在一个前置条件，即当热点查询发生时，你所部署的容器数量所能支撑的 qps 要大于热点查询的 qps。\n\n但实际情况并非如此，你所部署的机器能够支持的 qps 未必都能够大于当次的热点查询。对于可能出现的超预期流量，可以使用前置限流的策略进行应对。在系统上线前，对于开启了前置缓存的应用进行压测，得到单机最大的 qps。根据压测值设置单机的限流阈值，阈值可以设置为压测值的一半或者更低。设置为压测阈值的一半或更低，是因为压测时应用 cpu 基本已达到 100%，为了保证线上应用能够正常运转，是不能让 cpu 达到 100% 的。架构如下图 9 所示：\n\n\n\n图 9：前置限流的架构图\n\n根据此方案你可以看到，在做架构设计时，即使已经做了非常多的应对方案，最后的兜底降级还是必不可少，因为超出预期的事情说来就来。\n\n\n其他前置策略\n\n本专栏讨论的是业务后端架构中的各类套路和各项问题的应对方案。但其实在应对热点查询时，除了采用后端应用内的前置缓存进行应对外，在前端的架构里也有一些应对手段。比如在接入层（如 nginx）进行前置缓存、数据前置至离用户更近的 cdn 及开启浏览器缓存。因专栏定位，此处就不展开讨论，如果你感兴趣，可以订阅拉勾教育里其他关于 cdn 和前端架构的专栏。\n\n\n总结\n\n本讲介绍了什么是热点查询，以及为什么前两讲的架构支持不了热点查询的并发流量。\n\n在本讲里，介绍了如何使用主从复制，以及前置缓存应对热点查询。同时，对于前置缓存中存在的四大类问题，缓存上限、延迟问题、逃逸流量应对，以及热点数据发现逐一讲解了应对方案。最后，还介绍了在流量超出预期之后，如何进行降低兜底，以及在使用了后端的各种应对策略之后，在前端和接入层有哪些架构方案可供选择。相信你在学习了本讲的内容之后，后续在面对热点查询的场景时，能够轻松应对。\n\n留一个讨论题，你所负责的业务里有热点读的场景吗？你是如何解决的？欢迎留言，我们一起讨论。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **2937：\n\n> 异构的前置缓存，数据是存在于哪里？是redis ，还是跟前置缓存一样都存在于应用服务器？\n\n#     讲师回复：\n\n>     不在同一台应用里，可以单独做个工具出来。异构缓存的目的是过滤出在应用内的缓存条目，进而减轻全量数据变更的压力。\n\n# **2937：\n\n> 异构的前置缓存跟前置缓存都存在于一台服务器吗？\n\n#     讲师回复：\n\n>     不在同一台应用里，可以单独做个工具出来。异构缓存的目的是过滤出在应用内的缓存条目，进而减轻全量数据变更的压力。\n\n# **3961：\n\n> 应对热点方案，发现热点（主动、被动），兜底策略\n\n# **春：\n\n> 你好！binlog数据读取到redis的hash中，取数据是时候排序怎么弄，还是这种排序需要放到es中？\n\n#     讲师回复：\n\n>     redis中支持排序的类型是zset，你可以查看是否能够满足你的需求。其它的排序方式有，1）使用redis存储数据，将数据查询到应用代码中，进行排序。2）正如你所说的，使用es等其它类型的存储进行排序\n\n# **4123：\n\n> 有两个疑问，第一：如何做到只有一个逃逸流量从应用发出。第二，如何判定是逃逸流量，它和正式流量怎么区分呢\n\n#     讲师回复：\n\n>     caffeine这个java实现的缓存，可以做到只有一个逃逸流量从应用发出。当本地缓存过期了，才会有逃逸流量。它的作用是更新本地缓存的数据。",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何基于流量回放实现读服务的自动化测试回归？",frontmatter:{title:"如何基于流量回放实现读服务的自动化测试回归？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/2847ee/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/08.%20%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8E%E6%B5%81%E9%87%8F%E5%9B%9E%E6%94%BE%E5%AE%9E%E7%8E%B0%E8%AF%BB%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%9B%9E%E5%BD%92%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/08. 如何基于流量回放实现读服务的自动化测试回归？.md",key:"v-1d86706e",path:"/pages/2847ee/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4540}],headersStr:"精选评论",content:'在本模块的前四讲里，我向你介绍了可以直接落地的、能够支撑百万并发的读服务的系统架构，包含懒加载缓存、全量缓存，以及数据同步等方案的技术细节。\n\n基于上述方案及细节，你可以直接对你所负责的读服务进行架构升级，将性能进一步提升。在升级系统架构时，有一个很重要的点容易被研发同学忽略——只评估了升级的工作量，就直接开干。最后提测的时候，发现改造范围太大，测试根本回归不完，升级重构上线遥遥无期。\n\n随着业务的发展，系统相应地进行升级重构是不可避免的，但与此同时也带来了巨大的测试回归量。在本讲里，我将介绍一种自动化的测试回归架构方案，它能够极大地降低读业务因升级重构而带来的回归问题。此外，还能适配日常需求上线的回归工作量，真正做到了回归自动化、研发自助化，避免用户场景全覆盖遗留导致漏测的问题。\n\n\n为什么要自动化？\n\n首先我们来看针对架构升级的场景。 不管是因为技术还是业务导致的系统重构架构升级，它的改造量和范围都是非常大的。对于此类系统级的重构，测试回归的工作量至少都是以月为单位，对于人力的消耗巨大。一种应对方案是，先不改造，到系统实在扛不住了再想办法。另一种应对方案是，先暂停需求，全力进行改造。但在实际工作场景中，上述应对策略往往很难实现。\n\n再来看看针对日常需求的场景。 对于后台系统，基本上都是微服务架构，对外会提供一至多个接口。一般一个需求只会涉及一个或者几个接口的某些场景的修改，测试同学也只会对改造的接口及对应的场景进行测试。\n\n但在实际案例里，需求涉及的接口或场景上线后均不会出现 Bug，但同一个服务里的其他接口，即当次未涉及修改的被测接口，就比较容易出现 Bug。因为虽然对外的接口是不同的，但底层的逻辑很可能是复用了相同的代码，导致相互影响。为了避免此情况，对于任何一个需求，测试同学都需要回归所有接口，这个工作量是巨大的。\n\n针对上述问题，通过自动化的方式提升效率便是我们的不二选择。\n\n\n如何实现自动化回归？\n\n首先来看一下自动化回归方案的基本原理。读服务能够实现测试回归自动化有两个前置条件。\n\n1. 读服务均是查询，它是无状态的。\n\n无状态是指每次请求都是无副作用的、可以重复的。同样的请求入参，在后台数据无变化的情况下，多次重试的结果均一样。相比而言，写或者扣减业务就不行。比如用户的余额变化就会产生副作用。具体来说，上一次购物订单支付成功，第二次和上一次使用同样的金额进行支付就不一定能成功。因为上一次的支付产生了副作用，用户的余额减少了，导致此次支付不成功。\n\n2. 不管是架构升级还是日常需求，读服务对外接口的出入参格式是没有变化的。\n\n不管服务内部的逻辑如何变化，只要接口出入参格式不变（下图 1 中标记的 1、2 表示架构升级，但对外接口未变），就可以利用读服务的无状态特性进行流量回放。\n\n\n\n图 1：新老版本的接口未变架构图\n\n整体架构\n\n下图 2 是读服务的自动化测试回归的整体架构：\n\n\n\n图 2：自动化测试回归整体架构图\n\n在这个架构里包含三大模块，分别为日志收集、数据回放，以及差异对比。它们主要有以下 3 个功能：\n\n 1. 日志收集，主要作用是收集被测系统的真实用户请求，基于一定规则处理后作为系统用例；\n\n 2. 数据回放是基于收集的用例，对被测系统进行数据回放，发起自动化测试回归；\n\n 3. 差异对比，类似人工测试发现 Bug 的过程，通过差异对比自动发现与预期不一致的用例，进而确定 Bug。\n\n日志收集\n\n不管是提供 HTTP 形式还是 RPC 形式接口的后台读服务，都可以通过现在比较成熟的过滤器进行日志收集，比如 Spring 里的 Interceptor 过滤器、Servlet 里的 Filter 过滤器等。采用过滤器的架构如下图 3 所示：\n\n\n\n图 3：基于过滤器的日志收集架构图\n\n在过滤器中，会对所有请求的入参和出参进行记录，并通过 MQ 发送出去。记录的数据格式类似如下：\n\n{"应用名":"XXX","接口方法名":"RPC记录的接口方法名/HTTP记录域名及路径","入参":"XXX","出参":"XXX"}\n\n\n对于发送出去的 MQ，自动化回归的消费服务会按应用和接口进行处理。对于应用和接口方法的标识数据可以存储在数据库里，对于入参和出参可以存储在 NoSQL 里，如 HBase。之所以将出入参数据存储在 HBase 里，是因为入参和出参数据量较大，存储在数据库里查询性能会比较差。\n\n即使将参数存储在原生支持分布式的 NoSQL 里，也要对采集的日志进行一些过滤、去重以及无效数据定期清理等操作。此外，对于压测等非业务场景，需要关闭日志采集。毕竟，日常业务请求带来的数据量可能一天都上亿或十几亿次，如果不做管控，对于存储的消耗将是巨大的。\n\n当前日志收集采用的过滤器是和业务应用同属于一个进程，它会占用业务应用的内存资源，同时对于业务也存在一定的侵入性。当遇到此种情况，可以将日志收集独立出来，采用单独进程进行运行。升级后的架构如下图 4 所示：\n\n\n\n图 4：单独进程的日志收集架构图\n\n采用单独进程后，业务应用需要按上述格式将出入参日志打印到指定文件。单独的数据收集进程只需要对此文件进行监控并将变化数据发送至 MQ 即可。在操作系统里，可以单独对进程设置资源占用的限制。为了保证业务应用不被日志采集所影响，可以对采集进程设置内存、CPU 等限制，并配置资源占用报警等。\n\n数据回放\n\n有了上面的出入参之后，便可以在测试时进行回放了。数据回放主要的作用是基于日志里记录的接口信息（HTTP 便为域名）和入参，去实时调用被测系统，并存储实时回放返回的出参信息。整体架构如下图 5 所示：\n\n\n\n图 5：实时数据回放架构图\n\n实时回放时，如果是 HTTP 形式的接口，采用主流的 HTTP 客户端即可。如果是 RPC 形式接口，需要使用该 RPC 框架提供的能够调用任意被测接口的客户端。\n\n差异对比\n\n在完成了数据回放后，便可以对回放产生的结果数据与预期数据（比如收集日志里的出参）进行比较。数据对比有很多形式，比如基于二进制校验和、基于文本等。二进制校验和的方式只是告诉你数据是否整体一致，而不会展示具体哪里不一致。即使展示了，但因为是二进制，人工也无法查看。\n\n此处数据对比采用文本形式，先将数据转换为 JSON 格式，再进行对比。使用文本格式，可以看到数据整体不一致，以及具体是何处导致的不一致。如下图 6 所示：\n\n\n\n图 6：返回数据对比图\n\n可以看到，同一个 SKU 的名称，在两边出现了不一致。如果只是进行了系统重构，相同的 SKU 对应的数据应该是一样，此处出现了不一致，代表出现了 Bug。采用文本对比，可以直观地看到哪个字段数据有差异，从而更快定位到问题。\n\n正常情况下，只要存在差异的数据，均可认为是 Bug，是需要进行修复的。但有些时候，比如接口会对每次请求产生一个唯一标识，用此标识来打印日志并返回给调用方。在差异对比时，此类接口每次都会因为唯一标识不同而导致对比出现差异，但此差异又不会对业务产生影响。对于此类场景，需要差异对比工具具备忽略能力，在对比时忽略唯一标识字段。\n\n通过数据收集、回放和差异对比，能够实现自动化、可视化，将读业务的测试回归完全自动化。\n\n回放的三种模式\n\n上述讲解了自动化测试的整体流程和实现步骤，关于回放，我们只讲解了技术实现，接下来我再介绍几种需要你重点关注的模式。\n\n1. 离线回放模式\n\n离线回放模式是指在回放时只调用进行改造的新服务，将新服务返回的数据与收集日志里的出参进行比较。架构如下图 7 所示：\n\n\n\n图 7：离线回放模式架构图\n\n采用离线回放的好处是，减少了对于线上老版本的调用量，避免对线上产生影响也节约了资源。但存在一个问题，如果后台存储中的数据已经发生了变化，此时就不能使用收集的日志里的出参。因为从新版本实时查出的数据与历史收集的日志数据已经不准了。\n\n2. 实时回放模式\n\n为了解决离线回放模式里，因为数据变化导致收集的日志里的出参无效问题，可以采用实时回放的模式，如下图 8 所示的架构图。上述架构在收集的日志里，只记录入参而不记录出参，收集流程见下图 8 中的标记 3。\n\n\n\n图 8：基于录制的实时回放模式\n\n实时回放的模式会在上图 8 中的标记 4，研发或测试手动触发回放功能后，使用入参实时的调用新老版本的被测应用，并对比双方返回的出参，通过此方式可以规避数据变更的问题。\n\n3. 无录制的实时回放模式\n\n不管是离线回放还是实时回放都存在一个问题，我们是对接口的入参进行录制（存储至 NoSQL 里，如上图 8 里的 HBase）再回放的。因存储容量有限，只能存储一定数量的数据，很多日志用例可能会被丢弃。这就可能导致有些重要场景会被漏测。针对这个问题，可以采用无录制的实时回放模式，架构如下图 9 所示：\n\n\n\n图 9：无录制的实时回放模式\n\n无录制实时回放不再记录入参数据了（见图 9 和图 8 里的标记 3 的差异）。当日志消费模块接收到收集的日志用例后，实时调用新老版本被测服务并进行数据对比。使用此方式，进行几周或者更久的回放，基本能够覆盖全部场景了。\n\n下面我们再来总结一下注意事项。在线上部署及使用自动化回归工具时，也有一些需要注意与规避的点。\n\n 1. 在进行自动化回归时，写接口一定要屏蔽。以注册用户举例，如果在回放时没有屏蔽，使用线上入参进行回放，将会产生很多垃圾用户，给后续的业务流程带来巨大影响。\n\n 2. 上述几种回放模式里，除了离线模式外，实时回放模式和无录制的实时回放模式都会对线上系统产生一定的流量压力。假设被测系统的性能比较差或者机器数较少，自动化回放的流量会把线上系统打挂，进而影响业务不可用。特别无录制的实时回放模式，带来的流量更大且持续时间更长。\n\n 3. 即使采用了无录制的实时回放模式，也只是通过更长时间的回放尽可能地覆盖更多的业务场景。但也并没有足够的证据表明，一定不会出现漏测。对于此种问题，可以借助一些代码覆盖率的工具，如 Java 里的 JaCoCo，来统计一次回放后被测系统的代码覆盖率，通过数据来判断是否存在可能的漏测。\n\n\n总结\n\n本讲介绍了读业务在系统重构及日常需求开发时，均存在的测试回归耗时长和可能存在漏测的问题。根据读业务无状态及可重复执行的特点，针对上述问题我们构建了一套基于业务日志的自动化回归平台，主要包含三大子模块，分别是日志采集、数据回放及差异对比。\n\n希望你学习完本讲内容之后，对比你所在的团队，思考是否存在测试回归耗时长及漏测导致线上问题的场景。如果有的话，可以考虑尝试采用此方案及其变种，来提升你所在团队的效率。\n\n最后，留一道思考题给你。本讲介绍的方案是基于读回放场景，请你思考写回放和读回放有什么区别？欢迎在留言区留言，我们一起讨论。\n\n下一讲我们介绍 08 | 如何使用分库分表支持海量数据的写入？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **春：\n\n> 你好老师！缓存到 redis中的数据，怎么进行排序操作？\n\n#     讲师回复：\n\n>     这个问题和06讲的提问是一个问题哈。redis中支持排序的类型是zset，你可以查看是否能够满足你的需求。其它的排序方式有，1）使用redis存储数据，将数据查询到应用代码中，进行排序。2）正如你所说的，使用es等其它类型的存储进行排序\n\n# 风：\n\n> 单独进程的日志收集，业务接口也要进行拦截请求是吧，不然入参和出参拿不到\n\n#     讲师回复：\n\n>     是的，业务接口需要拦截请求，并把拦截的内容输出到本地文件即可。 单独进程进行日志收集是指：异步的收集这个日志文件里的内容，不去影响业务应用的进程。\n\n# **6988：\n\n> 麻烦问下，如果录制线上的流量，按接口参数，相同的只录制一份，然后在测试环境进行回放，这种方式有没太大问题呢\n\n#     讲师回复：\n\n>     没有太大问题。需要注意你们公司是否允许将线上数据搬到测试环境\n\n# **铧：\n\n> 请求和返回都记录，有服务依赖的时候，MOCK请求和对应返回，不请求依赖服务，这样读写服务都可以用流量回放来回归测试？\n\n#     讲师回复：\n\n>     是的。写服务在线上mock有风险，有可能误写入。写服务建议在测试环境mock，防止出现问题\n\n# **3961：\n\n> 日志采集、数据回放及差异对比',normalizedContent:'在本模块的前四讲里，我向你介绍了可以直接落地的、能够支撑百万并发的读服务的系统架构，包含懒加载缓存、全量缓存，以及数据同步等方案的技术细节。\n\n基于上述方案及细节，你可以直接对你所负责的读服务进行架构升级，将性能进一步提升。在升级系统架构时，有一个很重要的点容易被研发同学忽略——只评估了升级的工作量，就直接开干。最后提测的时候，发现改造范围太大，测试根本回归不完，升级重构上线遥遥无期。\n\n随着业务的发展，系统相应地进行升级重构是不可避免的，但与此同时也带来了巨大的测试回归量。在本讲里，我将介绍一种自动化的测试回归架构方案，它能够极大地降低读业务因升级重构而带来的回归问题。此外，还能适配日常需求上线的回归工作量，真正做到了回归自动化、研发自助化，避免用户场景全覆盖遗留导致漏测的问题。\n\n\n为什么要自动化？\n\n首先我们来看针对架构升级的场景。 不管是因为技术还是业务导致的系统重构架构升级，它的改造量和范围都是非常大的。对于此类系统级的重构，测试回归的工作量至少都是以月为单位，对于人力的消耗巨大。一种应对方案是，先不改造，到系统实在扛不住了再想办法。另一种应对方案是，先暂停需求，全力进行改造。但在实际工作场景中，上述应对策略往往很难实现。\n\n再来看看针对日常需求的场景。 对于后台系统，基本上都是微服务架构，对外会提供一至多个接口。一般一个需求只会涉及一个或者几个接口的某些场景的修改，测试同学也只会对改造的接口及对应的场景进行测试。\n\n但在实际案例里，需求涉及的接口或场景上线后均不会出现 bug，但同一个服务里的其他接口，即当次未涉及修改的被测接口，就比较容易出现 bug。因为虽然对外的接口是不同的，但底层的逻辑很可能是复用了相同的代码，导致相互影响。为了避免此情况，对于任何一个需求，测试同学都需要回归所有接口，这个工作量是巨大的。\n\n针对上述问题，通过自动化的方式提升效率便是我们的不二选择。\n\n\n如何实现自动化回归？\n\n首先来看一下自动化回归方案的基本原理。读服务能够实现测试回归自动化有两个前置条件。\n\n1. 读服务均是查询，它是无状态的。\n\n无状态是指每次请求都是无副作用的、可以重复的。同样的请求入参，在后台数据无变化的情况下，多次重试的结果均一样。相比而言，写或者扣减业务就不行。比如用户的余额变化就会产生副作用。具体来说，上一次购物订单支付成功，第二次和上一次使用同样的金额进行支付就不一定能成功。因为上一次的支付产生了副作用，用户的余额减少了，导致此次支付不成功。\n\n2. 不管是架构升级还是日常需求，读服务对外接口的出入参格式是没有变化的。\n\n不管服务内部的逻辑如何变化，只要接口出入参格式不变（下图 1 中标记的 1、2 表示架构升级，但对外接口未变），就可以利用读服务的无状态特性进行流量回放。\n\n\n\n图 1：新老版本的接口未变架构图\n\n整体架构\n\n下图 2 是读服务的自动化测试回归的整体架构：\n\n\n\n图 2：自动化测试回归整体架构图\n\n在这个架构里包含三大模块，分别为日志收集、数据回放，以及差异对比。它们主要有以下 3 个功能：\n\n 1. 日志收集，主要作用是收集被测系统的真实用户请求，基于一定规则处理后作为系统用例；\n\n 2. 数据回放是基于收集的用例，对被测系统进行数据回放，发起自动化测试回归；\n\n 3. 差异对比，类似人工测试发现 bug 的过程，通过差异对比自动发现与预期不一致的用例，进而确定 bug。\n\n日志收集\n\n不管是提供 http 形式还是 rpc 形式接口的后台读服务，都可以通过现在比较成熟的过滤器进行日志收集，比如 spring 里的 interceptor 过滤器、servlet 里的 filter 过滤器等。采用过滤器的架构如下图 3 所示：\n\n\n\n图 3：基于过滤器的日志收集架构图\n\n在过滤器中，会对所有请求的入参和出参进行记录，并通过 mq 发送出去。记录的数据格式类似如下：\n\n{"应用名":"xxx","接口方法名":"rpc记录的接口方法名/http记录域名及路径","入参":"xxx","出参":"xxx"}\n\n\n对于发送出去的 mq，自动化回归的消费服务会按应用和接口进行处理。对于应用和接口方法的标识数据可以存储在数据库里，对于入参和出参可以存储在 nosql 里，如 hbase。之所以将出入参数据存储在 hbase 里，是因为入参和出参数据量较大，存储在数据库里查询性能会比较差。\n\n即使将参数存储在原生支持分布式的 nosql 里，也要对采集的日志进行一些过滤、去重以及无效数据定期清理等操作。此外，对于压测等非业务场景，需要关闭日志采集。毕竟，日常业务请求带来的数据量可能一天都上亿或十几亿次，如果不做管控，对于存储的消耗将是巨大的。\n\n当前日志收集采用的过滤器是和业务应用同属于一个进程，它会占用业务应用的内存资源，同时对于业务也存在一定的侵入性。当遇到此种情况，可以将日志收集独立出来，采用单独进程进行运行。升级后的架构如下图 4 所示：\n\n\n\n图 4：单独进程的日志收集架构图\n\n采用单独进程后，业务应用需要按上述格式将出入参日志打印到指定文件。单独的数据收集进程只需要对此文件进行监控并将变化数据发送至 mq 即可。在操作系统里，可以单独对进程设置资源占用的限制。为了保证业务应用不被日志采集所影响，可以对采集进程设置内存、cpu 等限制，并配置资源占用报警等。\n\n数据回放\n\n有了上面的出入参之后，便可以在测试时进行回放了。数据回放主要的作用是基于日志里记录的接口信息（http 便为域名）和入参，去实时调用被测系统，并存储实时回放返回的出参信息。整体架构如下图 5 所示：\n\n\n\n图 5：实时数据回放架构图\n\n实时回放时，如果是 http 形式的接口，采用主流的 http 客户端即可。如果是 rpc 形式接口，需要使用该 rpc 框架提供的能够调用任意被测接口的客户端。\n\n差异对比\n\n在完成了数据回放后，便可以对回放产生的结果数据与预期数据（比如收集日志里的出参）进行比较。数据对比有很多形式，比如基于二进制校验和、基于文本等。二进制校验和的方式只是告诉你数据是否整体一致，而不会展示具体哪里不一致。即使展示了，但因为是二进制，人工也无法查看。\n\n此处数据对比采用文本形式，先将数据转换为 json 格式，再进行对比。使用文本格式，可以看到数据整体不一致，以及具体是何处导致的不一致。如下图 6 所示：\n\n\n\n图 6：返回数据对比图\n\n可以看到，同一个 sku 的名称，在两边出现了不一致。如果只是进行了系统重构，相同的 sku 对应的数据应该是一样，此处出现了不一致，代表出现了 bug。采用文本对比，可以直观地看到哪个字段数据有差异，从而更快定位到问题。\n\n正常情况下，只要存在差异的数据，均可认为是 bug，是需要进行修复的。但有些时候，比如接口会对每次请求产生一个唯一标识，用此标识来打印日志并返回给调用方。在差异对比时，此类接口每次都会因为唯一标识不同而导致对比出现差异，但此差异又不会对业务产生影响。对于此类场景，需要差异对比工具具备忽略能力，在对比时忽略唯一标识字段。\n\n通过数据收集、回放和差异对比，能够实现自动化、可视化，将读业务的测试回归完全自动化。\n\n回放的三种模式\n\n上述讲解了自动化测试的整体流程和实现步骤，关于回放，我们只讲解了技术实现，接下来我再介绍几种需要你重点关注的模式。\n\n1. 离线回放模式\n\n离线回放模式是指在回放时只调用进行改造的新服务，将新服务返回的数据与收集日志里的出参进行比较。架构如下图 7 所示：\n\n\n\n图 7：离线回放模式架构图\n\n采用离线回放的好处是，减少了对于线上老版本的调用量，避免对线上产生影响也节约了资源。但存在一个问题，如果后台存储中的数据已经发生了变化，此时就不能使用收集的日志里的出参。因为从新版本实时查出的数据与历史收集的日志数据已经不准了。\n\n2. 实时回放模式\n\n为了解决离线回放模式里，因为数据变化导致收集的日志里的出参无效问题，可以采用实时回放的模式，如下图 8 所示的架构图。上述架构在收集的日志里，只记录入参而不记录出参，收集流程见下图 8 中的标记 3。\n\n\n\n图 8：基于录制的实时回放模式\n\n实时回放的模式会在上图 8 中的标记 4，研发或测试手动触发回放功能后，使用入参实时的调用新老版本的被测应用，并对比双方返回的出参，通过此方式可以规避数据变更的问题。\n\n3. 无录制的实时回放模式\n\n不管是离线回放还是实时回放都存在一个问题，我们是对接口的入参进行录制（存储至 nosql 里，如上图 8 里的 hbase）再回放的。因存储容量有限，只能存储一定数量的数据，很多日志用例可能会被丢弃。这就可能导致有些重要场景会被漏测。针对这个问题，可以采用无录制的实时回放模式，架构如下图 9 所示：\n\n\n\n图 9：无录制的实时回放模式\n\n无录制实时回放不再记录入参数据了（见图 9 和图 8 里的标记 3 的差异）。当日志消费模块接收到收集的日志用例后，实时调用新老版本被测服务并进行数据对比。使用此方式，进行几周或者更久的回放，基本能够覆盖全部场景了。\n\n下面我们再来总结一下注意事项。在线上部署及使用自动化回归工具时，也有一些需要注意与规避的点。\n\n 1. 在进行自动化回归时，写接口一定要屏蔽。以注册用户举例，如果在回放时没有屏蔽，使用线上入参进行回放，将会产生很多垃圾用户，给后续的业务流程带来巨大影响。\n\n 2. 上述几种回放模式里，除了离线模式外，实时回放模式和无录制的实时回放模式都会对线上系统产生一定的流量压力。假设被测系统的性能比较差或者机器数较少，自动化回放的流量会把线上系统打挂，进而影响业务不可用。特别无录制的实时回放模式，带来的流量更大且持续时间更长。\n\n 3. 即使采用了无录制的实时回放模式，也只是通过更长时间的回放尽可能地覆盖更多的业务场景。但也并没有足够的证据表明，一定不会出现漏测。对于此种问题，可以借助一些代码覆盖率的工具，如 java 里的 jacoco，来统计一次回放后被测系统的代码覆盖率，通过数据来判断是否存在可能的漏测。\n\n\n总结\n\n本讲介绍了读业务在系统重构及日常需求开发时，均存在的测试回归耗时长和可能存在漏测的问题。根据读业务无状态及可重复执行的特点，针对上述问题我们构建了一套基于业务日志的自动化回归平台，主要包含三大子模块，分别是日志采集、数据回放及差异对比。\n\n希望你学习完本讲内容之后，对比你所在的团队，思考是否存在测试回归耗时长及漏测导致线上问题的场景。如果有的话，可以考虑尝试采用此方案及其变种，来提升你所在团队的效率。\n\n最后，留一道思考题给你。本讲介绍的方案是基于读回放场景，请你思考写回放和读回放有什么区别？欢迎在留言区留言，我们一起讨论。\n\n下一讲我们介绍 08 | 如何使用分库分表支持海量数据的写入？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **春：\n\n> 你好老师！缓存到 redis中的数据，怎么进行排序操作？\n\n#     讲师回复：\n\n>     这个问题和06讲的提问是一个问题哈。redis中支持排序的类型是zset，你可以查看是否能够满足你的需求。其它的排序方式有，1）使用redis存储数据，将数据查询到应用代码中，进行排序。2）正如你所说的，使用es等其它类型的存储进行排序\n\n# 风：\n\n> 单独进程的日志收集，业务接口也要进行拦截请求是吧，不然入参和出参拿不到\n\n#     讲师回复：\n\n>     是的，业务接口需要拦截请求，并把拦截的内容输出到本地文件即可。 单独进程进行日志收集是指：异步的收集这个日志文件里的内容，不去影响业务应用的进程。\n\n# **6988：\n\n> 麻烦问下，如果录制线上的流量，按接口参数，相同的只录制一份，然后在测试环境进行回放，这种方式有没太大问题呢\n\n#     讲师回复：\n\n>     没有太大问题。需要注意你们公司是否允许将线上数据搬到测试环境\n\n# **铧：\n\n> 请求和返回都记录，有服务依赖的时候，mock请求和对应返回，不请求依赖服务，这样读写服务都可以用流量回放来回归测试？\n\n#     讲师回复：\n\n>     是的。写服务在线上mock有风险，有可能误写入。写服务建议在测试环境mock，防止出现问题\n\n# **3961：\n\n> 日志采集、数据回放及差异对比',charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何使用分库分表支持海量数据的写入？",frontmatter:{title:"如何使用分库分表支持海量数据的写入？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/0a30c5/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/09.%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%94%AF%E6%8C%81%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%86%99%E5%85%A5%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/09. 如何使用分库分表支持海量数据的写入？.md",key:"v-6f9f7890",path:"/pages/0a30c5/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4928}],headersStr:"精选评论",content:"在上一模块里，我们讲解了如何使用懒加载、全量缓存等机制构建一个能够支撑百万并发的读服务，同时介绍了如何使用自动化回放来提升读服务的测试与回归效率，直接跳读到本模块的同学有空可以返回去学习一下。\n\n在本模块的四讲里，将会介绍如何构建与读服务有着相反差异的写服务。并发百万的读服务每一次请求都不会产生新数据，是无状态的。而写服务不说并发百万，只要并发上万，一天产生的数据量也在亿级左右。本讲将要介绍如何存储这些海量数据，同时保证相对应的写入和查询的性能，以及业务流程不发生太大变化。\n\n不管是打车的订单、电商里的支付订单，还是外卖或团购的支付订单，都是后台服务中最重要的一环，关乎公司的营收。因此，本讲及本模块都将以订单业务作为案例进行分析。\n\n\n是否真的要分库？\n\n分库当然能够解决存储的问题，假设原先单库只能最多存储 2 千万的数据量。采用分库之后，存储架构变成下图 1 所示的分库架构，每个分库都可以存储 2 千万数据量，容量的上限一下提升了。\n\n\n\n图 1：分库架构图\n\n容量提升了，但也带来了很多其他问题。比如：\n\n 1. 分库数据间的数据无法再通过数据库直接查询了。比如跨多个分库的数据需要多次查询或借助其他存储进行聚合再查询。\n\n 2. 分库越多，出现问题的可能性越大，维护成本也变得更高。\n\n 3. 无法保障跨库间事务，只能借助其他中间件实现最终一致性。\n\n所以在解决容量问题上，可以根据业务场景选择，不要一上来就要考虑分库，分表也是一种选择。\n\n分表是指所有的数据均存在同一个数据库实例中，只是将原先的一张大表按一定规则，划分成多张行数较少的表。它与分库的区别是，分表后的子表仍在原有库中，而分库则是子表移动到新的数据库实例里并在物理上单独部署。分表的拆分架构如下图 2 所示：\n\n\n\n图 2：分表架构图\n\n以本模块的订单案例来说，假设订单只是单量多而每一单的数据量较小，这就适合采用分表。单条数据量小但行数多，会导致写入（因为要构建索引）和查询非常慢，但整体对于容量的占用是可控的。采用分表后，大表变成小表，写入时构建索引的性能消耗会变小，其次小表的查询性能也更好。如果采用了分库，虽然解决了写入和查询的问题，但每张表所占有的磁盘空间很少，也会产生资源浪费。两种方案的对比如下图 3 所示：\n\n\n\n图 3：单表行数多单数据量小的对比图\n\n在实际场景里，因为要详细记录用户的提单信息，单个订单记录的数据量均较多，所以不存在行数多但单条数据量小的情况。但在其他写入服务里，经常会出现上述场景，你可以优先采用分表的方案。因为分表除了能解决容量问题，还能在一定程度上解决分库所带来的三个问题。\n\n 1. 分表后可以通过 join 等完成一些富查询，相比分库简单得多。\n\n 2. 分表的数据仍存储在一个数据库里，不会出现很多分库。无须引入一些分库中间件，因此维护成本和开发成本均较低。\n\n 3. 因为在同一个数据库里，也可以很好地解决事务问题。\n\n接下来将介绍如何应对行数多且单行数据量较大的场景。通过我们前面的分析，我想你已经知道答案了——采用分库的方案。\n\n\n如何实现分库？\n\n在决定对数据库进行分库后，首先要解决的问题便是如何选择分库维度。不同的分库维度决定了部分查询是否能直接使用数据库，以及是否存在数据倾斜的问题。\n\n分库维度选择\n\n下面以订单为案例，介绍两种常见不同维度的分库方式：按直接满足最重要的业务场景划分和最细粒度随机分。\n\n首先我们来看按直接满足最重要的业务场景划分。在业务上，所有的订单数据都是隶属于某一个用户的。在选择分库维度时，可以按订单归属的用户这个字段进行分库。按此维度分库后，同一个用户的订单都在某一个分库里。分库后的场景如下图 4 所示：\n\n\n\n图 4：按购买用户进行分库的架构图\n\n订单模块除了提供提交订单接口外，还会提供给售卖商家对自己店铺的订单进行查询及修改等功能。这些维度的查询和修改需求，在采用了按购买用户进行分库之后，均无法直接满足了。\n\n这里请你思考一个问题，订单模块最重要的功能是什么？\n\n答案是保证客户（即买家）的各项订单功能能够正常使用，比如下单、下单后立刻（无延迟）查看已购的订单信息、待支付、待发货、待配送的订单列表等。相对来说，订单里的商品售卖方（即卖家）所使用的功能并不是优先级最高的。因为当我们要对卖家和买家的功能做取舍时，卖家是愿意降低优先级的，毕竟卖家是买卖的受益方。\n\n按购买用户划分后，用户的使用场景都可以直接通过分库支持，而不需要通过异构数据（存在数据延迟）等手段解决，对用户来说体验较好。其次，在同一个分库中，便于修改同一用户的多条数据，因此也不存在分布式事务问题。\n\n我们可以通过上述订单案例抽象出一个分库准则，即在确定分库字段时应该以直接满足最重要的业务场景为准。很多其他的业务都参考了这一准则，比如：\n\n 1. 对于微博和知乎等用户生产内容（UGC）的业务，均会按用户进行分库。因为用户新发布文章后就会去查看列表。\n\n 2. 支付系统里，也会按用户的支付记录进行分库。\n\n 3. 在技术上，比如一个微服务下的监控数据，同样会按微服务进行划分。同一个微服务的监控数据均存储在一个分库里，你可以直接在一个分库里查看微服务下的所有监控数据。\n\n上述划分方法虽然直接满足了最重要的场景，但可能会出现数据倾斜的问题，比如出现一个超级客户（如企业客户），购买的订单量非常大，导致某一个分库数据量巨多，就会重现分库前的场景。这属于最极端的情况之一。\n\n对于倾斜的问题，可以采用最细粒度的拆分，即按数据的唯一标示进行拆分，对于订单来说唯一标示即为订单号。采用订单号进行分库之后，用户的订单会按 Hash 随机均匀地分散到某一个分库里。这样就解决了某一个分库数据不均匀的问题。\n\n对于上个小节里的案例，也可以用此手段进行处理。比如：\n\n 1. 按用户的每一条微博随机分库；\n\n 2. 按用户的每一笔支付记录随机分库；\n\n 3. 同一个微服务里的每一个监控点的数据随机分库。\n\n采用最细粒度分库后，虽然解决了数据均衡的问题，但又带来了其他问题。\n\n 1. 首先便是除了细粒度查询外，其他任何维度的查询均不支持。这就需要通过异构等方式解决，但异构有延迟、对业务是有损的。\n\n 2. 其次采用最细粒度后，对于防重逻辑在数据库层面已经无法支持。比如用户对同一个订单在业务上只能支付一次这一诉求，在支付系统按支付号进行分库后便不能直接满足了。因为上述分库方式会导致不同支付单分散在不同的分库里，此时，期望在数据库中通过订单号的唯一索引进行支付防重就不可实施了。\n\n上述两种分库的方式，在解决问题的同时又带来一些新的问题。在架构中，没有一种方案可以解决所有问题的，更多的是根据场景去选择更适合自己的方案。\n\n全局唯一标示\n\n不管采用何种维度的分库方式，使用原有单库的数据库自增主键生产数据标示的方案已经不可以使用了。对于全局的数据唯一标示，有两种常见的生成方式。\n\n1. 使用算法随机生成。\n\n比如使用机器 IP、时间戳、随机数等进行组合，生成一个唯一编号。业界成熟的有 Twitter 推出的雪花算法。需要注意的是，为了保证唯一性，雪花算法增加了很多随机因子，导致计算出来的唯一标示特别长，达到 19 位。\n\n在 JavaScript 里，数据精度和 Java 等语言不完全一致，太长的雪花 ID 在前端存在溢出的问题。因为雪花算法生成的 ID 为 Long 类型，可以采用类似 Base64 等算法，对原始 ID 进行压缩转换为 String 类型，降低长度并避免和 JavaScript 精度不统一导致的问题。\n\n2. 基于数据库主键构建一个 ID 生成服务。\n\n虽然不能在插入的时候使用数据库唯一主键，但可以在插入前通过一个服务获取全局唯一的 ID。ID 生产服务可以基于一张单表实现，每一次外部请求时，均生产一个新的 ID。通过此方式，可以获得长度较短且为数值类型的全局唯一编号。\n\n但如果每次获取 ID 时，ID 生成服务都需要从数据库实时获取，性能会比较差。为了解决性能问题，可以在生成 ID 的数据库前置一个具备持久化功能的内存缓存，预生成一批 ID。具体架构如下图 5 所示：\n\n\n\n图 5：预生成 ID 架构图\n\n分库中间件选择\n\n现在开源提供分库支持的中间件较多，如 MyCat 等，整体上各类分库中间件可以分为两大类：一种是代理式、另外一种是内嵌式。\n\n代理式分库中间件对于业务应用无任何侵入，业务应用和未分库时一样使用数据库，分库的选择及分库的维度对业务层完全隐藏，接入和使用成本极低。代理式的架构如下图 6 所示：\n\n\n\n图 6：代理式分库架构图\n\n代理式虽有使用成本低的好处，但也存在其他一些问题。\n\n 1. 代理式在业务应用和数据库间增加了一层，导致了性能下降。\n\n 2. 代理式需要解析业务应用的 SQL，并根据 SQL 中的分库字段进行路由。它需要解析和适配所有 SQL 语法，增加了代理模块复杂度和出错的可能性。\n\n 3. 代理层是单独进程，需要部署占用资源，带来一定的成本。\n\n内嵌式分库中间件是将分库中间件内置在业务应用中，它只负责分库的选择，并不会解析用户的 SQL。在使用时，业务应用需将分库字段传递给内嵌中间件去计算具体对应的分库。它相比代理式性能更好。内嵌式的架构如下图 7 所示：\n\n\n\n图 7：内嵌式的分库架构图\n\n除了性能优势外，内嵌式同样存在问题。\n\n 1. 有一定侵入性，业务应用与原始单库模式相比，需要进行一定的改造去适配内嵌式的 API。\n\n 2. 分库在故障转移、数据迁移等运维工作时，需要业务应用感知。不过现在的一些内嵌式代理，已经具备非常良好的配置功能，在分库运维时，业务应用需要配合的内容较少。\n\n其他问题\n\n接下来，再来看几个常见问题的应对策略。\n\n1. 是否一定需要进行分表或者分库呢？\n\n不一定。虽然很多互联网公司的体量很大，用户非常多，但你千万不要被这些现象迷惑了。实际上，90% 以上的系统能够发展到上百万、上千万数据量已经很不错了。对于千万的数据量，开源的 MySQL 都可以很好地应对，更别说一些商业数据库了。\n\n另外，当数据增长到一定量级后，可以在业务层面做一些处理。比如根据业务特点，对无效数据、软删除数据，以及业务上不会再查询的数据进行统一归档，这也是一个成本低、效果明显的方式了。\n\n2. 使用业务字段分库后，如何处理数据倾斜？\n\n如果数据量不是特别大，可以在分库基础上，再进行分表。针对数据量较大的场景，可以使用二次分库的方式。对于订单量较多的用户，可以在用户账号基础上再增加一个字段，做进一步的分库，但此用户的查询就会有损了。\n\n此外，还有另外两个问题，由于需要用到暂未讲解的知识，所以我将放在后面的章节结合相关知识详细讲解，今天仅做提及。\n\n3. 如何满足富查询？\n\n富查询是一个无法回避的问题，即采用分库分表之后，如何满足跨越分库的查询？对于此问题，我将在“第 11 讲”进行详细讲解。\n\n4. 如何解决跨多库的修改导致的分布式事务？\n\n跨多库的修改及多个微服务间的写操作导致的分布式事务问题，我将在“第 19 讲”里集中讲解。\n\n\n总结\n\n不断进行分库分表一定能解决容量问题，但“杀敌一千，自损八百”的事情少做为宜。使用分库分表会将代码和架构的复杂度变高，带来资源成本上升等问题。另外，在使用系统时，用户（不管是客户还是管理员）的查询体验也存在一定的降级。\n\n在使用分库分表前，你需要确定这是否是最优选择，是否能通过其他更简单的手段处理无效数据清理？架构是通过最小代价解决问题，而不是技术工具的比拼。\n\n最后，我再给你留一道讨论题，你知道的分库分表的问题还有哪些或者上述问题你还有哪些解决方案？欢迎留言，我们一起在留言区讨论。\n\n下一讲将介绍 09 | 如何打造无状态的存储实现随时切库的写入服务？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **3961：\n\n> 分库分表: 1. 富查询 2. 数据倾斜 3. 分布式事务\n\n# **泉：\n\n> 如果一个业务每天产生的数据有2000w条订单，这些数据随时可能被端上用户用来查询，那每天的数据很快就能把一个mysql实例打满。这种数据从节约成本角度讲，只支持最近一段时间的实时查询，历史数据通过归档到hbase上面是一种方案。但历史数据的查询就不实时了，有的银行采取这种方式，很影响用户体验。没见过互联网公司这种toC的产品有这种不支持实时查询的场景？如果遇到怎么解决历史数据的实时性呢？是不计成本不断横向扩容mysql+redis或者自研更高效的存储方案吗？\n\n#     讲师回复：\n\n>     架构是成本的权衡，互联网支持是因为它的体量大，营收能够支持。 首先，上规模的互联网公司，都有自己自研的存储，做技术上的优化。 除此之外，分享一下我最近一次经历里，我们要把一份业务数据全部存储在缓存里，发现要几十TB的容量才能支持，显然成本上是cover不住的。\n\n我们是对用户的查询进行了分析，发现90%的用户查询都集中在某一个时间区间里。我们就把这个区间里的数据放在缓存里了，其余仍存在数据库或其它文件系统里。可以看到，这就是一个架构权衡，最大程度满足业务诉求。\n\n# **辉：\n\n> 老师，ID 进行压缩转换为 String 类型，这样数据还是有序的么？索引对查询还有优势么？\n\n#     讲师回复：\n\n>     转换为string，就不是有序的了。索引本来就是排好序的，mysql里索引实现是基于B+树，这个不会影响。\n\n# study：\n\n> 直接用些分布式数据库，是不是就不用自己考虑分库分表了，比如tidb。\n\n#     讲师回复：\n\n>     嗯，是的。但需要了解其原理，其实分布式数据库和分库分表的方案在支持数据容量这块大体上有些类似\n\n# TFdream：\n\n> 分库分表优先考虑分表，分库后会导致多种问题：1.非sharding key查询问题，跨库join问题；2.分库后可能会出现数据倾斜；3.可能会引入分布式事务，增加架构复杂度；全局唯一id生成：1.uuid2.Twitter snowflake算法；3.基于数据库自增id；4.基于数据库号段（类似美团Leaf segment）\n\n# *西：\n\n> 老师，你好。分库需要根据实际业务进行纬度的选择，难道不分库只分表就不需要进行纬度选择了吗？感觉只分表的话，也有这个问题吧。\n\n#     讲师回复：\n\n>     嗯，也会有维度的选择。分表的维度主要考虑是否能够在单表里直接进行数据查询和筛选，但如果分表的维度无法满足直接查询，也可以通过多表的join来满足。此外，分表因为在同一个数据库里，不用担心分库维度带来的的事务问题\n\n# **5275：\n\n> 老师说的很好，只是有点抽象，能否给个实操的例子？就拿订单的例子来说，能否具体说明怎么分表？原来的表的结构是怎么样的，分表之后的表结构是怎么样的？谢谢\n\n#     讲师回复：\n\n>     对于分表，表结构是不会变化的。假设原先的订单的表明为：order。分表之后，在同一个数据库里，会出现多张分表，分别命名为：order_0，order_1，order_2等。在数据写入时，根据订单号进行hash，计算命中那张分表，假设命中的为order_1。那么，这个订单后续的写入和更新都直接访问order_1这张分表即可。\n\n# **1491：\n\n> 业界常用的代理式分库中间件和内嵌式分库中间件有哪些可以选择的呀？\n\n#     讲师回复：\n\n>     有mycat、阿里的tddl、携程的dal、shardingsphere等等\n\n# *涛：\n\n> 架构是通过最小代价解决问题，而不是技术工具的比拼。\n\n# **泉：\n\n> 那另外10%的查询用户体验不保证吗？\n\n#     讲师回复：\n\n>     另外10%的，可以采用本讲的分库和分表方案。",normalizedContent:"在上一模块里，我们讲解了如何使用懒加载、全量缓存等机制构建一个能够支撑百万并发的读服务，同时介绍了如何使用自动化回放来提升读服务的测试与回归效率，直接跳读到本模块的同学有空可以返回去学习一下。\n\n在本模块的四讲里，将会介绍如何构建与读服务有着相反差异的写服务。并发百万的读服务每一次请求都不会产生新数据，是无状态的。而写服务不说并发百万，只要并发上万，一天产生的数据量也在亿级左右。本讲将要介绍如何存储这些海量数据，同时保证相对应的写入和查询的性能，以及业务流程不发生太大变化。\n\n不管是打车的订单、电商里的支付订单，还是外卖或团购的支付订单，都是后台服务中最重要的一环，关乎公司的营收。因此，本讲及本模块都将以订单业务作为案例进行分析。\n\n\n是否真的要分库？\n\n分库当然能够解决存储的问题，假设原先单库只能最多存储 2 千万的数据量。采用分库之后，存储架构变成下图 1 所示的分库架构，每个分库都可以存储 2 千万数据量，容量的上限一下提升了。\n\n\n\n图 1：分库架构图\n\n容量提升了，但也带来了很多其他问题。比如：\n\n 1. 分库数据间的数据无法再通过数据库直接查询了。比如跨多个分库的数据需要多次查询或借助其他存储进行聚合再查询。\n\n 2. 分库越多，出现问题的可能性越大，维护成本也变得更高。\n\n 3. 无法保障跨库间事务，只能借助其他中间件实现最终一致性。\n\n所以在解决容量问题上，可以根据业务场景选择，不要一上来就要考虑分库，分表也是一种选择。\n\n分表是指所有的数据均存在同一个数据库实例中，只是将原先的一张大表按一定规则，划分成多张行数较少的表。它与分库的区别是，分表后的子表仍在原有库中，而分库则是子表移动到新的数据库实例里并在物理上单独部署。分表的拆分架构如下图 2 所示：\n\n\n\n图 2：分表架构图\n\n以本模块的订单案例来说，假设订单只是单量多而每一单的数据量较小，这就适合采用分表。单条数据量小但行数多，会导致写入（因为要构建索引）和查询非常慢，但整体对于容量的占用是可控的。采用分表后，大表变成小表，写入时构建索引的性能消耗会变小，其次小表的查询性能也更好。如果采用了分库，虽然解决了写入和查询的问题，但每张表所占有的磁盘空间很少，也会产生资源浪费。两种方案的对比如下图 3 所示：\n\n\n\n图 3：单表行数多单数据量小的对比图\n\n在实际场景里，因为要详细记录用户的提单信息，单个订单记录的数据量均较多，所以不存在行数多但单条数据量小的情况。但在其他写入服务里，经常会出现上述场景，你可以优先采用分表的方案。因为分表除了能解决容量问题，还能在一定程度上解决分库所带来的三个问题。\n\n 1. 分表后可以通过 join 等完成一些富查询，相比分库简单得多。\n\n 2. 分表的数据仍存储在一个数据库里，不会出现很多分库。无须引入一些分库中间件，因此维护成本和开发成本均较低。\n\n 3. 因为在同一个数据库里，也可以很好地解决事务问题。\n\n接下来将介绍如何应对行数多且单行数据量较大的场景。通过我们前面的分析，我想你已经知道答案了——采用分库的方案。\n\n\n如何实现分库？\n\n在决定对数据库进行分库后，首先要解决的问题便是如何选择分库维度。不同的分库维度决定了部分查询是否能直接使用数据库，以及是否存在数据倾斜的问题。\n\n分库维度选择\n\n下面以订单为案例，介绍两种常见不同维度的分库方式：按直接满足最重要的业务场景划分和最细粒度随机分。\n\n首先我们来看按直接满足最重要的业务场景划分。在业务上，所有的订单数据都是隶属于某一个用户的。在选择分库维度时，可以按订单归属的用户这个字段进行分库。按此维度分库后，同一个用户的订单都在某一个分库里。分库后的场景如下图 4 所示：\n\n\n\n图 4：按购买用户进行分库的架构图\n\n订单模块除了提供提交订单接口外，还会提供给售卖商家对自己店铺的订单进行查询及修改等功能。这些维度的查询和修改需求，在采用了按购买用户进行分库之后，均无法直接满足了。\n\n这里请你思考一个问题，订单模块最重要的功能是什么？\n\n答案是保证客户（即买家）的各项订单功能能够正常使用，比如下单、下单后立刻（无延迟）查看已购的订单信息、待支付、待发货、待配送的订单列表等。相对来说，订单里的商品售卖方（即卖家）所使用的功能并不是优先级最高的。因为当我们要对卖家和买家的功能做取舍时，卖家是愿意降低优先级的，毕竟卖家是买卖的受益方。\n\n按购买用户划分后，用户的使用场景都可以直接通过分库支持，而不需要通过异构数据（存在数据延迟）等手段解决，对用户来说体验较好。其次，在同一个分库中，便于修改同一用户的多条数据，因此也不存在分布式事务问题。\n\n我们可以通过上述订单案例抽象出一个分库准则，即在确定分库字段时应该以直接满足最重要的业务场景为准。很多其他的业务都参考了这一准则，比如：\n\n 1. 对于微博和知乎等用户生产内容（ugc）的业务，均会按用户进行分库。因为用户新发布文章后就会去查看列表。\n\n 2. 支付系统里，也会按用户的支付记录进行分库。\n\n 3. 在技术上，比如一个微服务下的监控数据，同样会按微服务进行划分。同一个微服务的监控数据均存储在一个分库里，你可以直接在一个分库里查看微服务下的所有监控数据。\n\n上述划分方法虽然直接满足了最重要的场景，但可能会出现数据倾斜的问题，比如出现一个超级客户（如企业客户），购买的订单量非常大，导致某一个分库数据量巨多，就会重现分库前的场景。这属于最极端的情况之一。\n\n对于倾斜的问题，可以采用最细粒度的拆分，即按数据的唯一标示进行拆分，对于订单来说唯一标示即为订单号。采用订单号进行分库之后，用户的订单会按 hash 随机均匀地分散到某一个分库里。这样就解决了某一个分库数据不均匀的问题。\n\n对于上个小节里的案例，也可以用此手段进行处理。比如：\n\n 1. 按用户的每一条微博随机分库；\n\n 2. 按用户的每一笔支付记录随机分库；\n\n 3. 同一个微服务里的每一个监控点的数据随机分库。\n\n采用最细粒度分库后，虽然解决了数据均衡的问题，但又带来了其他问题。\n\n 1. 首先便是除了细粒度查询外，其他任何维度的查询均不支持。这就需要通过异构等方式解决，但异构有延迟、对业务是有损的。\n\n 2. 其次采用最细粒度后，对于防重逻辑在数据库层面已经无法支持。比如用户对同一个订单在业务上只能支付一次这一诉求，在支付系统按支付号进行分库后便不能直接满足了。因为上述分库方式会导致不同支付单分散在不同的分库里，此时，期望在数据库中通过订单号的唯一索引进行支付防重就不可实施了。\n\n上述两种分库的方式，在解决问题的同时又带来一些新的问题。在架构中，没有一种方案可以解决所有问题的，更多的是根据场景去选择更适合自己的方案。\n\n全局唯一标示\n\n不管采用何种维度的分库方式，使用原有单库的数据库自增主键生产数据标示的方案已经不可以使用了。对于全局的数据唯一标示，有两种常见的生成方式。\n\n1. 使用算法随机生成。\n\n比如使用机器 ip、时间戳、随机数等进行组合，生成一个唯一编号。业界成熟的有 twitter 推出的雪花算法。需要注意的是，为了保证唯一性，雪花算法增加了很多随机因子，导致计算出来的唯一标示特别长，达到 19 位。\n\n在 javascript 里，数据精度和 java 等语言不完全一致，太长的雪花 id 在前端存在溢出的问题。因为雪花算法生成的 id 为 long 类型，可以采用类似 base64 等算法，对原始 id 进行压缩转换为 string 类型，降低长度并避免和 javascript 精度不统一导致的问题。\n\n2. 基于数据库主键构建一个 id 生成服务。\n\n虽然不能在插入的时候使用数据库唯一主键，但可以在插入前通过一个服务获取全局唯一的 id。id 生产服务可以基于一张单表实现，每一次外部请求时，均生产一个新的 id。通过此方式，可以获得长度较短且为数值类型的全局唯一编号。\n\n但如果每次获取 id 时，id 生成服务都需要从数据库实时获取，性能会比较差。为了解决性能问题，可以在生成 id 的数据库前置一个具备持久化功能的内存缓存，预生成一批 id。具体架构如下图 5 所示：\n\n\n\n图 5：预生成 id 架构图\n\n分库中间件选择\n\n现在开源提供分库支持的中间件较多，如 mycat 等，整体上各类分库中间件可以分为两大类：一种是代理式、另外一种是内嵌式。\n\n代理式分库中间件对于业务应用无任何侵入，业务应用和未分库时一样使用数据库，分库的选择及分库的维度对业务层完全隐藏，接入和使用成本极低。代理式的架构如下图 6 所示：\n\n\n\n图 6：代理式分库架构图\n\n代理式虽有使用成本低的好处，但也存在其他一些问题。\n\n 1. 代理式在业务应用和数据库间增加了一层，导致了性能下降。\n\n 2. 代理式需要解析业务应用的 sql，并根据 sql 中的分库字段进行路由。它需要解析和适配所有 sql 语法，增加了代理模块复杂度和出错的可能性。\n\n 3. 代理层是单独进程，需要部署占用资源，带来一定的成本。\n\n内嵌式分库中间件是将分库中间件内置在业务应用中，它只负责分库的选择，并不会解析用户的 sql。在使用时，业务应用需将分库字段传递给内嵌中间件去计算具体对应的分库。它相比代理式性能更好。内嵌式的架构如下图 7 所示：\n\n\n\n图 7：内嵌式的分库架构图\n\n除了性能优势外，内嵌式同样存在问题。\n\n 1. 有一定侵入性，业务应用与原始单库模式相比，需要进行一定的改造去适配内嵌式的 api。\n\n 2. 分库在故障转移、数据迁移等运维工作时，需要业务应用感知。不过现在的一些内嵌式代理，已经具备非常良好的配置功能，在分库运维时，业务应用需要配合的内容较少。\n\n其他问题\n\n接下来，再来看几个常见问题的应对策略。\n\n1. 是否一定需要进行分表或者分库呢？\n\n不一定。虽然很多互联网公司的体量很大，用户非常多，但你千万不要被这些现象迷惑了。实际上，90% 以上的系统能够发展到上百万、上千万数据量已经很不错了。对于千万的数据量，开源的 mysql 都可以很好地应对，更别说一些商业数据库了。\n\n另外，当数据增长到一定量级后，可以在业务层面做一些处理。比如根据业务特点，对无效数据、软删除数据，以及业务上不会再查询的数据进行统一归档，这也是一个成本低、效果明显的方式了。\n\n2. 使用业务字段分库后，如何处理数据倾斜？\n\n如果数据量不是特别大，可以在分库基础上，再进行分表。针对数据量较大的场景，可以使用二次分库的方式。对于订单量较多的用户，可以在用户账号基础上再增加一个字段，做进一步的分库，但此用户的查询就会有损了。\n\n此外，还有另外两个问题，由于需要用到暂未讲解的知识，所以我将放在后面的章节结合相关知识详细讲解，今天仅做提及。\n\n3. 如何满足富查询？\n\n富查询是一个无法回避的问题，即采用分库分表之后，如何满足跨越分库的查询？对于此问题，我将在“第 11 讲”进行详细讲解。\n\n4. 如何解决跨多库的修改导致的分布式事务？\n\n跨多库的修改及多个微服务间的写操作导致的分布式事务问题，我将在“第 19 讲”里集中讲解。\n\n\n总结\n\n不断进行分库分表一定能解决容量问题，但“杀敌一千，自损八百”的事情少做为宜。使用分库分表会将代码和架构的复杂度变高，带来资源成本上升等问题。另外，在使用系统时，用户（不管是客户还是管理员）的查询体验也存在一定的降级。\n\n在使用分库分表前，你需要确定这是否是最优选择，是否能通过其他更简单的手段处理无效数据清理？架构是通过最小代价解决问题，而不是技术工具的比拼。\n\n最后，我再给你留一道讨论题，你知道的分库分表的问题还有哪些或者上述问题你还有哪些解决方案？欢迎留言，我们一起在留言区讨论。\n\n下一讲将介绍 09 | 如何打造无状态的存储实现随时切库的写入服务？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **3961：\n\n> 分库分表: 1. 富查询 2. 数据倾斜 3. 分布式事务\n\n# **泉：\n\n> 如果一个业务每天产生的数据有2000w条订单，这些数据随时可能被端上用户用来查询，那每天的数据很快就能把一个mysql实例打满。这种数据从节约成本角度讲，只支持最近一段时间的实时查询，历史数据通过归档到hbase上面是一种方案。但历史数据的查询就不实时了，有的银行采取这种方式，很影响用户体验。没见过互联网公司这种toc的产品有这种不支持实时查询的场景？如果遇到怎么解决历史数据的实时性呢？是不计成本不断横向扩容mysql+redis或者自研更高效的存储方案吗？\n\n#     讲师回复：\n\n>     架构是成本的权衡，互联网支持是因为它的体量大，营收能够支持。 首先，上规模的互联网公司，都有自己自研的存储，做技术上的优化。 除此之外，分享一下我最近一次经历里，我们要把一份业务数据全部存储在缓存里，发现要几十tb的容量才能支持，显然成本上是cover不住的。\n\n我们是对用户的查询进行了分析，发现90%的用户查询都集中在某一个时间区间里。我们就把这个区间里的数据放在缓存里了，其余仍存在数据库或其它文件系统里。可以看到，这就是一个架构权衡，最大程度满足业务诉求。\n\n# **辉：\n\n> 老师，id 进行压缩转换为 string 类型，这样数据还是有序的么？索引对查询还有优势么？\n\n#     讲师回复：\n\n>     转换为string，就不是有序的了。索引本来就是排好序的，mysql里索引实现是基于b+树，这个不会影响。\n\n# study：\n\n> 直接用些分布式数据库，是不是就不用自己考虑分库分表了，比如tidb。\n\n#     讲师回复：\n\n>     嗯，是的。但需要了解其原理，其实分布式数据库和分库分表的方案在支持数据容量这块大体上有些类似\n\n# tfdream：\n\n> 分库分表优先考虑分表，分库后会导致多种问题：1.非sharding key查询问题，跨库join问题；2.分库后可能会出现数据倾斜；3.可能会引入分布式事务，增加架构复杂度；全局唯一id生成：1.uuid2.twitter snowflake算法；3.基于数据库自增id；4.基于数据库号段（类似美团leaf segment）\n\n# *西：\n\n> 老师，你好。分库需要根据实际业务进行纬度的选择，难道不分库只分表就不需要进行纬度选择了吗？感觉只分表的话，也有这个问题吧。\n\n#     讲师回复：\n\n>     嗯，也会有维度的选择。分表的维度主要考虑是否能够在单表里直接进行数据查询和筛选，但如果分表的维度无法满足直接查询，也可以通过多表的join来满足。此外，分表因为在同一个数据库里，不用担心分库维度带来的的事务问题\n\n# **5275：\n\n> 老师说的很好，只是有点抽象，能否给个实操的例子？就拿订单的例子来说，能否具体说明怎么分表？原来的表的结构是怎么样的，分表之后的表结构是怎么样的？谢谢\n\n#     讲师回复：\n\n>     对于分表，表结构是不会变化的。假设原先的订单的表明为：order。分表之后，在同一个数据库里，会出现多张分表，分别命名为：order_0，order_1，order_2等。在数据写入时，根据订单号进行hash，计算命中那张分表，假设命中的为order_1。那么，这个订单后续的写入和更新都直接访问order_1这张分表即可。\n\n# **1491：\n\n> 业界常用的代理式分库中间件和内嵌式分库中间件有哪些可以选择的呀？\n\n#     讲师回复：\n\n>     有mycat、阿里的tddl、携程的dal、shardingsphere等等\n\n# *涛：\n\n> 架构是通过最小代价解决问题，而不是技术工具的比拼。\n\n# **泉：\n\n> 那另外10%的查询用户体验不保证吗？\n\n#     讲师回复：\n\n>     另外10%的，可以采用本讲的分库和分表方案。",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何利用依赖管控来提升写服务的性能和可用性？",frontmatter:{title:"如何利用依赖管控来提升写服务的性能和可用性？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/e2f528/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/11.%20%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E4%BE%9D%E8%B5%96%E7%AE%A1%E6%8E%A7%E6%9D%A5%E6%8F%90%E5%8D%87%E5%86%99%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%80%A7%E8%83%BD%E5%92%8C%E5%8F%AF%E7%94%A8%E6%80%A7%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/11. 如何利用依赖管控来提升写服务的性能和可用性？.md",key:"v-05fefde8",path:"/pages/e2f528/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:3934}],headersStr:"精选评论",content:"本模块的前几讲讨论了在存储上如何分库分表、如何构建无状态存储集群，来打造一个高可用的、支持海量数据存储的写业务的系统架构。\n\n在写业务的系统架构里，除了需要关注存储上的高可用，写链路上的各项外部依赖的管控同样十分重要。因为即使存储的高可用做好了，也可能会因为外部依赖的不可用进而导致系统故障。比如写链路上依赖的某一个接口性能抖动或者接口故障，都会导致你的系统不可用。对于此问题，本讲将介绍一个提升写服务性能和可用性的升级架构方案，详细讲解如何对写链路依赖进行精细化管控。\n\n\n链路依赖的全貌\n\n完成一个写请求时，不仅需要依赖存储，大部分场景还需要依赖各种外部第三方提供的接口。比如：\n\n 1. 当你发布一条微博，在数据存储至数据库前，不仅需要依赖用户模块校验用户的有效性、还需要依赖安全过滤非法内容等；\n\n 2. 在创建订单时，同样是先要校验用户有效性、再校验用户的收货地址合法性，以及获取最新价格、扣减库存、扣减支付金额等。完成上述的校验和数据获取，最后一步才是写存储。\n\n其他的写场景，比如发布短视频、发布博客等亦是如此。上述几种场景的架构如下图 1 所示：\n\n\n\n图 1：外部依赖的架构常见场景\n\n对于整个链路依赖的各项外部接口，可能是出现了以下几个问题，导致系统不可用：\n\n 1. 外部接口性能抖动严重，比如从 50ms 飙升至 500 ms，进而导致你的接口超时，此时会影响你的系统可用率；\n\n 2. 完成上述某一个写业务时，如果需要依赖外部的接口过多，也会导致你的接口性能太差；\n\n 3. 外部接口可用率下降，也会影响你的系统的可用率。\n\n\n依赖并行化\n\n当依赖外部接口过多时，可以从几个方面进行优化，来提升整体的性能和写接口的稳定性。\n\n将依赖的串行改并行\n\n假设一次写请求要依赖二十个外部接口，可以将这些依赖全部并行化，优化的架构如下图 2 所示：\n\n\n\n图 2：串行改并行的架构方案图\n\n如果一个依赖接口的性能为 10ms，以串行执行的方式，请求完所有外部依赖就需要 200ms（10ms*20）。但改为并行执行后，只需要 10ms 即可完成。上述情况中，我们假设每个接口的性能都是 10ms，但在实际场景中并没有这么精确的数字，有的外部依赖可能快一点、有的可能慢一点。实际并行执行的耗时，等于最慢的那个接口的性能。\n\n全部外部依赖的接口都可以并行是一种理想情况。接口能否并行执行有一个前置条件，即两个接口间没有任何依赖关系，如果 A 接口执行的前置条件是需要 B 接口返回的数据才能执行，那么这两个接口则不能并行执行。按相互依赖梳理后的并行执行方案如下图 3 所示。对于并行中存在相互依赖的场景，并行化后的性能等于最长子串（下图 3 中红色框）的性能总和。\n\n\n\n图 3：并行中需串行执行的架构方式\n\n\n依赖后置化\n\n此外，虽然整个链路上会有较多外部接口，但大部分场景里，很多接口都是可以后置化的。后置化是指当接口里的业务流程处理完成并返回给用户之后，后置去处理一些非重要且对实时性无要求的场景。\n\n比如在提交订单后，用户只需要查看订单是否下单成功，以及对应的价格、商品和数量是否正确。而对于商品的详细描述信息、所归属的商家名称等信息并不会特别关心，如果在提单的同时还需要获取这些用户不太关心的信息，会给整个提单的性能和可用率带来非常大的影响。鉴于这种情况，可以在提单后异步补齐这些仅供展示的信息。\n\n采用依赖后置化后，需要增加一个异步 Worker 进行数据补齐。架构如下图 4 所示：\n\n\n\n图 4：依赖后置化架构\n\n对于一些可以后置补齐的数据，可以在写请求完成时将原始数据写入一张任务表。然后启动一个异步 Worker，异步 Worker 再调用后置化的接口去补齐数据，以及执行相应的后置流程（比如发送 MQ 等）。\n\n通过依赖后置化移除一些不必要的接口调用，会提升你的写接口的整体性能和可用性。\n\n\n显式设置超时和重试\n\n即使是使用了后置化的方案，仍然会有一些外部接口需要同步调用。如果这些同步调用的接口出现性能抖动或者可用率下降，就需要通过显式设置超时和重试来规避上述问题。\n\n超时设置\n\n设置超时是为了防止依赖的外部接口性能突然变得太差，比如从几十毫秒飙升至十几秒及以上，进而导致你的请求被阻塞，此请求线程得不到释放，还会导致你的微服务的 RPC 线程池被占满。此时又会带来新的问题，进程的 RPC 线程池被占满之后，就无法再接受任何新的请求，你的系统基本上也就宕机了。导致上述问题的架构如下图 5 所示：\n\n\n\n图 5：超时导致请求线程阻塞问题\n\n在设置依赖的接口的超时阈值时，很多时候为了简便快速，大家都习惯设置一个不会太大，但下游接口实际执行时间远小于它的值，比如设置 3s 或者 5s。我建议在设置此值时，通过系统上线后的性能监控图进行设置，设置超时时间等于 Max 的性能值，依据数据说话而不是“拍脑袋”做决定。\n\n如果你依赖的下游接口毛刺特别严重，表现就是它的接口性能的 Max 和 TP999，或与 TP99 相差特别大，比如 TP999 在 200ms 左右，但 Max 在 3~5s 左右，如下图 6 所展示的情况：\n\n\n\n图 6：TP999 和 Max 差距太大图示\n\n产生此现象的原因可能是网络环境不好，偶尔会抖动，导致 Max飙高。遇到此种情况，为了防止接口因下游太高的 Max 导致线程阻塞，你可以将此接口的超时时间设置为 TP999 和 Max 之间的值。但此时也会带来一个问题，就是超时时间控制在此区间值范围之后，TP999 之外的 0.1% 请求都会因为超时而失败，应对方案见下述“重试设置”小节。\n\n重试设置\n\n除了超时之外，还可以对依赖的读接口设置调用失败自动重试，重试次数设置为一次。\n\n自动重试只能设置读接口，我在模块二里介绍过，读接口是无副作用的，重试对被依赖方无数据上的影响。而写接口是有状态的，如果你的依赖方没有做好幂等，设置自动重试可能会导致脏数据产生。\n\n设置自动重试是为了提高接口的可用性。因为依赖的外部接口的某一台机器可能会因为网络波动、机器重启等导致当次调用超时进而失败。如果设置了自动重试，就可能重试到另外一台正常的机器，保障服务的可用性。\n\n上一小节里提到为了保证接口性能，将超时时间设置为 TP999 和 Max 之间的值，但因此可能会带来 0.1% 的失败。如果搭配重试，可以将失败的比例降低到 0.0001%（即两次都失败，0.1%*0.1%）。即使使用了重试一次，你的接口性能也会较好。比如设置超时时间为大于上述 TP999 的值，比如 500ms，重试一次最大的耗时才为 1s，远比上述的 Max 低。\n\n通过超时并灵活搭配重试，可以极大地提升接口的性能，但仍然存在非常低概率的失败（0.01%）。对于此问题，很多人的处理方式是简单粗暴地设置一个非常大的超时时间，这种做法并不能解决根本问题。我建议你去寻找导致毛刺的根源，比如：\n\n 1. 是否为某一台机器的网卡年老失修，丢包率高？\n\n 2. 缓存里是否存在数据量比较大的 Key，导致一请求就是几秒的耗时？\n\n 3. 是否调用不合法，每次请求获取上百条数据，网络消耗太大？\n\n\n降级方式\n\n现在业界有很多开源工具，比如 Hystrix 等，均可实现服务熔断和触发降级的功能。但此类技术框架并不提供业务如何降级，以及降级到哪里。比如你依赖的接口可用率下降了，Hystrix 可以设置可用率持续多久都低于具体某个阈值时，可以自动进行降级。但降级方案如何实现，是直接报错？还是调用替代接口？这个都需要你自己去考虑。\n\n依赖系统故障时，有以下一些降级方式可供你选择。\n\n 1. 当依赖的是读接口，同时该接口返回的数据只用来补齐本次请求的数据时，可以对其返回的数据采用前置缓存。 当出现故障时，可以使用前置缓存顶一段时间，给依赖提供方提供一定的时间去修复缓存。\n\n 2. 对产生故障的依赖进行后置处理。比如发布微博前需要判断是否为非法内容，可能要依赖风控的接口进行合规性判断。当风控接口故障后，可以直接降级，先将新微博数据写入存储并标记未校验。但此数据可能是不合规的，可以在业务上进行适当降级，未校验的数据只允许用户自己看，待风控故障恢复后再进行数据校验，校验通过后再允许所有人可见。通过有损+异步最终校验，也是一种常见的降级方案。\n\n 3. 对于需要写下游的场景，比如提单时扣减库存，当库存不够便不能下单的场景，处理方式和上述第二点类似。当库存故障时，可降级直接跳过库存扣减，但需要提示用户后续可能无货。修复故障后进行异步校验库存，如果校验不通过，系统取消订单或发送消息通知客户进行人工判断是否要等待商家补货。此方式是一种预承接，但最终有可能失败的有损降级方案。\n\n\n总结\n\n本讲介绍了在完成一个写请求时，除了保障存储高可用之外，对于外部依赖，如何保障高可用，以及在出现故障时的可选降级措施。当你在实现一个高可用写服务时，可以参考依赖并行、显式的设置超时和重试来保障性能和可用性。\n\n本讲介绍的内容不仅适用于写接口，对于读接口和扣减接口依然适用。只是大部分场景里，写接口的外部依赖较多且写接口担负一个公司的营收重任（外卖下单、购买电影票等），故将此讲内容放到此模块内。\n\n最后，留一道讨论题给你，你使用过的降级方式和具体业务场景有哪些，欢迎写在留言区，我们一起讨论学习。\n\n下一讲将介绍11 | 分库分表化后如何满足多维度查询？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **铧：\n\n> 老师，一次失败的概率为0.1%，连续两次失败的概率是0.0001%😀\n\n# **鑫：\n\n> 依赖接口前置，处理方式很赞👍\n\n# **3961：\n\n> 非常实用的实战技巧： 依赖并行与后置，超时与重试，业务降级",normalizedContent:"本模块的前几讲讨论了在存储上如何分库分表、如何构建无状态存储集群，来打造一个高可用的、支持海量数据存储的写业务的系统架构。\n\n在写业务的系统架构里，除了需要关注存储上的高可用，写链路上的各项外部依赖的管控同样十分重要。因为即使存储的高可用做好了，也可能会因为外部依赖的不可用进而导致系统故障。比如写链路上依赖的某一个接口性能抖动或者接口故障，都会导致你的系统不可用。对于此问题，本讲将介绍一个提升写服务性能和可用性的升级架构方案，详细讲解如何对写链路依赖进行精细化管控。\n\n\n链路依赖的全貌\n\n完成一个写请求时，不仅需要依赖存储，大部分场景还需要依赖各种外部第三方提供的接口。比如：\n\n 1. 当你发布一条微博，在数据存储至数据库前，不仅需要依赖用户模块校验用户的有效性、还需要依赖安全过滤非法内容等；\n\n 2. 在创建订单时，同样是先要校验用户有效性、再校验用户的收货地址合法性，以及获取最新价格、扣减库存、扣减支付金额等。完成上述的校验和数据获取，最后一步才是写存储。\n\n其他的写场景，比如发布短视频、发布博客等亦是如此。上述几种场景的架构如下图 1 所示：\n\n\n\n图 1：外部依赖的架构常见场景\n\n对于整个链路依赖的各项外部接口，可能是出现了以下几个问题，导致系统不可用：\n\n 1. 外部接口性能抖动严重，比如从 50ms 飙升至 500 ms，进而导致你的接口超时，此时会影响你的系统可用率；\n\n 2. 完成上述某一个写业务时，如果需要依赖外部的接口过多，也会导致你的接口性能太差；\n\n 3. 外部接口可用率下降，也会影响你的系统的可用率。\n\n\n依赖并行化\n\n当依赖外部接口过多时，可以从几个方面进行优化，来提升整体的性能和写接口的稳定性。\n\n将依赖的串行改并行\n\n假设一次写请求要依赖二十个外部接口，可以将这些依赖全部并行化，优化的架构如下图 2 所示：\n\n\n\n图 2：串行改并行的架构方案图\n\n如果一个依赖接口的性能为 10ms，以串行执行的方式，请求完所有外部依赖就需要 200ms（10ms*20）。但改为并行执行后，只需要 10ms 即可完成。上述情况中，我们假设每个接口的性能都是 10ms，但在实际场景中并没有这么精确的数字，有的外部依赖可能快一点、有的可能慢一点。实际并行执行的耗时，等于最慢的那个接口的性能。\n\n全部外部依赖的接口都可以并行是一种理想情况。接口能否并行执行有一个前置条件，即两个接口间没有任何依赖关系，如果 a 接口执行的前置条件是需要 b 接口返回的数据才能执行，那么这两个接口则不能并行执行。按相互依赖梳理后的并行执行方案如下图 3 所示。对于并行中存在相互依赖的场景，并行化后的性能等于最长子串（下图 3 中红色框）的性能总和。\n\n\n\n图 3：并行中需串行执行的架构方式\n\n\n依赖后置化\n\n此外，虽然整个链路上会有较多外部接口，但大部分场景里，很多接口都是可以后置化的。后置化是指当接口里的业务流程处理完成并返回给用户之后，后置去处理一些非重要且对实时性无要求的场景。\n\n比如在提交订单后，用户只需要查看订单是否下单成功，以及对应的价格、商品和数量是否正确。而对于商品的详细描述信息、所归属的商家名称等信息并不会特别关心，如果在提单的同时还需要获取这些用户不太关心的信息，会给整个提单的性能和可用率带来非常大的影响。鉴于这种情况，可以在提单后异步补齐这些仅供展示的信息。\n\n采用依赖后置化后，需要增加一个异步 worker 进行数据补齐。架构如下图 4 所示：\n\n\n\n图 4：依赖后置化架构\n\n对于一些可以后置补齐的数据，可以在写请求完成时将原始数据写入一张任务表。然后启动一个异步 worker，异步 worker 再调用后置化的接口去补齐数据，以及执行相应的后置流程（比如发送 mq 等）。\n\n通过依赖后置化移除一些不必要的接口调用，会提升你的写接口的整体性能和可用性。\n\n\n显式设置超时和重试\n\n即使是使用了后置化的方案，仍然会有一些外部接口需要同步调用。如果这些同步调用的接口出现性能抖动或者可用率下降，就需要通过显式设置超时和重试来规避上述问题。\n\n超时设置\n\n设置超时是为了防止依赖的外部接口性能突然变得太差，比如从几十毫秒飙升至十几秒及以上，进而导致你的请求被阻塞，此请求线程得不到释放，还会导致你的微服务的 rpc 线程池被占满。此时又会带来新的问题，进程的 rpc 线程池被占满之后，就无法再接受任何新的请求，你的系统基本上也就宕机了。导致上述问题的架构如下图 5 所示：\n\n\n\n图 5：超时导致请求线程阻塞问题\n\n在设置依赖的接口的超时阈值时，很多时候为了简便快速，大家都习惯设置一个不会太大，但下游接口实际执行时间远小于它的值，比如设置 3s 或者 5s。我建议在设置此值时，通过系统上线后的性能监控图进行设置，设置超时时间等于 max 的性能值，依据数据说话而不是“拍脑袋”做决定。\n\n如果你依赖的下游接口毛刺特别严重，表现就是它的接口性能的 max 和 tp999，或与 tp99 相差特别大，比如 tp999 在 200ms 左右，但 max 在 3~5s 左右，如下图 6 所展示的情况：\n\n\n\n图 6：tp999 和 max 差距太大图示\n\n产生此现象的原因可能是网络环境不好，偶尔会抖动，导致 max飙高。遇到此种情况，为了防止接口因下游太高的 max 导致线程阻塞，你可以将此接口的超时时间设置为 tp999 和 max 之间的值。但此时也会带来一个问题，就是超时时间控制在此区间值范围之后，tp999 之外的 0.1% 请求都会因为超时而失败，应对方案见下述“重试设置”小节。\n\n重试设置\n\n除了超时之外，还可以对依赖的读接口设置调用失败自动重试，重试次数设置为一次。\n\n自动重试只能设置读接口，我在模块二里介绍过，读接口是无副作用的，重试对被依赖方无数据上的影响。而写接口是有状态的，如果你的依赖方没有做好幂等，设置自动重试可能会导致脏数据产生。\n\n设置自动重试是为了提高接口的可用性。因为依赖的外部接口的某一台机器可能会因为网络波动、机器重启等导致当次调用超时进而失败。如果设置了自动重试，就可能重试到另外一台正常的机器，保障服务的可用性。\n\n上一小节里提到为了保证接口性能，将超时时间设置为 tp999 和 max 之间的值，但因此可能会带来 0.1% 的失败。如果搭配重试，可以将失败的比例降低到 0.0001%（即两次都失败，0.1%*0.1%）。即使使用了重试一次，你的接口性能也会较好。比如设置超时时间为大于上述 tp999 的值，比如 500ms，重试一次最大的耗时才为 1s，远比上述的 max 低。\n\n通过超时并灵活搭配重试，可以极大地提升接口的性能，但仍然存在非常低概率的失败（0.01%）。对于此问题，很多人的处理方式是简单粗暴地设置一个非常大的超时时间，这种做法并不能解决根本问题。我建议你去寻找导致毛刺的根源，比如：\n\n 1. 是否为某一台机器的网卡年老失修，丢包率高？\n\n 2. 缓存里是否存在数据量比较大的 key，导致一请求就是几秒的耗时？\n\n 3. 是否调用不合法，每次请求获取上百条数据，网络消耗太大？\n\n\n降级方式\n\n现在业界有很多开源工具，比如 hystrix 等，均可实现服务熔断和触发降级的功能。但此类技术框架并不提供业务如何降级，以及降级到哪里。比如你依赖的接口可用率下降了，hystrix 可以设置可用率持续多久都低于具体某个阈值时，可以自动进行降级。但降级方案如何实现，是直接报错？还是调用替代接口？这个都需要你自己去考虑。\n\n依赖系统故障时，有以下一些降级方式可供你选择。\n\n 1. 当依赖的是读接口，同时该接口返回的数据只用来补齐本次请求的数据时，可以对其返回的数据采用前置缓存。 当出现故障时，可以使用前置缓存顶一段时间，给依赖提供方提供一定的时间去修复缓存。\n\n 2. 对产生故障的依赖进行后置处理。比如发布微博前需要判断是否为非法内容，可能要依赖风控的接口进行合规性判断。当风控接口故障后，可以直接降级，先将新微博数据写入存储并标记未校验。但此数据可能是不合规的，可以在业务上进行适当降级，未校验的数据只允许用户自己看，待风控故障恢复后再进行数据校验，校验通过后再允许所有人可见。通过有损+异步最终校验，也是一种常见的降级方案。\n\n 3. 对于需要写下游的场景，比如提单时扣减库存，当库存不够便不能下单的场景，处理方式和上述第二点类似。当库存故障时，可降级直接跳过库存扣减，但需要提示用户后续可能无货。修复故障后进行异步校验库存，如果校验不通过，系统取消订单或发送消息通知客户进行人工判断是否要等待商家补货。此方式是一种预承接，但最终有可能失败的有损降级方案。\n\n\n总结\n\n本讲介绍了在完成一个写请求时，除了保障存储高可用之外，对于外部依赖，如何保障高可用，以及在出现故障时的可选降级措施。当你在实现一个高可用写服务时，可以参考依赖并行、显式的设置超时和重试来保障性能和可用性。\n\n本讲介绍的内容不仅适用于写接口，对于读接口和扣减接口依然适用。只是大部分场景里，写接口的外部依赖较多且写接口担负一个公司的营收重任（外卖下单、购买电影票等），故将此讲内容放到此模块内。\n\n最后，留一道讨论题给你，你使用过的降级方式和具体业务场景有哪些，欢迎写在留言区，我们一起讨论学习。\n\n下一讲将介绍11 | 分库分表化后如何满足多维度查询？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **铧：\n\n> 老师，一次失败的概率为0.1%，连续两次失败的概率是0.0001%😀\n\n# **鑫：\n\n> 依赖接口前置，处理方式很赞👍\n\n# **3961：\n\n> 非常实用的实战技巧： 依赖并行与后置，超时与重试，业务降级",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"分库分表化后如何满足多维度查询？",frontmatter:{title:"分库分表化后如何满足多维度查询？",date:"2023-02-15T10:19:46.000Z",permalink:"/pages/8afe37/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/12.%20%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8C%96%E5%90%8E%E5%A6%82%E4%BD%95%E6%BB%A1%E8%B6%B3%E5%A4%9A%E7%BB%B4%E5%BA%A6%E6%9F%A5%E8%AF%A2%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/12. 分库分表化后如何满足多维度查询？.md",key:"v-9ee6d582",path:"/pages/8afe37/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:6175}],headersStr:"精选评论",content:'本模块的前几讲里围绕着分库分表，以及外部依赖治理的话题进行了讨论，通过上述方案来提升写业务的高可用和高性能。\n\n但分库分表以及无状态存储也带来了另外一个问题，即数据按路由规则分散后，如何满足无路由字段的多维度富查询？\n\n\n异构定制化实现\n\n在“第 8 讲”，我介绍了一个关于订单模块的分库分表案例，我们先回顾一下该方案的处理方式：\n\n * 在提交订单时，采用用户账号作为分库字段；\n\n * 在查询时，只有携带用户账号的 SQL 才能直接执行；\n\n * 在下单后，售卖商品的商家可能希望查询自己店铺里的所有订单，此时按用户维度的分库分表则不能满足上述查询需求。\n\n为了满足和原有分库维度不一样的查询，最简单的方式是按新的维度异构一套数据，它的架构如下图 1 所示，数据异构可以采用在本专栏模块二中介绍的 Binlog 进行处理。\n\n\n\n图 1：数据异构架构图\n\n采用数据异构满足了上述按商家维度查看数据的诉求，但如果又来一个新的需求，需要按订单所属的来源（小程序、App、M 页或者 PC 站点）进行订单数据查询呢？此时，是否需要按来源维度进行数据异构呢？\n\n答案显然是不行的，主要有两个原因：\n\n * 一是数据同步程序需要开发，如果来一个新需求就开发一套同步，浪费人力成本；\n\n * 二是异构数据浪费资源。正是因为数据量太大才进行分库分表，如果异构一套会导致数据量翻倍，资源消耗也会加倍。\n\n本讲后面会介绍两种方案，来解决上述两个问题。\n\n\n借助分库网关实现\n\n在“第 8 讲”里，我们介绍了代理式的分库分表的架构方案：分库代理中间件解析用户指定的 SQL 并提取路由字段，根据路由字段去访问具体的分库进行数据的查询。如下图 2 所示：\n\n\n\n图 2：代理式分库分表方案\n\n当用户没有指定路由字段时，可以在分库代理中间件进行转换处理。以订单为例，假设路由字段为用户账号，当查询时只指定了订单号，代理层无法计算到具体命中了哪个分库。但是代理层可以多线程并发地去请求所有的分库，查询此条订单信息。此方式，也可以查询到指定的订单信息。\n\n但如果用户指定的查询带有排序和数量诉求，比如查询所有用户最近提交的 100 单，SQL 可能如下：\n\nselect 订单信息 from t_order order by createdTime limit 100\n\n\n在没有路由字段时，分库分表的前 100 个订单如何获取呢？因为在极端情况下全局的前 100 条数据可能都分布在某一个分库里，为了保障一定能够获取到全局的前 100 条数据，代理层需要向每一个分库（上述有三个分库）都获取 100 条数据，并在代理层进行汇总排序，如下图 3 所示：\n\n\n\n图 3：分库分表查询架构图\n\n从上图中可以看到，不管是不带路由字段的条件查询还是排序聚合的查询，代理层都可以通过扫描分库来实现，比如上述的获取前 100 条订单数据。但在实现时，其实总共需要获取 300 条数据才能实现上述目标，这对于代理层的内存和 CPU 占用是非常巨大的，因为一次代理层的查询需要分裂出分库数量的查询，才能满足上述目标，这增加了调用量。\n\n对于内嵌式的分库中间件的实现就更不行了，因为内嵌式的分库架构是和业务应用部署在同一台机器上的，它会消耗业务应用所在机器的网络、内存和 CPU 等资源，进而影响业务服务。\n\n总的来说，数据库最重要的特征是为了满足写时的 ACID。对于读业务而言，数据库需要借助索引来提升性能。但过多的索引也会反过来导致写的性能变差，因为索引是在写入的时候实时构建的。因此，目前来看其实 MySQL+ 代理层并不十分适合。\n\n\n基于 ElasticSearch 实现\n\n借助分库网关+分库虽然能够实现多维度查询的能力，但整体上性能不佳且对正常的写入请求有一定的影响。除了上述的方案外，业界应对多维度实时查询的最常见方式便是借助 ElasticSearch。为了方便，后面都简称 ElasticSearch 为 ES。\n\n什么是 ES\n\nES 是基于 Lucene 之上进行封装的可开箱即用的搜索引擎。其中，Lucene 提供了基于倒排序的全文索引的构建功能和查询的能力，但在更加贴近应用层的数据结构设计、存储架构层面涉及较少，它更多地被称为一个底层工具。\n\nES 在 Lucenne 的全文检索功能之外，还具备以下 3 个特点：\n\n 1. 自带了分布式的系统架构，能够很好地应对海量的数据，且分布式架构更加高可用，能够有效地满足生产环境的要求。\n\n 2. 支持带结构的数据（如数据库的 schema），提供了非常丰富的数据结构，可以直接映射数据库等存储的数据结构，更方便易用；\n\n 3. 另外是 ES 提供了近实时的数据索引功能，数据写入后就可以搜索查询，而不用像传统的搜索引擎要分钟级或更高的异构索引构建。\n\n更加详细的介绍可以参考 ES 的官网，见这里，建议直接阅读最新版的文档。\n\n什么是倒排序索引\n\n倒排序索引的内容较多，此处只做简单介绍，帮助你理解本讲后续内容，有兴趣的同学可以深入研究。\n\n对于倒排序索引，它是借助分词维护的二维表。以本讲的标题：“分库分表后如何满足多维度查询”（假设编号为 1）为例，写入 ES 后，会建立如下表格：\n\n\n\n上述的“单词”列得到的各个词，是和各个语言特定的，中文有中文分词器、英文有英文的分词器。\n\n所有写入 ES 的内容，都会按上述模式进行分词。相比数据库，ES 里所有的内容都可以分词建立索引且 ES 不需要保障数据的 ACID 等特性，因此 ES 整体上更适合查询类和模糊匹配等场景。对于模糊匹配，数据库只能使用 like 等手段，性能是非常差的。\n\nES 里的所有内容都可以建立索引，虽然能带来提升性能的好处，但也会带来副作用，就是会非常消耗存储空间，这个在使用时需要预先考虑。\n\n如何使用\n\n在使用 ES 满足多维度查询时，第一步需要做的便是数据异构，将数据库的数据同步至 ES 中。在进行数据异构时，仍建议采用在模块二中介绍了Binlog进行：\n\n * 一是因为 Binlog 可以保障数据最终一致性；\n\n * 二是基于 Binlog 的方式，同步代码编写更加简单且不易出错。只需要订阅 Binlog 发出来的数据即可，不用在业务代码的每一个修改的地方进行特殊处理。\n\n基于 Binlog 的 ES 数据异构如下图 4 所示：\n\n\n\n图 4：基于 Binlog 的 ES 数据异构图\n\n上述异构的数据同步至 ES 时，ES 中的数据结构应该如何设计来满足存储呢？在正式设计前，需要搞明白 ES 中的几个重要概念。接下来将以数据库中的几个概念进行类比，如下表所示：\n\n\n\n以数据库作为类比，你应该对 ES 中的几个概念非常清楚了，此处就不过多介绍了。我重点说一下 ES 中的类型（Type），它并不完全对应数据库的表。数据库中的表与表之间是隔离的，没有关联的。而 ES 中同一个索引（Index）下的不同类型（Type）里，如果存在相同的字段，ES 会认为它们是同一个字段。\n\n这个隐含逻辑对熟悉数据库概念的用户来说，有很大的迷惑性。因此，ES 从版本 5 中已经逐渐将类型（Type）移除了。或者你可以直接这样简单理解，ES 中一个索引就只能包含一个类型（Type）即可，更加详细的介绍见这里。\n\n了解了上述概念后，现在以一个实际的案例进行演练。以购物时的用户作为参考，用户数据库需要存储用户信息和用户的多个收货地址才能完成业务需求。数据库至少会有两张表，一张为用户表（user），另一张为收货地址表（delivery_address ），为一对多的关系。数据库表结构大致如下：\n\ncreate table user{\n  id bigint not null,\n  user_id varchar(30) not null comment  \'用户账号编号\',\n  nick_name varchar(50) not null,\n  telephone_num varchar(50) not null,\n  email varchar(80)\n}\ncreate table delivery_address{\n  id bigint not null,\n  user_id varchar(30) not null comment \'用户账号编号\',\n  prov_id bigint not null,\n  city_id bigint not null,\n  county_id bigint not null,\n  detail_address bigint not null\n}\n\n\n基于上述的数据库表结构，完成的 ES 的结构设计如下：\n\n{\n  "mappings": {\n    "properties": {\n      "user_id": {\n        "type": "long"\n      },\n      "nick_name":{\n        "type":"keyword"\n      },\n      "telephone_num":{\n        "type":"keyword"\n      },\n      "email":{\n        "type":"keyword"\n      },\n      "delivery_address": { \n        "type": "nested",\n        "properties":{\n          "prov_id":{\n            "type":"long"\n          },\n          "prov_name":{\n            "type":"text"\n          },\n          "city_id":{"type":"long"},\n          "city_name":{\n            "type":"text"\n          },\n          "county_id":{\n            "type":"long"\n          },\n          "county_name":{\n            "type":"text"\n          },\n          "detail_address":{\n            "type":"text"\n          }\n        }\n      }\n    }\n  }\n}\n\n\n可以看到上述的 ES 结构和数据库中的表结构还是有一定的差异，具体的差异和产生的原因主要有以下几点。\n\n 1. 数据库中是一对多的两张表，而在 ES 中只用了一个冗余宽表（用户和用户的多个收货地址都放在一个 Document 结构里）。使用冗余宽表是因为ES 即使在冗余的情况下，被冗余的收货地址仍然支持搜索（上述的 Nested 关键字支持此特性），而数据库如果在用户表里设置了冗余字段存储用户的多个收货地址后，该冗余的地址字段就不支持查询了。此外，ES 对于多张单独的 Document 的级联查询性能不好，ES 首推冗余存储，更加详细的解释见这里。\n\n 2. 并不是所有的字段都设置了分词，比如电话号码就没有分词（使用了 keyword 关键字）。因为电话号码在业务上是不需要支持模糊匹配的。在你设计索引时也最好遵守此原则，对于不需要模糊匹配的字段不设置分词，因为分词需要构建倒排序索引，浪费存储。\n\n 3. 在 ES 的收货地址结构里，增加了省份名称、市名称等，而数据库里没有。因为在实际业务场景里，有根据中文名称查询地址的需求。即使不分库分表，上述的数据库表结构里的字段也不能支持按名称查询，因为它没有存储省市县的名称。ES 的目的就是面向查询，因此在设计 ES 结构时，需要根据查询需求冗余一些字段进来。\n\nES 的架构与深翻页\n\n在介绍 ES 架构前，首先要明确 ES 架构中的三个重要概念：节点（Node）、分片（Shard）、集群（Cluster）。\n\n * 节点简单理解就是部署的机器，可以是物理机或者是 Docker。\n\n * 分片类似数据库分库分表架构里的一个分库，存储一部分数据。此外，分片还分为主分片和副本分片。主分片类似数据库分库里的主分库，副本分片就是从分库。分片部署在节点里，一个节点可以包含一至多个分片。\n\n * 多个节点在一起便组成了集群。\n\n基于上述概念的架构如下图 5 所示：\n\n\n\n图 5：ES 的架构简介\n\n可以看到 ES 的架构里没有代理式网关，ES 里所有的节点都可以接受用户的请求。对于类似第二小节里提到的排序+数量查询，ES 和代理式分库分表的架构比较类似，接受请求的节点并行地去获取所有其他节点，并在该节点里进行集群排序和过滤，具体流程如下图 6 所示：\n\n\n\n图 6：请求处理流程\n\n虽然 ES 使用了倒排序增加了检索的性能，但如果你要搜索第 1000 条数据之后的 100 条数据，在接受请求的节点就需要获取 1100*节点数量条数据，即使如 ES 这种面向查询的存储也是搞不定的。因此，ES 默认有一个设置，最多只能查询 10000 条数据，超过了直接报错。\n\n上述描述的案例，有一个通俗的叫法：深翻页。对于深翻页，不管是 ES 和代理式网关都是无法直接支持的。解决上述问题，有一个牺牲用户体验的做法，就是按游标查询，或者叫每次查询都带上上一次查询经过排序后的最大 ID。以 SQL 举例，大致语法如下：\n\nselect 内容 from table where id >lastMaxId order by id limit pageSize\n\n\n上述的有损用户体验主要体现在，用户无法指定页码进行翻页，只能在文章列表里一页一页地翻。\n\n注意：ES 是近实时的但不是实时的，默认有 1s 的延迟。所以需要你根据具体业务情况进行取舍考虑。\n\n\n总结\n\n本讲介绍了从最简单、但资源消耗严重的异构定制化的方案，到使用 ES 来最终应对多维度查询的方案。各个方案都有各自的好处，但也有带来负面的影响。比如要使用 ES，你就需要学习 ES 的知识并要有专业的人去维护它。\n\n此外，在 ES 的方案里，我引用了很多英文的官方文档。这也是我想给你重点强调的，学习一项新的技能，需要从源头获取信息，而不是借助搜索引擎，把东一点西一点的信息拼凑起来零零散散地学习。通过在源头获取原作者体系化的、第一手真实的信息，能让你的学习事半功倍。当然，直接阅读英文原生文档可能会点难，但这也是你成为架构师必备的技能。\n\n最后，留一道讨论题。你所负责的系统在分库分表之后是如何满足多维度查询的？欢迎留言区留言，我们一起交流。\n\n下一讲将介绍12 | 如何利用数据库实现并发扣减？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **3961：\n\n> 学习一项新的技能，需要从源头获取信息，而不是借助搜索引擎，把东一点西一点的信息拼凑起来零零散散地学习这个也是购买课程学习的目的\n\n# **生：\n\n> 我们现在就是用canal来同步订单快照表的binlog来满足大数量下的模糊查询的。\n\n# **生：\n\n> ES确实可以解决多维度查询，但也有其缺陷，目前据说TiDB做的很好但没有实操经验',normalizedContent:'本模块的前几讲里围绕着分库分表，以及外部依赖治理的话题进行了讨论，通过上述方案来提升写业务的高可用和高性能。\n\n但分库分表以及无状态存储也带来了另外一个问题，即数据按路由规则分散后，如何满足无路由字段的多维度富查询？\n\n\n异构定制化实现\n\n在“第 8 讲”，我介绍了一个关于订单模块的分库分表案例，我们先回顾一下该方案的处理方式：\n\n * 在提交订单时，采用用户账号作为分库字段；\n\n * 在查询时，只有携带用户账号的 sql 才能直接执行；\n\n * 在下单后，售卖商品的商家可能希望查询自己店铺里的所有订单，此时按用户维度的分库分表则不能满足上述查询需求。\n\n为了满足和原有分库维度不一样的查询，最简单的方式是按新的维度异构一套数据，它的架构如下图 1 所示，数据异构可以采用在本专栏模块二中介绍的 binlog 进行处理。\n\n\n\n图 1：数据异构架构图\n\n采用数据异构满足了上述按商家维度查看数据的诉求，但如果又来一个新的需求，需要按订单所属的来源（小程序、app、m 页或者 pc 站点）进行订单数据查询呢？此时，是否需要按来源维度进行数据异构呢？\n\n答案显然是不行的，主要有两个原因：\n\n * 一是数据同步程序需要开发，如果来一个新需求就开发一套同步，浪费人力成本；\n\n * 二是异构数据浪费资源。正是因为数据量太大才进行分库分表，如果异构一套会导致数据量翻倍，资源消耗也会加倍。\n\n本讲后面会介绍两种方案，来解决上述两个问题。\n\n\n借助分库网关实现\n\n在“第 8 讲”里，我们介绍了代理式的分库分表的架构方案：分库代理中间件解析用户指定的 sql 并提取路由字段，根据路由字段去访问具体的分库进行数据的查询。如下图 2 所示：\n\n\n\n图 2：代理式分库分表方案\n\n当用户没有指定路由字段时，可以在分库代理中间件进行转换处理。以订单为例，假设路由字段为用户账号，当查询时只指定了订单号，代理层无法计算到具体命中了哪个分库。但是代理层可以多线程并发地去请求所有的分库，查询此条订单信息。此方式，也可以查询到指定的订单信息。\n\n但如果用户指定的查询带有排序和数量诉求，比如查询所有用户最近提交的 100 单，sql 可能如下：\n\nselect 订单信息 from t_order order by createdtime limit 100\n\n\n在没有路由字段时，分库分表的前 100 个订单如何获取呢？因为在极端情况下全局的前 100 条数据可能都分布在某一个分库里，为了保障一定能够获取到全局的前 100 条数据，代理层需要向每一个分库（上述有三个分库）都获取 100 条数据，并在代理层进行汇总排序，如下图 3 所示：\n\n\n\n图 3：分库分表查询架构图\n\n从上图中可以看到，不管是不带路由字段的条件查询还是排序聚合的查询，代理层都可以通过扫描分库来实现，比如上述的获取前 100 条订单数据。但在实现时，其实总共需要获取 300 条数据才能实现上述目标，这对于代理层的内存和 cpu 占用是非常巨大的，因为一次代理层的查询需要分裂出分库数量的查询，才能满足上述目标，这增加了调用量。\n\n对于内嵌式的分库中间件的实现就更不行了，因为内嵌式的分库架构是和业务应用部署在同一台机器上的，它会消耗业务应用所在机器的网络、内存和 cpu 等资源，进而影响业务服务。\n\n总的来说，数据库最重要的特征是为了满足写时的 acid。对于读业务而言，数据库需要借助索引来提升性能。但过多的索引也会反过来导致写的性能变差，因为索引是在写入的时候实时构建的。因此，目前来看其实 mysql+ 代理层并不十分适合。\n\n\n基于 elasticsearch 实现\n\n借助分库网关+分库虽然能够实现多维度查询的能力，但整体上性能不佳且对正常的写入请求有一定的影响。除了上述的方案外，业界应对多维度实时查询的最常见方式便是借助 elasticsearch。为了方便，后面都简称 elasticsearch 为 es。\n\n什么是 es\n\nes 是基于 lucene 之上进行封装的可开箱即用的搜索引擎。其中，lucene 提供了基于倒排序的全文索引的构建功能和查询的能力，但在更加贴近应用层的数据结构设计、存储架构层面涉及较少，它更多地被称为一个底层工具。\n\nes 在 lucenne 的全文检索功能之外，还具备以下 3 个特点：\n\n 1. 自带了分布式的系统架构，能够很好地应对海量的数据，且分布式架构更加高可用，能够有效地满足生产环境的要求。\n\n 2. 支持带结构的数据（如数据库的 schema），提供了非常丰富的数据结构，可以直接映射数据库等存储的数据结构，更方便易用；\n\n 3. 另外是 es 提供了近实时的数据索引功能，数据写入后就可以搜索查询，而不用像传统的搜索引擎要分钟级或更高的异构索引构建。\n\n更加详细的介绍可以参考 es 的官网，见这里，建议直接阅读最新版的文档。\n\n什么是倒排序索引\n\n倒排序索引的内容较多，此处只做简单介绍，帮助你理解本讲后续内容，有兴趣的同学可以深入研究。\n\n对于倒排序索引，它是借助分词维护的二维表。以本讲的标题：“分库分表后如何满足多维度查询”（假设编号为 1）为例，写入 es 后，会建立如下表格：\n\n\n\n上述的“单词”列得到的各个词，是和各个语言特定的，中文有中文分词器、英文有英文的分词器。\n\n所有写入 es 的内容，都会按上述模式进行分词。相比数据库，es 里所有的内容都可以分词建立索引且 es 不需要保障数据的 acid 等特性，因此 es 整体上更适合查询类和模糊匹配等场景。对于模糊匹配，数据库只能使用 like 等手段，性能是非常差的。\n\nes 里的所有内容都可以建立索引，虽然能带来提升性能的好处，但也会带来副作用，就是会非常消耗存储空间，这个在使用时需要预先考虑。\n\n如何使用\n\n在使用 es 满足多维度查询时，第一步需要做的便是数据异构，将数据库的数据同步至 es 中。在进行数据异构时，仍建议采用在模块二中介绍了binlog进行：\n\n * 一是因为 binlog 可以保障数据最终一致性；\n\n * 二是基于 binlog 的方式，同步代码编写更加简单且不易出错。只需要订阅 binlog 发出来的数据即可，不用在业务代码的每一个修改的地方进行特殊处理。\n\n基于 binlog 的 es 数据异构如下图 4 所示：\n\n\n\n图 4：基于 binlog 的 es 数据异构图\n\n上述异构的数据同步至 es 时，es 中的数据结构应该如何设计来满足存储呢？在正式设计前，需要搞明白 es 中的几个重要概念。接下来将以数据库中的几个概念进行类比，如下表所示：\n\n\n\n以数据库作为类比，你应该对 es 中的几个概念非常清楚了，此处就不过多介绍了。我重点说一下 es 中的类型（type），它并不完全对应数据库的表。数据库中的表与表之间是隔离的，没有关联的。而 es 中同一个索引（index）下的不同类型（type）里，如果存在相同的字段，es 会认为它们是同一个字段。\n\n这个隐含逻辑对熟悉数据库概念的用户来说，有很大的迷惑性。因此，es 从版本 5 中已经逐渐将类型（type）移除了。或者你可以直接这样简单理解，es 中一个索引就只能包含一个类型（type）即可，更加详细的介绍见这里。\n\n了解了上述概念后，现在以一个实际的案例进行演练。以购物时的用户作为参考，用户数据库需要存储用户信息和用户的多个收货地址才能完成业务需求。数据库至少会有两张表，一张为用户表（user），另一张为收货地址表（delivery_address ），为一对多的关系。数据库表结构大致如下：\n\ncreate table user{\n  id bigint not null,\n  user_id varchar(30) not null comment  \'用户账号编号\',\n  nick_name varchar(50) not null,\n  telephone_num varchar(50) not null,\n  email varchar(80)\n}\ncreate table delivery_address{\n  id bigint not null,\n  user_id varchar(30) not null comment \'用户账号编号\',\n  prov_id bigint not null,\n  city_id bigint not null,\n  county_id bigint not null,\n  detail_address bigint not null\n}\n\n\n基于上述的数据库表结构，完成的 es 的结构设计如下：\n\n{\n  "mappings": {\n    "properties": {\n      "user_id": {\n        "type": "long"\n      },\n      "nick_name":{\n        "type":"keyword"\n      },\n      "telephone_num":{\n        "type":"keyword"\n      },\n      "email":{\n        "type":"keyword"\n      },\n      "delivery_address": { \n        "type": "nested",\n        "properties":{\n          "prov_id":{\n            "type":"long"\n          },\n          "prov_name":{\n            "type":"text"\n          },\n          "city_id":{"type":"long"},\n          "city_name":{\n            "type":"text"\n          },\n          "county_id":{\n            "type":"long"\n          },\n          "county_name":{\n            "type":"text"\n          },\n          "detail_address":{\n            "type":"text"\n          }\n        }\n      }\n    }\n  }\n}\n\n\n可以看到上述的 es 结构和数据库中的表结构还是有一定的差异，具体的差异和产生的原因主要有以下几点。\n\n 1. 数据库中是一对多的两张表，而在 es 中只用了一个冗余宽表（用户和用户的多个收货地址都放在一个 document 结构里）。使用冗余宽表是因为es 即使在冗余的情况下，被冗余的收货地址仍然支持搜索（上述的 nested 关键字支持此特性），而数据库如果在用户表里设置了冗余字段存储用户的多个收货地址后，该冗余的地址字段就不支持查询了。此外，es 对于多张单独的 document 的级联查询性能不好，es 首推冗余存储，更加详细的解释见这里。\n\n 2. 并不是所有的字段都设置了分词，比如电话号码就没有分词（使用了 keyword 关键字）。因为电话号码在业务上是不需要支持模糊匹配的。在你设计索引时也最好遵守此原则，对于不需要模糊匹配的字段不设置分词，因为分词需要构建倒排序索引，浪费存储。\n\n 3. 在 es 的收货地址结构里，增加了省份名称、市名称等，而数据库里没有。因为在实际业务场景里，有根据中文名称查询地址的需求。即使不分库分表，上述的数据库表结构里的字段也不能支持按名称查询，因为它没有存储省市县的名称。es 的目的就是面向查询，因此在设计 es 结构时，需要根据查询需求冗余一些字段进来。\n\nes 的架构与深翻页\n\n在介绍 es 架构前，首先要明确 es 架构中的三个重要概念：节点（node）、分片（shard）、集群（cluster）。\n\n * 节点简单理解就是部署的机器，可以是物理机或者是 docker。\n\n * 分片类似数据库分库分表架构里的一个分库，存储一部分数据。此外，分片还分为主分片和副本分片。主分片类似数据库分库里的主分库，副本分片就是从分库。分片部署在节点里，一个节点可以包含一至多个分片。\n\n * 多个节点在一起便组成了集群。\n\n基于上述概念的架构如下图 5 所示：\n\n\n\n图 5：es 的架构简介\n\n可以看到 es 的架构里没有代理式网关，es 里所有的节点都可以接受用户的请求。对于类似第二小节里提到的排序+数量查询，es 和代理式分库分表的架构比较类似，接受请求的节点并行地去获取所有其他节点，并在该节点里进行集群排序和过滤，具体流程如下图 6 所示：\n\n\n\n图 6：请求处理流程\n\n虽然 es 使用了倒排序增加了检索的性能，但如果你要搜索第 1000 条数据之后的 100 条数据，在接受请求的节点就需要获取 1100*节点数量条数据，即使如 es 这种面向查询的存储也是搞不定的。因此，es 默认有一个设置，最多只能查询 10000 条数据，超过了直接报错。\n\n上述描述的案例，有一个通俗的叫法：深翻页。对于深翻页，不管是 es 和代理式网关都是无法直接支持的。解决上述问题，有一个牺牲用户体验的做法，就是按游标查询，或者叫每次查询都带上上一次查询经过排序后的最大 id。以 sql 举例，大致语法如下：\n\nselect 内容 from table where id >lastmaxid order by id limit pagesize\n\n\n上述的有损用户体验主要体现在，用户无法指定页码进行翻页，只能在文章列表里一页一页地翻。\n\n注意：es 是近实时的但不是实时的，默认有 1s 的延迟。所以需要你根据具体业务情况进行取舍考虑。\n\n\n总结\n\n本讲介绍了从最简单、但资源消耗严重的异构定制化的方案，到使用 es 来最终应对多维度查询的方案。各个方案都有各自的好处，但也有带来负面的影响。比如要使用 es，你就需要学习 es 的知识并要有专业的人去维护它。\n\n此外，在 es 的方案里，我引用了很多英文的官方文档。这也是我想给你重点强调的，学习一项新的技能，需要从源头获取信息，而不是借助搜索引擎，把东一点西一点的信息拼凑起来零零散散地学习。通过在源头获取原作者体系化的、第一手真实的信息，能让你的学习事半功倍。当然，直接阅读英文原生文档可能会点难，但这也是你成为架构师必备的技能。\n\n最后，留一道讨论题。你所负责的系统在分库分表之后是如何满足多维度查询的？欢迎留言区留言，我们一起交流。\n\n下一讲将介绍12 | 如何利用数据库实现并发扣减？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **3961：\n\n> 学习一项新的技能，需要从源头获取信息，而不是借助搜索引擎，把东一点西一点的信息拼凑起来零零散散地学习这个也是购买课程学习的目的\n\n# **生：\n\n> 我们现在就是用canal来同步订单快照表的binlog来满足大数量下的模糊查询的。\n\n# **生：\n\n> es确实可以解决多维度查询，但也有其缺陷，目前据说tidb做的很好但没有实操经验',charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何打造无状态的存储实现随时切库的写入服务？",frontmatter:{title:"如何打造无状态的存储实现随时切库的写入服务？",date:"2023-02-22T16:15:53.000Z",permalink:"/pages/c5fbbe/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/10.%20%E5%A6%82%E4%BD%95%E6%89%93%E9%80%A0%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%97%B6%E5%88%87%E5%BA%93%E7%9A%84%E5%86%99%E5%85%A5%E6%9C%8D%E5%8A%A1%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/10. 如何打造无状态的存储实现随时切库的写入服务？.md",key:"v-02220e54",path:"/pages/c5fbbe/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4115}],headersStr:"精选评论",content:'在上一讲里，我介绍了如何实现分库分表的架构方案，以及如何解决业务不断发展所产生的数据容量的问题。\n\n但是分库分表只解决了容量的问题，并没有解决写服务的高可用问题，或者说分库分表在一定程度上增加了系统故障的概率。从概率上看，原有的单库架构有 50% 的可能性会发生数据库故障。但如果是 5 个分库，则会有 96%（具体计算方法见下方注释）的可能性出现故障。因此，采用分库分表的架构之后，系统的稳定性变得更低了。\n\n> 注：共计有 5 个分库，每一个分库不故障的概率都是 50%。如果整个集群不发生故障，就需要每一个分片都不故障，那么整个集群不发生故障的概率为 1-50%5=96%。\n\n在读服务里，可以采用数据冗余来保障架构的高可用，但在写服务里则无法使用此方案，因为写入服务的数据是用户提交产生的，无法在写入时使用冗余来提高高可用性。写冗余需要有满足 CAP 原则的存储支持，而我们知道，CAP 原则最多只能同时满足两个特性，要么 CP 要么 AP，因此写冗余无法直接满足。本讲将介绍一种能够实现随时切库的高可用写服务方案，不管是单库还是分库分表的原有架构，它都可以原生支持。\n\n\n写入业务的目标是成功写入\n\n在本专栏的第一讲里，我曾介绍过写服务的特点，此处再做一个简单的回顾。写业务是指需要将用户传入的数据进行全部存储的一种场景，常见的案例有：\n\n * 在各大网站提交的申请表单，比如落户申请、身份证办理申请、护照办理申请等；\n\n * 在电商、外派平台里的购物订单，其中会包含商品、价格、收货人等信息；\n\n * 在重要期刊和一些论坛里，提交的论文、博客等。\n\n假设明天就是论文提交截止日，你一定希望论文提交系统不要出现问题。即使系统出现故障，在论文提交后晚几分钟才能查看内容，但只要你提交成功了，这类故障并不会对你产生太大的影响。\n\n其他场景也是类似。对于写入业务，当出现各种故障时，最重要的是保证系统可写入。\n\n\n只要有可用存储即可写入\n\n那么什么是系统可随时写入呢？就是当出现任何故障，如网络中断、CPU 飙升、磁盘满等问题时，你的系统依然可以随时写入数据。\n\n如何保证随时可写入？\n\n在上一讲提到的分库分表架构里，假设当前只有两个分库，并且这两个分库分别部署在不同机房里。架构如下图 1 所示：\n\n\n\n图 1：分库分表且分机房架构\n\n当其中一个分库所处的机房出现网络故障，导致该分库不可达时，理论上系统就出现故障了。在上一讲里我们提到过，分库分表后，数据在写入时是按固定规则（比如用户账号）路由到具体分库的，当某个分库不可达时，对应规则的数据就无法写入了。\n\n但是写服务最重要的是保障数据写入，为了保障可写入，能不能在某一个分库故障（如网络不可达）后，将原有的数据全部写入当前可用的数据库呢？从保障数据可随时写入的角度看，此方式是可行的。升级后的架构如下图 2 所示：\n\n\n\n图 2：可随时写入的架构方案\n\n上述这种当分库分表里一个分库出现故障后，就随机寻找一个可用的数据库进行写入的方式即是一种保障系统高可用的架构方案。此方案可以将图 2 和“08 讲”提到的按固定规则路由的分库分表方案进行结合，方案如下图 3 所示：\n\n\n\n图 3：结合后的随机写入架构\n\n结合后的架构里，存储依然使用分库分表，但写入规则则发生了一些变化。它不再按固定路由进行写入，而是根据当前实时可用的数据库列表进行随机（如顺序轮流）写入。如果某一台数据库出现故障不可用后，则把它从当前可用数据库列表移除。如果数据库大面积不可用，可用列表中的数据库变少时，你可以适当地扩容一些数据库资源，并将它添加至当前可用的数据列中。因为此架构可以实现随时切换问题数据库、随时低成本扩容数据库，故又称它为无状态存储架构设计。\n\n如何维护可用列表？\n\n在写服务运行过程中，可以通过自动感知或人工确认的方式维护可用的数据库列表。在写服务调用数据库写入时，可以设置一个阈值。如果写入某一台数据库，在连续几分钟内，失败多少次，则可以判定此数据库故障，并将此判定进行上报。\n\n当整个写服务集群里，超过半数都认为此数据库故障了，则可以将此数据库从可用列表中剔除。你可能听出来了，此判定方法类似于 Paxos 算法，它在分布式协调和故障迁移中十分流行，此处也适当进行了一些借鉴。\n\n判定某一台数据库故障并将其下线是一个挺耗费成本的事情，为了防止误剔除某一台只是发生网络抖动的数据库，可以在真正下线某一个机器前，增加一个报警，给人工确认一个机会。可以设置当多少时间内，人工未响应，即可自动下线。\n\n上述是将可用列表机器进行下线的方案。对于新扩容的数据库资源，通过系统功能自动加入即可。虽然，本讲介绍的方案是可以按顺序进行随机写入的，但还是建议在实现时将顺序随机写入升级为按权重写入，比如对新加入的机器设置更高的写入权重。因为新扩容的机器容量为空，更高的写入权重，可以让数据更快地在全部数据库里变得均衡。增加权重的架构如下图 4 所示：\n\n\n\n图 4：按权重的数据写入架构\n\n\n写入后如何处理\n\n通过数据库写入的随机化，实现了写服务的高可用方案。但不得不说，虽然解决了写入的高可用，但想要达成一个完整的架构方案，此设计还有几个重要的技术点需要解决。\n\n * 如果某一个分库故障后便将其从可用列表中移除，应该如何处理其中已写入的数据呢？\n\n * 因为数据是随机写入，应该如何查询写入的数据呢？\n\n对于上述的问题，我先向你介绍一个整体的架构解决方案。如下图 5 所示：\n\n\n\n图 5：采用随机写入后的整体架构方案\n\n简单来说，整体的架构方案就是在上一讲分库分表的方案基础上，做了进一步升级。架构图的右边部分和分库分表几乎一模一样，左边部分则是本讲的架构方案带来的新增内容，它主要包含以下两个部分的内容。\n\n 1. 第一部分是前面讲述的数据随机写入模块，它保证了在故障时数据依然可以写入。\n\n 2. 第二部分则是数据同步模块，它将数据从随机写入的数据库集群实时地同步至分库分表集群里。后续的所有流程，都和原有的保持一致了。\n\n通过写入模块和同步模块的配合，即实现了基于无状态存储的高可用架构的整套方案。\n\n如何做数据同步？\n\n在采用同步模块后，从逻辑上是可以实现写入后数据可查询的。但这只是逻辑上的，因为增加了同步模块后数据延迟是不可避免。更有甚者，可能因数据同步存在 Bug 导致数据一直未同步的场景。\n\n针对上述问题，这里不卖关子，解决的架构方案如下图 6 所示：\n\n\n\n图 6：解决数据延迟的架构\n\n在数据写入后，用户需要立即查看写入内容的场景并不太多。比如上传完论文后，你只要立刻确定论文上传成功且查看系统里的论文内容和你上传的一致即可。\n\n对于这些有时延要求的场景，我们在图 5 的架构里已经进行了单独预处理。当数据写入随机存储成功后，可以在请求返回前，主动地将数据写入缓存中，同时将此次写入的数据全部返回给前台。但此处并不强制缓存一定要写成功，缓存写入失败也可以返回成功。对时延敏感的场景，可以直接查询此缓存。\n\n对于无状态存储中的数据，可以在写入请求中主动触发同步模块进行迁移，如上图 5 中标号 X 的流程。同步模块在接收到请求后，立刻将数据同步至分库分表及缓存中，后续流程就和上一讲保持一致了。\n\n主动触发同步模块的请求及同步模块本身运行都有可能出现异常，对于可能出现的异常情况，可以设计兜底策略进行处理。兜底策略和同步模块比较类似，主要架构如下图 7 所示：\n\n\n\n图 7：兜底同步策略\n\n兜底的同步对于无状态存储中的数据按创建时间进行不断轮询，轮询会对超过设置的时间阈值（如 5S）仍未得到同步的数据进行主动同步。此兜底方案保证了当上述缓存预写入和主动同步故障时，数据仍然可以写入分库分表。此外，如果兜底策略的时间阈值设置得过小，有可能和主动同步产生重复同步。对于重复同步，在分库分表处可以设置数据库唯一索引、插入前查询进行简单防重即可。\n\n缓存可降级\n\n因为主动写入缓存可能存在异常，导致数据未写入缓存，且主动数据同步和兜底同步是先写分库分表再通过 Binlog 刷新缓存，存在一定的延迟。因此在查询时需要具备降级功能，当缓存中未查询到时，可以主动降级到数据库进行一次兜底查询，并将查询到的值存储至缓存中。后续再有数据变更，和原有保持一致即可。可降级的架构方案如下图 8 所示：\n\n\n\n图 8：缓存可降级架构方案\n\n\n其他功能流程保持复用\n\n你可能会疑惑，采用无状态存储后，原有分库分表及无状态存储集群，除了上述之外的一些架构细节，是否还会有什么变化？比如，假设某一台无状态存储的数据库故障后，如果该故障数据库中仍有数据未同步如何处理？\n\n其实此数据库故障后的处理流程和任何线上数据库故障一样，都是经由 DBA 确认该数据库的从库和主库数据是否一致。如一致，升级该库的从库为主库，并将其加回无状态集群即可。对于其余的一些架构细节亦是如此，这里不再赘述。\n\n\n总结\n\n本讲基于无状态存储打造了一个可以随时切库的高可用写服务。虽然当某一台无状态存储出现故障时，其中遗留的数据会出现短时的同步延迟，但此方案可以将出问题的无状态存储立刻移除，保障了写入的 7*24 高可用。\n\n对于一些对写入有极致要求的场景，比如在电商的大促零点时刻，每一秒钟都会产生上百万、千万的下单金额。可以进行适当地体验降级，比如让用户晚几秒看到历史订单列表，但一定要保障在此时刻用户可以下单并看到此订单的结果，以及对应的收件信息（如收货地址、电话、收货人）。对于上述场景，此方案也可以很好地应对。\n\n此方案虽然应对了对写入有极致要求的场景，但它会将系统变得更加复杂且落地的开发成本和部署成本都更高，这也是它的弊端。还是回到本课程一直秉承的理念，架构是为了达到解决问题的目标而做的平衡，而不是技术比拼。\n\n最后留一个讨论题给你。此方案适合或不适合你经历/知道过的那些场景？欢迎留言区留言，我们一起讨论。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **龙：\n\n> 如果写入的时候某个库（分库1）发生故障被下线，那么就不是按照原来的固定路由写入了，这时候会写入到分库2，那当分库1恢复后，如果要修改数据，怎么确定这条数据在哪个库？\n\n#     讲师回复：\n\n>     写入之后的修改，都还是走原有的分库分表的架构，这个不会变化。只有写入为了保证高可用，才会使用无状态的存储集群\n\n# *开：\n\n> 您好，有个疑问，采用分库分表集群作为存储的读备份，同样会面临分库分表集群的故障问题。如果只是为了保证写入的高可用，为什么不采用多个活库+流水号活库位来解决（比如分库1日常部署三个物理库，叫01、02、03库，正常流量都访问01库，流水号带01库标识，方便后续查询路由；等01库故障后，检查剔除后，写入流量切到02或者03库，流水号也带02或03的标识）？这样子感觉方案会轻量些，基本没有同步延迟的问题\n\n#     讲师回复：\n\n>     思想类似，但需要保障查询正常请求下，用户无感知。另外，分库分表并不是读备份，它是整个业务的主库，后续的所有业务，比如更新和查询，都需要它来驱动。\n\n# *广：\n\n> 无状态数据库架构是第一次听说，不是很理解为什么要这么做，本身这个无状态的数据架构也不支持查询，那么为什么不使用MQ代替呢\n\n# **用户6149：\n\n> 可不可以在弄一个默认组出来，里面是一个mysql集群，失败了写这个集群，然后有个同步程序把集群里面的数据同步到原先的规则库里面\n\n#     讲师回复：\n\n>     嗯，思路类似。但写默认组里的集群，如果失败了，存在分布式事务的问题，会导致数据不一致。\n\n# **烽：\n\n> 在平时中没有遇到这种场景。这篇文章看了两次我算看明白了思路： 无状态存储集群 的目的 仅仅是 保证 写业务的成功。 最终的 格式化的数据 通过同步模块 到 分库分表 集群中 存储。其他 操作场景 都是基于">分库分表 集群中的 数据进行 处理。 老师 ，这种架构主要 还是针对 业务量比较巨大的场景，在 目前工作场景中还用不到。有些疑问，应该如何去进行实践？\n\n# *西：\n\n> 现在流行的分布式数据库，tidb这类newsql是不是差不多也是这个思路实现的？\n\n#     讲师回复：\n\n>     无状态存储是一种将业务和存储分离的思路，其实很多地方都有借鉴\n\n# *磊：\n\n> 您好，无状态写入方案中，写入分片故障后切换到其他分片写入，那后面对已存在数据做修改是怎么找到在哪个分片上呢？\n\n#     讲师回复：\n\n>     写入之后的修改就走原有分库分表的流程。这里是通过无状态存储集群保证用户的订单或写入请求一定能够成功。因为提单或者写入，一般是担负一个公司的营收等重任。而写入后的修改，是正常的业务流程流转，在极端情况下，可以降级。\n\n# **义：\n\n> 这个设计有场景限制吧，金融不合适吧\n\n#     讲师回复：\n\n>     说说具体不适合的原因？\n\n# *西：\n\n> 类似下订单这样的写入接口，如果这个接口里还有其它表的更新操作，跟创建订单都在一个事务里，这个架构方案是不是就玩不转了？\n\n#     讲师回复：\n\n>     嗯，如果此操作是必须运行的，不可避免的，则不行。但可以考虑下，是否可以从业务上进行折中，将这个更新进行后置化，减少这种耦合\n\n# **辉：\n\n> 老师，有个问题如前面留言所说，有ABC三个库，写入时本来根据路由规则应该是写入B库，可是这个时候B库挂了，无状态下入到了A库。这个时候去查询或修改数据的时候路由规则也是比如去取模之类的会去A库查，A表就查不到刚写入的数据了呀，因为数据放在了B表中，根据路由规则不会路由到B表中去\n\n#     讲师回复：\n\n>     只有写入才会使用无状态存储。而写入之后的修改，走原有的分库分表的流程即可。 因为写入，比如提单，是需要极力保障的。提单之后的修改，因为实现上的难度，保障力度可以适当下降\n\n# **3961：\n\n> 分库分表，高可用，7*24',normalizedContent:'在上一讲里，我介绍了如何实现分库分表的架构方案，以及如何解决业务不断发展所产生的数据容量的问题。\n\n但是分库分表只解决了容量的问题，并没有解决写服务的高可用问题，或者说分库分表在一定程度上增加了系统故障的概率。从概率上看，原有的单库架构有 50% 的可能性会发生数据库故障。但如果是 5 个分库，则会有 96%（具体计算方法见下方注释）的可能性出现故障。因此，采用分库分表的架构之后，系统的稳定性变得更低了。\n\n> 注：共计有 5 个分库，每一个分库不故障的概率都是 50%。如果整个集群不发生故障，就需要每一个分片都不故障，那么整个集群不发生故障的概率为 1-50%5=96%。\n\n在读服务里，可以采用数据冗余来保障架构的高可用，但在写服务里则无法使用此方案，因为写入服务的数据是用户提交产生的，无法在写入时使用冗余来提高高可用性。写冗余需要有满足 cap 原则的存储支持，而我们知道，cap 原则最多只能同时满足两个特性，要么 cp 要么 ap，因此写冗余无法直接满足。本讲将介绍一种能够实现随时切库的高可用写服务方案，不管是单库还是分库分表的原有架构，它都可以原生支持。\n\n\n写入业务的目标是成功写入\n\n在本专栏的第一讲里，我曾介绍过写服务的特点，此处再做一个简单的回顾。写业务是指需要将用户传入的数据进行全部存储的一种场景，常见的案例有：\n\n * 在各大网站提交的申请表单，比如落户申请、身份证办理申请、护照办理申请等；\n\n * 在电商、外派平台里的购物订单，其中会包含商品、价格、收货人等信息；\n\n * 在重要期刊和一些论坛里，提交的论文、博客等。\n\n假设明天就是论文提交截止日，你一定希望论文提交系统不要出现问题。即使系统出现故障，在论文提交后晚几分钟才能查看内容，但只要你提交成功了，这类故障并不会对你产生太大的影响。\n\n其他场景也是类似。对于写入业务，当出现各种故障时，最重要的是保证系统可写入。\n\n\n只要有可用存储即可写入\n\n那么什么是系统可随时写入呢？就是当出现任何故障，如网络中断、cpu 飙升、磁盘满等问题时，你的系统依然可以随时写入数据。\n\n如何保证随时可写入？\n\n在上一讲提到的分库分表架构里，假设当前只有两个分库，并且这两个分库分别部署在不同机房里。架构如下图 1 所示：\n\n\n\n图 1：分库分表且分机房架构\n\n当其中一个分库所处的机房出现网络故障，导致该分库不可达时，理论上系统就出现故障了。在上一讲里我们提到过，分库分表后，数据在写入时是按固定规则（比如用户账号）路由到具体分库的，当某个分库不可达时，对应规则的数据就无法写入了。\n\n但是写服务最重要的是保障数据写入，为了保障可写入，能不能在某一个分库故障（如网络不可达）后，将原有的数据全部写入当前可用的数据库呢？从保障数据可随时写入的角度看，此方式是可行的。升级后的架构如下图 2 所示：\n\n\n\n图 2：可随时写入的架构方案\n\n上述这种当分库分表里一个分库出现故障后，就随机寻找一个可用的数据库进行写入的方式即是一种保障系统高可用的架构方案。此方案可以将图 2 和“08 讲”提到的按固定规则路由的分库分表方案进行结合，方案如下图 3 所示：\n\n\n\n图 3：结合后的随机写入架构\n\n结合后的架构里，存储依然使用分库分表，但写入规则则发生了一些变化。它不再按固定路由进行写入，而是根据当前实时可用的数据库列表进行随机（如顺序轮流）写入。如果某一台数据库出现故障不可用后，则把它从当前可用数据库列表移除。如果数据库大面积不可用，可用列表中的数据库变少时，你可以适当地扩容一些数据库资源，并将它添加至当前可用的数据列中。因为此架构可以实现随时切换问题数据库、随时低成本扩容数据库，故又称它为无状态存储架构设计。\n\n如何维护可用列表？\n\n在写服务运行过程中，可以通过自动感知或人工确认的方式维护可用的数据库列表。在写服务调用数据库写入时，可以设置一个阈值。如果写入某一台数据库，在连续几分钟内，失败多少次，则可以判定此数据库故障，并将此判定进行上报。\n\n当整个写服务集群里，超过半数都认为此数据库故障了，则可以将此数据库从可用列表中剔除。你可能听出来了，此判定方法类似于 paxos 算法，它在分布式协调和故障迁移中十分流行，此处也适当进行了一些借鉴。\n\n判定某一台数据库故障并将其下线是一个挺耗费成本的事情，为了防止误剔除某一台只是发生网络抖动的数据库，可以在真正下线某一个机器前，增加一个报警，给人工确认一个机会。可以设置当多少时间内，人工未响应，即可自动下线。\n\n上述是将可用列表机器进行下线的方案。对于新扩容的数据库资源，通过系统功能自动加入即可。虽然，本讲介绍的方案是可以按顺序进行随机写入的，但还是建议在实现时将顺序随机写入升级为按权重写入，比如对新加入的机器设置更高的写入权重。因为新扩容的机器容量为空，更高的写入权重，可以让数据更快地在全部数据库里变得均衡。增加权重的架构如下图 4 所示：\n\n\n\n图 4：按权重的数据写入架构\n\n\n写入后如何处理\n\n通过数据库写入的随机化，实现了写服务的高可用方案。但不得不说，虽然解决了写入的高可用，但想要达成一个完整的架构方案，此设计还有几个重要的技术点需要解决。\n\n * 如果某一个分库故障后便将其从可用列表中移除，应该如何处理其中已写入的数据呢？\n\n * 因为数据是随机写入，应该如何查询写入的数据呢？\n\n对于上述的问题，我先向你介绍一个整体的架构解决方案。如下图 5 所示：\n\n\n\n图 5：采用随机写入后的整体架构方案\n\n简单来说，整体的架构方案就是在上一讲分库分表的方案基础上，做了进一步升级。架构图的右边部分和分库分表几乎一模一样，左边部分则是本讲的架构方案带来的新增内容，它主要包含以下两个部分的内容。\n\n 1. 第一部分是前面讲述的数据随机写入模块，它保证了在故障时数据依然可以写入。\n\n 2. 第二部分则是数据同步模块，它将数据从随机写入的数据库集群实时地同步至分库分表集群里。后续的所有流程，都和原有的保持一致了。\n\n通过写入模块和同步模块的配合，即实现了基于无状态存储的高可用架构的整套方案。\n\n如何做数据同步？\n\n在采用同步模块后，从逻辑上是可以实现写入后数据可查询的。但这只是逻辑上的，因为增加了同步模块后数据延迟是不可避免。更有甚者，可能因数据同步存在 bug 导致数据一直未同步的场景。\n\n针对上述问题，这里不卖关子，解决的架构方案如下图 6 所示：\n\n\n\n图 6：解决数据延迟的架构\n\n在数据写入后，用户需要立即查看写入内容的场景并不太多。比如上传完论文后，你只要立刻确定论文上传成功且查看系统里的论文内容和你上传的一致即可。\n\n对于这些有时延要求的场景，我们在图 5 的架构里已经进行了单独预处理。当数据写入随机存储成功后，可以在请求返回前，主动地将数据写入缓存中，同时将此次写入的数据全部返回给前台。但此处并不强制缓存一定要写成功，缓存写入失败也可以返回成功。对时延敏感的场景，可以直接查询此缓存。\n\n对于无状态存储中的数据，可以在写入请求中主动触发同步模块进行迁移，如上图 5 中标号 x 的流程。同步模块在接收到请求后，立刻将数据同步至分库分表及缓存中，后续流程就和上一讲保持一致了。\n\n主动触发同步模块的请求及同步模块本身运行都有可能出现异常，对于可能出现的异常情况，可以设计兜底策略进行处理。兜底策略和同步模块比较类似，主要架构如下图 7 所示：\n\n\n\n图 7：兜底同步策略\n\n兜底的同步对于无状态存储中的数据按创建时间进行不断轮询，轮询会对超过设置的时间阈值（如 5s）仍未得到同步的数据进行主动同步。此兜底方案保证了当上述缓存预写入和主动同步故障时，数据仍然可以写入分库分表。此外，如果兜底策略的时间阈值设置得过小，有可能和主动同步产生重复同步。对于重复同步，在分库分表处可以设置数据库唯一索引、插入前查询进行简单防重即可。\n\n缓存可降级\n\n因为主动写入缓存可能存在异常，导致数据未写入缓存，且主动数据同步和兜底同步是先写分库分表再通过 binlog 刷新缓存，存在一定的延迟。因此在查询时需要具备降级功能，当缓存中未查询到时，可以主动降级到数据库进行一次兜底查询，并将查询到的值存储至缓存中。后续再有数据变更，和原有保持一致即可。可降级的架构方案如下图 8 所示：\n\n\n\n图 8：缓存可降级架构方案\n\n\n其他功能流程保持复用\n\n你可能会疑惑，采用无状态存储后，原有分库分表及无状态存储集群，除了上述之外的一些架构细节，是否还会有什么变化？比如，假设某一台无状态存储的数据库故障后，如果该故障数据库中仍有数据未同步如何处理？\n\n其实此数据库故障后的处理流程和任何线上数据库故障一样，都是经由 dba 确认该数据库的从库和主库数据是否一致。如一致，升级该库的从库为主库，并将其加回无状态集群即可。对于其余的一些架构细节亦是如此，这里不再赘述。\n\n\n总结\n\n本讲基于无状态存储打造了一个可以随时切库的高可用写服务。虽然当某一台无状态存储出现故障时，其中遗留的数据会出现短时的同步延迟，但此方案可以将出问题的无状态存储立刻移除，保障了写入的 7*24 高可用。\n\n对于一些对写入有极致要求的场景，比如在电商的大促零点时刻，每一秒钟都会产生上百万、千万的下单金额。可以进行适当地体验降级，比如让用户晚几秒看到历史订单列表，但一定要保障在此时刻用户可以下单并看到此订单的结果，以及对应的收件信息（如收货地址、电话、收货人）。对于上述场景，此方案也可以很好地应对。\n\n此方案虽然应对了对写入有极致要求的场景，但它会将系统变得更加复杂且落地的开发成本和部署成本都更高，这也是它的弊端。还是回到本课程一直秉承的理念，架构是为了达到解决问题的目标而做的平衡，而不是技术比拼。\n\n最后留一个讨论题给你。此方案适合或不适合你经历/知道过的那些场景？欢迎留言区留言，我们一起讨论。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **龙：\n\n> 如果写入的时候某个库（分库1）发生故障被下线，那么就不是按照原来的固定路由写入了，这时候会写入到分库2，那当分库1恢复后，如果要修改数据，怎么确定这条数据在哪个库？\n\n#     讲师回复：\n\n>     写入之后的修改，都还是走原有的分库分表的架构，这个不会变化。只有写入为了保证高可用，才会使用无状态的存储集群\n\n# *开：\n\n> 您好，有个疑问，采用分库分表集群作为存储的读备份，同样会面临分库分表集群的故障问题。如果只是为了保证写入的高可用，为什么不采用多个活库+流水号活库位来解决（比如分库1日常部署三个物理库，叫01、02、03库，正常流量都访问01库，流水号带01库标识，方便后续查询路由；等01库故障后，检查剔除后，写入流量切到02或者03库，流水号也带02或03的标识）？这样子感觉方案会轻量些，基本没有同步延迟的问题\n\n#     讲师回复：\n\n>     思想类似，但需要保障查询正常请求下，用户无感知。另外，分库分表并不是读备份，它是整个业务的主库，后续的所有业务，比如更新和查询，都需要它来驱动。\n\n# *广：\n\n> 无状态数据库架构是第一次听说，不是很理解为什么要这么做，本身这个无状态的数据架构也不支持查询，那么为什么不使用mq代替呢\n\n# **用户6149：\n\n> 可不可以在弄一个默认组出来，里面是一个mysql集群，失败了写这个集群，然后有个同步程序把集群里面的数据同步到原先的规则库里面\n\n#     讲师回复：\n\n>     嗯，思路类似。但写默认组里的集群，如果失败了，存在分布式事务的问题，会导致数据不一致。\n\n# **烽：\n\n> 在平时中没有遇到这种场景。这篇文章看了两次我算看明白了思路： 无状态存储集群 的目的 仅仅是 保证 写业务的成功。 最终的 格式化的数据 通过同步模块 到 分库分表 集群中 存储。其他 操作场景 都是基于">分库分表 集群中的 数据进行 处理。 老师 ，这种架构主要 还是针对 业务量比较巨大的场景，在 目前工作场景中还用不到。有些疑问，应该如何去进行实践？\n\n# *西：\n\n> 现在流行的分布式数据库，tidb这类newsql是不是差不多也是这个思路实现的？\n\n#     讲师回复：\n\n>     无状态存储是一种将业务和存储分离的思路，其实很多地方都有借鉴\n\n# *磊：\n\n> 您好，无状态写入方案中，写入分片故障后切换到其他分片写入，那后面对已存在数据做修改是怎么找到在哪个分片上呢？\n\n#     讲师回复：\n\n>     写入之后的修改就走原有分库分表的流程。这里是通过无状态存储集群保证用户的订单或写入请求一定能够成功。因为提单或者写入，一般是担负一个公司的营收等重任。而写入后的修改，是正常的业务流程流转，在极端情况下，可以降级。\n\n# **义：\n\n> 这个设计有场景限制吧，金融不合适吧\n\n#     讲师回复：\n\n>     说说具体不适合的原因？\n\n# *西：\n\n> 类似下订单这样的写入接口，如果这个接口里还有其它表的更新操作，跟创建订单都在一个事务里，这个架构方案是不是就玩不转了？\n\n#     讲师回复：\n\n>     嗯，如果此操作是必须运行的，不可避免的，则不行。但可以考虑下，是否可以从业务上进行折中，将这个更新进行后置化，减少这种耦合\n\n# **辉：\n\n> 老师，有个问题如前面留言所说，有abc三个库，写入时本来根据路由规则应该是写入b库，可是这个时候b库挂了，无状态下入到了a库。这个时候去查询或修改数据的时候路由规则也是比如去取模之类的会去a库查，a表就查不到刚写入的数据了呀，因为数据放在了b表中，根据路由规则不会路由到b表中去\n\n#     讲师回复：\n\n>     只有写入才会使用无状态存储。而写入之后的修改，走原有的分库分表的流程即可。 因为写入，比如提单，是需要极力保障的。提单之后的修改，因为实现上的难度，保障力度可以适当下降\n\n# **3961：\n\n> 分库分表，高可用，7*24',charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何利用数据库实现并发扣减？",frontmatter:{title:"如何利用数据库实现并发扣减？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/8adb6a/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/13.%20%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E5%B9%B6%E5%8F%91%E6%89%A3%E5%87%8F%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/13. 如何利用数据库实现并发扣减？.md",key:"v-0270cf64",path:"/pages/8adb6a/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:5892}],headersStr:"精选评论",content:"在后台开发领域，高并发的扣减一直是比较热门的话题。在各类技术博客、大会分享以及面试问题中，出现频率都非常高，可见它的重要性和技术知识点的密集性。从本讲开始，我将由浅入深、由简至繁地介绍三种能够支撑不同并发量级的解决方案，首先介绍的是基于纯数据库实现的扣减方案。\n\n\n什么是扣减类业务\n\n看到这个标题很多人可能会有疑惑，扣减类业务不就是指秒杀吗，为什么要取这么抽象的名字呢？\n\n但其实秒杀只是扣减类业务中的一个有代表性、具备一定技术复杂度的场景，它并不能代表扣减类业务的全部场景。我将在“第 16 讲”中详细讲解秒杀相关的内容。除了秒杀之外，常见的扣减类业务有：\n\n * 购买一个或多商品时扣减的库存\n\n * 商家针对用户设置的某个或几个商品最多购买次数\n\n * 支付订单时扣减的金额\n\n * ...\n\n上述业务场景有几个共性点：购买的或设置需要扣减的数量一次可以是一个或多个；数量是共享的，每个用户都可以扣减某一个数据的数量。基于上述分析，可以给扣减类业务下一个定义：\n\n> 它是需要通过对一个或多个已有的、用户间或用户内共享的数量，精准扣减成功才能继续的业务。\n\n通过定义，将我们要讨论的扣减类业务圈定了一个边界和清晰的概念。希望你在本模块里和我一起锚定这个定义，防止出现因为定义不清楚导致的认知偏差和讨论分歧。\n\n在了解了扣减类业务的定义之后，再来看看它和前面几个模块中涉及的读业务与 UGC 写业务的区别。\n\n * 读业务的特点是写少读多，同时写入为非在线类运营操作，写入的 SLA（Service Level Agreement，服务等级协议）要求级别较低，对于读的 SLA 最高。读数据因为不会改或者频率很低，所以可以采用数据不断前置应对性能等的要求。\n\n * UGC 写业务则和扣减业务类似。写入均是 C 端（客户）操作，对写入的 SLA 要求级别最高。但 UGC 写业务的特点是写入的数据是用户私有的而不是共享的，同时写入不需要依赖已有的数据。对于 UGC 写业务，只要尽最大可能将数据存储下来即可。\n\n相比上两类业务的各自特点与技术实现关注点，扣减类业务着重关注对历史已有数据的增减上，接下来我们就来具体看一看对扣减类业务的特点如何应对。\n\n\n扣减类业务的技术关注点\n\n发生扣减必然就会存在归还。比如用户购买了商品之后因为一些原因想要退货，这个时候就需要将商品的库存、商品设置的购买次数及订单金额等进行归还。因此，在实现的时候还需要考虑归还。但是因归还的实现较通用，且归还是后置流程对并发性要求并不高，故本模块会先用三讲介绍如何应对高并发扣减，再来讲解如何实现归还。\n\n基于扣减类业务的定义，我把关于扣减的实现，需要关注的技术点总结如下：\n\n * 当前剩余的数量需要大于等于当次需要扣减的数量，即不允许超卖；\n\n * 对同一个数据的数量存在用户并发扣减，需要保证并发一致性；\n\n * 需要保证可用性和性能，性能至少是秒级；\n\n * 一次的扣减会包含多个目标数量；\n\n * 当次扣减有多个数量时，其中一个扣减不成功即不成功，需要回滚。\n\n对于返还的实现需要关注的技术点如下：\n\n * 必须有扣减才能返还；\n\n * 返还的数量必须要加回，不能丢失；\n\n * 返还的数据总量不能大于扣减的总量；\n\n * 一次扣减可以有多次返还；\n\n * 返还需要保证幂等。\n\n在了解了扣减类业务的场景、定义，确定了在实现时需要包含的功能点，以及各个功能点的实现要求后，下面我将介绍三种不同方式的实现方案。这三个方案都能够满足上述要求的功能和对应的技术点要求，但三个方案的实现复杂度以及能够支撑的性能和并发量级均有一定的区别。\n\n下面介绍的实现方案将直接以库存扣减为蓝本。其他扣减场景，比如：限次购买、支付扣减等技术方案基本类似，你可以举一反三。下面我们先来介绍第一种方案——纯数据库的扣减。\n\n\n纯数据库式扣减实现\n\n顾名思义，纯数据库的方案就是扣减业务的实现完全依赖数据库提供的各项功能，而不依赖其他额外的一些存储和中间件了。纯数据库实现的好处是逻辑简单、开发及部署成本低。\n\n纯数据库的实现之所以能够满足扣减业务的各项功能要求，主要是依赖各类主流数据库提供的两个特性：\n\n * 第一是基于数据库乐观锁的方式保证数据并发扣减的强一致性；\n\n * 第二是基于数据库的事务实现批量扣减部分失败时的数据回滚。\n\n基于上述特性实现的架构方案如下图 1 所示，它包含一个扣减服务和一个数量数据库。\n\n\n\n图 1：纯数据库扣减架构图\n\n> 注意，扣减服务是一个后端服务，因本课程是介绍后台架构，对于扣减中涉及的前端技术不进行赘述，后续再提到的各种服务可直接默认为提供 RPC 接口的后端应用。\n\n数量数据库存储扣减中的所有数据，主要包含两张表：扣减剩余数量表和流水表。扣减剩余数量表是最主要的表，包含实时的剩余数量。主要结构如下表 1 所示：\n\n表 1：扣减剩余数量表\n\n\n\n如上表所示，对于当前剩余可购买的数量，当用户进行取消订单、售后等场景时，都需要把数量加回到此字段。同时，当商家补齐库存时，也需要把数量加回。\n\n从完成业务功能的角度看，只要扣减剩余数量表即可。但在实际场景中，会需要查看明细进行对账、盘货、排查问题等需求。其次，在扣减后需要进行返还时是非常依赖流水的。因为只能返还有扣减记录的库存数量。最后，在技术上的幂等性，也非常依赖流水表。下面我们来看一下流水表的主要结构，如下表 2 所示：\n\n表 2：扣减流水表\n\n\n\n1. 扣减接口实现\n\n完成了存储的数据结构设计后，咱们再来学习一下扣减服务提供的扣减接口的实现。扣减接口接受用户提交的扣减请求，包含用户账号、一批商品及对应的购买数量，大致实现逻辑如下图 2 所示：\n\n\n\n图 2：扣减实现流程\n\n在图 2 的流程开始时，首先进行的是数据校验，在其中可以做一些常规的参数格式校验。其次，它还可以进行库存扣减的前置校验。比如当数据库中库存只有 8 个时，而用户要购买 10 个，此时在数据校验中即可前置拦截，减少对于数据库的写操作。纯读不会加锁，性能较高，可以采用此种方式提升并发量。\n\n当用户只购买某商品 2 个时，如果在校验时剩余库存有 8 个，此时校验会通过。但在后续的实际扣减时，因为其他用户也在并发的扣减，可能会出现了幻读，即此用户实际去扣减时不足 2 个，导致失败。这种场景就会导致多一次数据库查询，降低了整体的扣减性能。其次，即使将校验放置在事务内，先查询数据库数量校验通过后再扣减，也会增加性能。\n\n那是不是前置校验就不需要了呢？在实践中，前置校验是需要的。相比读，扣减的事务性能更差，两弊相衡取其轻，能避免则避免。此外，扣减服务提供的数量查询接口和校验中的反查底层实现是相同的，如果反查走库则都走库。在“模块二：构建高性读服务”中我们了解到，正常情况下，读比写的量级至少大十倍以上。因此，查询的性能问题仍须解决。关于如何规避性能问题、如何降低给数据库带来的压力，我们会在本讲后半部分详细讲解。\n\n在事务之后，则是数据库更新操作。因为用户扣减的商品数量可以是一个或多个，只要其中一个扣减不成功，则判定用户不能购买。注意，因为在事务之后，对商品使用 for 循环进行处理，每一次循环都需要判断结果。如果一个扣减失败，则进行事务回滚。基于上述提供的两张表结构，单条商品的扣减 SQL 大致如下：\n\nupdate stock set leavedAmount=leavedAmount-currentAmount where skuid='123456' and leavedAmount>=currentAmount\n\n\n此 SQL 采用了类似乐观锁的方式实现了原子性，在 where 条件里判断此次需要的数量小于等于剩余的数量。在扣减服务的代码里，判断此 SQL 的返回值，如果值为 1 表示扣减成功，即用户此次购买的数量，当前的库存可以满足否则，返回 0 进行回滚即可。\n\n扣减完成之后，需要记录流水数据。每一次扣减时，都需要外部用户传入一个 uuid 作为流水编号，此编号是全局唯一的。用户在扣减时传入唯一的编号有两个作用。\n\n 1. 当用户归还数量时，需要带回此编号，用来标识此次返还属于历史上的具体哪次扣减。\n\n 2. 进行幂等性控制。当用户调用扣减接口出现超时时，因为用户不知道是否成功，用户可以采用此编号进行重试或反查。在重试时，使用此编号进行标识防重。\n\n当每一个 SKU 按上述流程都扣减成功了，则提交事务，说明整个扣减成功。\n\n2. 扣减接口实现升级\n\n在上面提到了前置校验的好处及存在的问题：多一次查询，就会增加数据库的压力，同时对整体服务性能也有一定影响。此外，对外提供的查询库存数量的接口也会对数据库产生压力，同时读的请求量要远大于写，由此带来的压力会更大。\n\n根据业务场景分析，读库存的请求一般是顾客浏览商品时产生，而调用扣减库存的请求基本上是用户购买时才会触发。用户购买请求的业务价值相比读请求会更大，因此对于写需要重点保障。转换到技术上，价值相对低的读来说是可以降级的、有损的。对于写要尽可能性能好、尽量减少不必要的读与写请求（写本身非常消耗性能）等。\n\n针对上述的问题，可以对整体架构进行升级，升级后的架构如下图 3 所示：\n\n\n\n图 3：读写分离的扣减架构图\n\n整体的升级策略采用了读写分离的方式，另外主从复制直接使用了 MySQL 等数据库已有功能，改动上非常小，只要在扣减服务里配置两个数据源。当客户查询剩余库存数量、扣减服务中的前置校验时，读取从数据库即可。而真正的数据扣减还是使用主数据库。\n\n读写分离之后，根据二八原则，80% 的均为读流量，主库的压力降低了 80%。但采用了读写分离也会导致读取的数据不准确的问题，不过库存数量本身就在实时变化，短暂的差异业务上是可以容忍的，最终的实际扣减会保证数据的准确性。\n\n不过，在上面提到的因为在扣减前，为了降低数据库的压力，增加的前置校验导致的性能下降问题，并没有得到太多实质性的升级解决。那么，接下来我们该从什么方向上解决这个问题呢？\n\n3. 扣减接口实现再升级\n\n在基于数据库的主从复制降低了主库流量压力之后，还需要升级的就是读取的性能了。这里用到了我们在“模块二：构建高性能读服务”里学习到的：使用 Binlog 实现简单、可靠的异构数据同步的技能，应用此方案后整体的架构如下图 4 所示：\n\n\n\n图 4：读写基于不同存储的架构图\n\n和上面第 2 点实现的区别是增加了缓存，用来提升读取从库的性能。在技术实现上，采用了在“模块二：构建高性能读服务”里介绍的 Binlog 技术，这里不再赘述。\n\n经过此次方案升级后，基本上解决了在前置扣减里校验环节及获取库存数量接口的性能问题，提高了用户体验性。\n\n\n纯数据库扣减方案适用性\n\n要知道，任何方案都是根据业务需求、实现成本进行综合分析和取舍，很难有一个实现方案将所有诉求 100% 满足，它都是有一定的优点也有对应的缺点。\n\n对于采用数据库实现扣减服务的方案也不例外，整体实现方案上也是有它适用的场景以及它不适用的场景。\n\n纯数据库方案主要有以下几个优点：\n\n * 实现简单，即使读使用了前置缓存，整体代码工程就两个，即扣减服务与数据映射服务，在需求交付周期非常短、人力紧张的场景是非常适用的；\n\n * 使用了数据库的 ACID 特性进行扣减。业务上，库存数量既不会出现超卖，也不会出现少卖。\n\n但不足之处是，当扣减 SKU 数量增多时，性能非常差。因为对每一个 SKU 都需要单独扣减，导致事务非常大，极端情况下，可能出现几十秒的情况。\n\n在上述的优点和不足背景下，请你思考以下两个问题：\n\n * 此方案在落地上有适用场景吗？\n\n * 或者有哪些适用场景呢？\n\n在一些企业内部 ERP 系统里的次数限制、中小电商站点的库存管理、政府系统等场景里，其实此方案是比较适合的。因为此类系统的用户并发数、对于请求的耗时要求、购买商品的数量都比较小，如果一开始就采用后几讲里介绍的方案，其实是一种浪费。\n\n当业务不断发展时，对上述指标有要求时，再去升级也不迟，毕竟系统是演化迭代来的，不是一天建成的。\n\n到这里我们今天的重点内容就讲完了，此时你可能会有以下两个疑问，本讲的标题是“如何实现万级并发的扣减服务”，但从本篇所讲方案里和描述里，一没有提到具体数据，二从方案上看数据库并不能支持并发上万的扣减量，是不是有点标题党呢？\n\n首先回答第一个疑问，在这里想做下正本清源，以后你看到任何类似单机过万的数字都要小心与仔细思考。因为任何没有机器配置的指标，都是耍流氓。如果我采用 Oracle 的数据库、100 多核的刀锋服务器、SSD 的硬盘，在一定情况下，即使是纯数据库的扣减方案，也是可以达到单机上万的 TPS 的。\n\n对于第二个疑问，我想表达的思想是，任何架构都是不完美的，都是有取舍的。不要觉得单机过万或者并发过百万、千万就是最好，因为它在其他指标上会有更多的成本消耗。对于本讲标题设定的目标，请见后续章节分解。\n\n\n总结\n\n为了让你对扣减类业务有一个清晰的认知，我首先介绍了什么是扣减类业务、适用场景，以及它的实现需要满足的功能要求。之所以没有直接讲解各种实现方案的原因是：一个优秀的方案一定是建立在对本质问题的理解之上，也就是定义问题，偏离问题的解决方案是事倍功半的。这个思想是本讲的要点之一，希望你牢记并在未来进行系统架构时第一时间定义问题再进行设计。\n\n在此之上，本讲还介绍了递进式的架构设计演化方案，先介绍了一个满足基本功能的纯数据库方案。当新的问题出现时，又递进地介绍了采用主从分离的方案以及进一步的主从 + 缓存前置的方案。在理解了这两个递进方案的实现之外，也希望你了解，方案是演化的，而不是一步到位的。\n\n\n练习题\n\n最后，我再给你留两道思考题。\n\n 1. 除了使用主从同步来提升读取性能，是否可以使用数据库索引来提升性能？另外，数量数据库应如何设置索引来满足如防重等诉求？\n\n 2. 能否将数据库进行分库或者分表，利用分库或分表来提升扣减写入的并发性？\n\n你可以把你的答案、思路或者课后总结写在留言区，如果你觉得今天的内容对你有所启发，欢迎分享给身边的朋友。我们一起交流！\n\n----------------------------------------\n\n\n# 精选评论\n\n# **1442：\n\n> 还有些秒杀前会在redis里面先初始化下库存，然后利用redis自身的原子性操作来保证不会超卖，然后redis扣减会比db好。（还见过类似步长这种方式，从db一次取多个库存到reids.....），这种方案合理么？\n\n#     讲师回复：\n\n>     嗯，方案没有对错，只有是否适合对应场景。这两个方案存在的问题是可能丢数据，出现少卖。但性能好、实现简单，如果对于数据一致性要求不是特别严格的场景，可以采用你说的方案。\n\n# *程：\n\n> 非常赞同老师的观点，竟系统是演化迭代来的，不是一天建成的。\n\n# *鹤：\n\n>  1. 应该只能用skuCode加索引吧2. 除非商品实例的数据量足够大，要不是没必要分库分表的，分库分表也是用skuCode通过hash分库\n\n#     讲师回复：\n\n>     要对每一次的扣减的流水编号创建唯一索引，目的是为了实现库存扣减的幂等。\n\n量不大的情况下，不要分库分表。分库分表之后会带来分布式事务的问题，需要更多的特殊处理。如果要分库分表，可以按SKU维度进行划分。\n\n# **杰：\n\n> 我看很多系统都用 事务+select for update 来做。很稳\n\n# *中：\n\n> 批量扣减很容易死锁",normalizedContent:"在后台开发领域，高并发的扣减一直是比较热门的话题。在各类技术博客、大会分享以及面试问题中，出现频率都非常高，可见它的重要性和技术知识点的密集性。从本讲开始，我将由浅入深、由简至繁地介绍三种能够支撑不同并发量级的解决方案，首先介绍的是基于纯数据库实现的扣减方案。\n\n\n什么是扣减类业务\n\n看到这个标题很多人可能会有疑惑，扣减类业务不就是指秒杀吗，为什么要取这么抽象的名字呢？\n\n但其实秒杀只是扣减类业务中的一个有代表性、具备一定技术复杂度的场景，它并不能代表扣减类业务的全部场景。我将在“第 16 讲”中详细讲解秒杀相关的内容。除了秒杀之外，常见的扣减类业务有：\n\n * 购买一个或多商品时扣减的库存\n\n * 商家针对用户设置的某个或几个商品最多购买次数\n\n * 支付订单时扣减的金额\n\n * ...\n\n上述业务场景有几个共性点：购买的或设置需要扣减的数量一次可以是一个或多个；数量是共享的，每个用户都可以扣减某一个数据的数量。基于上述分析，可以给扣减类业务下一个定义：\n\n> 它是需要通过对一个或多个已有的、用户间或用户内共享的数量，精准扣减成功才能继续的业务。\n\n通过定义，将我们要讨论的扣减类业务圈定了一个边界和清晰的概念。希望你在本模块里和我一起锚定这个定义，防止出现因为定义不清楚导致的认知偏差和讨论分歧。\n\n在了解了扣减类业务的定义之后，再来看看它和前面几个模块中涉及的读业务与 ugc 写业务的区别。\n\n * 读业务的特点是写少读多，同时写入为非在线类运营操作，写入的 sla（service level agreement，服务等级协议）要求级别较低，对于读的 sla 最高。读数据因为不会改或者频率很低，所以可以采用数据不断前置应对性能等的要求。\n\n * ugc 写业务则和扣减业务类似。写入均是 c 端（客户）操作，对写入的 sla 要求级别最高。但 ugc 写业务的特点是写入的数据是用户私有的而不是共享的，同时写入不需要依赖已有的数据。对于 ugc 写业务，只要尽最大可能将数据存储下来即可。\n\n相比上两类业务的各自特点与技术实现关注点，扣减类业务着重关注对历史已有数据的增减上，接下来我们就来具体看一看对扣减类业务的特点如何应对。\n\n\n扣减类业务的技术关注点\n\n发生扣减必然就会存在归还。比如用户购买了商品之后因为一些原因想要退货，这个时候就需要将商品的库存、商品设置的购买次数及订单金额等进行归还。因此，在实现的时候还需要考虑归还。但是因归还的实现较通用，且归还是后置流程对并发性要求并不高，故本模块会先用三讲介绍如何应对高并发扣减，再来讲解如何实现归还。\n\n基于扣减类业务的定义，我把关于扣减的实现，需要关注的技术点总结如下：\n\n * 当前剩余的数量需要大于等于当次需要扣减的数量，即不允许超卖；\n\n * 对同一个数据的数量存在用户并发扣减，需要保证并发一致性；\n\n * 需要保证可用性和性能，性能至少是秒级；\n\n * 一次的扣减会包含多个目标数量；\n\n * 当次扣减有多个数量时，其中一个扣减不成功即不成功，需要回滚。\n\n对于返还的实现需要关注的技术点如下：\n\n * 必须有扣减才能返还；\n\n * 返还的数量必须要加回，不能丢失；\n\n * 返还的数据总量不能大于扣减的总量；\n\n * 一次扣减可以有多次返还；\n\n * 返还需要保证幂等。\n\n在了解了扣减类业务的场景、定义，确定了在实现时需要包含的功能点，以及各个功能点的实现要求后，下面我将介绍三种不同方式的实现方案。这三个方案都能够满足上述要求的功能和对应的技术点要求，但三个方案的实现复杂度以及能够支撑的性能和并发量级均有一定的区别。\n\n下面介绍的实现方案将直接以库存扣减为蓝本。其他扣减场景，比如：限次购买、支付扣减等技术方案基本类似，你可以举一反三。下面我们先来介绍第一种方案——纯数据库的扣减。\n\n\n纯数据库式扣减实现\n\n顾名思义，纯数据库的方案就是扣减业务的实现完全依赖数据库提供的各项功能，而不依赖其他额外的一些存储和中间件了。纯数据库实现的好处是逻辑简单、开发及部署成本低。\n\n纯数据库的实现之所以能够满足扣减业务的各项功能要求，主要是依赖各类主流数据库提供的两个特性：\n\n * 第一是基于数据库乐观锁的方式保证数据并发扣减的强一致性；\n\n * 第二是基于数据库的事务实现批量扣减部分失败时的数据回滚。\n\n基于上述特性实现的架构方案如下图 1 所示，它包含一个扣减服务和一个数量数据库。\n\n\n\n图 1：纯数据库扣减架构图\n\n> 注意，扣减服务是一个后端服务，因本课程是介绍后台架构，对于扣减中涉及的前端技术不进行赘述，后续再提到的各种服务可直接默认为提供 rpc 接口的后端应用。\n\n数量数据库存储扣减中的所有数据，主要包含两张表：扣减剩余数量表和流水表。扣减剩余数量表是最主要的表，包含实时的剩余数量。主要结构如下表 1 所示：\n\n表 1：扣减剩余数量表\n\n\n\n如上表所示，对于当前剩余可购买的数量，当用户进行取消订单、售后等场景时，都需要把数量加回到此字段。同时，当商家补齐库存时，也需要把数量加回。\n\n从完成业务功能的角度看，只要扣减剩余数量表即可。但在实际场景中，会需要查看明细进行对账、盘货、排查问题等需求。其次，在扣减后需要进行返还时是非常依赖流水的。因为只能返还有扣减记录的库存数量。最后，在技术上的幂等性，也非常依赖流水表。下面我们来看一下流水表的主要结构，如下表 2 所示：\n\n表 2：扣减流水表\n\n\n\n1. 扣减接口实现\n\n完成了存储的数据结构设计后，咱们再来学习一下扣减服务提供的扣减接口的实现。扣减接口接受用户提交的扣减请求，包含用户账号、一批商品及对应的购买数量，大致实现逻辑如下图 2 所示：\n\n\n\n图 2：扣减实现流程\n\n在图 2 的流程开始时，首先进行的是数据校验，在其中可以做一些常规的参数格式校验。其次，它还可以进行库存扣减的前置校验。比如当数据库中库存只有 8 个时，而用户要购买 10 个，此时在数据校验中即可前置拦截，减少对于数据库的写操作。纯读不会加锁，性能较高，可以采用此种方式提升并发量。\n\n当用户只购买某商品 2 个时，如果在校验时剩余库存有 8 个，此时校验会通过。但在后续的实际扣减时，因为其他用户也在并发的扣减，可能会出现了幻读，即此用户实际去扣减时不足 2 个，导致失败。这种场景就会导致多一次数据库查询，降低了整体的扣减性能。其次，即使将校验放置在事务内，先查询数据库数量校验通过后再扣减，也会增加性能。\n\n那是不是前置校验就不需要了呢？在实践中，前置校验是需要的。相比读，扣减的事务性能更差，两弊相衡取其轻，能避免则避免。此外，扣减服务提供的数量查询接口和校验中的反查底层实现是相同的，如果反查走库则都走库。在“模块二：构建高性读服务”中我们了解到，正常情况下，读比写的量级至少大十倍以上。因此，查询的性能问题仍须解决。关于如何规避性能问题、如何降低给数据库带来的压力，我们会在本讲后半部分详细讲解。\n\n在事务之后，则是数据库更新操作。因为用户扣减的商品数量可以是一个或多个，只要其中一个扣减不成功，则判定用户不能购买。注意，因为在事务之后，对商品使用 for 循环进行处理，每一次循环都需要判断结果。如果一个扣减失败，则进行事务回滚。基于上述提供的两张表结构，单条商品的扣减 sql 大致如下：\n\nupdate stock set leavedamount=leavedamount-currentamount where skuid='123456' and leavedamount>=currentamount\n\n\n此 sql 采用了类似乐观锁的方式实现了原子性，在 where 条件里判断此次需要的数量小于等于剩余的数量。在扣减服务的代码里，判断此 sql 的返回值，如果值为 1 表示扣减成功，即用户此次购买的数量，当前的库存可以满足否则，返回 0 进行回滚即可。\n\n扣减完成之后，需要记录流水数据。每一次扣减时，都需要外部用户传入一个 uuid 作为流水编号，此编号是全局唯一的。用户在扣减时传入唯一的编号有两个作用。\n\n 1. 当用户归还数量时，需要带回此编号，用来标识此次返还属于历史上的具体哪次扣减。\n\n 2. 进行幂等性控制。当用户调用扣减接口出现超时时，因为用户不知道是否成功，用户可以采用此编号进行重试或反查。在重试时，使用此编号进行标识防重。\n\n当每一个 sku 按上述流程都扣减成功了，则提交事务，说明整个扣减成功。\n\n2. 扣减接口实现升级\n\n在上面提到了前置校验的好处及存在的问题：多一次查询，就会增加数据库的压力，同时对整体服务性能也有一定影响。此外，对外提供的查询库存数量的接口也会对数据库产生压力，同时读的请求量要远大于写，由此带来的压力会更大。\n\n根据业务场景分析，读库存的请求一般是顾客浏览商品时产生，而调用扣减库存的请求基本上是用户购买时才会触发。用户购买请求的业务价值相比读请求会更大，因此对于写需要重点保障。转换到技术上，价值相对低的读来说是可以降级的、有损的。对于写要尽可能性能好、尽量减少不必要的读与写请求（写本身非常消耗性能）等。\n\n针对上述的问题，可以对整体架构进行升级，升级后的架构如下图 3 所示：\n\n\n\n图 3：读写分离的扣减架构图\n\n整体的升级策略采用了读写分离的方式，另外主从复制直接使用了 mysql 等数据库已有功能，改动上非常小，只要在扣减服务里配置两个数据源。当客户查询剩余库存数量、扣减服务中的前置校验时，读取从数据库即可。而真正的数据扣减还是使用主数据库。\n\n读写分离之后，根据二八原则，80% 的均为读流量，主库的压力降低了 80%。但采用了读写分离也会导致读取的数据不准确的问题，不过库存数量本身就在实时变化，短暂的差异业务上是可以容忍的，最终的实际扣减会保证数据的准确性。\n\n不过，在上面提到的因为在扣减前，为了降低数据库的压力，增加的前置校验导致的性能下降问题，并没有得到太多实质性的升级解决。那么，接下来我们该从什么方向上解决这个问题呢？\n\n3. 扣减接口实现再升级\n\n在基于数据库的主从复制降低了主库流量压力之后，还需要升级的就是读取的性能了。这里用到了我们在“模块二：构建高性能读服务”里学习到的：使用 binlog 实现简单、可靠的异构数据同步的技能，应用此方案后整体的架构如下图 4 所示：\n\n\n\n图 4：读写基于不同存储的架构图\n\n和上面第 2 点实现的区别是增加了缓存，用来提升读取从库的性能。在技术实现上，采用了在“模块二：构建高性能读服务”里介绍的 binlog 技术，这里不再赘述。\n\n经过此次方案升级后，基本上解决了在前置扣减里校验环节及获取库存数量接口的性能问题，提高了用户体验性。\n\n\n纯数据库扣减方案适用性\n\n要知道，任何方案都是根据业务需求、实现成本进行综合分析和取舍，很难有一个实现方案将所有诉求 100% 满足，它都是有一定的优点也有对应的缺点。\n\n对于采用数据库实现扣减服务的方案也不例外，整体实现方案上也是有它适用的场景以及它不适用的场景。\n\n纯数据库方案主要有以下几个优点：\n\n * 实现简单，即使读使用了前置缓存，整体代码工程就两个，即扣减服务与数据映射服务，在需求交付周期非常短、人力紧张的场景是非常适用的；\n\n * 使用了数据库的 acid 特性进行扣减。业务上，库存数量既不会出现超卖，也不会出现少卖。\n\n但不足之处是，当扣减 sku 数量增多时，性能非常差。因为对每一个 sku 都需要单独扣减，导致事务非常大，极端情况下，可能出现几十秒的情况。\n\n在上述的优点和不足背景下，请你思考以下两个问题：\n\n * 此方案在落地上有适用场景吗？\n\n * 或者有哪些适用场景呢？\n\n在一些企业内部 erp 系统里的次数限制、中小电商站点的库存管理、政府系统等场景里，其实此方案是比较适合的。因为此类系统的用户并发数、对于请求的耗时要求、购买商品的数量都比较小，如果一开始就采用后几讲里介绍的方案，其实是一种浪费。\n\n当业务不断发展时，对上述指标有要求时，再去升级也不迟，毕竟系统是演化迭代来的，不是一天建成的。\n\n到这里我们今天的重点内容就讲完了，此时你可能会有以下两个疑问，本讲的标题是“如何实现万级并发的扣减服务”，但从本篇所讲方案里和描述里，一没有提到具体数据，二从方案上看数据库并不能支持并发上万的扣减量，是不是有点标题党呢？\n\n首先回答第一个疑问，在这里想做下正本清源，以后你看到任何类似单机过万的数字都要小心与仔细思考。因为任何没有机器配置的指标，都是耍流氓。如果我采用 oracle 的数据库、100 多核的刀锋服务器、ssd 的硬盘，在一定情况下，即使是纯数据库的扣减方案，也是可以达到单机上万的 tps 的。\n\n对于第二个疑问，我想表达的思想是，任何架构都是不完美的，都是有取舍的。不要觉得单机过万或者并发过百万、千万就是最好，因为它在其他指标上会有更多的成本消耗。对于本讲标题设定的目标，请见后续章节分解。\n\n\n总结\n\n为了让你对扣减类业务有一个清晰的认知，我首先介绍了什么是扣减类业务、适用场景，以及它的实现需要满足的功能要求。之所以没有直接讲解各种实现方案的原因是：一个优秀的方案一定是建立在对本质问题的理解之上，也就是定义问题，偏离问题的解决方案是事倍功半的。这个思想是本讲的要点之一，希望你牢记并在未来进行系统架构时第一时间定义问题再进行设计。\n\n在此之上，本讲还介绍了递进式的架构设计演化方案，先介绍了一个满足基本功能的纯数据库方案。当新的问题出现时，又递进地介绍了采用主从分离的方案以及进一步的主从 + 缓存前置的方案。在理解了这两个递进方案的实现之外，也希望你了解，方案是演化的，而不是一步到位的。\n\n\n练习题\n\n最后，我再给你留两道思考题。\n\n 1. 除了使用主从同步来提升读取性能，是否可以使用数据库索引来提升性能？另外，数量数据库应如何设置索引来满足如防重等诉求？\n\n 2. 能否将数据库进行分库或者分表，利用分库或分表来提升扣减写入的并发性？\n\n你可以把你的答案、思路或者课后总结写在留言区，如果你觉得今天的内容对你有所启发，欢迎分享给身边的朋友。我们一起交流！\n\n----------------------------------------\n\n\n# 精选评论\n\n# **1442：\n\n> 还有些秒杀前会在redis里面先初始化下库存，然后利用redis自身的原子性操作来保证不会超卖，然后redis扣减会比db好。（还见过类似步长这种方式，从db一次取多个库存到reids.....），这种方案合理么？\n\n#     讲师回复：\n\n>     嗯，方案没有对错，只有是否适合对应场景。这两个方案存在的问题是可能丢数据，出现少卖。但性能好、实现简单，如果对于数据一致性要求不是特别严格的场景，可以采用你说的方案。\n\n# *程：\n\n> 非常赞同老师的观点，竟系统是演化迭代来的，不是一天建成的。\n\n# *鹤：\n\n>  1. 应该只能用skucode加索引吧2. 除非商品实例的数据量足够大，要不是没必要分库分表的，分库分表也是用skucode通过hash分库\n\n#     讲师回复：\n\n>     要对每一次的扣减的流水编号创建唯一索引，目的是为了实现库存扣减的幂等。\n\n量不大的情况下，不要分库分表。分库分表之后会带来分布式事务的问题，需要更多的特殊处理。如果要分库分表，可以按sku维度进行划分。\n\n# **杰：\n\n> 我看很多系统都用 事务+select for update 来做。很稳\n\n# *中：\n\n> 批量扣减很容易死锁",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何利用缓存实现万级并发扣减？",frontmatter:{title:"如何利用缓存实现万级并发扣减？",date:"2023-02-22T16:15:53.000Z",permalink:"/pages/958127/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/14.%20%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E4%B8%87%E7%BA%A7%E5%B9%B6%E5%8F%91%E6%89%A3%E5%87%8F%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/14. 如何利用缓存实现万级并发扣减？.md",key:"v-2179a924",path:"/pages/958127/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:6029}],headersStr:"精选评论",content:"在上一讲的实现方案里我们讨论了采用纯数据库的扣减实现方案，如果以常规的机器或者 Docker 来进行评估，此方案较难实现单机过万的 TPS。之所以介绍，是想告诉你，架构是面向业务功能、成本、实现难度、时间等因素的取舍，而不是绝对地追求高性能、高并发及高可用等非功能性指标。\n\n另外，在上一讲里介绍的扣减业务的技术实现需求点、数据库表结构信息等内容，其实是和技术无关的，它们属于通用的基本信息和标准定义。因此，今天我们讲解的方案将直接复用以上信息，不再赘述，有忘记的或者直接跳读此讲的同学可以翻到上一讲进行复习。\n\n这一讲，我将由浅入深地介绍如何基于缓存来实现单机万级这一并发扣减目标。\n\n\n纯缓存方案浅析\n\n纯数据库的方案虽然避免了超卖与少卖的情况，但因采用了事务的方式保证一致性和原子性，所以在 SKU 数量较多时性能下降较明显。\n\n> 注：事务本质上有四个特点 ACID：原子性（Atomicity）、一致性（Consistency ）、隔离性（Isolation）及 持久性（Durability）。\n\n因为扣减有一个要求即当一个 SKU 购买的数量不够时，整个批量扣减就要回滚，因此，我们需要使用类似 for 循环的方式对每一个扣减 SQL 的返回值进行检查。另外一个原因是，当多个用户买一个 SKU 时，它的性能也并不乐观。因为当出现高并发扣减或者并发扣减同一个 SKU 时，事务的隔离性会导致加锁等待以及死锁情况出现。\n\n现在看来，实现单机万级的并发扣减好像遥遥无期了。别急，还记得在上一讲里强调的，架构是在对问题清晰定义之后演化来的理念吗？\n\n下面我们对问题再次梳理一遍，进而寻找可升级演化的方案。\n\n首先，你要知道扣减只需要保证原子性即可，并不需要数据库提供的 ACID。在扣减库存时，重点是保证商品不超卖不少卖。而持久化这个功能，只有在数据库故障切换及恢复时才有需要，因为被中断的事务需要持久化的日志进行重演，也就是说持久化是主功能之外的后置功能、附加功能。\n\n那么我们是否可以去掉持久化这一后置的、附加的功能？或者是否存在可替代方案？你先不着急回答这个问题，跟着我的思路咱们继续分析，自会寻得答案。\n\n其次，在提升性能方面最简单、最快速的方案便是升级硬件。不管你使用的是哪一个厂商的数据库实现，提升或者替换部署数据库机器的硬件配置，都可以显著提升性能。虽然提升硬件可以解决问题，但与此同时也有另外一个问题——硬件的资金成本非常昂贵，动辄上百万、千万。\n\n经过上面的分析，再请你思考第二个问题：为什么当年阿里浩浩荡荡的发起了去 IOE 运动，转而采用性能相对较弱的 MySQL 及相对应的硬件呢？\n\n究其原因也是资金成本的考虑。此时，我们可以转换一个思路，既然提升或者替换机器配置可以提升性能，按此套路，是不是提升或者替换数据库存储也是一种方案？在不改变机器配置的情况下，把传统的 SQL 类数据库替换为性能更好的 NoSQL 类数据存储试试？\n\n是不是有一个性能又好同时又能够满足扣减多个 SKU 具有原子性的 NoSQL 数据库呢？行文至此，答案显然是可以的。\n\nRedis 作为最近几年非常流行的 NoSQL 数据库，它的原始版本或者改造版本基本上已经被国内所有互联网公司或者云厂商所采用。不管是微博爆点事件的流量应对，还是电商的大促流量处理，它的踪影无处不在，可见它在高性能上的能力是首屈一指。另外，因为 Redis 是开源软件且架构简单，部署在普通的 Docker 即可，成本非常低。\n\n此外，Redis 采用了单线程的事件模型，保障了我们对于原子性的要求。对于单线程的事件模型，简单的比喻就是说当我们多个客户端给 Redis 同时发送命令后，Redis 会按接收到的顺序进行串行的执行，对于已经接收而未能执行的命令，只能排队等待。基于此特性，当我们的扣减请求在 Redis 执行时，也即是原子性的。此特性刚好符合我们对于扣减原子性的要求。\n\n\n方案实现剖析\n\n在确定了使用缓存来完成扣减和高性能后，为了帮助你理解，这里我们结合扣减服务的整体架构图来进一步分析：\n\n\n\n图 1：纯缓存架构\n\n上图中的扣减服务和上一讲里的扣减服务一样，都提供了三个在线接口。但此时扣减服务依赖的是 Redis 缓存而不是数据库了。我们顺着上一讲的思路，继续以库存为场景讲解扣减服务的实现。\n\n缓存中存储的信息和上一讲中的数据库表结构基本类似，包含当前商品和剩余的库存数量和当次的扣减流水，这里要注意两点。\n\n * 首先，因为扣减全部依赖于缓存不依赖数据库，所有存储于 Redis 的数据均不设置过期并全量存储。\n\n * 其次，Redis 是以 k-v 结构为主，伴随 hash、set 等结构，与 MySQL 以表 + 行为主的结构有一定的差异。Redis 中的库存数量结构大致如下：\n\nkey为：sku_stock_{sku}。前缀sku_stock是固定不变，所有以此为前缀的均表示是库存。{sku}是占位符，在实际存储时被具体的skuid替代。\nvalue:库存数量。当前此key表示的sku剩余可购买的数量。\n\n\n在实际应用中，上述 key 的 sku_stock_ 前缀一般会简写成 ss_ 或者可以起到和其他 key 区分的较短形式。当我们存储的 SKU 有百万、千万级别时，此方式可极大地降低存储空间，从而降低成本，毕竟内存是比较昂贵的。\n\n对于 Redis 中存储的流水表采用 hash 结构，即 key + hashField + hashValue 的形式。结构大致如下：\n\nkey：sx_{sku}。前缀sx_是按上述缩短的形式设计的，只起到了区分的作用。{sku}为占位符\nhashField：此次扣减流水编号。\nhashValue: 此次扣减的数量\n\n\n在一次扣减时，会按 SKU 在 Redis 中先扣减完库存数量再记录流水信息。\n\n我们在上一讲里已经介绍过，扣减接口支持一次扣减多个 SKU + 数量。查询 Redis 的命令文档时你会发现：\n\n * 首先，Redis 对于 hash 结构不支持多个 key 的批量操作；\n\n * 其次，Redis 对于不同数据结构间不支持批量操作，比如 KV 与 Hash 间。\n\n如果对于多个 SKU 不支持批量操作，我们就需要按单个 SKU 发起 Redis 调用。在上文中提到过，Redis 不对命令间保证单线程执行。如果采用上述 Redis 的数据结构，一次扣减必须要发起多次对 Redis 的命令才可完成。这样，上文提到的利用 Redis 单线程来保证扣减的原子性此时则满足不了了。\n\n针对上述问题，我们可以采用 Redis 的 lua 脚本来实现批量扣减的单线程诉求。\n\nlua 是一个类似 JavaScript、Shell 等的解释性语言，它可以完成 Redis 已有命令不支持的功能。用户在编写完 lua 脚本之后，将此脚本上传至 Redis 服务端，服务端会返回一个标识码代表此脚本。在实际执行具体请求时，将数据和此标识码发送至 Redis 即可。Redis 会和执行普通命令一样，采用单线程执行此 lua 脚本和对应数据。\n\n当用户调用扣减接口时，将扣减的 SKU 及对应数量 + 脚本标示传递至 Redis 即可，所有的扣减判断逻辑均在 Redis 中的 lua 脚本中执行，lua 脚本执行完成之后返还是否成功给客户端。\n\nlua 脚本执行流程\n\n当请求发送到 Redis 后，lua 脚本执行流程如下图 2 所示：\n\n\n\n图 2：lua 脚本执行流程\n\nRedis 中的 lua 脚本执行时，首先会使用 get 命令查询 uuid 是否已存在，如已存在则直接返回，并提示用户请求重复。当防重通过后，会按 SKU 批量获取对应的剩余库存状态并进行判断，如果其中一个 SKU 此次扣减的数量大于剩余数量，则直接给扣减服务返回错误并提示数量不足。通过 Redis 的单线程模型，确保当所有 SKU 的扣减数量在判断均满足后，在实际扣减时，数量不够的情况是不会出现的。同时，单线程保证判断数量的步骤和后续扣减步骤之间，没有其他任何线程出现并发的执行。\n\n判断数量满足之后，lua 脚本后续就可以按 SKU 进行循环的扣减数量并记录流水。\n\n当 Redis 扣减成功后，扣减接口会异步的将此次扣减内容保存至数据库。异步保存数据库的目的是防止出现极端情况—— Redis 宕机后数据未持久化到磁盘，此时我们可以使用数据库恢复或者校准数据。\n\n最后，在纯缓存的架构图（图 2）中还有一个运营后台，它直接连接了数据库，是运营和商家修改库存的入口。当商品补齐了新的货物时，商家在运营后台将此 SKU 库存数量加回。同时，运营后台的实现需要将此数量同步的增加至 Redis，因为当前方案的所有实际扣减都在 Redis 中。\n\n至此，采用纯缓存扣减的基本方案已经介绍结束了。因为实际的压测和很多因素相关，比如机器配置、压测的参数等，此处就不给出具体数字。但目前这个方案已经可以满足支撑单机万级的扣减了。下面我们再来看一看如何应对异常情况。\n\n异常情况分析\n\n因为 Redis 不支持 ACID 特性，导致在使用 Redis 进行扣减时相比纯数据库方案有较多异常场景需要处理，此处我挑选几个重要的给你讲解。\n\n * 第一个场景是 Redis 突然宕机的场景。\n\n如果 Redis 宕机时，请求在 Redis 中只进行了前置的防重和数量验证，此时则没有任何影响，直接返回给客户扣减失败即可。\n\n但如果此时 Redis 中的 lua 脚本执行到了扣减逻辑并做了实际的扣减，则会出现数据丢失的情况。因为 Redis 没有事务的保证，宕机时已经扣减的数量不会回滚。宕机导致扣减服务给客户返回扣减失败，但实际上 Redis 已经扣减了部分数据并刷新了磁盘，当此 Redis 故障处理完成再次启动后或者 failover 之后，部分库存数量已经丢失了。\n\n为了解决此问题，可以使用数据库中的数据进行校准。常见方式是开发对账程序，通过对比 Redis 与数据库中的数据是否一致，并结合扣减服务的日志。当发现数据不一致同时日志记录扣减失败时，可以将数据库比 Redis 多的库存数据在 Redis 中进行加回。\n\n * 第二个场景是扣减 Redis 完成并成功返回给客户后，异步刷新数据库失败了的情况。\n\n此时，Redis 中的数据库是准的，但数据库中的库存数据是多的。在结合扣减服务的日志确定是 Redis 扣减成功但异步记录数据失败后，可以将数据库比 Redis 多的库存数据在数据库中进行扣减。\n\n\n升级纯缓存实现方案\n\n上述的纯缓存方案在使用了 Redis 进行扣减实现后，基本上完成了扣减的高性能和高并发，满足了我们最初的需求。那整体方案上还有哪些可以优化的空间呢？\n\n在“第 12 讲”里我们介绍过，扣减服务不仅包含扣减接口还包含数量查询接口。查询接口的量级相比写接口至少是十倍以上，即使是使用了缓存进行抗量，但读写都请求了同一个 Redis，将会导致扣减请求被读影响。\n\n其次，运营在后台进行操作增加或者修改库存时，是在修改完数据库之后在代码中异步修改刷新 Redis。因为数据库和 Redis 不支持分布式事务，为了保证在修改时它们数据的一致性，在实际开发中，需要增加很多手段保证数据一致性，成本较高。\n\n对于上述两个问题，我们可以做两方面的改造。\n\n第一个是和“第 12 讲”里 MySQL 的优化方案思路一样，增加一个 Redis 从结点，在扣减服务里根据请求类型路由到不同的 Redis 节点。使用主从分离的好处是，不用太多的数据同步开发，直接使用 Redis 主从同步方案，成本低开发量小。\n\n第二个是运营后台修改数据库数量后同步至 Redis 的逻辑使用 binlog 进行处理，关于如何接入和使用 binlog，你可以参见“第 12 讲”的内容。\n\n当商家修改了数据库中的数量之后，MySQL 等数据库的 binlog 会自动发出，在数据转换模块接受 binlog 并转换格式插入 Redis 即可。因为 binlog 消费是采用 ack 机制，如果在转换和插入 Redis 时出错，ack 不确定即可。下一次数据转换代码运行时，会继续上一次未消费的 binlog 继续执行。最终，binlog 的机制不需要太多逻辑处理即可达到最终一致性。相比采用不借助 binlog 的方式，此方案成本和复杂度均较低。\n\n优化后的整体方案如下图 3 所示：\n\n\n\n图 3：纯缓存升级版架构\n\n\n纯缓存方案适用性分析\n\n相比于纯数据库扣减方案，纯缓存方案也存在一定的优缺点和适用性。\n\n纯缓存方案的主要优点是性能提升明显。使用缓存的扣减方案在保证了扣减的原子性和一致性等功能性要求之外，相比纯数据库的扣减方案至少提升十倍以上。\n\n除了优点之外，纯缓存的方案同样存在一些缺点。Redis 及其他一些缓存实现，为了高性能，并没有实现数据库的 ACID 特性。导致在极端情况下可能会出现丢数据，进而产生少卖。另外，为了保证不出现少卖，纯缓存的方案需要做很多的对账、异常处理等的设计，系统复杂度会大幅增加。\n\n对于纯缓存的扣减的优缺点有了一定了解后，可以发现纯缓存在抗并发流量时，效果非常显著。因此，它较适合应用于高并发、大流量的互联网场景。但在极端情况下，可能会出现一些数据的丢失。因此，它优先适合对于数据精度不是特别苛刻的场景，比如用户购买限制等。\n\n但如果上述的异常场景都有降级方案应对，保证最终一致性。它也是可以应用在库存扣减、积分扣减等等场景。在我所经历的和了解的实践中，是有很多公司将此方案应用在非常精度的场景里的。\n\n\n总结\n\n在上一讲中的纯数据库方案无法完全满足量级要求时，本讲介绍了纯缓存的扣减方案。着重讲解了为什么纯缓存可以满足扣减的功能需求，对于分析的过程希望你能够理解并应用，而不是关注最终提出的方案。作为一名优秀的开发人员，你要知道架构图是一个最终态，是静止的，它并不能 100% 直接应用到你所面对的场景，而分析思路却是可以复制和模仿的。\n\n\n\n其次，本讲也分析了纯缓存方案存在的一些异常场景。在实战中，正常流程是简单的，而异常流程的思考与处理十分的复杂与烦琐，同时也最能体现技术性，请你务必注意与加强。\n\n最后，我再留给你一道思考题，如果此处的 Redis 是一个集群，而不是一个单独实例，方案应该如何演化？你可以把你的答案、思路或者课后总结写在留言区，我们一起交流。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **培：\n\n> 当数据分片后，怎么实现让每个分片都执行相同的lua脚本\n\n#     讲师回复：\n\n>     需要把lua脚本上传到每个分片里\n\n# *西：\n\n> 老师，你好！还有一个问题，就是如果用lua脚本来批量扣取库存，不事先把lua脚本上传到redis服务端不行吗？直接把脚本写在java代码里也可以吧，你看redisson这种客户端工具里面也是把lua脚本写在java代码中的，然后发送lua脚本到redis上执行。😁\n\n#     讲师回复：\n\n>     是可以的哈。不过每次执行都发送lua脚本的话，会浪费网络带宽。另外，每次都发送脚本带来的网络传输，也会消耗性能。\n\n# **福：\n\n> redis如何实现异步更新mysql数据呢？\n\n#     讲师回复：\n\n>     并不是在redis里异步更新数据库，而是在业务代码里，更新完缓存后，在异步线程里，异步更新数据库。\n\n# *西：\n\n> 老师，你好！redis集群的话，一个订单一次扣取的多个商品key如果分布在不同的redis分片上，redis也是能保证单个lua脚本执行的原子性的吗？\n\n#     讲师回复：\n\n>     这个是不行的，多个分片的操作是分布式事务，是无法保障原子的。\n\n# *睿：\n\n> redis lua来做扣减，其中有一个库存不足怎么回滚呢\n\n#     讲师回复：\n\n>     此商品之前的扣减的数量都需要记录。当失败的时候，直接加回来即可\n\n# 风：\n\n> 如果是集群的话，那么我们查询或者写入的时候感觉要路由到对应的分片上是吧\n\n#     讲师回复：\n\n>     是的，是路由到所有涉及的分片里\n\n# *西：\n\n> redis是集群部署的话，也只是讲数据做了分片存储，做了横向扩容吧，感觉没什么其它区别。😂\n\n#     讲师回复：\n\n>     集群之后，数据会分散在各个分片里，所以，lua脚本也需要部署在每个数据分片里并保证都需要执行\n\n# **2932：\n\n> 请问，扣减服务日志怎么实现？ redis流水表为啥使用hash而不是list 流水变不应该记录每次扣的情况吗？\n\n#     讲师回复：\n\n>     一个sku包含多条扣减的流水，在返还的时候，会对某一SKU的某个单条流水有独立查询的需求，返还内容见15讲。使用hash结构，可以直接支持对单个流水查询的需求，而list结构则不行\n\n# *中：\n\n> 你好，redis cluster模式下lua脚本不能成功执行\n\n#     讲师回复：\n\n>     cluster模式是因为数据分散在各个分片里，导致一个lua脚本无法直接运行。现在有很多云实现，有自动将lua脚本扩散到所有分片的功能",normalizedContent:"在上一讲的实现方案里我们讨论了采用纯数据库的扣减实现方案，如果以常规的机器或者 docker 来进行评估，此方案较难实现单机过万的 tps。之所以介绍，是想告诉你，架构是面向业务功能、成本、实现难度、时间等因素的取舍，而不是绝对地追求高性能、高并发及高可用等非功能性指标。\n\n另外，在上一讲里介绍的扣减业务的技术实现需求点、数据库表结构信息等内容，其实是和技术无关的，它们属于通用的基本信息和标准定义。因此，今天我们讲解的方案将直接复用以上信息，不再赘述，有忘记的或者直接跳读此讲的同学可以翻到上一讲进行复习。\n\n这一讲，我将由浅入深地介绍如何基于缓存来实现单机万级这一并发扣减目标。\n\n\n纯缓存方案浅析\n\n纯数据库的方案虽然避免了超卖与少卖的情况，但因采用了事务的方式保证一致性和原子性，所以在 sku 数量较多时性能下降较明显。\n\n> 注：事务本质上有四个特点 acid：原子性（atomicity）、一致性（consistency ）、隔离性（isolation）及 持久性（durability）。\n\n因为扣减有一个要求即当一个 sku 购买的数量不够时，整个批量扣减就要回滚，因此，我们需要使用类似 for 循环的方式对每一个扣减 sql 的返回值进行检查。另外一个原因是，当多个用户买一个 sku 时，它的性能也并不乐观。因为当出现高并发扣减或者并发扣减同一个 sku 时，事务的隔离性会导致加锁等待以及死锁情况出现。\n\n现在看来，实现单机万级的并发扣减好像遥遥无期了。别急，还记得在上一讲里强调的，架构是在对问题清晰定义之后演化来的理念吗？\n\n下面我们对问题再次梳理一遍，进而寻找可升级演化的方案。\n\n首先，你要知道扣减只需要保证原子性即可，并不需要数据库提供的 acid。在扣减库存时，重点是保证商品不超卖不少卖。而持久化这个功能，只有在数据库故障切换及恢复时才有需要，因为被中断的事务需要持久化的日志进行重演，也就是说持久化是主功能之外的后置功能、附加功能。\n\n那么我们是否可以去掉持久化这一后置的、附加的功能？或者是否存在可替代方案？你先不着急回答这个问题，跟着我的思路咱们继续分析，自会寻得答案。\n\n其次，在提升性能方面最简单、最快速的方案便是升级硬件。不管你使用的是哪一个厂商的数据库实现，提升或者替换部署数据库机器的硬件配置，都可以显著提升性能。虽然提升硬件可以解决问题，但与此同时也有另外一个问题——硬件的资金成本非常昂贵，动辄上百万、千万。\n\n经过上面的分析，再请你思考第二个问题：为什么当年阿里浩浩荡荡的发起了去 ioe 运动，转而采用性能相对较弱的 mysql 及相对应的硬件呢？\n\n究其原因也是资金成本的考虑。此时，我们可以转换一个思路，既然提升或者替换机器配置可以提升性能，按此套路，是不是提升或者替换数据库存储也是一种方案？在不改变机器配置的情况下，把传统的 sql 类数据库替换为性能更好的 nosql 类数据存储试试？\n\n是不是有一个性能又好同时又能够满足扣减多个 sku 具有原子性的 nosql 数据库呢？行文至此，答案显然是可以的。\n\nredis 作为最近几年非常流行的 nosql 数据库，它的原始版本或者改造版本基本上已经被国内所有互联网公司或者云厂商所采用。不管是微博爆点事件的流量应对，还是电商的大促流量处理，它的踪影无处不在，可见它在高性能上的能力是首屈一指。另外，因为 redis 是开源软件且架构简单，部署在普通的 docker 即可，成本非常低。\n\n此外，redis 采用了单线程的事件模型，保障了我们对于原子性的要求。对于单线程的事件模型，简单的比喻就是说当我们多个客户端给 redis 同时发送命令后，redis 会按接收到的顺序进行串行的执行，对于已经接收而未能执行的命令，只能排队等待。基于此特性，当我们的扣减请求在 redis 执行时，也即是原子性的。此特性刚好符合我们对于扣减原子性的要求。\n\n\n方案实现剖析\n\n在确定了使用缓存来完成扣减和高性能后，为了帮助你理解，这里我们结合扣减服务的整体架构图来进一步分析：\n\n\n\n图 1：纯缓存架构\n\n上图中的扣减服务和上一讲里的扣减服务一样，都提供了三个在线接口。但此时扣减服务依赖的是 redis 缓存而不是数据库了。我们顺着上一讲的思路，继续以库存为场景讲解扣减服务的实现。\n\n缓存中存储的信息和上一讲中的数据库表结构基本类似，包含当前商品和剩余的库存数量和当次的扣减流水，这里要注意两点。\n\n * 首先，因为扣减全部依赖于缓存不依赖数据库，所有存储于 redis 的数据均不设置过期并全量存储。\n\n * 其次，redis 是以 k-v 结构为主，伴随 hash、set 等结构，与 mysql 以表 + 行为主的结构有一定的差异。redis 中的库存数量结构大致如下：\n\nkey为：sku_stock_{sku}。前缀sku_stock是固定不变，所有以此为前缀的均表示是库存。{sku}是占位符，在实际存储时被具体的skuid替代。\nvalue:库存数量。当前此key表示的sku剩余可购买的数量。\n\n\n在实际应用中，上述 key 的 sku_stock_ 前缀一般会简写成 ss_ 或者可以起到和其他 key 区分的较短形式。当我们存储的 sku 有百万、千万级别时，此方式可极大地降低存储空间，从而降低成本，毕竟内存是比较昂贵的。\n\n对于 redis 中存储的流水表采用 hash 结构，即 key + hashfield + hashvalue 的形式。结构大致如下：\n\nkey：sx_{sku}。前缀sx_是按上述缩短的形式设计的，只起到了区分的作用。{sku}为占位符\nhashfield：此次扣减流水编号。\nhashvalue: 此次扣减的数量\n\n\n在一次扣减时，会按 sku 在 redis 中先扣减完库存数量再记录流水信息。\n\n我们在上一讲里已经介绍过，扣减接口支持一次扣减多个 sku + 数量。查询 redis 的命令文档时你会发现：\n\n * 首先，redis 对于 hash 结构不支持多个 key 的批量操作；\n\n * 其次，redis 对于不同数据结构间不支持批量操作，比如 kv 与 hash 间。\n\n如果对于多个 sku 不支持批量操作，我们就需要按单个 sku 发起 redis 调用。在上文中提到过，redis 不对命令间保证单线程执行。如果采用上述 redis 的数据结构，一次扣减必须要发起多次对 redis 的命令才可完成。这样，上文提到的利用 redis 单线程来保证扣减的原子性此时则满足不了了。\n\n针对上述问题，我们可以采用 redis 的 lua 脚本来实现批量扣减的单线程诉求。\n\nlua 是一个类似 javascript、shell 等的解释性语言，它可以完成 redis 已有命令不支持的功能。用户在编写完 lua 脚本之后，将此脚本上传至 redis 服务端，服务端会返回一个标识码代表此脚本。在实际执行具体请求时，将数据和此标识码发送至 redis 即可。redis 会和执行普通命令一样，采用单线程执行此 lua 脚本和对应数据。\n\n当用户调用扣减接口时，将扣减的 sku 及对应数量 + 脚本标示传递至 redis 即可，所有的扣减判断逻辑均在 redis 中的 lua 脚本中执行，lua 脚本执行完成之后返还是否成功给客户端。\n\nlua 脚本执行流程\n\n当请求发送到 redis 后，lua 脚本执行流程如下图 2 所示：\n\n\n\n图 2：lua 脚本执行流程\n\nredis 中的 lua 脚本执行时，首先会使用 get 命令查询 uuid 是否已存在，如已存在则直接返回，并提示用户请求重复。当防重通过后，会按 sku 批量获取对应的剩余库存状态并进行判断，如果其中一个 sku 此次扣减的数量大于剩余数量，则直接给扣减服务返回错误并提示数量不足。通过 redis 的单线程模型，确保当所有 sku 的扣减数量在判断均满足后，在实际扣减时，数量不够的情况是不会出现的。同时，单线程保证判断数量的步骤和后续扣减步骤之间，没有其他任何线程出现并发的执行。\n\n判断数量满足之后，lua 脚本后续就可以按 sku 进行循环的扣减数量并记录流水。\n\n当 redis 扣减成功后，扣减接口会异步的将此次扣减内容保存至数据库。异步保存数据库的目的是防止出现极端情况—— redis 宕机后数据未持久化到磁盘，此时我们可以使用数据库恢复或者校准数据。\n\n最后，在纯缓存的架构图（图 2）中还有一个运营后台，它直接连接了数据库，是运营和商家修改库存的入口。当商品补齐了新的货物时，商家在运营后台将此 sku 库存数量加回。同时，运营后台的实现需要将此数量同步的增加至 redis，因为当前方案的所有实际扣减都在 redis 中。\n\n至此，采用纯缓存扣减的基本方案已经介绍结束了。因为实际的压测和很多因素相关，比如机器配置、压测的参数等，此处就不给出具体数字。但目前这个方案已经可以满足支撑单机万级的扣减了。下面我们再来看一看如何应对异常情况。\n\n异常情况分析\n\n因为 redis 不支持 acid 特性，导致在使用 redis 进行扣减时相比纯数据库方案有较多异常场景需要处理，此处我挑选几个重要的给你讲解。\n\n * 第一个场景是 redis 突然宕机的场景。\n\n如果 redis 宕机时，请求在 redis 中只进行了前置的防重和数量验证，此时则没有任何影响，直接返回给客户扣减失败即可。\n\n但如果此时 redis 中的 lua 脚本执行到了扣减逻辑并做了实际的扣减，则会出现数据丢失的情况。因为 redis 没有事务的保证，宕机时已经扣减的数量不会回滚。宕机导致扣减服务给客户返回扣减失败，但实际上 redis 已经扣减了部分数据并刷新了磁盘，当此 redis 故障处理完成再次启动后或者 failover 之后，部分库存数量已经丢失了。\n\n为了解决此问题，可以使用数据库中的数据进行校准。常见方式是开发对账程序，通过对比 redis 与数据库中的数据是否一致，并结合扣减服务的日志。当发现数据不一致同时日志记录扣减失败时，可以将数据库比 redis 多的库存数据在 redis 中进行加回。\n\n * 第二个场景是扣减 redis 完成并成功返回给客户后，异步刷新数据库失败了的情况。\n\n此时，redis 中的数据库是准的，但数据库中的库存数据是多的。在结合扣减服务的日志确定是 redis 扣减成功但异步记录数据失败后，可以将数据库比 redis 多的库存数据在数据库中进行扣减。\n\n\n升级纯缓存实现方案\n\n上述的纯缓存方案在使用了 redis 进行扣减实现后，基本上完成了扣减的高性能和高并发，满足了我们最初的需求。那整体方案上还有哪些可以优化的空间呢？\n\n在“第 12 讲”里我们介绍过，扣减服务不仅包含扣减接口还包含数量查询接口。查询接口的量级相比写接口至少是十倍以上，即使是使用了缓存进行抗量，但读写都请求了同一个 redis，将会导致扣减请求被读影响。\n\n其次，运营在后台进行操作增加或者修改库存时，是在修改完数据库之后在代码中异步修改刷新 redis。因为数据库和 redis 不支持分布式事务，为了保证在修改时它们数据的一致性，在实际开发中，需要增加很多手段保证数据一致性，成本较高。\n\n对于上述两个问题，我们可以做两方面的改造。\n\n第一个是和“第 12 讲”里 mysql 的优化方案思路一样，增加一个 redis 从结点，在扣减服务里根据请求类型路由到不同的 redis 节点。使用主从分离的好处是，不用太多的数据同步开发，直接使用 redis 主从同步方案，成本低开发量小。\n\n第二个是运营后台修改数据库数量后同步至 redis 的逻辑使用 binlog 进行处理，关于如何接入和使用 binlog，你可以参见“第 12 讲”的内容。\n\n当商家修改了数据库中的数量之后，mysql 等数据库的 binlog 会自动发出，在数据转换模块接受 binlog 并转换格式插入 redis 即可。因为 binlog 消费是采用 ack 机制，如果在转换和插入 redis 时出错，ack 不确定即可。下一次数据转换代码运行时，会继续上一次未消费的 binlog 继续执行。最终，binlog 的机制不需要太多逻辑处理即可达到最终一致性。相比采用不借助 binlog 的方式，此方案成本和复杂度均较低。\n\n优化后的整体方案如下图 3 所示：\n\n\n\n图 3：纯缓存升级版架构\n\n\n纯缓存方案适用性分析\n\n相比于纯数据库扣减方案，纯缓存方案也存在一定的优缺点和适用性。\n\n纯缓存方案的主要优点是性能提升明显。使用缓存的扣减方案在保证了扣减的原子性和一致性等功能性要求之外，相比纯数据库的扣减方案至少提升十倍以上。\n\n除了优点之外，纯缓存的方案同样存在一些缺点。redis 及其他一些缓存实现，为了高性能，并没有实现数据库的 acid 特性。导致在极端情况下可能会出现丢数据，进而产生少卖。另外，为了保证不出现少卖，纯缓存的方案需要做很多的对账、异常处理等的设计，系统复杂度会大幅增加。\n\n对于纯缓存的扣减的优缺点有了一定了解后，可以发现纯缓存在抗并发流量时，效果非常显著。因此，它较适合应用于高并发、大流量的互联网场景。但在极端情况下，可能会出现一些数据的丢失。因此，它优先适合对于数据精度不是特别苛刻的场景，比如用户购买限制等。\n\n但如果上述的异常场景都有降级方案应对，保证最终一致性。它也是可以应用在库存扣减、积分扣减等等场景。在我所经历的和了解的实践中，是有很多公司将此方案应用在非常精度的场景里的。\n\n\n总结\n\n在上一讲中的纯数据库方案无法完全满足量级要求时，本讲介绍了纯缓存的扣减方案。着重讲解了为什么纯缓存可以满足扣减的功能需求，对于分析的过程希望你能够理解并应用，而不是关注最终提出的方案。作为一名优秀的开发人员，你要知道架构图是一个最终态，是静止的，它并不能 100% 直接应用到你所面对的场景，而分析思路却是可以复制和模仿的。\n\n\n\n其次，本讲也分析了纯缓存方案存在的一些异常场景。在实战中，正常流程是简单的，而异常流程的思考与处理十分的复杂与烦琐，同时也最能体现技术性，请你务必注意与加强。\n\n最后，我再留给你一道思考题，如果此处的 redis 是一个集群，而不是一个单独实例，方案应该如何演化？你可以把你的答案、思路或者课后总结写在留言区，我们一起交流。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **培：\n\n> 当数据分片后，怎么实现让每个分片都执行相同的lua脚本\n\n#     讲师回复：\n\n>     需要把lua脚本上传到每个分片里\n\n# *西：\n\n> 老师，你好！还有一个问题，就是如果用lua脚本来批量扣取库存，不事先把lua脚本上传到redis服务端不行吗？直接把脚本写在java代码里也可以吧，你看redisson这种客户端工具里面也是把lua脚本写在java代码中的，然后发送lua脚本到redis上执行。😁\n\n#     讲师回复：\n\n>     是可以的哈。不过每次执行都发送lua脚本的话，会浪费网络带宽。另外，每次都发送脚本带来的网络传输，也会消耗性能。\n\n# **福：\n\n> redis如何实现异步更新mysql数据呢？\n\n#     讲师回复：\n\n>     并不是在redis里异步更新数据库，而是在业务代码里，更新完缓存后，在异步线程里，异步更新数据库。\n\n# *西：\n\n> 老师，你好！redis集群的话，一个订单一次扣取的多个商品key如果分布在不同的redis分片上，redis也是能保证单个lua脚本执行的原子性的吗？\n\n#     讲师回复：\n\n>     这个是不行的，多个分片的操作是分布式事务，是无法保障原子的。\n\n# *睿：\n\n> redis lua来做扣减，其中有一个库存不足怎么回滚呢\n\n#     讲师回复：\n\n>     此商品之前的扣减的数量都需要记录。当失败的时候，直接加回来即可\n\n# 风：\n\n> 如果是集群的话，那么我们查询或者写入的时候感觉要路由到对应的分片上是吧\n\n#     讲师回复：\n\n>     是的，是路由到所有涉及的分片里\n\n# *西：\n\n> redis是集群部署的话，也只是讲数据做了分片存储，做了横向扩容吧，感觉没什么其它区别。😂\n\n#     讲师回复：\n\n>     集群之后，数据会分散在各个分片里，所以，lua脚本也需要部署在每个数据分片里并保证都需要执行\n\n# **2932：\n\n> 请问，扣减服务日志怎么实现？ redis流水表为啥使用hash而不是list 流水变不应该记录每次扣的情况吗？\n\n#     讲师回复：\n\n>     一个sku包含多条扣减的流水，在返还的时候，会对某一sku的某个单条流水有独立查询的需求，返还内容见15讲。使用hash结构，可以直接支持对单个流水查询的需求，而list结构则不行\n\n# *中：\n\n> 你好，redis cluster模式下lua脚本不能成功执行\n\n#     讲师回复：\n\n>     cluster模式是因为数据分散在各个分片里，导致一个lua脚本无法直接运行。现在有很多云实现，有自动将lua脚本扩散到所有分片的功能",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何利用缓存+数据库构建高可靠的扣减方案？",frontmatter:{title:"如何利用缓存+数据库构建高可靠的扣减方案？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/674357/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/15.%20%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E7%BC%93%E5%AD%98+%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%84%E5%BB%BA%E9%AB%98%E5%8F%AF%E9%9D%A0%E7%9A%84%E6%89%A3%E5%87%8F%E6%96%B9%E6%A1%88%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/15. 如何利用缓存+数据库构建高可靠的扣减方案？.md",key:"v-afa14018",path:"/pages/674357/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4254}],headersStr:"精选评论",content:"在上两讲里分别介绍了使用数据库和纯缓存实现的扣减方案。在需求层面上，上述两者都能实现业务需求。但均存在一些缺陷：\n\n * 数据库方案的性能较差；\n\n * 纯缓存方案虽不会导致超卖，但因缓存不具备事务特性，极端情况下会存在缓存里的数据无法回滚，导致出现少卖的情况。且因“第 13 讲”是异步写库，也可能发生异步写库失败，导致多扣的数据再也无法找回的情况。\n\n因此，本讲将向你介绍一种新的实现方案——使用数据库+缓存的方式规避上述存在的潜在问题。\n\n\n顺序写的性能更好\n\n本讲的方案是借助了“顺序写要比随机更新性能好”这个特性进行设计的。\n\n在向磁盘进行数据操作时，向文件末尾不断追加写入的性能要远大于随机修改的性能。因为对于传统的机械硬盘来说，每一次的随机更新都需要机械键盘的磁头在硬盘的盘面上进行寻址，再去更新目标数据，这种方式十分消耗性能。而向文件末尾追加写入，每一次的写入只需要磁头一次寻址，将磁头定位到文件末尾即可，后续的顺序写入不断追加即可。\n\n对于固态硬盘来说，虽然避免了磁头移动，但依然存在一定的寻址过程。此外，对文件内容的随机更新和数据库的表更新比较类似，都存在加锁带来的性能消耗。\n\n数据库同样是插入要比更新的性能好。对于数据库的更新，为了保证对同一条数据并发更新的一致性，会在更新时增加锁，但加锁是十分消耗性能的。此外，对于没有索引的更新条件，要想找到需要更新的那条数据，需要遍历整张表，时间复杂度为 O(N)。而插入只在末尾进行追加，性能非常好。\n\n\n借力顺序写的架构\n\n有了上述的理论基础后，只要对上一讲的架构稍做变更，就可以得到兼具性能和高可靠的扣减架构了，整体架构如下图 1 所示：\n\n\n\n图 1：兼具性能和更加高可靠的扣减架构\n\n上述的架构和纯缓存的架构区别在于，写入数据库不是异步写入，而是在扣减的时候同步写入。\n\n这里你可能会有些疑问：同步的写入数据库是不是和“第 12 讲”讲述的内容类似？且数据库扣减的性能对于海量并发是扛不住的，这个方案是不是在倒退？\n\n如果你仔细看架构图，会发现并非如此。同步写入数据库使用是 insert 操作，也就是顺序写，而不是 update 做数据库数量的扣减。因此，它的性能较好。\n\ninsert 的数据库称为任务库，它只存储每次扣减的原始数据，而不做真实扣减（即不进行 update）。它的表结构大致如下：\n\ncreate table task{\n  id bigint not null comment \"任务顺序编号\",\n  task_id bigint not null \n}\n\n\n任务表里存储的内容格式可以为 JSON、XML 等结构化的数据。以 JSON 为例，数据内容大致可以如下：\n\n{\n  \"扣减号\":uuid,\n  \"skuid1\":\"数量\",\n  \"skuid2\":\"数量\",\n  \"xxxx\":\"xxxx\"\n}\n\n\n在上述架构里，还有一个**正式业务库，这里面存储的才是真正的扣减明细和 SKU 的汇总数据。对于正式库里的数据，通过任务表的任务进行同步即可，此种方式保证了数据的最终一致性。\n\n\n扣减流程\n\n在引入了任务表之后，整体的扣减流程如下图 2 所示：\n\n\n\n图 2：基于任务的扣减流程\n\n上述的流程和纯缓存的区别在于增加了事务开启与回滚的步骤，以及同步的数据库写入流程，详细分析如下。\n\n 1. 首先是前置业务参数检验（包含基础参数、数量检验等），此步骤在本讲和前两讲的方案里都有。可以说，任何对外接口此功能都是不可或缺的，是完成业务验证性的必要一环。\n\n 2. 然后在图中编号 2 处，开始数据事务。\n\n 3. 当开始事务后，首先将此次序列化后的扣减明细写入到扣减数据库中的任务表里。\n\n 4. 假设数据库插入扣减明细失败，则事务回滚，任务表中无新增数据，数据一致，无任何影响。\n\n 5. 当数据库插入扣减明细成功后，便针对缓存进行扣减。和上一讲保持一致，使用 lua 等功能进行扣减即可。\n\n 6. 如果缓存扣减成功，也就是流程正常结束，提交数据库事务，给客户返回扣减成功。\n\n 7. 如果缓存扣减失败，有可能有两大类原因。\n    \n    1. 一类原因是此次扣减的数量不够，比如缓存里有 5 个数量，而实际此次扣减需要 10 个。当判断数量不够后，便调用缓存的归还并将数据库进行回滚即可。\n    \n    2. 第二类原因是缓存出现故障，导致扣减失败。缓存失败的可能性有很多，比如网络不通、调用缓存扣减超时、在扣减到一半时缓存突然宕机（故障 failover）了，以及在上述返回的过程中产生异常等。针对上述请求，都有相应的异常抛出，根据异常进行数据库回滚即可，最终任务库里的数据都是准的。\n\n完成上述步骤之后，便可以进行任务库里的数据处理了。任务库里存储的是纯文本的 JSON 数据，无法被直接使用。需要将其中的数据转储至实际的业务库里。业务库里会存储两类数据，一类是每次扣减的流水数据，它与任务表里的数据区别在于它是结构化，而不是 JSON 文本的大字段内容。另外一类是汇总数据，即每一个 SKU 当前总共有多少量，当前还剩余多少量（即从任务库同步时需要进行扣减的），表结构大致如下：\n\ncreate table 流水表{\n  id bigint not null,\n  uuid bigint not null comment '扣减编号',\n  sku_id bigint not null comment '商品编号',\n  num int not null comment '当次扣减的数量' \n}comment '扣减流水表'\n\n\n商品的实时数据汇总表，结构如下：\n\ncreate table 汇总表{\n  id bitint not null,\n  sku_id unsigned bigint not null comment '商品编号',\n  total_num unsigned int not null comment '总数量',\n  leaved_num unsigned int not null comment '当前剩余的商品数量'\n}comment '记录表'\n\n\n原理分析\n\n本讲介绍的数据库+缓存的架构主要利用了数据库顺序写入要比更新性能快的这一特性。此外，在写入的基础之上，又利用了数据库的事务特性来保证数据的最终一致性。当异常出现后，通过事务进行回滚，来保证数据库里的数据不会丢失。\n\n在整体的流程上，还是复用了上一讲纯缓存的架构流程。当新加入一个商品，或者对已有商品进行补货时，对应的新增商品数量都会通过 Binlog 同步至缓存里。在扣减时，依然以缓存中的数量为准。补货或新增商品的数据同步架构如下图 3 所示：\n\n\n\n图 3：补货或新增商品的数据同步架构图\n\n这里你可能会产生疑问：通过任务库同步至正式业务库里那份数据岂不是没用了？当然不是。正式业务库异构的那份扣减明细和 SKU 当前实时剩余数量的数据，是最为准确的一份数据，我们以它作为数据对比的基准。如果发现缓存中的数据不一致，就可以及时进行修复。对于数据校准，你可以参考“第 05 讲”里介绍的方案。\n\n比如，当缓存扣减完成后，我们的应用客户端重启了，此时外部调用方的连接会断开，外部调用方判断此次调用失败。但因突然重启，当次完成的扣减在缓存里是没有完成返还的。但数据库采用的是事务，客户端重启时，事务就自动回滚了。此时，数据库的数据是正确的，但缓存的数据是少的。\n\n在纯缓存的方案里，如果当时的异步刷库也失败了，则缓存数据一直都是少卖的。而数据库+缓存的方案，只会在一定时间出现少卖的情况，最终的数据一定是一致的。此方案会保证任务数据库和正式业务数据库里的数据准确性，出现故障后基于正式数据库进行异步对比修复即可。这便是两种方案的差异所在。\n\n性能提升\n\n进行方案升级后，我们便完成了一个更加可靠的扣减架构，且使用任务数据库的顺序插入也保证了一定的性能。但总的来说，即使是基于数据库的顺序插入，缓存操作的性能和数据库的顺序插入也不是一个量级，那么如何提升顺序插入任务数据库的性能和吞吐量呢？\n\n这里我们回顾一下在“第 9 讲”（无状态存储）里介绍的内容和理念——通过无状态的存储提升可用性。同样的逻辑，任务库主要提供两个作用，一个是事务支持，其次是随机的扣减流水任务的存取。这两个功能均不依赖具体的路由规则，也是随机的、无状态的。因此，可以借鉴“第 9 讲”的架构对本讲的内容进行升级，升级后的架构如下图 4 所示：\n\n\n\n图 4：无状态存储的架构图\n\n采用无状态存储后，任务库便可以进行水平扩展了，在性能和高可用上得到进一步的加强。具体的细节原理和落地步骤，你可以参考“第 9 讲”，这里不再赘述。\n\n数据同步\n\n任务库和业务正式库之间的数据同步和“第 9 讲”里介绍的无状态的存储基本类似，但整体实现上会更加简单。因为在业务上，扣减前置依赖的均是缓存里的数据，业务正式库里的数据只用来做兜底使用。因此最终只要使用 Worker 将数据从任务库同步至业务正式库即可，架构如下图 5 所示：\n\n\n\n图 5：Worker 架构图\n\n\n总结\n\n在本讲里，我们介绍了通过缓存和数据库结合的方式，实现了一个更加可靠的扣减方案。相比纯缓存方案，即使使用了无状态的分库存储，它的性能也会有一定的损耗。但此方案的好处在于数据更精准、更可靠。对于类似额度扣减、实物库存扣减等场景，此方案均适用。而对于一些虚拟的次数限制，同时业务上能够容忍在一定概率下数据不准确的场景，也可以选择纯缓存的扣减方案。\n\n此外，“顺序追加写要比随机修改的性能好”这个技巧，其实在很多场景里都有应用，是一个值得你深入学习和理解的技能。比如数据库的 Redo log、Undo log；Elasticsearch 里的 Translog 都是先将数据按非结构化的方式顺序写入日志文件里，再进行正常的变更。当出现宕机后，采用日志进行数据恢复。\n\n经过“12、13、14”这三讲的学习，我想你对“扣减”相关的内容已经掌握得如鱼得水了，欢迎你动一动手指，在留言区写一写思考、做一做总结。如果你对哪里有疑问，也可以在留言区提问，咱们一起讨论。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **杰：\n\n> 先开启数据库事务了，在事务里面又操作Redis，这不是违反了在事务里操作网络、RPC等原则吗？\n\n#     讲师回复：\n\n>     是的，掌握的很到位。这个算是为了满足特定业务场景，一种降级的方案。但并不提倡，如果需要这样用，一定要做好异常的分析。\n\n# *西：\n\n> 老师，你好。这个方案里面，如果不追加写任务表，而是把上一讲中的异步线程更新数据库换成写mq是不是也可以？用rocketmq的事务消息机制来保证消息一定发送成功，然后消费方消费mq消息去异步更新数据库的库存不就好了？\n\n#     讲师回复：\n\n>     用事务消息机制，和用数据库的事务是异曲同工的。都是可以的。\n\n# **烽：\n\n> 老师，基于从事的场景架构比较简单，看了文章发现还有个疑问：（数据库+缓存的方案，只会在一定时间出现少卖的情况，最终的数据一定是一致的）， 这个缓存和数据库数据一致性的保障 是源于 有 数据对比程序 的存在，会 更新缓存中的 数量 的原因吗？\n\n#     讲师回复：\n\n>     对的\n\n# **烽：\n\n> 老师，有个问题请教下。我看了文章多遍，总有个疑问。 针对 任务库 和 正式库的关系问题， 正式库中的 汇总表 是 应该 先初始化 商品的 总量信息吧？ 然后 在 从 任务库中的 扣减信息 同步到 正式库中的 汇总表，进行 数量的更新是吗？\n\n#     讲师回复：\n\n>     是的哈\n\n# **2868：\n\n> Binlog同步有个问题，就是收到这个消息后，反查不一定能查到。两个可能原因，一是反查的时候查的从库，但是数据还没有同步过去，二是查的主库，但是commit的时间太长（机器io问题等），导致查的时候还没提交完，一般重试可解决\n\n# **1442：\n\n> 图3感觉有问题，先在redis里面扣减了库存，binlog又扣减一次（除非加个字段把运营的和程序扣减的区分开）\n\n#     讲师回复：\n\n>     图没有错哈，就是需要加个字段把运营的和程序扣减的区分开\n\n# *中：\n\n> 在扣减过程，1和2在同一个事物，若1，2均成功在提交事物宕机过异常，缓存中的数据不能恢复\n\n# **龙：\n\n> 库存没有锁定状态吗\n\n#     讲师回复：\n\n>     没有锁定状态，增加这个状态复杂度会很大，同时这个状态并不是必须的\n\n# 风：\n\n> 图5中的第一步insert和第二步缓存请求是同时进行的吗，刚开始客户端请求的时候要先在缓存中判断下sku的数量吧，如果缓存中的sku数量大于购买的数量才insert到任务库中，对吧\n\n#     讲师回复：\n\n>     是的，这个12、13讲里都有，前置拦截是通用都需要的。\n\n# 风：\n\n> 那前置的redis是用来客户端查询和扣减返回的，正式库只是用来兜底的吗，这样做的比上一节课redis用来扣减的好处就是防止redis异常导致数据问题，任务库中的数据肯定是准确的，那最终任务库中同步到正式库中的数据也一定是准确的，只不过任务库和正式库的数据有一定的时间差\n\n#     讲师回复：\n\n>     是的。此方案的好处是一定会存在一份准确的数据，只是会有延迟\n\n# ghh：\n\n> 没太明白，这里为啥不是先扣减缓存在顺序写入数据库？不然如果存在库存不足也会一直开启事务后写数据库然后回滚\n\n#     讲师回复：\n\n>     是的，前置查询一次缓存是通用的、默认需要的，在12、13讲里都有涉及。这里没有再提及了\n\n# **泉：\n\n> 老师好，有几个地方不太明确，请教下，1.扣减号uuid一般是指用户ID吗，还是按其他规则生成的？2.任务列表在电商场景中可以理解为订单列表吗？若是的话，用户提交订单完成的查看读取，是否也是采用无状态写入架构需要把订单信息同步到缓存中读取，感谢老师\n\n#     讲师回复：\n\n>     1. 扣减号每一次请求生成的唯一编号。在库存扣减的例子里，它可以是订单号\n\n 2. 任务列表的任务，是一次扣减里的商品详细信息（比如：订单号、商品编号、对应的数量）\n 3. 可以基于无状态架构来实现数据同步\n\n# *西：\n\n> 这个架构的实现思路就好比mysql更新的时候，更新的数据是在内存中的，但是会磁盘顺序追加写redo log的思想一样。实在是高😀\n\n# **2932：\n\n> 汇总表怎么算的呢？\n\n#     讲师回复：\n\n>     在任务库里的任务同步到正式库时，会根据任务库里的数据（用户购买的商品和数量），实时的去更新（扣减）正式库里的汇总数据",normalizedContent:"在上两讲里分别介绍了使用数据库和纯缓存实现的扣减方案。在需求层面上，上述两者都能实现业务需求。但均存在一些缺陷：\n\n * 数据库方案的性能较差；\n\n * 纯缓存方案虽不会导致超卖，但因缓存不具备事务特性，极端情况下会存在缓存里的数据无法回滚，导致出现少卖的情况。且因“第 13 讲”是异步写库，也可能发生异步写库失败，导致多扣的数据再也无法找回的情况。\n\n因此，本讲将向你介绍一种新的实现方案——使用数据库+缓存的方式规避上述存在的潜在问题。\n\n\n顺序写的性能更好\n\n本讲的方案是借助了“顺序写要比随机更新性能好”这个特性进行设计的。\n\n在向磁盘进行数据操作时，向文件末尾不断追加写入的性能要远大于随机修改的性能。因为对于传统的机械硬盘来说，每一次的随机更新都需要机械键盘的磁头在硬盘的盘面上进行寻址，再去更新目标数据，这种方式十分消耗性能。而向文件末尾追加写入，每一次的写入只需要磁头一次寻址，将磁头定位到文件末尾即可，后续的顺序写入不断追加即可。\n\n对于固态硬盘来说，虽然避免了磁头移动，但依然存在一定的寻址过程。此外，对文件内容的随机更新和数据库的表更新比较类似，都存在加锁带来的性能消耗。\n\n数据库同样是插入要比更新的性能好。对于数据库的更新，为了保证对同一条数据并发更新的一致性，会在更新时增加锁，但加锁是十分消耗性能的。此外，对于没有索引的更新条件，要想找到需要更新的那条数据，需要遍历整张表，时间复杂度为 o(n)。而插入只在末尾进行追加，性能非常好。\n\n\n借力顺序写的架构\n\n有了上述的理论基础后，只要对上一讲的架构稍做变更，就可以得到兼具性能和高可靠的扣减架构了，整体架构如下图 1 所示：\n\n\n\n图 1：兼具性能和更加高可靠的扣减架构\n\n上述的架构和纯缓存的架构区别在于，写入数据库不是异步写入，而是在扣减的时候同步写入。\n\n这里你可能会有些疑问：同步的写入数据库是不是和“第 12 讲”讲述的内容类似？且数据库扣减的性能对于海量并发是扛不住的，这个方案是不是在倒退？\n\n如果你仔细看架构图，会发现并非如此。同步写入数据库使用是 insert 操作，也就是顺序写，而不是 update 做数据库数量的扣减。因此，它的性能较好。\n\ninsert 的数据库称为任务库，它只存储每次扣减的原始数据，而不做真实扣减（即不进行 update）。它的表结构大致如下：\n\ncreate table task{\n  id bigint not null comment \"任务顺序编号\",\n  task_id bigint not null \n}\n\n\n任务表里存储的内容格式可以为 json、xml 等结构化的数据。以 json 为例，数据内容大致可以如下：\n\n{\n  \"扣减号\":uuid,\n  \"skuid1\":\"数量\",\n  \"skuid2\":\"数量\",\n  \"xxxx\":\"xxxx\"\n}\n\n\n在上述架构里，还有一个**正式业务库，这里面存储的才是真正的扣减明细和 sku 的汇总数据。对于正式库里的数据，通过任务表的任务进行同步即可，此种方式保证了数据的最终一致性。\n\n\n扣减流程\n\n在引入了任务表之后，整体的扣减流程如下图 2 所示：\n\n\n\n图 2：基于任务的扣减流程\n\n上述的流程和纯缓存的区别在于增加了事务开启与回滚的步骤，以及同步的数据库写入流程，详细分析如下。\n\n 1. 首先是前置业务参数检验（包含基础参数、数量检验等），此步骤在本讲和前两讲的方案里都有。可以说，任何对外接口此功能都是不可或缺的，是完成业务验证性的必要一环。\n\n 2. 然后在图中编号 2 处，开始数据事务。\n\n 3. 当开始事务后，首先将此次序列化后的扣减明细写入到扣减数据库中的任务表里。\n\n 4. 假设数据库插入扣减明细失败，则事务回滚，任务表中无新增数据，数据一致，无任何影响。\n\n 5. 当数据库插入扣减明细成功后，便针对缓存进行扣减。和上一讲保持一致，使用 lua 等功能进行扣减即可。\n\n 6. 如果缓存扣减成功，也就是流程正常结束，提交数据库事务，给客户返回扣减成功。\n\n 7. 如果缓存扣减失败，有可能有两大类原因。\n    \n    1. 一类原因是此次扣减的数量不够，比如缓存里有 5 个数量，而实际此次扣减需要 10 个。当判断数量不够后，便调用缓存的归还并将数据库进行回滚即可。\n    \n    2. 第二类原因是缓存出现故障，导致扣减失败。缓存失败的可能性有很多，比如网络不通、调用缓存扣减超时、在扣减到一半时缓存突然宕机（故障 failover）了，以及在上述返回的过程中产生异常等。针对上述请求，都有相应的异常抛出，根据异常进行数据库回滚即可，最终任务库里的数据都是准的。\n\n完成上述步骤之后，便可以进行任务库里的数据处理了。任务库里存储的是纯文本的 json 数据，无法被直接使用。需要将其中的数据转储至实际的业务库里。业务库里会存储两类数据，一类是每次扣减的流水数据，它与任务表里的数据区别在于它是结构化，而不是 json 文本的大字段内容。另外一类是汇总数据，即每一个 sku 当前总共有多少量，当前还剩余多少量（即从任务库同步时需要进行扣减的），表结构大致如下：\n\ncreate table 流水表{\n  id bigint not null,\n  uuid bigint not null comment '扣减编号',\n  sku_id bigint not null comment '商品编号',\n  num int not null comment '当次扣减的数量' \n}comment '扣减流水表'\n\n\n商品的实时数据汇总表，结构如下：\n\ncreate table 汇总表{\n  id bitint not null,\n  sku_id unsigned bigint not null comment '商品编号',\n  total_num unsigned int not null comment '总数量',\n  leaved_num unsigned int not null comment '当前剩余的商品数量'\n}comment '记录表'\n\n\n原理分析\n\n本讲介绍的数据库+缓存的架构主要利用了数据库顺序写入要比更新性能快的这一特性。此外，在写入的基础之上，又利用了数据库的事务特性来保证数据的最终一致性。当异常出现后，通过事务进行回滚，来保证数据库里的数据不会丢失。\n\n在整体的流程上，还是复用了上一讲纯缓存的架构流程。当新加入一个商品，或者对已有商品进行补货时，对应的新增商品数量都会通过 binlog 同步至缓存里。在扣减时，依然以缓存中的数量为准。补货或新增商品的数据同步架构如下图 3 所示：\n\n\n\n图 3：补货或新增商品的数据同步架构图\n\n这里你可能会产生疑问：通过任务库同步至正式业务库里那份数据岂不是没用了？当然不是。正式业务库异构的那份扣减明细和 sku 当前实时剩余数量的数据，是最为准确的一份数据，我们以它作为数据对比的基准。如果发现缓存中的数据不一致，就可以及时进行修复。对于数据校准，你可以参考“第 05 讲”里介绍的方案。\n\n比如，当缓存扣减完成后，我们的应用客户端重启了，此时外部调用方的连接会断开，外部调用方判断此次调用失败。但因突然重启，当次完成的扣减在缓存里是没有完成返还的。但数据库采用的是事务，客户端重启时，事务就自动回滚了。此时，数据库的数据是正确的，但缓存的数据是少的。\n\n在纯缓存的方案里，如果当时的异步刷库也失败了，则缓存数据一直都是少卖的。而数据库+缓存的方案，只会在一定时间出现少卖的情况，最终的数据一定是一致的。此方案会保证任务数据库和正式业务数据库里的数据准确性，出现故障后基于正式数据库进行异步对比修复即可。这便是两种方案的差异所在。\n\n性能提升\n\n进行方案升级后，我们便完成了一个更加可靠的扣减架构，且使用任务数据库的顺序插入也保证了一定的性能。但总的来说，即使是基于数据库的顺序插入，缓存操作的性能和数据库的顺序插入也不是一个量级，那么如何提升顺序插入任务数据库的性能和吞吐量呢？\n\n这里我们回顾一下在“第 9 讲”（无状态存储）里介绍的内容和理念——通过无状态的存储提升可用性。同样的逻辑，任务库主要提供两个作用，一个是事务支持，其次是随机的扣减流水任务的存取。这两个功能均不依赖具体的路由规则，也是随机的、无状态的。因此，可以借鉴“第 9 讲”的架构对本讲的内容进行升级，升级后的架构如下图 4 所示：\n\n\n\n图 4：无状态存储的架构图\n\n采用无状态存储后，任务库便可以进行水平扩展了，在性能和高可用上得到进一步的加强。具体的细节原理和落地步骤，你可以参考“第 9 讲”，这里不再赘述。\n\n数据同步\n\n任务库和业务正式库之间的数据同步和“第 9 讲”里介绍的无状态的存储基本类似，但整体实现上会更加简单。因为在业务上，扣减前置依赖的均是缓存里的数据，业务正式库里的数据只用来做兜底使用。因此最终只要使用 worker 将数据从任务库同步至业务正式库即可，架构如下图 5 所示：\n\n\n\n图 5：worker 架构图\n\n\n总结\n\n在本讲里，我们介绍了通过缓存和数据库结合的方式，实现了一个更加可靠的扣减方案。相比纯缓存方案，即使使用了无状态的分库存储，它的性能也会有一定的损耗。但此方案的好处在于数据更精准、更可靠。对于类似额度扣减、实物库存扣减等场景，此方案均适用。而对于一些虚拟的次数限制，同时业务上能够容忍在一定概率下数据不准确的场景，也可以选择纯缓存的扣减方案。\n\n此外，“顺序追加写要比随机修改的性能好”这个技巧，其实在很多场景里都有应用，是一个值得你深入学习和理解的技能。比如数据库的 redo log、undo log；elasticsearch 里的 translog 都是先将数据按非结构化的方式顺序写入日志文件里，再进行正常的变更。当出现宕机后，采用日志进行数据恢复。\n\n经过“12、13、14”这三讲的学习，我想你对“扣减”相关的内容已经掌握得如鱼得水了，欢迎你动一动手指，在留言区写一写思考、做一做总结。如果你对哪里有疑问，也可以在留言区提问，咱们一起讨论。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **杰：\n\n> 先开启数据库事务了，在事务里面又操作redis，这不是违反了在事务里操作网络、rpc等原则吗？\n\n#     讲师回复：\n\n>     是的，掌握的很到位。这个算是为了满足特定业务场景，一种降级的方案。但并不提倡，如果需要这样用，一定要做好异常的分析。\n\n# *西：\n\n> 老师，你好。这个方案里面，如果不追加写任务表，而是把上一讲中的异步线程更新数据库换成写mq是不是也可以？用rocketmq的事务消息机制来保证消息一定发送成功，然后消费方消费mq消息去异步更新数据库的库存不就好了？\n\n#     讲师回复：\n\n>     用事务消息机制，和用数据库的事务是异曲同工的。都是可以的。\n\n# **烽：\n\n> 老师，基于从事的场景架构比较简单，看了文章发现还有个疑问：（数据库+缓存的方案，只会在一定时间出现少卖的情况，最终的数据一定是一致的）， 这个缓存和数据库数据一致性的保障 是源于 有 数据对比程序 的存在，会 更新缓存中的 数量 的原因吗？\n\n#     讲师回复：\n\n>     对的\n\n# **烽：\n\n> 老师，有个问题请教下。我看了文章多遍，总有个疑问。 针对 任务库 和 正式库的关系问题， 正式库中的 汇总表 是 应该 先初始化 商品的 总量信息吧？ 然后 在 从 任务库中的 扣减信息 同步到 正式库中的 汇总表，进行 数量的更新是吗？\n\n#     讲师回复：\n\n>     是的哈\n\n# **2868：\n\n> binlog同步有个问题，就是收到这个消息后，反查不一定能查到。两个可能原因，一是反查的时候查的从库，但是数据还没有同步过去，二是查的主库，但是commit的时间太长（机器io问题等），导致查的时候还没提交完，一般重试可解决\n\n# **1442：\n\n> 图3感觉有问题，先在redis里面扣减了库存，binlog又扣减一次（除非加个字段把运营的和程序扣减的区分开）\n\n#     讲师回复：\n\n>     图没有错哈，就是需要加个字段把运营的和程序扣减的区分开\n\n# *中：\n\n> 在扣减过程，1和2在同一个事物，若1，2均成功在提交事物宕机过异常，缓存中的数据不能恢复\n\n# **龙：\n\n> 库存没有锁定状态吗\n\n#     讲师回复：\n\n>     没有锁定状态，增加这个状态复杂度会很大，同时这个状态并不是必须的\n\n# 风：\n\n> 图5中的第一步insert和第二步缓存请求是同时进行的吗，刚开始客户端请求的时候要先在缓存中判断下sku的数量吧，如果缓存中的sku数量大于购买的数量才insert到任务库中，对吧\n\n#     讲师回复：\n\n>     是的，这个12、13讲里都有，前置拦截是通用都需要的。\n\n# 风：\n\n> 那前置的redis是用来客户端查询和扣减返回的，正式库只是用来兜底的吗，这样做的比上一节课redis用来扣减的好处就是防止redis异常导致数据问题，任务库中的数据肯定是准确的，那最终任务库中同步到正式库中的数据也一定是准确的，只不过任务库和正式库的数据有一定的时间差\n\n#     讲师回复：\n\n>     是的。此方案的好处是一定会存在一份准确的数据，只是会有延迟\n\n# ghh：\n\n> 没太明白，这里为啥不是先扣减缓存在顺序写入数据库？不然如果存在库存不足也会一直开启事务后写数据库然后回滚\n\n#     讲师回复：\n\n>     是的，前置查询一次缓存是通用的、默认需要的，在12、13讲里都有涉及。这里没有再提及了\n\n# **泉：\n\n> 老师好，有几个地方不太明确，请教下，1.扣减号uuid一般是指用户id吗，还是按其他规则生成的？2.任务列表在电商场景中可以理解为订单列表吗？若是的话，用户提交订单完成的查看读取，是否也是采用无状态写入架构需要把订单信息同步到缓存中读取，感谢老师\n\n#     讲师回复：\n\n>     1. 扣减号每一次请求生成的唯一编号。在库存扣减的例子里，它可以是订单号\n\n 2. 任务列表的任务，是一次扣减里的商品详细信息（比如：订单号、商品编号、对应的数量）\n 3. 可以基于无状态架构来实现数据同步\n\n# *西：\n\n> 这个架构的实现思路就好比mysql更新的时候，更新的数据是在内存中的，但是会磁盘顺序追加写redo log的思想一样。实在是高😀\n\n# **2932：\n\n> 汇总表怎么算的呢？\n\n#     讲师回复：\n\n>     在任务库里的任务同步到正式库时，会根据任务库里的数据（用户购买的商品和数量），实时的去更新（扣减）正式库里的汇总数据",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"秒杀场景：热点扣减如何保证命中的存储分片不挂？",frontmatter:{title:"秒杀场景：热点扣减如何保证命中的存储分片不挂？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/f989bd/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/17.%20%E7%A7%92%E6%9D%80%E5%9C%BA%E6%99%AF%EF%BC%9A%E7%83%AD%E7%82%B9%E6%89%A3%E5%87%8F%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%91%BD%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E5%88%86%E7%89%87%E4%B8%8D%E6%8C%82%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/17. 秒杀场景：热点扣减如何保证命中的存储分片不挂？.md",key:"v-13cfffa8",path:"/pages/f989bd/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:5522}],headersStr:"精选评论",content:"从“第 12 讲”到“第 14 讲”，我们介绍了可以应对百万并发扣减请求，以及同时能够保障高性能的架构方案。此外，上述的架构方案还具备水平扩展能力，即当流量增加后，可以通过扩容底层存储和应用服务器来应对。\n\n但面对百万并发的极端场景，比如大量用户在同一时间内抢购同一商品，前几讲介绍的几种方案就不能有效地应对了。此外，我们在“第 06 讲”里，介绍过热点查询的应对方案，是否可以直接复制来应对热点扣减呢？答案显然是不能的。\n\n因此，在本讲里，我将先向你介绍热点扣减的业务特点，以及它与热点查询的区别，然后再循序渐进地介绍热点扣减的有效应对方案。\n\n\n热点扣减的典型业务场景\n\n热点扣减有一个被大家熟知的名称，叫作秒杀。其实，秒杀并不等同于热点扣减，只是因为商品秒杀是热点扣减里最具有代表性、也最能体现热点扣减特点的场景，所以我们常常以秒杀代指热点扣减。秒杀的特点主要有以下两点。\n\n 1. 首先，秒杀带来的热点量非常大，其他热点场景很难比拟。比如，在刚过去的 2020 年，大家在电商平台里准点抢购口罩，上百万人同时在线抢购同一商品，此时就带来了超大并发量。\n\n 2. 其次，秒杀对于扣减的准确性要求极高。秒杀在绝大部分场景里是一种营销手段，如一元抢 iPhone。商家对有限的商品设置一个亏本价，吸引用户下载或注册 App，达到拉新、提升知名度等目的。因为是亏本营销，如果出现了大面积的超卖，业务上是绝不允许的。\n\n除了秒杀之外，其余的扣减场景，如账户金额的扣减、收费文章免费试读次数的扣减等场景，均很难同时满足上述两个要求，所以它们不是热点扣减的代表性场景。\n\n在如何保障不超卖的问题上，可以直接复用“第 13 讲”和“第 14 讲”的方案。下面将讲解如何应对热点扣减的典型场景“秒杀”带来的百万热点这一挑战。\n\n\n技术挑战\n\n因为需要保障高可靠的扣减，在应对秒杀时，可以在“第 14 讲”的方案基础上进行升级改造。结合“第 06讲”介绍的关于热点查询的分析内容，在面对热点扣减时，整个架构图和对应的存储命中如下图 1 所示：\n\n\n\n图 1：基于数据库+缓存的热点扣减现状\n\n可以看到，秒杀与热点扣减所带来技术问题是一样的——所有的热点请求均命中同一个存储分片。那为什么不能直接复用“第 06 讲”介绍的“通过增加缓存副本以及使用本地缓存”的方式来应对呢？\n\n下面我们来具体分析一下这其中的原因。\n\n首先，扣减是写请求，即每一次请求都会修改当前商品对应的总数量，且当商品数量扣减为零或当前剩余商品数量小于当次要扣减的数量时，均会返还失败。而“第 06 讲”热点查询里的缓存副本或者本地缓存里的商品数量均是原始分片的数据镜像，不能被拿来进行扣减的，否则就会出现数据错乱，甚至超卖的现象。对应的架构示图如下图 2 所示：\n\n\n\n图 2：副本的镜像架构图\n\n其次，本地缓存里的数据是非持久化数据，易丢失。即使将本地缓存持久化至宿主机的磁盘，也会因磁盘故障、不满足 ACID 等原因而导致数据丢失。\n\n\n如何应对秒杀流量？\n\n既然不能采用热点查询里的方案，只能使用缓存单分片来应对秒杀的流量，但单分片能够支持的流量是有上限。当流量超过上限后如何处理呢？\n\n可以从秒杀的业务上进行分析，你会发现虽然秒杀带来的热点扣减请求非常大，但每次参与秒杀的商品数量是有限的，可能就几百个或者上千个，而热点扣减的流量可能达到上百万。通过简单地计算可以得出，秒杀到商品的概率只有 0.1%，其中 99% 的扣减请求都是“陪跑”的。\n\n这些“陪跑”的请求对于使用者来说可能只是一次简单的点击，但很可能会把正在运行的扣减服务打挂。此时，我们可以对这些瞬间量非常大的“陪跑”请求进行一些前置处理，降低“陪跑”请求的瞬间请求量，或者降低它们对于系统的冲击，此方式就叫作流量削峰。体现在流量监控上如下图 3 所示：\n\n\n\n图 3：削峰架构对比图\n\n下面咱们一起讨论下如何进行流量削峰。\n\n如何快速实现流量削峰？\n\n第一步进行的削峰是，先做恶意用户拦截。 上述描述提到过，秒杀通常是基于低价商品的营销活动，抢到商品后转售会有很大的盈利空间。因此，秒杀会吸引来大批的黄牛和黑产用户，对于这些恶意用户可以基于以下几种方式进行拦截：\n\n * 基于用户维护设置限制。比如同一个账号在 5 秒内最多可以请求扣减多少次。超过该次数，便进行拦截，直接返回失败信息给到商品页面，显示暂时无货。通过此类方式，可以拦截黑产跳过系统界面，直接调用对外暴露的 HTTP 形式的扣减接口所产生的瞬间爆点流量。\n\n * 基于来源 IP 设置限制。有些黄牛会提前预申请很多账号，因此使用上述账户限制的方式并不能完全拦截住。在账户的基础上，可以对用户的来源 IP 设置限制。比如 5 秒内，同一个 IP 最多可以请求扣减多少次。\n\n * 除了上述方式外，还有很多其他方式可以识别用户，比如现在每一个手机以及电脑都有唯一编码，如手机的 IMEI、电脑的网卡地址等。可以在限制账号、IP 之外，再增加对这些维度的限制。\n\n上述提到的拦截在实现上，可以采用比较成熟的漏桶算法、令牌桶算法。这两个算法在网络上有很多介绍，这里不再赘述。此外，现在有很多开源工具包提供了这两个算法的实现，比如 Java 里的 Guava 包就提供了开箱即用的实现。采用限流算法的架构如下图 4 所示：\n\n\n\n图 4：基于限流的架构图\n\n限流在实现上有两种方式，一种是集中式，另外一种是单机式。集中式是指设置一个总的限流阈值，并将此值存储在一个单独的限流应用中。所有的扣减应用在接收到请求后，均采用远程请求此限流应用的方式，来判断当前是否达到限流值。它的架构如下图 5 所示：\n\n\n\n图 5：集中式限流架构\n\n集中式的限流方式最大的好处是设置简单，当对整个扣减应用的集群进行极限压测后，得到了极限值。便可以基于此值，设置集群的限流阈值。但这种限流方式也带来了一些问题：\n\n * 首先，调用远程限流服务会增加一次网络消耗，这也降低了扣减服务的性能；\n\n * 其次，远程限流服务提供的限流功能并不精确，因为调用远程的扣减服务会消耗一定的时间，在这个时间区间里，可能会有大批量的热点并发涌入扣减应用，瞬间就会击垮扣减服务；\n\n * 最后，如果所有的请求都要经过限流服务，如何保障限流服务高可用以及能够高效应对热点也是一个难点。\n\n单机式限流是指将上述提到的限流阈值在管理端配置后，主动下发到每一台扣减应用中去，它的架构如下图 6 所示：\n\n\n\n图 6：单机式限流架构\n\n单机式限流是将限流器内置到扣减应用内，可以规避上述集中式限流出现的问题，但它也会带来其他问题：\n\n * 首先，每台机器的限流值需要根据机器的数量实时计算，并将计算后的限流值下发到每台应用机器里，同时更新扣减应用内的限流器；\n\n * 其次，对于扩容的机器需要初始化对应的单机限流器。\n\n在实际的应用中，推荐采用单机维度的限流器，因为它会更加精准和实时。\n\n第二步进行的削峰是，业务层面需要设置权重等级。 秒杀是一种营销活动，营销是有目的的，比如激活许久未下单用户，或者优先让会员抢到商品，增加会员的续费意愿等。\n\n在秒杀接口实现时，可以根据业务规则配置相对应的优先级过滤一些低等级的用户。比如设置高与低的优先级比例为 10：5，它表示在一个时间区间内（如 5 秒），处理 10 个高优先级（如会员用户）的扣减请求时，最多才能处理 5 个低优先级的请求。在实现上，可以使用令牌桶算法，高低优先级各配置一个令牌桶，高优先级的令牌桶数量为 10，低优先级的设置为 5 即可。\n\n第三步进行的削峰是，增加一定的过滤比例。 如果上述两个方式过滤后，热点扣减的并发量仍然较大。可以设置一个固定比例，如 10% 的请求前置过滤并直接返回失败消息，告知用户“抢购火爆，请稍后再试”，也可以降低一部分无效请求。\n\n过滤比例可以根据预估流量和秒杀商品的库存进行设置，如预估流量 50W/S、实际商品库存只有 10 个，那么抢到商品的概率只有 0.002%，抢不到的概率为 99.998%，只要设置过滤率小于抢不到的概率即可。\n\n第四步进行的削峰是，兜底降级不可少。 即使做了上述的限流措施后，流量仍有可能超过“第 14 讲”方案里的单分片的承载最大值，此时，可以从技术层面上增加限流阈值。\n\n首先对缓存的单分片进行压测，得到单分片能够承载的最大值，这个最大值乘以 50% 或者 60% 即可得到缓存单分片线上能够实际承载的最大流量值。之所以要乘以一定比例获得实际承载最大值，是因为在压测时，被压测的缓存单分片的各项指标（如 CPU、网络等）均已达到极限值，系统处在宕机的边缘了。为了保证系统稳定，线上环境的限流值不能设置为此极限值，只能进行一定的折扣。有了单分片的最大承载值，才可以做最后一步的兜底，兜底架构如下图 7 所示：\n\n\n\n图 7：兜底架构图\n\n在部署的所有扣减应用里，通过上图中编号为 0 的配置中心推送每台机器需要负责的每个缓存分片的限流值（单分片最大承载值/扣减应用机器数），在扣减应用中，按上述推送值，给每一个缓存分片设置一个限流器。\n\n此方案需要扣减应用和缓存中间件有一定的耦合性，即扣减应用需要判断当前请求隶属于哪一个缓存分片。实现上，具体隶属于哪个缓存分片，可以通过缓存中间件提供的路由算法工具来计算。获取到分片标识号后，就可以获取到此标识对应的限流器，然后再进行限流即可。\n\n通过上述方式，即使出现流量超预期，兜底策略既保障了秒杀业务可正常运行，同时又保障了系统不会被打挂。\n\n最后进行的削峰是，售完的商品需前置拦截。 秒杀商品会在瞬间售完，后续所有的请求都会返回无货。对于已经无货的商品，可以采用“第 06 讲”里的方案，将商品已经无货的标记记录在本地缓存里。在秒杀扣减前，先在本地缓存进行判断，如果无货直接返回即可。架构如下图 8 所示：\n\n\n\n图 8：无货前置拦截\n\n水平扩展架构升级\n\n通过上述几种限流的组合，便可以应对秒杀的热点流量了。但上述的方式会牺牲一定的用户体验，比如按一定比例过滤用户请求、按缓存分片维度过滤用户请求等。\n\n我们可以在上述方案的基础上，做一定的升级来减少有损体验。升级后的架构如下图 9 所示：\n\n\n\n图 9：具备水平扩展的架构\n\n上述架构里，在设置秒杀库存时，将秒杀库存按缓存分片的数量进行平均等分，每一个缓存里均存储一等份即可。比如某一个商品（记为 SKU1）的秒杀库存为 10，当前部署的缓存分片共计 10 个，那么每一个分片里存储该 SKU 的库存数可以为 1，存储在各个缓存里的 key 可以为：SKU1_1、SKU1_2、...、SKU1_10。\n\n在处理秒杀请求时，不只是固定地命中某一个缓存分片，而是在每次请求时轮询命中缓存集群中的每一个缓存分片。\n\n将秒杀商品的库存前置散列到各个缓存分片，可以将原先热点扣减只能使用一个缓存分片升级至多个，提升吞吐量。但此方式有一个弊端，就是更加的定制化。\n\n\n其他手段\n\n除了上述介绍的手段之外，还有几个方式可以应用在秒杀场景里。\n\n首先，前端静态资源前置。 在秒杀开始之前及在秒杀中，焦急的用户会不断地刷新页面，判断秒杀是否开始，避免自己错过开始时间。刷新秒杀页面其实是热点查询的功能，可以借鉴“第 06 讲”的方式采用应用内的前置缓存解决。对于前台页面上涉及的静态数据，如 JS、CSS、图片等，可以使用 CDN 来提升性能，具体架构如下图 10 所示：\n\n\n\n图 10：前端缓存优化架构\n\n其次，业务上隔离。秒杀与正常的购物是有区别的，它是短时间内抢购某一商品。在应对策略上，可以从根据其业务特点进行定制，降低系统的压力。正常的网上购物流程是用户先选购多个商品，加入购物车后再提交订单并进行库存扣减。对于秒杀，可以定制它的前台页面，开发单独的秒杀页面。秒杀开始后，跳过添加购物车的过程，直接提交订单。这样设计，有几个好处。\n\n 1. 跳过购物车再提单，增加了用户抢购到商品的概率，提升了用户体验。\n\n 2. 业务流程跳过购物车，也降低了热点并发对于购物车后台系统的压力，提升了整体后台系统的稳定性。\n\n 3. 秒杀商品直接提单时，就只会有秒杀这一个商品，这对于扣减应用的稳定性有极大的保障。一次扣减只有一个商品相比一次扣减有十几个商品，它在性能、网络带宽的消耗、对于扣减服务的资源占用（如 CPU、内存）等都有更大的节约。\n\n最后，部署隔离。 在完成上述业务隔离后，可以在机器部署上，更往前一步。对于秒杀所涉及的后端应用模块、存储均进行单独部署隔离。通过此种方式，可以更好地应对秒杀，此外也能够减少秒杀的热点并发流量对于原有扣减模块的影响。单独部署的架构如下图 11 所示：\n\n\n\n图 11：单独部署的秒杀部署（增加对比正常的扣减）\n\n\n总结\n\n本讲在本模块前几讲的基础上，介绍了四种限流拦截策略，以及除了限流之外，可以实现水平扩展架构升级的方案。\n\n除了上述方案外，还可以在部署架构、系统隔离、前端静态资源前置等方面进行升级改造来应对热点扣减。\n\n最后，留一道观察题，你在秒杀抢购商品时，是否遇到过提示你已经无货，后续稍等几秒又抢到的场景呢？可以参考本讲的内容，思考下背后的原因。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习17 | 如何设计一锤子买卖的 SDK？再见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# 风：\n\n> 副本镜像 本地缓存前置拦截 vip,ip限制 集中式（高可用） 单独式（同步限流数、扩容初始化） 用户等级业务规则（不同令牌桶） 根据流量和库存设置过滤比例 兜底降级（限压测单片） 本地缓存无货标记\n\n商品均摊到缓存 缓存轮询路由分片 Cdn 单独页面 独立部署 降低对原业务影响\n\n# **超：\n\n> 大师我悟了，怪不得秒杀和抢购我从来没中过，原来是因为我穷吗\n\n# *西：\n\n> 参与任何秒杀，都是陪跑。。😈\n\n# *琪：\n\n> 单机限流的话满足不了 单个ip/或者单个用户 5秒内通过5次请求。 总不能同一个用户/同一个ip/都路由到同一台机器吧。况且同一个用户账号在请求数据中，要做到的话，网关路由还要解密请求数据。\n\n#     讲师回复：\n\n>     是的。恶意用户的识别（用户维度的限流）是需要在网关层进行汇总并处理，即集中式限流。强制路由的成本比较，且也会导致各个机器的流量不均衡。实际场景里，用户维度的恶意识别，一般会借助风控团队的算法来实现。大致流程时，所有的网关流量都会异步的转发给风控系统，风控系统有实时的（毫秒或秒级）算法模型（比令牌桶等复杂多了）去判断用户是否为恶意用户，在实际扣减的时候，实时调用风控接口，判断是否为恶意用户。如为，则直接拦截。\n\n# 风：\n\n> 有没有机会给我们讲讲网关\n\n# **1442：\n\n> 你在秒杀抢购商品时，是否遇到过提示你已经无货，后续稍等几秒又抢到的场景呢？有没有一种可能还引入了mq进行削峰，经过一堆校验后，秒杀进入一个特定mq的topic，然后后端处理，当预扣减库存为0时，前端页面显示没货，后端消费mq消息，当实际库存为时，丢弃mq该topic的消息。不知道这种设计思路有没有问题，利用mq天然的削峰\n\n# *磊：\n\n> 会员流量优先就太真实了\n\n# *俊：\n\n> 京东抢茅台，，，一直陪跑",normalizedContent:"从“第 12 讲”到“第 14 讲”，我们介绍了可以应对百万并发扣减请求，以及同时能够保障高性能的架构方案。此外，上述的架构方案还具备水平扩展能力，即当流量增加后，可以通过扩容底层存储和应用服务器来应对。\n\n但面对百万并发的极端场景，比如大量用户在同一时间内抢购同一商品，前几讲介绍的几种方案就不能有效地应对了。此外，我们在“第 06 讲”里，介绍过热点查询的应对方案，是否可以直接复制来应对热点扣减呢？答案显然是不能的。\n\n因此，在本讲里，我将先向你介绍热点扣减的业务特点，以及它与热点查询的区别，然后再循序渐进地介绍热点扣减的有效应对方案。\n\n\n热点扣减的典型业务场景\n\n热点扣减有一个被大家熟知的名称，叫作秒杀。其实，秒杀并不等同于热点扣减，只是因为商品秒杀是热点扣减里最具有代表性、也最能体现热点扣减特点的场景，所以我们常常以秒杀代指热点扣减。秒杀的特点主要有以下两点。\n\n 1. 首先，秒杀带来的热点量非常大，其他热点场景很难比拟。比如，在刚过去的 2020 年，大家在电商平台里准点抢购口罩，上百万人同时在线抢购同一商品，此时就带来了超大并发量。\n\n 2. 其次，秒杀对于扣减的准确性要求极高。秒杀在绝大部分场景里是一种营销手段，如一元抢 iphone。商家对有限的商品设置一个亏本价，吸引用户下载或注册 app，达到拉新、提升知名度等目的。因为是亏本营销，如果出现了大面积的超卖，业务上是绝不允许的。\n\n除了秒杀之外，其余的扣减场景，如账户金额的扣减、收费文章免费试读次数的扣减等场景，均很难同时满足上述两个要求，所以它们不是热点扣减的代表性场景。\n\n在如何保障不超卖的问题上，可以直接复用“第 13 讲”和“第 14 讲”的方案。下面将讲解如何应对热点扣减的典型场景“秒杀”带来的百万热点这一挑战。\n\n\n技术挑战\n\n因为需要保障高可靠的扣减，在应对秒杀时，可以在“第 14 讲”的方案基础上进行升级改造。结合“第 06讲”介绍的关于热点查询的分析内容，在面对热点扣减时，整个架构图和对应的存储命中如下图 1 所示：\n\n\n\n图 1：基于数据库+缓存的热点扣减现状\n\n可以看到，秒杀与热点扣减所带来技术问题是一样的——所有的热点请求均命中同一个存储分片。那为什么不能直接复用“第 06 讲”介绍的“通过增加缓存副本以及使用本地缓存”的方式来应对呢？\n\n下面我们来具体分析一下这其中的原因。\n\n首先，扣减是写请求，即每一次请求都会修改当前商品对应的总数量，且当商品数量扣减为零或当前剩余商品数量小于当次要扣减的数量时，均会返还失败。而“第 06 讲”热点查询里的缓存副本或者本地缓存里的商品数量均是原始分片的数据镜像，不能被拿来进行扣减的，否则就会出现数据错乱，甚至超卖的现象。对应的架构示图如下图 2 所示：\n\n\n\n图 2：副本的镜像架构图\n\n其次，本地缓存里的数据是非持久化数据，易丢失。即使将本地缓存持久化至宿主机的磁盘，也会因磁盘故障、不满足 acid 等原因而导致数据丢失。\n\n\n如何应对秒杀流量？\n\n既然不能采用热点查询里的方案，只能使用缓存单分片来应对秒杀的流量，但单分片能够支持的流量是有上限。当流量超过上限后如何处理呢？\n\n可以从秒杀的业务上进行分析，你会发现虽然秒杀带来的热点扣减请求非常大，但每次参与秒杀的商品数量是有限的，可能就几百个或者上千个，而热点扣减的流量可能达到上百万。通过简单地计算可以得出，秒杀到商品的概率只有 0.1%，其中 99% 的扣减请求都是“陪跑”的。\n\n这些“陪跑”的请求对于使用者来说可能只是一次简单的点击，但很可能会把正在运行的扣减服务打挂。此时，我们可以对这些瞬间量非常大的“陪跑”请求进行一些前置处理，降低“陪跑”请求的瞬间请求量，或者降低它们对于系统的冲击，此方式就叫作流量削峰。体现在流量监控上如下图 3 所示：\n\n\n\n图 3：削峰架构对比图\n\n下面咱们一起讨论下如何进行流量削峰。\n\n如何快速实现流量削峰？\n\n第一步进行的削峰是，先做恶意用户拦截。 上述描述提到过，秒杀通常是基于低价商品的营销活动，抢到商品后转售会有很大的盈利空间。因此，秒杀会吸引来大批的黄牛和黑产用户，对于这些恶意用户可以基于以下几种方式进行拦截：\n\n * 基于用户维护设置限制。比如同一个账号在 5 秒内最多可以请求扣减多少次。超过该次数，便进行拦截，直接返回失败信息给到商品页面，显示暂时无货。通过此类方式，可以拦截黑产跳过系统界面，直接调用对外暴露的 http 形式的扣减接口所产生的瞬间爆点流量。\n\n * 基于来源 ip 设置限制。有些黄牛会提前预申请很多账号，因此使用上述账户限制的方式并不能完全拦截住。在账户的基础上，可以对用户的来源 ip 设置限制。比如 5 秒内，同一个 ip 最多可以请求扣减多少次。\n\n * 除了上述方式外，还有很多其他方式可以识别用户，比如现在每一个手机以及电脑都有唯一编码，如手机的 imei、电脑的网卡地址等。可以在限制账号、ip 之外，再增加对这些维度的限制。\n\n上述提到的拦截在实现上，可以采用比较成熟的漏桶算法、令牌桶算法。这两个算法在网络上有很多介绍，这里不再赘述。此外，现在有很多开源工具包提供了这两个算法的实现，比如 java 里的 guava 包就提供了开箱即用的实现。采用限流算法的架构如下图 4 所示：\n\n\n\n图 4：基于限流的架构图\n\n限流在实现上有两种方式，一种是集中式，另外一种是单机式。集中式是指设置一个总的限流阈值，并将此值存储在一个单独的限流应用中。所有的扣减应用在接收到请求后，均采用远程请求此限流应用的方式，来判断当前是否达到限流值。它的架构如下图 5 所示：\n\n\n\n图 5：集中式限流架构\n\n集中式的限流方式最大的好处是设置简单，当对整个扣减应用的集群进行极限压测后，得到了极限值。便可以基于此值，设置集群的限流阈值。但这种限流方式也带来了一些问题：\n\n * 首先，调用远程限流服务会增加一次网络消耗，这也降低了扣减服务的性能；\n\n * 其次，远程限流服务提供的限流功能并不精确，因为调用远程的扣减服务会消耗一定的时间，在这个时间区间里，可能会有大批量的热点并发涌入扣减应用，瞬间就会击垮扣减服务；\n\n * 最后，如果所有的请求都要经过限流服务，如何保障限流服务高可用以及能够高效应对热点也是一个难点。\n\n单机式限流是指将上述提到的限流阈值在管理端配置后，主动下发到每一台扣减应用中去，它的架构如下图 6 所示：\n\n\n\n图 6：单机式限流架构\n\n单机式限流是将限流器内置到扣减应用内，可以规避上述集中式限流出现的问题，但它也会带来其他问题：\n\n * 首先，每台机器的限流值需要根据机器的数量实时计算，并将计算后的限流值下发到每台应用机器里，同时更新扣减应用内的限流器；\n\n * 其次，对于扩容的机器需要初始化对应的单机限流器。\n\n在实际的应用中，推荐采用单机维度的限流器，因为它会更加精准和实时。\n\n第二步进行的削峰是，业务层面需要设置权重等级。 秒杀是一种营销活动，营销是有目的的，比如激活许久未下单用户，或者优先让会员抢到商品，增加会员的续费意愿等。\n\n在秒杀接口实现时，可以根据业务规则配置相对应的优先级过滤一些低等级的用户。比如设置高与低的优先级比例为 10：5，它表示在一个时间区间内（如 5 秒），处理 10 个高优先级（如会员用户）的扣减请求时，最多才能处理 5 个低优先级的请求。在实现上，可以使用令牌桶算法，高低优先级各配置一个令牌桶，高优先级的令牌桶数量为 10，低优先级的设置为 5 即可。\n\n第三步进行的削峰是，增加一定的过滤比例。 如果上述两个方式过滤后，热点扣减的并发量仍然较大。可以设置一个固定比例，如 10% 的请求前置过滤并直接返回失败消息，告知用户“抢购火爆，请稍后再试”，也可以降低一部分无效请求。\n\n过滤比例可以根据预估流量和秒杀商品的库存进行设置，如预估流量 50w/s、实际商品库存只有 10 个，那么抢到商品的概率只有 0.002%，抢不到的概率为 99.998%，只要设置过滤率小于抢不到的概率即可。\n\n第四步进行的削峰是，兜底降级不可少。 即使做了上述的限流措施后，流量仍有可能超过“第 14 讲”方案里的单分片的承载最大值，此时，可以从技术层面上增加限流阈值。\n\n首先对缓存的单分片进行压测，得到单分片能够承载的最大值，这个最大值乘以 50% 或者 60% 即可得到缓存单分片线上能够实际承载的最大流量值。之所以要乘以一定比例获得实际承载最大值，是因为在压测时，被压测的缓存单分片的各项指标（如 cpu、网络等）均已达到极限值，系统处在宕机的边缘了。为了保证系统稳定，线上环境的限流值不能设置为此极限值，只能进行一定的折扣。有了单分片的最大承载值，才可以做最后一步的兜底，兜底架构如下图 7 所示：\n\n\n\n图 7：兜底架构图\n\n在部署的所有扣减应用里，通过上图中编号为 0 的配置中心推送每台机器需要负责的每个缓存分片的限流值（单分片最大承载值/扣减应用机器数），在扣减应用中，按上述推送值，给每一个缓存分片设置一个限流器。\n\n此方案需要扣减应用和缓存中间件有一定的耦合性，即扣减应用需要判断当前请求隶属于哪一个缓存分片。实现上，具体隶属于哪个缓存分片，可以通过缓存中间件提供的路由算法工具来计算。获取到分片标识号后，就可以获取到此标识对应的限流器，然后再进行限流即可。\n\n通过上述方式，即使出现流量超预期，兜底策略既保障了秒杀业务可正常运行，同时又保障了系统不会被打挂。\n\n最后进行的削峰是，售完的商品需前置拦截。 秒杀商品会在瞬间售完，后续所有的请求都会返回无货。对于已经无货的商品，可以采用“第 06 讲”里的方案，将商品已经无货的标记记录在本地缓存里。在秒杀扣减前，先在本地缓存进行判断，如果无货直接返回即可。架构如下图 8 所示：\n\n\n\n图 8：无货前置拦截\n\n水平扩展架构升级\n\n通过上述几种限流的组合，便可以应对秒杀的热点流量了。但上述的方式会牺牲一定的用户体验，比如按一定比例过滤用户请求、按缓存分片维度过滤用户请求等。\n\n我们可以在上述方案的基础上，做一定的升级来减少有损体验。升级后的架构如下图 9 所示：\n\n\n\n图 9：具备水平扩展的架构\n\n上述架构里，在设置秒杀库存时，将秒杀库存按缓存分片的数量进行平均等分，每一个缓存里均存储一等份即可。比如某一个商品（记为 sku1）的秒杀库存为 10，当前部署的缓存分片共计 10 个，那么每一个分片里存储该 sku 的库存数可以为 1，存储在各个缓存里的 key 可以为：sku1_1、sku1_2、...、sku1_10。\n\n在处理秒杀请求时，不只是固定地命中某一个缓存分片，而是在每次请求时轮询命中缓存集群中的每一个缓存分片。\n\n将秒杀商品的库存前置散列到各个缓存分片，可以将原先热点扣减只能使用一个缓存分片升级至多个，提升吞吐量。但此方式有一个弊端，就是更加的定制化。\n\n\n其他手段\n\n除了上述介绍的手段之外，还有几个方式可以应用在秒杀场景里。\n\n首先，前端静态资源前置。 在秒杀开始之前及在秒杀中，焦急的用户会不断地刷新页面，判断秒杀是否开始，避免自己错过开始时间。刷新秒杀页面其实是热点查询的功能，可以借鉴“第 06 讲”的方式采用应用内的前置缓存解决。对于前台页面上涉及的静态数据，如 js、css、图片等，可以使用 cdn 来提升性能，具体架构如下图 10 所示：\n\n\n\n图 10：前端缓存优化架构\n\n其次，业务上隔离。秒杀与正常的购物是有区别的，它是短时间内抢购某一商品。在应对策略上，可以从根据其业务特点进行定制，降低系统的压力。正常的网上购物流程是用户先选购多个商品，加入购物车后再提交订单并进行库存扣减。对于秒杀，可以定制它的前台页面，开发单独的秒杀页面。秒杀开始后，跳过添加购物车的过程，直接提交订单。这样设计，有几个好处。\n\n 1. 跳过购物车再提单，增加了用户抢购到商品的概率，提升了用户体验。\n\n 2. 业务流程跳过购物车，也降低了热点并发对于购物车后台系统的压力，提升了整体后台系统的稳定性。\n\n 3. 秒杀商品直接提单时，就只会有秒杀这一个商品，这对于扣减应用的稳定性有极大的保障。一次扣减只有一个商品相比一次扣减有十几个商品，它在性能、网络带宽的消耗、对于扣减服务的资源占用（如 cpu、内存）等都有更大的节约。\n\n最后，部署隔离。 在完成上述业务隔离后，可以在机器部署上，更往前一步。对于秒杀所涉及的后端应用模块、存储均进行单独部署隔离。通过此种方式，可以更好地应对秒杀，此外也能够减少秒杀的热点并发流量对于原有扣减模块的影响。单独部署的架构如下图 11 所示：\n\n\n\n图 11：单独部署的秒杀部署（增加对比正常的扣减）\n\n\n总结\n\n本讲在本模块前几讲的基础上，介绍了四种限流拦截策略，以及除了限流之外，可以实现水平扩展架构升级的方案。\n\n除了上述方案外，还可以在部署架构、系统隔离、前端静态资源前置等方面进行升级改造来应对热点扣减。\n\n最后，留一道观察题，你在秒杀抢购商品时，是否遇到过提示你已经无货，后续稍等几秒又抢到的场景呢？可以参考本讲的内容，思考下背后的原因。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习17 | 如何设计一锤子买卖的 sdk？再见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# 风：\n\n> 副本镜像 本地缓存前置拦截 vip,ip限制 集中式（高可用） 单独式（同步限流数、扩容初始化） 用户等级业务规则（不同令牌桶） 根据流量和库存设置过滤比例 兜底降级（限压测单片） 本地缓存无货标记\n\n商品均摊到缓存 缓存轮询路由分片 cdn 单独页面 独立部署 降低对原业务影响\n\n# **超：\n\n> 大师我悟了，怪不得秒杀和抢购我从来没中过，原来是因为我穷吗\n\n# *西：\n\n> 参与任何秒杀，都是陪跑。。😈\n\n# *琪：\n\n> 单机限流的话满足不了 单个ip/或者单个用户 5秒内通过5次请求。 总不能同一个用户/同一个ip/都路由到同一台机器吧。况且同一个用户账号在请求数据中，要做到的话，网关路由还要解密请求数据。\n\n#     讲师回复：\n\n>     是的。恶意用户的识别（用户维度的限流）是需要在网关层进行汇总并处理，即集中式限流。强制路由的成本比较，且也会导致各个机器的流量不均衡。实际场景里，用户维度的恶意识别，一般会借助风控团队的算法来实现。大致流程时，所有的网关流量都会异步的转发给风控系统，风控系统有实时的（毫秒或秒级）算法模型（比令牌桶等复杂多了）去判断用户是否为恶意用户，在实际扣减的时候，实时调用风控接口，判断是否为恶意用户。如为，则直接拦截。\n\n# 风：\n\n> 有没有机会给我们讲讲网关\n\n# **1442：\n\n> 你在秒杀抢购商品时，是否遇到过提示你已经无货，后续稍等几秒又抢到的场景呢？有没有一种可能还引入了mq进行削峰，经过一堆校验后，秒杀进入一个特定mq的topic，然后后端处理，当预扣减库存为0时，前端页面显示没货，后端消费mq消息，当实际库存为时，丢弃mq该topic的消息。不知道这种设计思路有没有问题，利用mq天然的削峰\n\n# *磊：\n\n> 会员流量优先就太真实了\n\n# *俊：\n\n> 京东抢茅台，，，一直陪跑",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何设计微服务才能防止宕机？",frontmatter:{title:"如何设计微服务才能防止宕机？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/55ceda/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/19.%20%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%89%8D%E8%83%BD%E9%98%B2%E6%AD%A2%E5%AE%95%E6%9C%BA%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/19. 如何设计微服务才能防止宕机？.md",key:"v-1eb0ecd1",path:"/pages/55ceda/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4786}],headersStr:"精选评论",content:'在上一讲里，介绍了构建一个稳健的微服务的具体法则：防备上游、做好自己、怀疑下游， 并介绍了为什么要防备上游，以及一些防备上游的具体手段。\n\n在本讲里，咱们一起来学习，做好微服务自身的设计和代码编写的常见手段。\n\n\n微服务 CPU 被打满如何排查\n\n在讲解具体有哪些手段可以用来构建一个更加稳固的微服务前，咱们先来看看如何高效、精准地定位问题。下面我将以设计不精良的微服务在线上最容易产生的问题：“机器 CPU 被打满”为例进行讲解。\n\n这个问题也是面试中的高频话题，很多面试者能够回答出其中一二，但距离让面试官满意的答案还有一定距离，下面咱们就一起来看看详细的排查步骤。\n\n一台机器上会部署一至多个进程，它们可能是一个或多个业务应用进程和多个其他工具类进程（比如日志收集进程、监控数据收集进程等）。大概率导致机器 CPU 飙升的是业务应用进程，但仍需准确定位才可得出结论。\n\n 1. 在 Linux 系统里，可以使用top 命令进行定位， top 命令可以按进程维度输出各个进程占用的 CPU 的资源并支持排序，同时还会显示对应的进程名称、进程 ID 等信息。\n\n 2. 根据排序，便可以确定占用 CPU 资源最高的进程，但此时仍然不知道是哪段代码导致的 CPU 飙升。所以可以在此进程基础之上，做进一步的定位。top 命令支持查看指定进程里的各线程的 CPU 占用量，命令格式为：top -Hp 进程号。通过此方式便可以获得指定进程中最消耗 CPU 资源的线程编号、线程名称等信息。\n\n 3. 假设导致 CPU 飙升的应用是基于 Java 开发的，此时，便可以通过 Java 里自带的 jstack 导出该进程的详细线程栈（包含每一个线程名、编号、当前代码运行位置等）信息，具体见下方示例代码：\n\n"thread name" prio=0 tid=0x0 nid=0x0 runnable\nat java.net.SocketInputStream.socketRead0(Native Method)\nat java.net.SocketInputStream.socketRead(SocketInputStream.java:116)\nat java.net.SocketInputStream.read(SocketInputStream.java:171)\n\n\n通过第三步定位的线程号和此步骤生成的线程栈，便可以精准确定是哪行代码写的有 Bug，进而导致进程的 CPU 飙升。上述分析是以 Java 应用进行举例，关于其他语言的应用如何导出进程堆栈信息，你可以到对应官网查看。如果有疑问也可以写在留言区，我们一起交流。\n\n\n如何预防故障\n\n上述介绍了，当微服务的代码编写不优雅，导致 CPU 飙升时，如何快速、准确应对的方法。下面将从微服务的部署和代码编写两个层面介绍一些准则，以便构建一个更加稳固的微服务，前置减少出现故障的概率。\n\n部署层面\n\n首先，微服务及存储需要双机房部署。双机房部署能够进一步提升服务的容灾能力。双机房部署的架构如下图 1 所示：\n\n\n\n图 1：双机房部署架构图\n\n上述部署里，同一个微服务分别在两个机房各部署了两台机器。在存储上，数据库的主从分别部署在两个机房里。当出现机房级别的故障，如网络不通时，可以直接将故障机房的机器从微服务的注册中心摘除。其次，如果故障发生在主库所在机房，就需要 DBA 进行协助，对主从数据库的数据对比、订正并进行数据库的主从切换。\n\n双机房部署使得微服务具备了机房级别的容灾能力，当机房出现故障时，可以快速地进行切换，而不用耗费几个小时甚至更久的时间，在一个新的机房进行微服务和数据库的重新部署。但上述的部署里，数据库其实是单机房部署的。因为在实际运行时，只有主库承载读写流量，从库只是跨机房进行数据复制，作为灾备使用。\n\n当真正出现机房故障时，整个微服务仍需停服一定时间，用来等待 DBA 进行主从切换，原则上只在秒级或者分钟级别。这在绝大部分场景里均可满足业务的需要，但有些用户使用高频的场景，如打车、即时通信等软件，需要业务尽可能 7*24 运行，减少或保障不出现业务停服的场景。对于此类需求，可以采用存储按机房多地部署、且每个机房的存储均支持部分用户的数据读写的方案进行升级，此方式在业界有个特有名词，叫作单元化部署的架构，具体架构如下图 2 所示：\n\n\n\n图 2：单元化架构图\n\n在单元化架构里，两个机房里的数据库均为主库，它们都承载读写流量。此外，对于用户的请求流量，在网关层进行了转发，一部分转发至机房 A，另外一部分转发至机房 B。假设当机房 A 出现故障时，机房 B 所承载的流量是完全不受影响的，即路由至机房 B 的用户对于故障无感知。\n\n而对于机房 A 里的用户，则可以在网关层进行前置再路由，将所有的请求全部转发至未故障的机房 B。在上图 2 中，有一条两个机房里的数据库主库互相同步的标识线，它是单元化里需要构建的数据同步模块。作用是发生故障时，减少机房 A 里的用户切换到机房 B 的时间。因为机房 A 里的用户可以切换到机房 B 的前置条件是，机房 A 里的数据已经全部同步至机房 B 里，实时的数据同步可以减少故障后 DBA 进行数据同步、对比和校准的时间。\n\n可以看到，单元化架构并不是机房故障后，对于业务完全无损，而是保障一部分用户完全无损来提高高可用能力。\n\n其次，机房内至少部署两台及以上机器。 这里再多啰唆一句，上述第一条要求至少双机房部署，并不是两个机房各部署一台机器即可，而是要在同一个机房里至少部署两台机器，保障机房内机器互相灾备。此方式可以防止当某一台机器故障后，出现整个机房全部失联，进而将调用方的所有的流量都打至另外一个机房，引起请求的性能和稳定性下降，因为跨机房的请求的网络传输时间更长。单机房部署单容器故障时导致的跨机房调用的架构如下图 3 所示，可以看到故障后，调用方的所有流量全部都路由至被调用方的单个机房里。\n\n\n\n图 3：机器故障导致的跨机房架构图\n\n再者，不同类型的接口需要单独部署。 在模块二和模块三里介绍过读服务和写服务的特点，这里再复习一下。读服务的特点是调用次数特别大，对于性能要求高。而写服务则是对于稳定性要求特别高，调用次数相比读服务会低很多。假设你在微服务拆分时，没有在垂直拆分时按读写分离的方式将读和写服务拆分开，而是将代码编写在同一个工程里。那么部署的时候，建议将二者的接口拆开部署，拆开后的结构如下图 4 所示：\n\n\n\n图 4：读写分离的部署架构\n\n隔离开单独部署主要有以下几点考虑。\n\n 1. 写服务对于稳定性要求较高。隔离后，读服务里因为代码 Bug 等因素导致的机器 CPU 飙升、内存占满等问题不会影响到写服务的性能和稳定性。\n\n 2. 其次，读服务调用量较高，对于机器 CPU、内存、网络等占用也较高。隔离后，写服务将独享机器资源，性能和稳定性也较好。\n\n 3. 最后，微服务的执行线程是根据机器的 CPU 提前设置好的，大小是固定的。读写混合部署时，读请求很容易将微服务框架的执行线程沾满，导致线程枯竭，进而导致写请求得不到执行。此时，通过隔离部署也可以解决此问题。\n\n最后，至少要线程池隔离。 在某些时候，可能读服务的调用次数并不是特别大或机器资源有限，实现不了上述的纯机器隔离。此时，可以实现一个简版的隔离，即微服务框架的执行线程池隔离。现在主流的微服务框架都支持对于接口单独配置一个执行线程，这样在执行时，就可以做到线程池资源隔离，互不影响，具体架构见如下图 5 所示。在某些无法完成机器隔离的场景里，可以使用此方式实现一定程度的资源隔离。\n\n\n\n图 5：线程池隔离架构图\n\n代码层面\n\n有很多编写优雅、易阅读、易维护代码的技巧，因为篇幅和专栏定位原因，此处并不会一一介绍，此小节主要聚焦如何编写避免系统故障的编码准则。主要包含以下几点。\n\n第一，不要基于 JSON 格式打印太多、太复杂的日志。\n\n假设有一个特别复杂的类，其中包含了几十上百个字段，同时某些字段也是对象类型，该字段又嵌套了很多对象字段。如果在日志输出时，直接将该类通过 JSON 进行序列化，并进行日志输出，伪代码格式如下：\n\n复杂Object obj=new 复杂Object();\nlogger.info(JSON.toJson(obj));\n\n\n如果每一次请求，微服务的代码都会按上述格式打印日志，那么当调用量稍微上升时，很容易将微服务的 CPU 占满，进而导致服务宕机。导致上述现象的主要原因是：复杂的对象在序列化时非常消耗 CPU 资源。建议在打印日志时，按需输出。采用 toJson 方式序列化大对象，很多时候因为简单、粗暴，不需要太多开发量，所以就被研发同学大量、广泛地使用，与此同时也带来了系统宕机的风险。两害相较取其轻，建议采用如下按需的方式输出日志，规避宕机风险。\n\nlogger.info("内容1:{},内容2:{},内容3:{}",具体内容1,具体内容2,具体内容3);\n\n\n第二，需要具有日志级别的动态降级功能。\n\n假如上述按需输出日志的方式还没有被大家广泛接受，你还是习惯使用 toJson 的方式输出日志。那么为了防止打印日志导致机器宕机，需要在日志输出前进行级别判断，使得当日志打印导致机器出现问题时，通过此方式可以将日志进行关闭。具体写法如下：\n\nif(logger.isInfoEnabled()){\n  复杂Object obj=new 复杂Object();\n  logger.info(JSON.toJson(obj));\n}\n\n\n当 toJson 的日志打印把 CPU 占满之后，可以将日志级别调整为更高等级，比如 error 级别，禁止日志输出即可规避问题。此外，更进一步的是，此日志级别调整可以开发动态功能，结合配置中心，动态的修改日志级别，可以实现不重启应用即可生效日志级别修改的功能。\n\n第三，for 循环不要嵌套太深，原则上不要超过三层嵌套。\n\n实践中，for 循环迭代的数据是从数据库或远程 RPC 获取的，获取到的数据量是动态的，可多可少，极端情况下可能多达上千条。此时，三层嵌套下的时间复杂度则为：O(10003)=10 亿。上亿次的代码执行，分分钟就会把微服务打挂，建议在代码编写时，规避此种写法。\n\n第四，多层嵌套需要有动态跳出的降级手段。\n\n假设业务上无法规避上述的多层嵌套，在实现时，需要在嵌套内部开发主动跳出的降级开关。当上述数据量增多时，此方式可以通过开关主动地跳出嵌套，防止机器宕机。\n\n第五，如果使用应用内的本地缓存，需要配置容量上限。\n\n如果不显式地配置本地缓存的容量上限，有可能因为容量暴涨，导致进程 OOM。因此，需要根据机器的内存大小，显式地配置本地缓存的容量上线。\n\n\n总结\n\n本讲介绍了设计不规范的微服务会产生的典型线上问题：机器 CPU 被打满的详细处理过程。后续遇到此类线上问题时，你可以参考上述过程进行处理。然后通过部署和代码两个层面讲解了可以规避服务器宕机的一些设计和编码技巧。后续你在设计和开发中，可以进行参考使用。\n\n上述介绍的应用部署和代码编写的原则，都是为了防止微服务出现故障的手段。这些手段，换种说法就是做好自己，防止出现问题。\n\n除了上述介绍的一些原则，你们团队有哪些设计和编码规范呢？欢迎留言，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习 19 |如何做好微服务间依赖的治理和分布式事务？ 再见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **4060：\n\n> 还是挺像听听优雅代码的技巧的，能否加个餐，哈哈哈',normalizedContent:'在上一讲里，介绍了构建一个稳健的微服务的具体法则：防备上游、做好自己、怀疑下游， 并介绍了为什么要防备上游，以及一些防备上游的具体手段。\n\n在本讲里，咱们一起来学习，做好微服务自身的设计和代码编写的常见手段。\n\n\n微服务 cpu 被打满如何排查\n\n在讲解具体有哪些手段可以用来构建一个更加稳固的微服务前，咱们先来看看如何高效、精准地定位问题。下面我将以设计不精良的微服务在线上最容易产生的问题：“机器 cpu 被打满”为例进行讲解。\n\n这个问题也是面试中的高频话题，很多面试者能够回答出其中一二，但距离让面试官满意的答案还有一定距离，下面咱们就一起来看看详细的排查步骤。\n\n一台机器上会部署一至多个进程，它们可能是一个或多个业务应用进程和多个其他工具类进程（比如日志收集进程、监控数据收集进程等）。大概率导致机器 cpu 飙升的是业务应用进程，但仍需准确定位才可得出结论。\n\n 1. 在 linux 系统里，可以使用top 命令进行定位， top 命令可以按进程维度输出各个进程占用的 cpu 的资源并支持排序，同时还会显示对应的进程名称、进程 id 等信息。\n\n 2. 根据排序，便可以确定占用 cpu 资源最高的进程，但此时仍然不知道是哪段代码导致的 cpu 飙升。所以可以在此进程基础之上，做进一步的定位。top 命令支持查看指定进程里的各线程的 cpu 占用量，命令格式为：top -hp 进程号。通过此方式便可以获得指定进程中最消耗 cpu 资源的线程编号、线程名称等信息。\n\n 3. 假设导致 cpu 飙升的应用是基于 java 开发的，此时，便可以通过 java 里自带的 jstack 导出该进程的详细线程栈（包含每一个线程名、编号、当前代码运行位置等）信息，具体见下方示例代码：\n\n"thread name" prio=0 tid=0x0 nid=0x0 runnable\nat java.net.socketinputstream.socketread0(native method)\nat java.net.socketinputstream.socketread(socketinputstream.java:116)\nat java.net.socketinputstream.read(socketinputstream.java:171)\n\n\n通过第三步定位的线程号和此步骤生成的线程栈，便可以精准确定是哪行代码写的有 bug，进而导致进程的 cpu 飙升。上述分析是以 java 应用进行举例，关于其他语言的应用如何导出进程堆栈信息，你可以到对应官网查看。如果有疑问也可以写在留言区，我们一起交流。\n\n\n如何预防故障\n\n上述介绍了，当微服务的代码编写不优雅，导致 cpu 飙升时，如何快速、准确应对的方法。下面将从微服务的部署和代码编写两个层面介绍一些准则，以便构建一个更加稳固的微服务，前置减少出现故障的概率。\n\n部署层面\n\n首先，微服务及存储需要双机房部署。双机房部署能够进一步提升服务的容灾能力。双机房部署的架构如下图 1 所示：\n\n\n\n图 1：双机房部署架构图\n\n上述部署里，同一个微服务分别在两个机房各部署了两台机器。在存储上，数据库的主从分别部署在两个机房里。当出现机房级别的故障，如网络不通时，可以直接将故障机房的机器从微服务的注册中心摘除。其次，如果故障发生在主库所在机房，就需要 dba 进行协助，对主从数据库的数据对比、订正并进行数据库的主从切换。\n\n双机房部署使得微服务具备了机房级别的容灾能力，当机房出现故障时，可以快速地进行切换，而不用耗费几个小时甚至更久的时间，在一个新的机房进行微服务和数据库的重新部署。但上述的部署里，数据库其实是单机房部署的。因为在实际运行时，只有主库承载读写流量，从库只是跨机房进行数据复制，作为灾备使用。\n\n当真正出现机房故障时，整个微服务仍需停服一定时间，用来等待 dba 进行主从切换，原则上只在秒级或者分钟级别。这在绝大部分场景里均可满足业务的需要，但有些用户使用高频的场景，如打车、即时通信等软件，需要业务尽可能 7*24 运行，减少或保障不出现业务停服的场景。对于此类需求，可以采用存储按机房多地部署、且每个机房的存储均支持部分用户的数据读写的方案进行升级，此方式在业界有个特有名词，叫作单元化部署的架构，具体架构如下图 2 所示：\n\n\n\n图 2：单元化架构图\n\n在单元化架构里，两个机房里的数据库均为主库，它们都承载读写流量。此外，对于用户的请求流量，在网关层进行了转发，一部分转发至机房 a，另外一部分转发至机房 b。假设当机房 a 出现故障时，机房 b 所承载的流量是完全不受影响的，即路由至机房 b 的用户对于故障无感知。\n\n而对于机房 a 里的用户，则可以在网关层进行前置再路由，将所有的请求全部转发至未故障的机房 b。在上图 2 中，有一条两个机房里的数据库主库互相同步的标识线，它是单元化里需要构建的数据同步模块。作用是发生故障时，减少机房 a 里的用户切换到机房 b 的时间。因为机房 a 里的用户可以切换到机房 b 的前置条件是，机房 a 里的数据已经全部同步至机房 b 里，实时的数据同步可以减少故障后 dba 进行数据同步、对比和校准的时间。\n\n可以看到，单元化架构并不是机房故障后，对于业务完全无损，而是保障一部分用户完全无损来提高高可用能力。\n\n其次，机房内至少部署两台及以上机器。 这里再多啰唆一句，上述第一条要求至少双机房部署，并不是两个机房各部署一台机器即可，而是要在同一个机房里至少部署两台机器，保障机房内机器互相灾备。此方式可以防止当某一台机器故障后，出现整个机房全部失联，进而将调用方的所有的流量都打至另外一个机房，引起请求的性能和稳定性下降，因为跨机房的请求的网络传输时间更长。单机房部署单容器故障时导致的跨机房调用的架构如下图 3 所示，可以看到故障后，调用方的所有流量全部都路由至被调用方的单个机房里。\n\n\n\n图 3：机器故障导致的跨机房架构图\n\n再者，不同类型的接口需要单独部署。 在模块二和模块三里介绍过读服务和写服务的特点，这里再复习一下。读服务的特点是调用次数特别大，对于性能要求高。而写服务则是对于稳定性要求特别高，调用次数相比读服务会低很多。假设你在微服务拆分时，没有在垂直拆分时按读写分离的方式将读和写服务拆分开，而是将代码编写在同一个工程里。那么部署的时候，建议将二者的接口拆开部署，拆开后的结构如下图 4 所示：\n\n\n\n图 4：读写分离的部署架构\n\n隔离开单独部署主要有以下几点考虑。\n\n 1. 写服务对于稳定性要求较高。隔离后，读服务里因为代码 bug 等因素导致的机器 cpu 飙升、内存占满等问题不会影响到写服务的性能和稳定性。\n\n 2. 其次，读服务调用量较高，对于机器 cpu、内存、网络等占用也较高。隔离后，写服务将独享机器资源，性能和稳定性也较好。\n\n 3. 最后，微服务的执行线程是根据机器的 cpu 提前设置好的，大小是固定的。读写混合部署时，读请求很容易将微服务框架的执行线程沾满，导致线程枯竭，进而导致写请求得不到执行。此时，通过隔离部署也可以解决此问题。\n\n最后，至少要线程池隔离。 在某些时候，可能读服务的调用次数并不是特别大或机器资源有限，实现不了上述的纯机器隔离。此时，可以实现一个简版的隔离，即微服务框架的执行线程池隔离。现在主流的微服务框架都支持对于接口单独配置一个执行线程，这样在执行时，就可以做到线程池资源隔离，互不影响，具体架构见如下图 5 所示。在某些无法完成机器隔离的场景里，可以使用此方式实现一定程度的资源隔离。\n\n\n\n图 5：线程池隔离架构图\n\n代码层面\n\n有很多编写优雅、易阅读、易维护代码的技巧，因为篇幅和专栏定位原因，此处并不会一一介绍，此小节主要聚焦如何编写避免系统故障的编码准则。主要包含以下几点。\n\n第一，不要基于 json 格式打印太多、太复杂的日志。\n\n假设有一个特别复杂的类，其中包含了几十上百个字段，同时某些字段也是对象类型，该字段又嵌套了很多对象字段。如果在日志输出时，直接将该类通过 json 进行序列化，并进行日志输出，伪代码格式如下：\n\n复杂object obj=new 复杂object();\nlogger.info(json.tojson(obj));\n\n\n如果每一次请求，微服务的代码都会按上述格式打印日志，那么当调用量稍微上升时，很容易将微服务的 cpu 占满，进而导致服务宕机。导致上述现象的主要原因是：复杂的对象在序列化时非常消耗 cpu 资源。建议在打印日志时，按需输出。采用 tojson 方式序列化大对象，很多时候因为简单、粗暴，不需要太多开发量，所以就被研发同学大量、广泛地使用，与此同时也带来了系统宕机的风险。两害相较取其轻，建议采用如下按需的方式输出日志，规避宕机风险。\n\nlogger.info("内容1:{},内容2:{},内容3:{}",具体内容1,具体内容2,具体内容3);\n\n\n第二，需要具有日志级别的动态降级功能。\n\n假如上述按需输出日志的方式还没有被大家广泛接受，你还是习惯使用 tojson 的方式输出日志。那么为了防止打印日志导致机器宕机，需要在日志输出前进行级别判断，使得当日志打印导致机器出现问题时，通过此方式可以将日志进行关闭。具体写法如下：\n\nif(logger.isinfoenabled()){\n  复杂object obj=new 复杂object();\n  logger.info(json.tojson(obj));\n}\n\n\n当 tojson 的日志打印把 cpu 占满之后，可以将日志级别调整为更高等级，比如 error 级别，禁止日志输出即可规避问题。此外，更进一步的是，此日志级别调整可以开发动态功能，结合配置中心，动态的修改日志级别，可以实现不重启应用即可生效日志级别修改的功能。\n\n第三，for 循环不要嵌套太深，原则上不要超过三层嵌套。\n\n实践中，for 循环迭代的数据是从数据库或远程 rpc 获取的，获取到的数据量是动态的，可多可少，极端情况下可能多达上千条。此时，三层嵌套下的时间复杂度则为：o(10003)=10 亿。上亿次的代码执行，分分钟就会把微服务打挂，建议在代码编写时，规避此种写法。\n\n第四，多层嵌套需要有动态跳出的降级手段。\n\n假设业务上无法规避上述的多层嵌套，在实现时，需要在嵌套内部开发主动跳出的降级开关。当上述数据量增多时，此方式可以通过开关主动地跳出嵌套，防止机器宕机。\n\n第五，如果使用应用内的本地缓存，需要配置容量上限。\n\n如果不显式地配置本地缓存的容量上限，有可能因为容量暴涨，导致进程 oom。因此，需要根据机器的内存大小，显式地配置本地缓存的容量上线。\n\n\n总结\n\n本讲介绍了设计不规范的微服务会产生的典型线上问题：机器 cpu 被打满的详细处理过程。后续遇到此类线上问题时，你可以参考上述过程进行处理。然后通过部署和代码两个层面讲解了可以规避服务器宕机的一些设计和编码技巧。后续你在设计和开发中，可以进行参考使用。\n\n上述介绍的应用部署和代码编写的原则，都是为了防止微服务出现故障的手段。这些手段，换种说法就是做好自己，防止出现问题。\n\n除了上述介绍的一些原则，你们团队有哪些设计和编码规范呢？欢迎留言，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习 19 |如何做好微服务间依赖的治理和分布式事务？ 再见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **4060：\n\n> 还是挺像听听优雅代码的技巧的，能否加个餐，哈哈哈',charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"数据库与缓存的扩展升级与扣减返还",frontmatter:{title:"数据库与缓存的扩展升级与扣减返还",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/72badb/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/16.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E7%BC%93%E5%AD%98%E7%9A%84%E6%89%A9%E5%B1%95%E5%8D%87%E7%BA%A7%E4%B8%8E%E6%89%A3%E5%87%8F%E8%BF%94%E8%BF%98.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/16. 数据库与缓存的扩展升级与扣减返还.md",key:"v-7ddc0294",path:"/pages/72badb/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4929}],headersStr:"精选评论",content:"在本讲里，将会对扣减中涉及的两个公共话题进行讨论，分别是异步任务的设计和扣减中的返还的设计。\n\n在“第 14 讲”和“第 9 讲”里，均使用了异步任务（Worker）来做无状态存储到正式业务库的数据同步。但关于具体如何设计异步任务来保证高可用，以及如何设计任务的执行来保障执行的速度，避免产生任务积压，其实并没有过多介绍。\n\n此外，在本模块前三讲介绍的扣减方案里，只涉及扣减的正向流程。对于扣减后可能发生的返还过程中涉及的技术点，我将在本讲进行逐一讲解。\n\n\n实现无主架构的任务\n\n对于无状态存储集群的数据同步任务，最简单的实现方式便是对于每一个分库启动一个自循环的 Worker，它的架构如下图 1 所示：\n\n\n\n图 1：自循环的 Worker 架构\n\n自循环的 Worker 在启动时，会开启一个不跳出的循环或者借助一些开源工具（如 Java 中比较出名的 Quartz）来保证任务不间断执行。在上述的循环内，会使用类似如下的 SQL 来批量获取未执行的任务或未同步的数据并执行同步，在任务执行成功后修改任务状态为“完成”。\n\nselect task_id,task_body,... from t_task where id>lastId and status='未执行' limit 一批数量 order by task_id\n\n\n上述的流程虽然在功能上能够满足需求，但在高可用及性能上还是有一些不足：\n\n 1. 如果任务库中任务特别多，上述单 Worker 单库的方式不具备扩展性，随着任务不断变多，会出现任务积压的瓶颈且无法通过扩容解决；\n\n 2. 单库单 Worker 的方式存在单点问题，在执行过程中，当 Worker 发生故障导致宕机，如果没有监控等机制发现故障，Worker 得不到执行，任务就会一直积压。\n\n对于上述两个问题，这里介绍一种可以提升任务执行速度，既具备扩展性、又能保障高可用的任务架构模式，如下图 2 所示：\n\n\n\n图 2：分布式无主架构图\n\n在上述的整体架构里，每个分库对应的 Worker 的执行流程都类似，因此在讲解时，我只对一个分库的 Worker 进行分析，其余的可以以此类推。\n\n 1. 首先为了提升性能和高可用，单个分库的执行 Worker 配置的是多个并发进行执行。\n\n 2. 单个分库配置的多个任务在执行时使用自助协调，协调流程如下。\n\n（1）每个 Worker 在启动时，会根据机器的 IP、随机数、当前时间戳等进行组合拼接计算一个唯一串，再在此基础上使用各种哈希工具计算一个无符号整形哈希值。\n\n（2）所有的 Worker 会将自己的无符号整形哈希值上报到强一致的 etcd 或 ZooKeeper 存储集群里。\n\n（3）etcd 等集群具备通知功能（Watch）。借助通知功能，所有的 Worker 都去订阅某一个分库下的其他 Worker 的哈希值，比如一个新的 Worker 启动了或者扩容新增了一个新的 Worker。\n\n（4）每一个 Worker 都会获取到当前分库的所有其他 Worker 的哈希值。假设一个分库配置了四个 Worker，其中一个 Worker 会获取到自己及其他三个 Worker 的哈希值，假设为{200，300，500，800}。这四个 Worker 的 Hash 值便组成了一个环形区间，如下图 3 所示：\n\n\n\n图 3：任务一致性 Hash 环\n\n这个环形区间其实就类似一致性 Hash，每一个结点都代表一个 Worker，这个 Worker 负责任务编号在它区间范围内的任务的执行。\n\n（5）有了上述的哈希值列表后，就可以做任务分配了。如果当前 Worker 的哈希值为 300，那么当前 Worker 就处理任务 ID 在区间[200,300)里的值。比如哈希值为 200 的 Worker 则执行区间为[800，无穷大)和[0，200)的任务（即任务编号大于等于 800 和处在[0,200)区间内的任务），其他以此类推。区间处在[200，300)的 Worker 获取任务的 SQL 大致如下：\n\nselect * from task where id>=200 and id<300 and status='待执行' order by id limit 100;\n\n\n通过上述方式，无论是某一台 Worker 发生故障还是新扩容一台 Worker，通过 etcd 和 ZK 的通知机制，所有的其他 Worker 都可以立马感知，并更新自己所负责的任务区间。\n\n比如上述介绍的案例里，四个 Worker 代表 300 的那一个发生故障，整个哈希值列表就从{200，300，500，800}变成了{200，500，800}，此时负责 500 的 Worker 就会执行[200，500)这个区间里的所有任务了，扩容 Worker 的流程和上述类似。\n\n最后，在 Worker 扩缩容的间隙里，可能存在临界的并发情况，即两个 Worker 可能获取到同一条任务。对于此问题，可以从两点着手解决：\n\n 1. 首先，任务执行需要保持幂等，即任务可重复执行，这个可以从业务上着手实现；\n\n 2. 其次，可以给任务增加状态，如上述 SQL 里的 status 字段。当某一个 Worker 处理到该任务时，可以去修改该任务为处理中。其他 Worker 在获取任务时，显式指定状态，只处理为待执行的任务即可。\n\n\n如何设计和实现扣减中的返还\n\n下面将进入另外一个公共话题的讨论，如何设计和实现扣减中的返还。\n\n什么是扣减的返还\n\n扣减的返还指的是在扣减完成之后，业务上发生了一些逆向行为，导致原先已扣减的数据需要恢复以便供后续的扣减请求使用的场景。以在购买商品时的扣减库存举例，其中常见的逆向行为有：\n\n 1. 当客户下单之后，发现某个商品买错了（商品品类买错或是数量填错），客户便会取消订单，此时该订单对应的所有商品的库存数量都需要返还；\n\n 2. 其次，假设客户在收到订单后，发现其中某一个商品质量有问题或者商品的功能和预期有差异，便会发起订单售后流程，比如退、换货。此时该订单下被退货的商品，也需要单独进行库存返还。\n\n返还实现原则\n\n从上述的业务场景里可以看出，相比扣减而言， 返还的并发量比较低，因为下单完成后发生整单取消或者个别商品售后的情况概率较低。比如，对于热点商品或者爆品的抢购带来的扣减并发量是非常大的，但抢到爆品后再取消订单的概率是非常低的。此种场景里，扣减和返还的并发量的差距可能会达到上万倍。\n\n因此，返还在实现上，可以参考商家对已有商品补货的实现，直接基于数据库进行落地。但返还自身也具备一些需要你注意的实现原则，可以总结为以下几点。\n\n原则一：扣减完成才能返还\n\n返还接口在设计时，必须要有扣减号这个字段。因为所有的返还都是依托于扣减的，如果某一个商品的返还没有带上当时的扣减号，后续你很难对当时的情况做出准确判断。\n\n 1. 当前商品是否能够返还。 因为没有扣减号，无法找到当时的扣减明细，无法判断此商品当时是否做了扣减，没有做扣减的商品是无法进行返还的。\n\n 2. 当前返还的商品数量是否超过扣减值。假设外部系统因为异常，传入了一个超过当时扣减值的数量，如果不通过扣减号获取当时的扣减明细，你无法判断此类异常。\n\n原则二：一次扣减可以多次返还\n\n假设你购买的一个订单里包含了 A、B 两件商品，且这两个商品你各买了 5 件，在产生购买订单时即对应一次扣减。后续使用过程中可能会对某件不满的商品发起售后退货申请。极端情况下，可能会发生四次退货的行为，如：第一次，先退 2 个 A；第二次，再退 3 个 B；最后一次退货，一起将剩余的 3 个 A 和 2 个 B 退回。\n\n由上述案例可以看出，一次扣减（即一个订单）在业务上可以对应多次返还。因此，在实现时需要考虑多次返还的场景。返还主要基于数据库实现，下面介绍下支持多次返还的数据库表的设计。\n\ncreate table t_return{\n  id bigint not null comment '自增主健',\n  occupy_uuid bigint not null comment '扣减的ID',\n  return_uuid bigint not null comment '返还的唯一ID',\n  unique idx_return_uuid (occupy_uuid,return_uuid) comment '返还标识唯一索引'\n}comment '返还记录表';\ncreate table t_return_detail{\n  id bigint not null comment '自增主健',\n  return_uuid bigint not null comment '返还标识',\n  sku_id bigint not null comment '返还的商品ID',\n  num bigint not null comment '返还的商品数量',\n  unique idx_return_sku  (return_uuid,sku_id) comment '返还商品唯一标识'\n}comment '返还商品记录表';\n\n\n上述返还记录表实现了一次扣减多次返还的数据记录，返还商品记录表实现了一次返还里有多个商品的场景，也就是上述案例里的最后一次一起退了 A 和 B 两个商品的场景。\n\n原则三：返还的总数量要小于等于原始扣减的数量\n\n看到原则三，你可能觉得这内容不需要单独讲解，因为从业务上来看，这是一个必要条件。但在真正实现时，很容易出现处理遗漏。依然以“原则二”里的案例来讲解，在并发返还时，即同一时刻有两个返还请求，一个请求返还 2 个 A，另一个请求返还 4 个 A。如果技术上没有并发的时序控制，在处理两个请求时，有可能都判断为可返还并实际进行返还，最终就会出现返还 6 个 A（实际当时只扣减了 5 个）的超返还的场景。具体如下图 4 所示：\n\n\n\n图 4：超返还的场景\n\n对于上述潜在的风险，可以在返还前，对返还所属的扣减 ID 进行加锁来保证串行化操作，规避超卖的风险，架构如下图 5 所示：\n\n\n\n图 5：加锁串行的架构\n\n在扣减 ID 上加锁，会导致该扣减 ID 下的所有返还都串行执行，有一定的性能损耗。但从业务上看，同一个扣减 ID 并发产生返还的场景极低且返还的调用次数也相对较少，从“架构是技术与业务场景的取舍”这个角度来看，暂不需要花费太大的人力去构建一个更加复杂的加锁架构。\n\n原则四：返还要保证幂等\n\n最后，设计的返还接口需要支持幂等性。比如外部系统调用返还接口超时后，因为外部系统不知道是否调用成功，就会再一次重试。如果返还接口不满足幂等性要求，且上次超时实际是执行成功的，则会导致同一个返还号产生两次数据的返还。处理这个问题最简单的做法是：在返还接口增加返还编号（上述表结构中的 return_uuid）字段并由外部系统传入，通过数据库唯一索引来防重，进而实现幂等性，大致的架构如下图 6 所示：\n\n\n\n图 6：幂等的返还架构图\n\n\n总结\n\n在本讲里，讲解了几种扣减方案里都会涉及的任务执行和扣减返还这两个公共话题，不管你的业务场景采用了哪种扣减方案，你都可以参考上述的返还和任务执行方案。\n\n最后，我再给你留两道思考题，一道题是需要你动手操作的，另一道题则是需要你深入思考的。\n\n动手题：上述提供的分布式 Worker 扩容两台机器后，etcd 或 ZK 里的哈希列表值，以及后续任务执行的区间是如何变化的，你可以试着梳理下。\n\n思考题，取消订单后，除了要返还商品的库存数量，还需要做哪些内容的返还呢？\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习 16 |秒杀场景：热点扣减如何保证命中的存储分片不挂？再见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **帆：\n\n> 取消订单后, 还需要终止物流，扣减积分等。\n\n# **4123：\n\n> worker那里每个的区间要如何指定呢？还有对应的查询sql，不应该是id直接位于某个区间吧，应该是执行了hash计算了\n\n#     讲师回复：\n\n>     worker的区间，是根据worker数量，以及当前id的最大值和最小值这个区间来确定的。 第二个问题：直接ID即可，数据库中的任务的ID，并没有经过hash。\n\n# *西：\n\n> 任务库的数据同步到正式库，需要保持顺序行吗？不要顺序性的话，用线程池不间断批量执行也可以吧？如果要顺序性，也只要确保当个商品的数据局部顺序性就好了。可以启动任意多个work实例，然后把数据都路由到对应的内存队列中去，然后消费者线程消费队列中的数据。\n\n#     讲师回复：\n\n>     嗯，不需要保证顺序性。只要保证每条任务都执行成功即可，所有任务都执行成功后，正式库里的数据和缓存里的便是最终一致的\n\n# **生：\n\n> 请问图6的返还id是怎么知道的？\n\n#     讲师回复：\n\n>     是需要返还的业务系统，比如订单系统，在调用返还接口时，自己生产的全局唯一ID。主要作用是代表当次返还，供后续实现幂等性使用。\n\n# **铧：\n\n> 老师，任务是不是可以不用一致性hash，因为单个任务是无状态的。具体过程如下Zk里保存当前在线的所有worker，通过hash确定各自负责的位置，最后任务id模worker数量确定所负责的worker位置，当发生扩缩容时，ZK强一致性保证各个worker上的列表一致更新\n\n#     讲师回复：\n\n>     嗯，这也是一种思路。通过任务来反找对应的worker，但是通过任务来查找worker这个过程，需要一个协调器来驱动，也有工作量。这个工作和一致性hash里的根据区间选择任务比较类似了。\n\n# **烽：\n\n> 老师，针对 worker的扩容，我大概了解。就是 hash环，通过 watch' 机制， 实现 动态的 范围 改变。有个 疑问的是\">Quartz， 那是 专门部署一个 应用， 连接 指定的分库，进行 数据同步吗？多个 worker 并发执行的话，就是 部署 多个 应用？ 那这样，有多个分库的话，那需要 针对 每个 分库，部署 多个 同步应用？ 这样的理解 多吗？\n\n#     讲师回复：\n\n>     是的。准确的说，是部署多个机器，代码是一样的，连接的分库不一样而已。\n\n# **8370：\n\n> 我还是想知道zk任务分段的实现方式怎么做的，课后作业那个\n\n#     讲师回复：\n\n>     建议你动手把这两个worker的扩容步骤写在留言区，自己动手理解效果更佳\n\n# **1442：\n\n> id是递增的，会不会都存在某一个区域内，形成热点问题，最后只有一个work有用，其他的都空闲\n\n#     讲师回复：\n\n>     此时ID就不能使用数据库的自增主键了，可以使用随机算法生成，同时数据库需要增加唯一索引防重\n\n# **龙：\n\n> 使用worker同步到正式库也会有延迟的吧？这个时候业务加库存以db为主再同步redis不会有问题吗？\n\n#     讲师回复：\n\n>     加库存不会有影响，运营添加库存时，数据库里会有字段单独标示。缓存同步时，只会同步运营增加的数据\n\n# 风：\n\n> 取消订单后，还要给用户发信息告知用户返还成功\n\n# **2932：\n\n> 请问下，任务区间任务执行完了除了区间到无穷大的不就没任务了嘛？\n\n#     讲师回复：\n\n>     用无穷大作为任务筛选的截止条件是为了防止出现任务遗漏",normalizedContent:"在本讲里，将会对扣减中涉及的两个公共话题进行讨论，分别是异步任务的设计和扣减中的返还的设计。\n\n在“第 14 讲”和“第 9 讲”里，均使用了异步任务（worker）来做无状态存储到正式业务库的数据同步。但关于具体如何设计异步任务来保证高可用，以及如何设计任务的执行来保障执行的速度，避免产生任务积压，其实并没有过多介绍。\n\n此外，在本模块前三讲介绍的扣减方案里，只涉及扣减的正向流程。对于扣减后可能发生的返还过程中涉及的技术点，我将在本讲进行逐一讲解。\n\n\n实现无主架构的任务\n\n对于无状态存储集群的数据同步任务，最简单的实现方式便是对于每一个分库启动一个自循环的 worker，它的架构如下图 1 所示：\n\n\n\n图 1：自循环的 worker 架构\n\n自循环的 worker 在启动时，会开启一个不跳出的循环或者借助一些开源工具（如 java 中比较出名的 quartz）来保证任务不间断执行。在上述的循环内，会使用类似如下的 sql 来批量获取未执行的任务或未同步的数据并执行同步，在任务执行成功后修改任务状态为“完成”。\n\nselect task_id,task_body,... from t_task where id>lastid and status='未执行' limit 一批数量 order by task_id\n\n\n上述的流程虽然在功能上能够满足需求，但在高可用及性能上还是有一些不足：\n\n 1. 如果任务库中任务特别多，上述单 worker 单库的方式不具备扩展性，随着任务不断变多，会出现任务积压的瓶颈且无法通过扩容解决；\n\n 2. 单库单 worker 的方式存在单点问题，在执行过程中，当 worker 发生故障导致宕机，如果没有监控等机制发现故障，worker 得不到执行，任务就会一直积压。\n\n对于上述两个问题，这里介绍一种可以提升任务执行速度，既具备扩展性、又能保障高可用的任务架构模式，如下图 2 所示：\n\n\n\n图 2：分布式无主架构图\n\n在上述的整体架构里，每个分库对应的 worker 的执行流程都类似，因此在讲解时，我只对一个分库的 worker 进行分析，其余的可以以此类推。\n\n 1. 首先为了提升性能和高可用，单个分库的执行 worker 配置的是多个并发进行执行。\n\n 2. 单个分库配置的多个任务在执行时使用自助协调，协调流程如下。\n\n（1）每个 worker 在启动时，会根据机器的 ip、随机数、当前时间戳等进行组合拼接计算一个唯一串，再在此基础上使用各种哈希工具计算一个无符号整形哈希值。\n\n（2）所有的 worker 会将自己的无符号整形哈希值上报到强一致的 etcd 或 zookeeper 存储集群里。\n\n（3）etcd 等集群具备通知功能（watch）。借助通知功能，所有的 worker 都去订阅某一个分库下的其他 worker 的哈希值，比如一个新的 worker 启动了或者扩容新增了一个新的 worker。\n\n（4）每一个 worker 都会获取到当前分库的所有其他 worker 的哈希值。假设一个分库配置了四个 worker，其中一个 worker 会获取到自己及其他三个 worker 的哈希值，假设为{200，300，500，800}。这四个 worker 的 hash 值便组成了一个环形区间，如下图 3 所示：\n\n\n\n图 3：任务一致性 hash 环\n\n这个环形区间其实就类似一致性 hash，每一个结点都代表一个 worker，这个 worker 负责任务编号在它区间范围内的任务的执行。\n\n（5）有了上述的哈希值列表后，就可以做任务分配了。如果当前 worker 的哈希值为 300，那么当前 worker 就处理任务 id 在区间[200,300)里的值。比如哈希值为 200 的 worker 则执行区间为[800，无穷大)和[0，200)的任务（即任务编号大于等于 800 和处在[0,200)区间内的任务），其他以此类推。区间处在[200，300)的 worker 获取任务的 sql 大致如下：\n\nselect * from task where id>=200 and id<300 and status='待执行' order by id limit 100;\n\n\n通过上述方式，无论是某一台 worker 发生故障还是新扩容一台 worker，通过 etcd 和 zk 的通知机制，所有的其他 worker 都可以立马感知，并更新自己所负责的任务区间。\n\n比如上述介绍的案例里，四个 worker 代表 300 的那一个发生故障，整个哈希值列表就从{200，300，500，800}变成了{200，500，800}，此时负责 500 的 worker 就会执行[200，500)这个区间里的所有任务了，扩容 worker 的流程和上述类似。\n\n最后，在 worker 扩缩容的间隙里，可能存在临界的并发情况，即两个 worker 可能获取到同一条任务。对于此问题，可以从两点着手解决：\n\n 1. 首先，任务执行需要保持幂等，即任务可重复执行，这个可以从业务上着手实现；\n\n 2. 其次，可以给任务增加状态，如上述 sql 里的 status 字段。当某一个 worker 处理到该任务时，可以去修改该任务为处理中。其他 worker 在获取任务时，显式指定状态，只处理为待执行的任务即可。\n\n\n如何设计和实现扣减中的返还\n\n下面将进入另外一个公共话题的讨论，如何设计和实现扣减中的返还。\n\n什么是扣减的返还\n\n扣减的返还指的是在扣减完成之后，业务上发生了一些逆向行为，导致原先已扣减的数据需要恢复以便供后续的扣减请求使用的场景。以在购买商品时的扣减库存举例，其中常见的逆向行为有：\n\n 1. 当客户下单之后，发现某个商品买错了（商品品类买错或是数量填错），客户便会取消订单，此时该订单对应的所有商品的库存数量都需要返还；\n\n 2. 其次，假设客户在收到订单后，发现其中某一个商品质量有问题或者商品的功能和预期有差异，便会发起订单售后流程，比如退、换货。此时该订单下被退货的商品，也需要单独进行库存返还。\n\n返还实现原则\n\n从上述的业务场景里可以看出，相比扣减而言， 返还的并发量比较低，因为下单完成后发生整单取消或者个别商品售后的情况概率较低。比如，对于热点商品或者爆品的抢购带来的扣减并发量是非常大的，但抢到爆品后再取消订单的概率是非常低的。此种场景里，扣减和返还的并发量的差距可能会达到上万倍。\n\n因此，返还在实现上，可以参考商家对已有商品补货的实现，直接基于数据库进行落地。但返还自身也具备一些需要你注意的实现原则，可以总结为以下几点。\n\n原则一：扣减完成才能返还\n\n返还接口在设计时，必须要有扣减号这个字段。因为所有的返还都是依托于扣减的，如果某一个商品的返还没有带上当时的扣减号，后续你很难对当时的情况做出准确判断。\n\n 1. 当前商品是否能够返还。 因为没有扣减号，无法找到当时的扣减明细，无法判断此商品当时是否做了扣减，没有做扣减的商品是无法进行返还的。\n\n 2. 当前返还的商品数量是否超过扣减值。假设外部系统因为异常，传入了一个超过当时扣减值的数量，如果不通过扣减号获取当时的扣减明细，你无法判断此类异常。\n\n原则二：一次扣减可以多次返还\n\n假设你购买的一个订单里包含了 a、b 两件商品，且这两个商品你各买了 5 件，在产生购买订单时即对应一次扣减。后续使用过程中可能会对某件不满的商品发起售后退货申请。极端情况下，可能会发生四次退货的行为，如：第一次，先退 2 个 a；第二次，再退 3 个 b；最后一次退货，一起将剩余的 3 个 a 和 2 个 b 退回。\n\n由上述案例可以看出，一次扣减（即一个订单）在业务上可以对应多次返还。因此，在实现时需要考虑多次返还的场景。返还主要基于数据库实现，下面介绍下支持多次返还的数据库表的设计。\n\ncreate table t_return{\n  id bigint not null comment '自增主健',\n  occupy_uuid bigint not null comment '扣减的id',\n  return_uuid bigint not null comment '返还的唯一id',\n  unique idx_return_uuid (occupy_uuid,return_uuid) comment '返还标识唯一索引'\n}comment '返还记录表';\ncreate table t_return_detail{\n  id bigint not null comment '自增主健',\n  return_uuid bigint not null comment '返还标识',\n  sku_id bigint not null comment '返还的商品id',\n  num bigint not null comment '返还的商品数量',\n  unique idx_return_sku  (return_uuid,sku_id) comment '返还商品唯一标识'\n}comment '返还商品记录表';\n\n\n上述返还记录表实现了一次扣减多次返还的数据记录，返还商品记录表实现了一次返还里有多个商品的场景，也就是上述案例里的最后一次一起退了 a 和 b 两个商品的场景。\n\n原则三：返还的总数量要小于等于原始扣减的数量\n\n看到原则三，你可能觉得这内容不需要单独讲解，因为从业务上来看，这是一个必要条件。但在真正实现时，很容易出现处理遗漏。依然以“原则二”里的案例来讲解，在并发返还时，即同一时刻有两个返还请求，一个请求返还 2 个 a，另一个请求返还 4 个 a。如果技术上没有并发的时序控制，在处理两个请求时，有可能都判断为可返还并实际进行返还，最终就会出现返还 6 个 a（实际当时只扣减了 5 个）的超返还的场景。具体如下图 4 所示：\n\n\n\n图 4：超返还的场景\n\n对于上述潜在的风险，可以在返还前，对返还所属的扣减 id 进行加锁来保证串行化操作，规避超卖的风险，架构如下图 5 所示：\n\n\n\n图 5：加锁串行的架构\n\n在扣减 id 上加锁，会导致该扣减 id 下的所有返还都串行执行，有一定的性能损耗。但从业务上看，同一个扣减 id 并发产生返还的场景极低且返还的调用次数也相对较少，从“架构是技术与业务场景的取舍”这个角度来看，暂不需要花费太大的人力去构建一个更加复杂的加锁架构。\n\n原则四：返还要保证幂等\n\n最后，设计的返还接口需要支持幂等性。比如外部系统调用返还接口超时后，因为外部系统不知道是否调用成功，就会再一次重试。如果返还接口不满足幂等性要求，且上次超时实际是执行成功的，则会导致同一个返还号产生两次数据的返还。处理这个问题最简单的做法是：在返还接口增加返还编号（上述表结构中的 return_uuid）字段并由外部系统传入，通过数据库唯一索引来防重，进而实现幂等性，大致的架构如下图 6 所示：\n\n\n\n图 6：幂等的返还架构图\n\n\n总结\n\n在本讲里，讲解了几种扣减方案里都会涉及的任务执行和扣减返还这两个公共话题，不管你的业务场景采用了哪种扣减方案，你都可以参考上述的返还和任务执行方案。\n\n最后，我再给你留两道思考题，一道题是需要你动手操作的，另一道题则是需要你深入思考的。\n\n动手题：上述提供的分布式 worker 扩容两台机器后，etcd 或 zk 里的哈希列表值，以及后续任务执行的区间是如何变化的，你可以试着梳理下。\n\n思考题，取消订单后，除了要返还商品的库存数量，还需要做哪些内容的返还呢？\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习 16 |秒杀场景：热点扣减如何保证命中的存储分片不挂？再见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **帆：\n\n> 取消订单后, 还需要终止物流，扣减积分等。\n\n# **4123：\n\n> worker那里每个的区间要如何指定呢？还有对应的查询sql，不应该是id直接位于某个区间吧，应该是执行了hash计算了\n\n#     讲师回复：\n\n>     worker的区间，是根据worker数量，以及当前id的最大值和最小值这个区间来确定的。 第二个问题：直接id即可，数据库中的任务的id，并没有经过hash。\n\n# *西：\n\n> 任务库的数据同步到正式库，需要保持顺序行吗？不要顺序性的话，用线程池不间断批量执行也可以吧？如果要顺序性，也只要确保当个商品的数据局部顺序性就好了。可以启动任意多个work实例，然后把数据都路由到对应的内存队列中去，然后消费者线程消费队列中的数据。\n\n#     讲师回复：\n\n>     嗯，不需要保证顺序性。只要保证每条任务都执行成功即可，所有任务都执行成功后，正式库里的数据和缓存里的便是最终一致的\n\n# **生：\n\n> 请问图6的返还id是怎么知道的？\n\n#     讲师回复：\n\n>     是需要返还的业务系统，比如订单系统，在调用返还接口时，自己生产的全局唯一id。主要作用是代表当次返还，供后续实现幂等性使用。\n\n# **铧：\n\n> 老师，任务是不是可以不用一致性hash，因为单个任务是无状态的。具体过程如下zk里保存当前在线的所有worker，通过hash确定各自负责的位置，最后任务id模worker数量确定所负责的worker位置，当发生扩缩容时，zk强一致性保证各个worker上的列表一致更新\n\n#     讲师回复：\n\n>     嗯，这也是一种思路。通过任务来反找对应的worker，但是通过任务来查找worker这个过程，需要一个协调器来驱动，也有工作量。这个工作和一致性hash里的根据区间选择任务比较类似了。\n\n# **烽：\n\n> 老师，针对 worker的扩容，我大概了解。就是 hash环，通过 watch' 机制， 实现 动态的 范围 改变。有个 疑问的是\">quartz， 那是 专门部署一个 应用， 连接 指定的分库，进行 数据同步吗？多个 worker 并发执行的话，就是 部署 多个 应用？ 那这样，有多个分库的话，那需要 针对 每个 分库，部署 多个 同步应用？ 这样的理解 多吗？\n\n#     讲师回复：\n\n>     是的。准确的说，是部署多个机器，代码是一样的，连接的分库不一样而已。\n\n# **8370：\n\n> 我还是想知道zk任务分段的实现方式怎么做的，课后作业那个\n\n#     讲师回复：\n\n>     建议你动手把这两个worker的扩容步骤写在留言区，自己动手理解效果更佳\n\n# **1442：\n\n> id是递增的，会不会都存在某一个区域内，形成热点问题，最后只有一个work有用，其他的都空闲\n\n#     讲师回复：\n\n>     此时id就不能使用数据库的自增主键了，可以使用随机算法生成，同时数据库需要增加唯一索引防重\n\n# **龙：\n\n> 使用worker同步到正式库也会有延迟的吧？这个时候业务加库存以db为主再同步redis不会有问题吗？\n\n#     讲师回复：\n\n>     加库存不会有影响，运营添加库存时，数据库里会有字段单独标示。缓存同步时，只会同步运营增加的数据\n\n# 风：\n\n> 取消订单后，还要给用户发信息告知用户返还成功\n\n# **2932：\n\n> 请问下，任务区间任务执行完了除了区间到无穷大的不就没任务了嘛？\n\n#     讲师回复：\n\n>     用无穷大作为任务筛选的截止条件是为了防止出现任务遗漏",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何设计一锤子买卖的 SDK ？",frontmatter:{title:"如何设计一锤子买卖的 SDK ？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/dde1f0/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/18.%20%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E9%94%A4%E5%AD%90%E4%B9%B0%E5%8D%96%E7%9A%84%C2%A0SDK%C2%A0%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/18. 如何设计一锤子买卖的 SDK ？.md",key:"v-80fba4b0",path:"/pages/dde1f0/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:6688}],headersStr:"精选评论",content:'在前三个模块里，我将微服务根据目的性划分为三大类：读、写与扣减类，并针对每一大类涉及的各项技术问题讲解了应对方案。其实，每一类微服务除了本身业务特点涉及的技术问题外，在纯技术维度也有很多共性问题，比如 SDK 如何设计、服务如何部署等。\n\n本模块将针对上述微服务中的共性技术问题进行深入讲解，首先咱们先来讨论微服务对外的门面——对外接口的 SDK 如何设计。\n\n\n微服务骨架全局观\n\n参考维基百科对于微服务的定义：微服务是指通过技术语言无关的协议（如 HTTP、ProtoBuf等）向外提供业务服务（常以接口的形式）的独立进程。它具有规模小、支持异步消息通信、可独立部署，以及可实现构建和分发自动化的特点。\n\n结合上面的描述和前几模块里讲解过的架构图，便可以得到一个微服务所包含的内容，具体由以下 6 个部分组成：\n\n 1. 对外暴露的接口，由它直接对外提供各类业务服务能力；\n\n 2. 消费其他微服务发送过来的消息；\n\n 3. 可独立部署的微服务的代码；\n\n 4. 微服务持久化数据所依赖的数据库、缓存等存储；\n\n 5. 微服务完成一项业务能力需要依赖的其他微服务，比如提供提单的微服务就需要依赖库存微服务的扣减接口；\n\n 6. 微服务对外也会发送消息，来完成微服务间除接口以外的通信。\n\n基于上述介绍的微服务中涉及的几大组件，可以将它们进行归类，梳理出如下图 1 所示的架构：\n\n\n\n图 1：微服务骨架图\n\n我将上述微服务里提到的 6 个组件分为三大类：\n\n 1. 第一类为对外提供的接口和接收的外部消息，称为上游；\n\n 2. 第二类为微服务本身；\n\n 3. 第三类为微服务依赖的其他组件，称为下游（如存储、其他微服务接口等）。\n\n把这个分类和前几模块里提及的各种架构图对比，你会发现它们都包含上述三大类中的全部或部分内容，比如有的微服务依赖存储，有的依赖其他微服务。\n\n在构建高可用微服务时，可以从上述三大类微服务进行入手。在本讲以及后续的两讲，我将按此思路讲解微服务对上游、自身以及下游（外部依赖）如何进行设计，以便构建一个更加健壮的微服务。\n\n在详细讲解之前，我先剧透下构建微服务这三大类部分的高效法则（技术顺口溜）：防备上游、做好自己、怀疑下游。\n\n关于上述三个口号表达的意思，以及它们的由来，我将在下面三讲慢慢道来。\n\n\n为什么说 SDK 是一锤子买卖\n\n微服务对外是以接口形式提供服务的，当接口开发完成上线，运行一段时间之后，形成的全局架构如下图 2 所示：\n\n\n\n图 2：全局架构图\n\n从上述的架构图里可以看到，接口上线后外部使用方会不断增多。假设上述外部调用方使用的某一个接口里的某一个方法的格式如下：\n\nvoid func(long args1,int args2)\n\n\n此时，因为新的业务需求，你需要对该接口的上述方法的名称和入参数量进行变更。修改后的格式如下：\n\nvoid func_new(long args1,int args2,long args3)\n\n\n如果要改成上述格式，你不能直接升级，因为上述两个格式不兼容。如果你先上线，所有的调用方都会报错，因为接口名和方法个数都变了。上述接口你需要提供灰度过程，大致如下：\n\n 1. 在微服务里同时提供上述两个接口；\n\n 2. 推动所有的外部调用方切换到修改后的接口；\n\n 3. 确认老接口没有调用量后，方可将老接口下线。\n\n从表面来看，只需要三个步骤就可以完成灰度发布过程，但上述第二步操作所需的时间远远超乎你的想象。如果调用方很多，推动所有调用方完成切换的时间短则几周，长则需要半年或者更久，成本非常高。\n\n所以，定义新的接口时需要考虑未来兼容性，如果接口上线后再想要修改，则需要花费较高的成本。因此，包含一个微服务所有对外接口的 SDK 是一锤子买卖，设计时需要考虑清楚。\n\n\n如何设计稳固的 SDK\n\n因为 SDK 一旦上线后，修改成本会非常高。因此在设计 SDK 时，有一些基本原则建议你遵守，减少上线后的维护成本。\n\n第一个原则：增加接口调用鉴权\n\n当微服务对外提供的接口上线后，理论上所有需要此接口功能的使用方都可以随意调用此接口，微服务的提供方不应该设计鉴权等手段限制调用方的使用。\n\n考虑如下场景后，可能你的想法会稍微改变。\n\n 1. 你的接口当前能够支持的最大 QPS 为 1W，而新的调用方会带来每秒 10W 的 QPS。如果这个新的调用方在你还没有完成扩容前，就直接上线，导致的结果可能是你的微服务被瞬间打挂。\n\n 2. 接口的入参有一个 Map 字段，文档未有明确标注，但实际此 Map 字段最大支持 100 个 Key 的设置，如果超过 100 个 Key 就会报错。因为没有调用前的申请审批，新接入的调用方的场景里有可能会传入 150 个 Key，导致的结果是直接报错，进而可能产生线上问题。\n\n 3. SDK 提供了查询和写入的接口，但查询的接口是基于缓存或 ElasticSearch 实现的，是有毫秒级延迟的。而使用方期望写入后，通过查询接口可以立马查询到数据。如果新的接入方没有前置的审批沟通，直接接入后，会发现接口和预期并不一致，可能会使得此次接入变成无用功，导致成本浪费。\n\n通过增加鉴权，所有的调用方在使用前都需要申请接口调用的权限，在申请的过程中，你可以针对上述提到的问题和调用方一一进行确认，防止出现意外的情况。\n\n第二个原则：接口里的入参需要是对象类型，而不是原子类型\n\n原子类型是指非面向对象里的类，在里面不能再定义字段的类型。比如编程语言里的 int、long、float 等类型。\n\n对象类型是指面向对象里的类，比如如下格式：\n\nclass ObjectA{\n  private long args1;\n  private int args2;\n}\n\n\n对象类型的好处是当有新的需求时，可以在其中新增字段，而不是修改接口的签名。\n\n在上一小节介绍了 SDK 是一锤子买卖的示例，如果原始接口定义的是如下格式：\n\nvoid func_new(ObjectA object1)\n\n\n当一个新的需求需要在入参增加 args3 字段时，便可以直接在 ObjectA 这个类里添加，而不是修改接口的签名。这样设计的好处是向后兼容，只有此次新需求需要使用 args3 字段的调用方才需要升级，而不关心此字段的历史调用方都不需要升级，可以节约推动外部所有客户升级的时间。\n\n第三个原则：接口的出入参不要设计为 Map<String,String> 等集合格式\n\n出入参使用了 Map 格式的设计如下：\n\nMap<String,String> func_new(Map<String,String> args);\n\n\n这样设计的好处是特别灵活，当接口在日常的升级中需要新增一个字段，如第二个原则里提到的，新增 args3 字段时，整个接口都不需要做任何更改。因为 Map 的 Key 是动态的，可以随意由外部客户传入的。\n\n虽然这样设计有灵活性的优势，但劣势也比较明显。\n\n 1. 首先，代码非常难维护。因为 Map 里的 Key 是动态的且是文本的，要识别这些 Key，你需要在代码里使用魔术数或者硬编码进行识别。随着时间的流逝，这种方式会导致代码里随处可见的硬编码，代码阅读起来非常不直观。\n\n 2. 其次，Map 的方式是动态，理论上调用方可以往 Map 中插入成百上千的数据。极端情况下，这些数据会把微服务的内存瞬间打挂，对系统的稳定性影响非常大。\n\n第四个原则：入参需要增加条件限制和参数校验\n\n可以分别对读和写接口进行分析。\n\n首先，对于对外暴露的写接口，如果不增加参数校验，可能会导致后续业务无法正常流转。\n\n 1. 外部调用方可以传入超过数据库长度限制的参数，有些数据库会直接拦截，并生成数据超长的错误，而有些数据库可能会默认地将数据截断并存储。\n\n 2. 对于如手机号、邮箱地址等自带业务格式的数据，如果不做格式拦截，将不符合格式的数据写入数据库之后，后续的业务可能无法流转。比如订单里的收货人的手机号码，如果写错，可能导致订单无法正常配送。\n\n其次，对于对外暴露的读接口，如果不增加参数校验，可能会把数据库打挂。\n\n 1. 如果你提供的一个翻页查询功能，常见的查询是使用数据库的"limit startIndex,size order by xx 字段"来进行实现的。如果你不进行参数验证，理论上调用方可以传入值为 100000 的 startIndex。实际上，随着 startIndex 的增大，limit 的性能会非常差，极端情况下，如果量太大，数据库很容易挂。\n\n 2. 如果你提供了如 like 等模糊匹配功能，如果外部传入一些正则表达式里非常耗费性能的语法，也是有可能把数据库打挂的。\n\n第五个原则：写接口需要保证幂等性\n\n考虑一种场景，如果外部客户调用你的接口超时，它能如何处理？\n\n答案是：只能进行重试或者反查，不然别无他法。\n\n因为超时后，调用方并不知道此次写入是否成功，有可能成功，也有可能不成功。通过反查调用方可以确定此次调用是否成功；通过重试，调用方期望你告诉它，上次写入已经成功，无须重试。\n\n上述的反查和重试，技术上称为幂等性。写接口的幂等可以在入参增加一个当次调用的全局唯一标识来实现，同时该唯一标识需要写入数据库中，并在数据库里将该字段设置为唯一索引即可。架构如下图 3 所示：\n\n\n\n图 3：写接口幂等性架构\n\n通过上述的架构，当超时后，调用方对于当次调用再次重试时，如果前一次超时的请求已经写入成功，那么数据库的唯一索引会对重试请求进行拦截，并提示唯一索引冲突，无法写入。此外，如果调用方选择反查而不是重试，它也可以使用唯一标识进行反查，如果上一次超时的请求已写入成功，反查也能够查询到数据。\n\n关于如何生成全局唯一标识，可以参考“08 | 如何使用分库分表支持海量数据的写入”里介绍的几种方法。\n\n第六个原则：接口返回的结果需要统一，可以直接抛出异常或者使用结果包装类（如 RPCResult）\n\n对外的 SDK 会包含一组接口，这些接口对外返回的格式需要保持统一，要么全是正常业务对象+异常的格式，要么全是通过 RPCResult 包装业务对象的格式。这两个格式没有绝对的优劣之分，但统一的格式有利于调用方统一处理，两种格式混合的方式会增加调用方的处理成本。\n\n显式抛出异常的格式如下：\n\nObject func_new(Object args1) throws RPCException\n\n\n其中 RPCException 中需要包含如下字段：\n\nClass RPCException{\n  private boolean success;//是否成功\n  private int code；//如果错误，详细的错误码\n  private String msg;\n}\n\n\n使用 RPCResult 包装类的格式如下：\n\nRPCResult<Object> func_new(Object args1)\n\n\n其中 RPCResult 中需要包含的字段和上述 RPCException 需要包含的格式基本一样，此处不再赘述。\n\n可以看出，这两种方式中包含的错误信息基本一致。唯一的区别是：异常的方式除了会包含上述信息外，也会包含一些报错的堆栈信息，如下格式：\n\n"thread name" prio=0 tid=0x0 nid=0x0 runnable\nat java.net.SocketInputStream.socketRead0(Native Method)\nat java.net.SocketInputStream.socketRead(SocketInputStream.java:116)\nat java.net.SocketInputStream.read(SocketInputStream.java:171)\n\n\n因为 RPCException 里已经包含当次请求是否错误，以及导致错误的详细原因，即其中的错误码（code 字段），此外异常的堆栈信息是为了方便微服务的提供方进行问题排查，调用方无须关心，因此，在实际开发中，你可以显式地把 RPC 中抛出异常的堆栈信息屏蔽掉。现在主流的编程语言均已提供上述功能。\n\n最后，不管是 RPCException 还是 RPCResult 里都包含的错误码，即 code 字段，这样做是为了方便调用方能够快速知道导致出错的具体原因，进而根据不同的原因做相对应的处理。比如在有些情况下：\n\n 1. 调用方传入的参数不合法，如电话号码传入了字符，导致检验不通过；\n\n 2. 微服务提供方依赖的存储故障，如缓存、数据库等宕机等，进而导致当次调用产生错误。\n\n当出现上述两种错误时，对应的处理方式是不一样的。\n\n 1. 如果是传入的参数格式错误了，你需要提示客户修改格式重新输入，而不需要联系此微服务的提供方进行处理。\n\n 2. 如果是上述第二种错误，你需要立马通知微服务提供方，让对方尽快修复故障，因为下游出现错误，你能做的便是尽快通知。\n\n在实际实践中，使用 RPCException 还是 RPCResult 其实都可以，只要保持统一即可。不过不管格式如何，上述两个对象都需要包含上述字段。\n\n第七个原则：返回的数据量必须要分页\n\n如果存在以下格式的接口定义，它表示此接口的功能是返回一批数据：\n\nList<String> func_new(Object args1);\n\n\n如果接口的入参里没有显式地设置当次查询数据的具体数量，假设当次查询条件命中的数据量非常多，那么一次返回的数据量就会非常多，可能达到上千 KB 或者上百 MB 的数据。\n\n上述这个批量获取数据的接口，如果不分页，会存在以下两个问题：\n\n 1. 首先，获取这么大量数据的查询条件，在查询的时候，可能会把数据库或缓存打挂；\n\n 2. 其次，数据量越多，网络传输的时间也越长，直接的体现就是接口的性能非常差。\n\n因此，建议所有对外批量接口都增加分页，而不是一次吐出所有数据。这样既可以提升稳定性、又可以提升性能。\n\n第八个原则：所有的接口需要根据接口能力前置设置限流\n\n最后，即使经过上述的几个步骤后，仍有可能一个通过鉴权审批后的调用方，它的系统在某一个时间点出现故障，或者因为一些热门活动导致流量出现飙升，假如这个突发流量超过你的微服务的最大承载量，即使遵循了上述的第一个原则：调用前的鉴权，也无法限制通过鉴权后的调用方带来的突发流量。\n\n对于可能产生的异常流量，可以使用在“16 | 秒杀场景：热点扣减如何保证命中的存储分片不挂？”里提到的前置限流策略来预防。\n\n\n消息的消费\n\n消息消费指的是你的微服务接受其他微服务发送的消息的场景，在实践中梳理时，此方式的高可用较容易忽略。其实，此种方式和上一小节里的接口方式非常类似，只是消息是异步的形式。它和微服务间的同步调用架构如下图 4 所示：\n\n\n\n图 4：消息异步消费和接口间同步架构的对比\n\n如果消息消费和接口调用相类似，那么上述接口里的一些原则在消息里依然可以复用，可以参考以下内容。\n\n 1. 消息消费需要有前置限流。当消息发送方发送量暴增时，限流可以保证消息消费服务的稳定。\n\n 2. 对于消息消费需要保证幂等，不然当消息出现重试后，会出现业务上的脏数据。\n\n 3. 消息的数据在消费处理时需要进行前置参数检验。如果未做前置参数校验，同样也有可能写入一些不合法的脏数据。\n\n\n总结\n\n在本讲里，梳理了如何设计对外 SDK 里的接口的原则，以及如何设计和它架构上相类似的消息消费的原则。在实际工作中，你可以通过这些原则，构建一个更加高可用和兼具兼容性的系统。\n\n你应该还记得，在本讲的开头我直接给出了对外接口的设计准则：防备上游。通过本讲介绍的 SDK 的几个落地的细节手段便可以看出原因，它们都是对上游调用方进行鉴权、限流、入参前置校验与拦截，这些都属于防备外部调用的具体手段。\n\n因此，防备上游是对外接口设计的基本准则。\n\n最后，留一道思考题。你们团队在微服务对外接口里还有那些准则？可以在留言区和大家一起分享。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **杰：\n\n> mq消息不需要限流吧，mq中间件就是削峰的。还要补充点，接口别设计枚举字段啊，我调下游的接口 一堆的枚举字段',normalizedContent:'在前三个模块里，我将微服务根据目的性划分为三大类：读、写与扣减类，并针对每一大类涉及的各项技术问题讲解了应对方案。其实，每一类微服务除了本身业务特点涉及的技术问题外，在纯技术维度也有很多共性问题，比如 sdk 如何设计、服务如何部署等。\n\n本模块将针对上述微服务中的共性技术问题进行深入讲解，首先咱们先来讨论微服务对外的门面——对外接口的 sdk 如何设计。\n\n\n微服务骨架全局观\n\n参考维基百科对于微服务的定义：微服务是指通过技术语言无关的协议（如 http、protobuf等）向外提供业务服务（常以接口的形式）的独立进程。它具有规模小、支持异步消息通信、可独立部署，以及可实现构建和分发自动化的特点。\n\n结合上面的描述和前几模块里讲解过的架构图，便可以得到一个微服务所包含的内容，具体由以下 6 个部分组成：\n\n 1. 对外暴露的接口，由它直接对外提供各类业务服务能力；\n\n 2. 消费其他微服务发送过来的消息；\n\n 3. 可独立部署的微服务的代码；\n\n 4. 微服务持久化数据所依赖的数据库、缓存等存储；\n\n 5. 微服务完成一项业务能力需要依赖的其他微服务，比如提供提单的微服务就需要依赖库存微服务的扣减接口；\n\n 6. 微服务对外也会发送消息，来完成微服务间除接口以外的通信。\n\n基于上述介绍的微服务中涉及的几大组件，可以将它们进行归类，梳理出如下图 1 所示的架构：\n\n\n\n图 1：微服务骨架图\n\n我将上述微服务里提到的 6 个组件分为三大类：\n\n 1. 第一类为对外提供的接口和接收的外部消息，称为上游；\n\n 2. 第二类为微服务本身；\n\n 3. 第三类为微服务依赖的其他组件，称为下游（如存储、其他微服务接口等）。\n\n把这个分类和前几模块里提及的各种架构图对比，你会发现它们都包含上述三大类中的全部或部分内容，比如有的微服务依赖存储，有的依赖其他微服务。\n\n在构建高可用微服务时，可以从上述三大类微服务进行入手。在本讲以及后续的两讲，我将按此思路讲解微服务对上游、自身以及下游（外部依赖）如何进行设计，以便构建一个更加健壮的微服务。\n\n在详细讲解之前，我先剧透下构建微服务这三大类部分的高效法则（技术顺口溜）：防备上游、做好自己、怀疑下游。\n\n关于上述三个口号表达的意思，以及它们的由来，我将在下面三讲慢慢道来。\n\n\n为什么说 sdk 是一锤子买卖\n\n微服务对外是以接口形式提供服务的，当接口开发完成上线，运行一段时间之后，形成的全局架构如下图 2 所示：\n\n\n\n图 2：全局架构图\n\n从上述的架构图里可以看到，接口上线后外部使用方会不断增多。假设上述外部调用方使用的某一个接口里的某一个方法的格式如下：\n\nvoid func(long args1,int args2)\n\n\n此时，因为新的业务需求，你需要对该接口的上述方法的名称和入参数量进行变更。修改后的格式如下：\n\nvoid func_new(long args1,int args2,long args3)\n\n\n如果要改成上述格式，你不能直接升级，因为上述两个格式不兼容。如果你先上线，所有的调用方都会报错，因为接口名和方法个数都变了。上述接口你需要提供灰度过程，大致如下：\n\n 1. 在微服务里同时提供上述两个接口；\n\n 2. 推动所有的外部调用方切换到修改后的接口；\n\n 3. 确认老接口没有调用量后，方可将老接口下线。\n\n从表面来看，只需要三个步骤就可以完成灰度发布过程，但上述第二步操作所需的时间远远超乎你的想象。如果调用方很多，推动所有调用方完成切换的时间短则几周，长则需要半年或者更久，成本非常高。\n\n所以，定义新的接口时需要考虑未来兼容性，如果接口上线后再想要修改，则需要花费较高的成本。因此，包含一个微服务所有对外接口的 sdk 是一锤子买卖，设计时需要考虑清楚。\n\n\n如何设计稳固的 sdk\n\n因为 sdk 一旦上线后，修改成本会非常高。因此在设计 sdk 时，有一些基本原则建议你遵守，减少上线后的维护成本。\n\n第一个原则：增加接口调用鉴权\n\n当微服务对外提供的接口上线后，理论上所有需要此接口功能的使用方都可以随意调用此接口，微服务的提供方不应该设计鉴权等手段限制调用方的使用。\n\n考虑如下场景后，可能你的想法会稍微改变。\n\n 1. 你的接口当前能够支持的最大 qps 为 1w，而新的调用方会带来每秒 10w 的 qps。如果这个新的调用方在你还没有完成扩容前，就直接上线，导致的结果可能是你的微服务被瞬间打挂。\n\n 2. 接口的入参有一个 map 字段，文档未有明确标注，但实际此 map 字段最大支持 100 个 key 的设置，如果超过 100 个 key 就会报错。因为没有调用前的申请审批，新接入的调用方的场景里有可能会传入 150 个 key，导致的结果是直接报错，进而可能产生线上问题。\n\n 3. sdk 提供了查询和写入的接口，但查询的接口是基于缓存或 elasticsearch 实现的，是有毫秒级延迟的。而使用方期望写入后，通过查询接口可以立马查询到数据。如果新的接入方没有前置的审批沟通，直接接入后，会发现接口和预期并不一致，可能会使得此次接入变成无用功，导致成本浪费。\n\n通过增加鉴权，所有的调用方在使用前都需要申请接口调用的权限，在申请的过程中，你可以针对上述提到的问题和调用方一一进行确认，防止出现意外的情况。\n\n第二个原则：接口里的入参需要是对象类型，而不是原子类型\n\n原子类型是指非面向对象里的类，在里面不能再定义字段的类型。比如编程语言里的 int、long、float 等类型。\n\n对象类型是指面向对象里的类，比如如下格式：\n\nclass objecta{\n  private long args1;\n  private int args2;\n}\n\n\n对象类型的好处是当有新的需求时，可以在其中新增字段，而不是修改接口的签名。\n\n在上一小节介绍了 sdk 是一锤子买卖的示例，如果原始接口定义的是如下格式：\n\nvoid func_new(objecta object1)\n\n\n当一个新的需求需要在入参增加 args3 字段时，便可以直接在 objecta 这个类里添加，而不是修改接口的签名。这样设计的好处是向后兼容，只有此次新需求需要使用 args3 字段的调用方才需要升级，而不关心此字段的历史调用方都不需要升级，可以节约推动外部所有客户升级的时间。\n\n第三个原则：接口的出入参不要设计为 map<string,string> 等集合格式\n\n出入参使用了 map 格式的设计如下：\n\nmap<string,string> func_new(map<string,string> args);\n\n\n这样设计的好处是特别灵活，当接口在日常的升级中需要新增一个字段，如第二个原则里提到的，新增 args3 字段时，整个接口都不需要做任何更改。因为 map 的 key 是动态的，可以随意由外部客户传入的。\n\n虽然这样设计有灵活性的优势，但劣势也比较明显。\n\n 1. 首先，代码非常难维护。因为 map 里的 key 是动态的且是文本的，要识别这些 key，你需要在代码里使用魔术数或者硬编码进行识别。随着时间的流逝，这种方式会导致代码里随处可见的硬编码，代码阅读起来非常不直观。\n\n 2. 其次，map 的方式是动态，理论上调用方可以往 map 中插入成百上千的数据。极端情况下，这些数据会把微服务的内存瞬间打挂，对系统的稳定性影响非常大。\n\n第四个原则：入参需要增加条件限制和参数校验\n\n可以分别对读和写接口进行分析。\n\n首先，对于对外暴露的写接口，如果不增加参数校验，可能会导致后续业务无法正常流转。\n\n 1. 外部调用方可以传入超过数据库长度限制的参数，有些数据库会直接拦截，并生成数据超长的错误，而有些数据库可能会默认地将数据截断并存储。\n\n 2. 对于如手机号、邮箱地址等自带业务格式的数据，如果不做格式拦截，将不符合格式的数据写入数据库之后，后续的业务可能无法流转。比如订单里的收货人的手机号码，如果写错，可能导致订单无法正常配送。\n\n其次，对于对外暴露的读接口，如果不增加参数校验，可能会把数据库打挂。\n\n 1. 如果你提供的一个翻页查询功能，常见的查询是使用数据库的"limit startindex,size order by xx 字段"来进行实现的。如果你不进行参数验证，理论上调用方可以传入值为 100000 的 startindex。实际上，随着 startindex 的增大，limit 的性能会非常差，极端情况下，如果量太大，数据库很容易挂。\n\n 2. 如果你提供了如 like 等模糊匹配功能，如果外部传入一些正则表达式里非常耗费性能的语法，也是有可能把数据库打挂的。\n\n第五个原则：写接口需要保证幂等性\n\n考虑一种场景，如果外部客户调用你的接口超时，它能如何处理？\n\n答案是：只能进行重试或者反查，不然别无他法。\n\n因为超时后，调用方并不知道此次写入是否成功，有可能成功，也有可能不成功。通过反查调用方可以确定此次调用是否成功；通过重试，调用方期望你告诉它，上次写入已经成功，无须重试。\n\n上述的反查和重试，技术上称为幂等性。写接口的幂等可以在入参增加一个当次调用的全局唯一标识来实现，同时该唯一标识需要写入数据库中，并在数据库里将该字段设置为唯一索引即可。架构如下图 3 所示：\n\n\n\n图 3：写接口幂等性架构\n\n通过上述的架构，当超时后，调用方对于当次调用再次重试时，如果前一次超时的请求已经写入成功，那么数据库的唯一索引会对重试请求进行拦截，并提示唯一索引冲突，无法写入。此外，如果调用方选择反查而不是重试，它也可以使用唯一标识进行反查，如果上一次超时的请求已写入成功，反查也能够查询到数据。\n\n关于如何生成全局唯一标识，可以参考“08 | 如何使用分库分表支持海量数据的写入”里介绍的几种方法。\n\n第六个原则：接口返回的结果需要统一，可以直接抛出异常或者使用结果包装类（如 rpcresult）\n\n对外的 sdk 会包含一组接口，这些接口对外返回的格式需要保持统一，要么全是正常业务对象+异常的格式，要么全是通过 rpcresult 包装业务对象的格式。这两个格式没有绝对的优劣之分，但统一的格式有利于调用方统一处理，两种格式混合的方式会增加调用方的处理成本。\n\n显式抛出异常的格式如下：\n\nobject func_new(object args1) throws rpcexception\n\n\n其中 rpcexception 中需要包含如下字段：\n\nclass rpcexception{\n  private boolean success;//是否成功\n  private int code；//如果错误，详细的错误码\n  private string msg;\n}\n\n\n使用 rpcresult 包装类的格式如下：\n\nrpcresult<object> func_new(object args1)\n\n\n其中 rpcresult 中需要包含的字段和上述 rpcexception 需要包含的格式基本一样，此处不再赘述。\n\n可以看出，这两种方式中包含的错误信息基本一致。唯一的区别是：异常的方式除了会包含上述信息外，也会包含一些报错的堆栈信息，如下格式：\n\n"thread name" prio=0 tid=0x0 nid=0x0 runnable\nat java.net.socketinputstream.socketread0(native method)\nat java.net.socketinputstream.socketread(socketinputstream.java:116)\nat java.net.socketinputstream.read(socketinputstream.java:171)\n\n\n因为 rpcexception 里已经包含当次请求是否错误，以及导致错误的详细原因，即其中的错误码（code 字段），此外异常的堆栈信息是为了方便微服务的提供方进行问题排查，调用方无须关心，因此，在实际开发中，你可以显式地把 rpc 中抛出异常的堆栈信息屏蔽掉。现在主流的编程语言均已提供上述功能。\n\n最后，不管是 rpcexception 还是 rpcresult 里都包含的错误码，即 code 字段，这样做是为了方便调用方能够快速知道导致出错的具体原因，进而根据不同的原因做相对应的处理。比如在有些情况下：\n\n 1. 调用方传入的参数不合法，如电话号码传入了字符，导致检验不通过；\n\n 2. 微服务提供方依赖的存储故障，如缓存、数据库等宕机等，进而导致当次调用产生错误。\n\n当出现上述两种错误时，对应的处理方式是不一样的。\n\n 1. 如果是传入的参数格式错误了，你需要提示客户修改格式重新输入，而不需要联系此微服务的提供方进行处理。\n\n 2. 如果是上述第二种错误，你需要立马通知微服务提供方，让对方尽快修复故障，因为下游出现错误，你能做的便是尽快通知。\n\n在实际实践中，使用 rpcexception 还是 rpcresult 其实都可以，只要保持统一即可。不过不管格式如何，上述两个对象都需要包含上述字段。\n\n第七个原则：返回的数据量必须要分页\n\n如果存在以下格式的接口定义，它表示此接口的功能是返回一批数据：\n\nlist<string> func_new(object args1);\n\n\n如果接口的入参里没有显式地设置当次查询数据的具体数量，假设当次查询条件命中的数据量非常多，那么一次返回的数据量就会非常多，可能达到上千 kb 或者上百 mb 的数据。\n\n上述这个批量获取数据的接口，如果不分页，会存在以下两个问题：\n\n 1. 首先，获取这么大量数据的查询条件，在查询的时候，可能会把数据库或缓存打挂；\n\n 2. 其次，数据量越多，网络传输的时间也越长，直接的体现就是接口的性能非常差。\n\n因此，建议所有对外批量接口都增加分页，而不是一次吐出所有数据。这样既可以提升稳定性、又可以提升性能。\n\n第八个原则：所有的接口需要根据接口能力前置设置限流\n\n最后，即使经过上述的几个步骤后，仍有可能一个通过鉴权审批后的调用方，它的系统在某一个时间点出现故障，或者因为一些热门活动导致流量出现飙升，假如这个突发流量超过你的微服务的最大承载量，即使遵循了上述的第一个原则：调用前的鉴权，也无法限制通过鉴权后的调用方带来的突发流量。\n\n对于可能产生的异常流量，可以使用在“16 | 秒杀场景：热点扣减如何保证命中的存储分片不挂？”里提到的前置限流策略来预防。\n\n\n消息的消费\n\n消息消费指的是你的微服务接受其他微服务发送的消息的场景，在实践中梳理时，此方式的高可用较容易忽略。其实，此种方式和上一小节里的接口方式非常类似，只是消息是异步的形式。它和微服务间的同步调用架构如下图 4 所示：\n\n\n\n图 4：消息异步消费和接口间同步架构的对比\n\n如果消息消费和接口调用相类似，那么上述接口里的一些原则在消息里依然可以复用，可以参考以下内容。\n\n 1. 消息消费需要有前置限流。当消息发送方发送量暴增时，限流可以保证消息消费服务的稳定。\n\n 2. 对于消息消费需要保证幂等，不然当消息出现重试后，会出现业务上的脏数据。\n\n 3. 消息的数据在消费处理时需要进行前置参数检验。如果未做前置参数校验，同样也有可能写入一些不合法的脏数据。\n\n\n总结\n\n在本讲里，梳理了如何设计对外 sdk 里的接口的原则，以及如何设计和它架构上相类似的消息消费的原则。在实际工作中，你可以通过这些原则，构建一个更加高可用和兼具兼容性的系统。\n\n你应该还记得，在本讲的开头我直接给出了对外接口的设计准则：防备上游。通过本讲介绍的 sdk 的几个落地的细节手段便可以看出原因，它们都是对上游调用方进行鉴权、限流、入参前置校验与拦截，这些都属于防备外部调用的具体手段。\n\n因此，防备上游是对外接口设计的基本准则。\n\n最后，留一道思考题。你们团队在微服务对外接口里还有那些准则？可以在留言区和大家一起分享。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **杰：\n\n> mq消息不需要限流吧，mq中间件就是削峰的。还要补充点，接口别设计枚举字段啊，我调下游的接口 一堆的枚举字段',charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何进行高保真压测和服务扩容？",frontmatter:{title:"如何进行高保真压测和服务扩容？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/bbb73e/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/22.%20%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%AB%98%E4%BF%9D%E7%9C%9F%E5%8E%8B%E6%B5%8B%E5%92%8C%E6%9C%8D%E5%8A%A1%E6%89%A9%E5%AE%B9%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/22. 如何进行高保真压测和服务扩容？.md",key:"v-cbbdbbf0",path:"/pages/bbb73e/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4825}],headersStr:"精选评论",content:"在后台架构中，压测非常常见，也是必须的工作。它能够帮我们发现微服务架构中的性能瓶颈，以及知道构建的微服务能承载的流量极限值。\n\n但实际情况是，很多压测并不能发现瓶颈点和微服务所能承载的真实流量极限值。一方面是因为压测时使用的是人为构造的压测参数；另一方面有些时候压测场景是经过修改的，和实际的线上场景存在差异。\n\n本讲将会聊聊如何构建一个更贴近真实场景的高保真压测，以及如何根据压测结果进行相对应的容量规划。\n\n\n实施高保真压测\n\n模拟参数进行压测是指人为构建符合被压测接口的一个或一组参数进行压测的方法，它存在以下几个问题。\n\n首先，参数是模拟的，可能和线上真实环境有差异，进而导致压测数据失真。\n\n假设我们要压测使用了本地缓存和Redis 来实现的查询用户基本信息接口，当使用一个或一组用户账号压测此接口时，压测出来的性能和 QPS 会非常好。因为，在压测的前几次调用之后，所有用户信息已经缓存到用户模块的本地缓存里，后续的所有压测请求都可以直接使用本地缓存的数据，因此性能会非常好。\n\n而实际生产环境里，查询用户信息的接口请求里的用户账号并不是相同的，因此请求不会都命中本地缓存，所以它的性能要比压测时低。这就是产生失真的原因。\n\n其次，即使抓取线上环境的一组参数进行压测，也不能完全代替真实环境，仍然存在失真的场景。\n\n而高保真压测，从字面上就可以理解它的要求——使用和生产环境一模一样的用户请求进行压测。这样压测出的微服务的各项性能指标更加可信，因此可以作为限流和容量评估的参考标准。\n\n那如何模拟线上请求呢？只要完成生产环境的流量录制，并把它用来压测即可。其实本讲介绍的高保真压测实现思路和“第 07 讲”基本类似，只是“第 07 讲”把录制的流量用来进行自动化测试回归。\n\n基于生产环境的流量录制压测架构如下图 1所示：\n\n\n\n图 1：基于流量录制的压测架构图\n\n上述架构和“第 07 讲”的自动化回归架构类似，其中包含内置于业务进程里的流量过滤器、日志保存模块、日志下发模块、压测模块以及压测管理端。\n\n 1. 流量过滤器：和“第 07 讲”里的类似，采用 RPC 框架提供的拦截器实现，并将出入参基于 MQ 转发。\n\n 2. 日志保存模块：根据压测设置的配置，进行压测日志的收集。压测的配置包含：当次需要压测的接口和方法、收集日志的时长和数量等。需要注意的是，相比自动化回归，此处日志收集的量应该要多很多，因为通常来说，压测需要的真实用户请求数据会更多一些。因此，日志的存储也可以升级到分布式文件系统里，如 Hadoop。\n\n 3. 日志下发模块：主要功能是将压测的日志下发到压测机器里。为什么不是压测模块远程连接到分布式文件系统读取日志后，再进行压测呢？主要是因为考虑性能。压测希望在短时间内，给被压测应用一个洪峰流量。如果压测模块在发起压测请求前还需要调用其他远程接口获取数据，很大程度上，就实现不了这个洪峰流量了。因此，需要在压测前，将压测日志推送到压测机器上，压测模块可以读取本地磁盘的日志，性能将会有极大提升，可以短时间发起洪峰流量。\n\n 4. 压测模块：主要的功能是读取本地日志并调用被压测机器，并将压测信息写入存储中。\n\n 5. 压测管理端：用来设置各项压测配置以及查看压测结果值。\n\n上述便是一个高保真压测的架构和对应模块的功能。在了解压测模块的架构后，我们再来看看压测时，被测应用需要注意的问题。\n\n首先，最简单的被压测应用架构如下图 2 所示：\n\n\n\n图 2：简单的被压测应用架构图\n\n上述架构是一个非常简单的应用部署图，其中包含一个存储模块（Redis 或数据库）及一台应用机器。压测时，很大概率是应用程序所在的宿主机先达到资源的瓶颈，而不是数据存储先达到瓶颈。这可能是发生了宿主机的CPU 利用率达到 100%，或者是内存使用率满了等情况。此时，获取到的QPS 即为上述架构里单台机器能够承载的最大值。\n\n那么，是不是拿着上述单机的最大 QPS，通过机器数量乘以单机最大 QPS，即可计算出当前线上集群能够承载的最大 QPS 呢？\n\n答案显然是不行的，集群的QPS 并不是随着机器数量增加而线性增加的。主要原因是所有机器所处的网络是共享的、进程间的切换存在性能消耗，以及存储是共享的等因素。\n\n在实际压测中，压测完单台机器后，可以分多次部署 2台，4 台及 8 台应用进行压测，得到对应的压测 QPS。通过不断叠加机器进行压测获得损耗比，为后续线上大规模扩容做数据准备。假如得到 1 台机器的压测 QPS 为 100，2 台的QPS为180，4 台的QPS 为 360，那么可以计为损耗比 10%。假设线上有100 台机器，由此评估线上可以支撑的 QPS为9000。\n\n这里你可能会有疑惑，为什么不直接对线上集群进行压测，而要采用这种按比例的方式？主要有以下两个原因。\n\n 1. 线上机器并不是一成不变的。比如现在线上有100 台机器，在业务不断发展后，可能会不断扩容至 200 台或更多的机器。此时，之前直接按 100 台机器进行压测的数据就没法直接使用了。\n\n 2. 直接对线上环境进行压测会影响线上正常的业务。因为压测的应用集群和存储都是和线上共享的。如果不希望它们互相影响，那么就需要重新部署一套和线上一模一样的环境，这个资源的消耗和部署的成本会非常高。\n\n那是不是通过上述方式压测之后，就可以根据压测值和损耗比进行压测了呢？比如，某一天运营计划做促销活动，预估带来的最大流量 QPS 为 18000/s。按上述数据，是不是扩容到 200 台机器即可了呢？\n\n其实，并不是。此种扩容评估法做了一个假设，即服务所能够承载的 QPS 是和机器绝对线性增长的，只要机器充足，那么能够承载的 QPS 是没有上限的。但服务依赖的存储是有上限的，微服务能够提供的极限 QPS，其实是由它本身和它依赖的存储的最小值共同决定的。\n\n以上述案例的压测值和损耗比为例，架构如下图 3 所示：\n\n\n\n图 3：带存储的架构图\n\n当前图示中部署了 100 台机器，理论上可以支撑 9000/s的QPS，但如果所依赖的存储只能支撑 5000/s的QPS，那么即使部署 100 台或者更多的应用机器，它能够承载的QPS 也不能线性增长，最大只能支撑到 5000/s的QPS。\n\n因此，在实际压测中，除了寻找单机压测值和损耗比之外，还需要对微服务依赖的存储，以及除存储之外其依赖的其他微服务进行压测，寻找微服务压测中的最短板，进而确定微服务能够支撑的最大 QPS。\n\n\n如何做写压测\n\n读服务是无状态的，所以可以直接采用基于录制的压测方案进行压测。但是写服务是有状态的，因为录制的流量是用户在线上产生的真实请求，比如下单请求，如果直接使用录制的流量进行回放，可能会给客户的账号误下一笔订单，在生产环境中是不允许的。如果出现这样的线上操作，就算是线上事故了。\n\n其实，保障相对高保真的写压测有以下两个常见的方式进行应对。\n\n第一种是采用模拟账号进行替换或数据修改进行压测。\n\n假设压测使用的数据是用户私有数据，比如压测发送微博的接口或提交订单的接口，就可以将录制数据里的用户账号替换为测试账号，这样压测时产生的微博和订单都隶属于测试账号，就不会对线上产生影响了。\n\n此外，如果压测使用的数据是公有数据，比如新闻投稿接口，只要新闻投稿了所有用户都可见。对于这种公有数据的接口，可以在业务上进行处理，比如修改录制的新闻投稿数据，将所有的投稿都修改为待审核。这样压测产生的数据都处于待审核状态，在线上是不可见的，所以此种压测对线上不会产生影响。\n\n第二种方式是采用压测数据打标 + 影子库的方式进行特殊处理，架构如下图 4 所示：\n\n\n\n图 4：数据打标+影子库压测架构\n\n上述架构里的数据打标和第一种里的数据修改是有区别的，它不会更改原始录制的任何数据，只是在压测的时候，对于压测模块发起的任何请求都增加一个标记，标记它为压测请求。\n\n在业务应用模块识别此标识，如果识别出压测请求，则将压测请求的数据全部写入上图 4 中的影子库中。影子库中的数据不会暴露给外部查询以及用于进一步的生产，因此不会产生线上影响。对于微服务依赖的其他微服务提供的写接口，可以在压测时继续传递标识，被依赖的微服务也识别此标识，将压测数据写入影子库即可。通过标识传递+影子库的方式，即构建了一个线上写压测环境。\n\n\n基于压测数据进行行动\n\n压测过程中有两方面重要的数据，一个是压测过程中的各项指标数据，另一个是压测的结果即服务所能够支撑的QPS。\n\n压测过程的各项指标数据有：压测时机器的CPU 利用率的变化、内存的变化、进程里各线程的CPU 利用率、微服务依赖的存储的CPU利用率、内存使用率等。压测过程中监控这些数据是为了发现系统瓶颈点，并快速优化，进而提升微服务能够支撑的QPS。这里简单列举一些可能存在的瓶颈点。\n\n 1. 如果压测过程中，发现被压测应用的CPU 都被某一个或某一类线程消耗，同时通过堆栈信息，确定这个或这类线程的所有 CPU 消耗都集中在一个方法里。那么极大可能，这个方法里有十分消耗 CPU 的代码，可能是一个大对象的JSON 序列化或者是一段可以优化的多层嵌套 for 循环。\n\n 2. 再比如，在只部署了一台应用机器和对应存储（MySQL）的情况下。理论上压测时，应该是单台应用机器的CPU 先达到 100%。但如果在实际压测中，是 MySQL 所在机器的CPU 先打满，那么很大概率上是被压测接口请求数据库的 SQL 是一个慢 SQL。引发这种情况的原因可能是未命中索引、一次请求的数量太多、存在 SQL 的深翻页等。此时，就需要对这些 SQL 进行调优，以便进一步提升微服务的性能。\n\n压测的极限 QPS 除了让我们了解了微服务的最大支撑能力之外，另外一个作用就是参考此值来设置微服务的限流阈值。流量达到压测时的QPS 时，微服务的各项指标如 CPU、内存等，均已达到极限，为了保证微服务的稳定，需要将进入微服务的流量限制在压测的 QPS 之下。根据压测值设置限流时，有以下几点需要注意。\n\n 1. 上述案例中，单机压测的 QPS为100/s。但限流时，不能直接设置单机限流阈值为 100/s，因为达到此QPS 时，机器的CPU 已经达到 100% 了。正常情况下，线上机器的 CPU利用率维持在 40%~50% 是安全的，再升高就需要扩容了。因此限流时，可以将压测的 QPS 适当打折，设置压测为 QPS*40%。\n\n 2. 如果微服务提供不止一个接口，那么上述的限流阈值就还需要打折。比如微服务对外提供了两个接口，那么最简单的打折办法为：单机 QPS*40%*50%。\n\n 3. 在前述的讲解中曾提到过，微服务能够支撑的 QPS是有上限的，并不是随着机器数量无限增长的。因此，除了设置单机级别的限流之外，还需要设置微服务集群维度的限流阈值。限流阈值的设置方法可以参考上述第 1、2 点。\n\n\n总结\n\n在这一讲里，讲解了如何构建高保真的压测环境。同时，针对写服务，详细介绍了如何通过优化升级来解决“写服务有状态”这一问题。\n\n此外，压测过程中的数据和压测结果不只是用来记录，还可以用于分析，寻找可以优化的瓶颈点。其次，需要根据压测极限值，设置微服务的限流阈值，防止流量超过压测极限值，进而将机器打挂，导致服务完全不可用。\n\n最后，再给你留一道讨论题，你当前所在团队的压测是如何开展的？欢迎留言区留言，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习22 | 重构：系统升级，如何实现不停服的数据迁移和用户切量？\n\n----------------------------------------\n\n\n# 精选评论\n\n# 风：\n\n> 采用 RPC 框架提供的拦截器实现，并将出入参基于 MQ 转发这里用拦截器会不会影响接口性能？\n\n#     讲师回复：\n\n>     发送MQ并不是同步发送，是异步发送的。还有可以使用的方案有，将拦截的数据放到本地磁盘日志里，新开启一个进程进行异步收集\n\n# **4123：\n\n> 影子库，需要数据层额外开发支持\n\n# **良：\n\n> 请问进行写压测前，是不是需要先把正式库的数据同步到影子库，然后再开始转发请求日志到压测服务，这样可以保证写请求能正常运行，否则有可能某些请求无法通过数据校验\n\n#     讲师回复：\n\n>     嗯，如果业务上有这个需求，也可以。",normalizedContent:"在后台架构中，压测非常常见，也是必须的工作。它能够帮我们发现微服务架构中的性能瓶颈，以及知道构建的微服务能承载的流量极限值。\n\n但实际情况是，很多压测并不能发现瓶颈点和微服务所能承载的真实流量极限值。一方面是因为压测时使用的是人为构造的压测参数；另一方面有些时候压测场景是经过修改的，和实际的线上场景存在差异。\n\n本讲将会聊聊如何构建一个更贴近真实场景的高保真压测，以及如何根据压测结果进行相对应的容量规划。\n\n\n实施高保真压测\n\n模拟参数进行压测是指人为构建符合被压测接口的一个或一组参数进行压测的方法，它存在以下几个问题。\n\n首先，参数是模拟的，可能和线上真实环境有差异，进而导致压测数据失真。\n\n假设我们要压测使用了本地缓存和redis 来实现的查询用户基本信息接口，当使用一个或一组用户账号压测此接口时，压测出来的性能和 qps 会非常好。因为，在压测的前几次调用之后，所有用户信息已经缓存到用户模块的本地缓存里，后续的所有压测请求都可以直接使用本地缓存的数据，因此性能会非常好。\n\n而实际生产环境里，查询用户信息的接口请求里的用户账号并不是相同的，因此请求不会都命中本地缓存，所以它的性能要比压测时低。这就是产生失真的原因。\n\n其次，即使抓取线上环境的一组参数进行压测，也不能完全代替真实环境，仍然存在失真的场景。\n\n而高保真压测，从字面上就可以理解它的要求——使用和生产环境一模一样的用户请求进行压测。这样压测出的微服务的各项性能指标更加可信，因此可以作为限流和容量评估的参考标准。\n\n那如何模拟线上请求呢？只要完成生产环境的流量录制，并把它用来压测即可。其实本讲介绍的高保真压测实现思路和“第 07 讲”基本类似，只是“第 07 讲”把录制的流量用来进行自动化测试回归。\n\n基于生产环境的流量录制压测架构如下图 1所示：\n\n\n\n图 1：基于流量录制的压测架构图\n\n上述架构和“第 07 讲”的自动化回归架构类似，其中包含内置于业务进程里的流量过滤器、日志保存模块、日志下发模块、压测模块以及压测管理端。\n\n 1. 流量过滤器：和“第 07 讲”里的类似，采用 rpc 框架提供的拦截器实现，并将出入参基于 mq 转发。\n\n 2. 日志保存模块：根据压测设置的配置，进行压测日志的收集。压测的配置包含：当次需要压测的接口和方法、收集日志的时长和数量等。需要注意的是，相比自动化回归，此处日志收集的量应该要多很多，因为通常来说，压测需要的真实用户请求数据会更多一些。因此，日志的存储也可以升级到分布式文件系统里，如 hadoop。\n\n 3. 日志下发模块：主要功能是将压测的日志下发到压测机器里。为什么不是压测模块远程连接到分布式文件系统读取日志后，再进行压测呢？主要是因为考虑性能。压测希望在短时间内，给被压测应用一个洪峰流量。如果压测模块在发起压测请求前还需要调用其他远程接口获取数据，很大程度上，就实现不了这个洪峰流量了。因此，需要在压测前，将压测日志推送到压测机器上，压测模块可以读取本地磁盘的日志，性能将会有极大提升，可以短时间发起洪峰流量。\n\n 4. 压测模块：主要的功能是读取本地日志并调用被压测机器，并将压测信息写入存储中。\n\n 5. 压测管理端：用来设置各项压测配置以及查看压测结果值。\n\n上述便是一个高保真压测的架构和对应模块的功能。在了解压测模块的架构后，我们再来看看压测时，被测应用需要注意的问题。\n\n首先，最简单的被压测应用架构如下图 2 所示：\n\n\n\n图 2：简单的被压测应用架构图\n\n上述架构是一个非常简单的应用部署图，其中包含一个存储模块（redis 或数据库）及一台应用机器。压测时，很大概率是应用程序所在的宿主机先达到资源的瓶颈，而不是数据存储先达到瓶颈。这可能是发生了宿主机的cpu 利用率达到 100%，或者是内存使用率满了等情况。此时，获取到的qps 即为上述架构里单台机器能够承载的最大值。\n\n那么，是不是拿着上述单机的最大 qps，通过机器数量乘以单机最大 qps，即可计算出当前线上集群能够承载的最大 qps 呢？\n\n答案显然是不行的，集群的qps 并不是随着机器数量增加而线性增加的。主要原因是所有机器所处的网络是共享的、进程间的切换存在性能消耗，以及存储是共享的等因素。\n\n在实际压测中，压测完单台机器后，可以分多次部署 2台，4 台及 8 台应用进行压测，得到对应的压测 qps。通过不断叠加机器进行压测获得损耗比，为后续线上大规模扩容做数据准备。假如得到 1 台机器的压测 qps 为 100，2 台的qps为180，4 台的qps 为 360，那么可以计为损耗比 10%。假设线上有100 台机器，由此评估线上可以支撑的 qps为9000。\n\n这里你可能会有疑惑，为什么不直接对线上集群进行压测，而要采用这种按比例的方式？主要有以下两个原因。\n\n 1. 线上机器并不是一成不变的。比如现在线上有100 台机器，在业务不断发展后，可能会不断扩容至 200 台或更多的机器。此时，之前直接按 100 台机器进行压测的数据就没法直接使用了。\n\n 2. 直接对线上环境进行压测会影响线上正常的业务。因为压测的应用集群和存储都是和线上共享的。如果不希望它们互相影响，那么就需要重新部署一套和线上一模一样的环境，这个资源的消耗和部署的成本会非常高。\n\n那是不是通过上述方式压测之后，就可以根据压测值和损耗比进行压测了呢？比如，某一天运营计划做促销活动，预估带来的最大流量 qps 为 18000/s。按上述数据，是不是扩容到 200 台机器即可了呢？\n\n其实，并不是。此种扩容评估法做了一个假设，即服务所能够承载的 qps 是和机器绝对线性增长的，只要机器充足，那么能够承载的 qps 是没有上限的。但服务依赖的存储是有上限的，微服务能够提供的极限 qps，其实是由它本身和它依赖的存储的最小值共同决定的。\n\n以上述案例的压测值和损耗比为例，架构如下图 3 所示：\n\n\n\n图 3：带存储的架构图\n\n当前图示中部署了 100 台机器，理论上可以支撑 9000/s的qps，但如果所依赖的存储只能支撑 5000/s的qps，那么即使部署 100 台或者更多的应用机器，它能够承载的qps 也不能线性增长，最大只能支撑到 5000/s的qps。\n\n因此，在实际压测中，除了寻找单机压测值和损耗比之外，还需要对微服务依赖的存储，以及除存储之外其依赖的其他微服务进行压测，寻找微服务压测中的最短板，进而确定微服务能够支撑的最大 qps。\n\n\n如何做写压测\n\n读服务是无状态的，所以可以直接采用基于录制的压测方案进行压测。但是写服务是有状态的，因为录制的流量是用户在线上产生的真实请求，比如下单请求，如果直接使用录制的流量进行回放，可能会给客户的账号误下一笔订单，在生产环境中是不允许的。如果出现这样的线上操作，就算是线上事故了。\n\n其实，保障相对高保真的写压测有以下两个常见的方式进行应对。\n\n第一种是采用模拟账号进行替换或数据修改进行压测。\n\n假设压测使用的数据是用户私有数据，比如压测发送微博的接口或提交订单的接口，就可以将录制数据里的用户账号替换为测试账号，这样压测时产生的微博和订单都隶属于测试账号，就不会对线上产生影响了。\n\n此外，如果压测使用的数据是公有数据，比如新闻投稿接口，只要新闻投稿了所有用户都可见。对于这种公有数据的接口，可以在业务上进行处理，比如修改录制的新闻投稿数据，将所有的投稿都修改为待审核。这样压测产生的数据都处于待审核状态，在线上是不可见的，所以此种压测对线上不会产生影响。\n\n第二种方式是采用压测数据打标 + 影子库的方式进行特殊处理，架构如下图 4 所示：\n\n\n\n图 4：数据打标+影子库压测架构\n\n上述架构里的数据打标和第一种里的数据修改是有区别的，它不会更改原始录制的任何数据，只是在压测的时候，对于压测模块发起的任何请求都增加一个标记，标记它为压测请求。\n\n在业务应用模块识别此标识，如果识别出压测请求，则将压测请求的数据全部写入上图 4 中的影子库中。影子库中的数据不会暴露给外部查询以及用于进一步的生产，因此不会产生线上影响。对于微服务依赖的其他微服务提供的写接口，可以在压测时继续传递标识，被依赖的微服务也识别此标识，将压测数据写入影子库即可。通过标识传递+影子库的方式，即构建了一个线上写压测环境。\n\n\n基于压测数据进行行动\n\n压测过程中有两方面重要的数据，一个是压测过程中的各项指标数据，另一个是压测的结果即服务所能够支撑的qps。\n\n压测过程的各项指标数据有：压测时机器的cpu 利用率的变化、内存的变化、进程里各线程的cpu 利用率、微服务依赖的存储的cpu利用率、内存使用率等。压测过程中监控这些数据是为了发现系统瓶颈点，并快速优化，进而提升微服务能够支撑的qps。这里简单列举一些可能存在的瓶颈点。\n\n 1. 如果压测过程中，发现被压测应用的cpu 都被某一个或某一类线程消耗，同时通过堆栈信息，确定这个或这类线程的所有 cpu 消耗都集中在一个方法里。那么极大可能，这个方法里有十分消耗 cpu 的代码，可能是一个大对象的json 序列化或者是一段可以优化的多层嵌套 for 循环。\n\n 2. 再比如，在只部署了一台应用机器和对应存储（mysql）的情况下。理论上压测时，应该是单台应用机器的cpu 先达到 100%。但如果在实际压测中，是 mysql 所在机器的cpu 先打满，那么很大概率上是被压测接口请求数据库的 sql 是一个慢 sql。引发这种情况的原因可能是未命中索引、一次请求的数量太多、存在 sql 的深翻页等。此时，就需要对这些 sql 进行调优，以便进一步提升微服务的性能。\n\n压测的极限 qps 除了让我们了解了微服务的最大支撑能力之外，另外一个作用就是参考此值来设置微服务的限流阈值。流量达到压测时的qps 时，微服务的各项指标如 cpu、内存等，均已达到极限，为了保证微服务的稳定，需要将进入微服务的流量限制在压测的 qps 之下。根据压测值设置限流时，有以下几点需要注意。\n\n 1. 上述案例中，单机压测的 qps为100/s。但限流时，不能直接设置单机限流阈值为 100/s，因为达到此qps 时，机器的cpu 已经达到 100% 了。正常情况下，线上机器的 cpu利用率维持在 40%~50% 是安全的，再升高就需要扩容了。因此限流时，可以将压测的 qps 适当打折，设置压测为 qps*40%。\n\n 2. 如果微服务提供不止一个接口，那么上述的限流阈值就还需要打折。比如微服务对外提供了两个接口，那么最简单的打折办法为：单机 qps*40%*50%。\n\n 3. 在前述的讲解中曾提到过，微服务能够支撑的 qps是有上限的，并不是随着机器数量无限增长的。因此，除了设置单机级别的限流之外，还需要设置微服务集群维度的限流阈值。限流阈值的设置方法可以参考上述第 1、2 点。\n\n\n总结\n\n在这一讲里，讲解了如何构建高保真的压测环境。同时，针对写服务，详细介绍了如何通过优化升级来解决“写服务有状态”这一问题。\n\n此外，压测过程中的数据和压测结果不只是用来记录，还可以用于分析，寻找可以优化的瓶颈点。其次，需要根据压测极限值，设置微服务的限流阈值，防止流量超过压测极限值，进而将机器打挂，导致服务完全不可用。\n\n最后，再给你留一道讨论题，你当前所在团队的压测是如何开展的？欢迎留言区留言，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习22 | 重构：系统升级，如何实现不停服的数据迁移和用户切量？\n\n----------------------------------------\n\n\n# 精选评论\n\n# 风：\n\n> 采用 rpc 框架提供的拦截器实现，并将出入参基于 mq 转发这里用拦截器会不会影响接口性能？\n\n#     讲师回复：\n\n>     发送mq并不是同步发送，是异步发送的。还有可以使用的方案有，将拦截的数据放到本地磁盘日志里，新开启一个进程进行异步收集\n\n# **4123：\n\n> 影子库，需要数据层额外开发支持\n\n# **良：\n\n> 请问进行写压测前，是不是需要先把正式库的数据同步到影子库，然后再开始转发请求日志到压测服务，这样可以保证写请求能正常运行，否则有可能某些请求无法通过数据校验\n\n#     讲师回复：\n\n>     嗯，如果业务上有这个需求，也可以。",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何做好微服务间依赖的治理和分布式事务？",frontmatter:{title:"如何做好微服务间依赖的治理和分布式事务？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/50b8d5/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/20.%20%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%B4%E4%BE%9D%E8%B5%96%E7%9A%84%E6%B2%BB%E7%90%86%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/20. 如何做好微服务间依赖的治理和分布式事务？.md",key:"v-341bddf7",path:"/pages/50b8d5/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4831}],headersStr:"精选评论",content:'在前两讲里，分别从微服务的对外接口、消息消费以及微服务自身的相关编码规范上阐述了“防备上游、做好自己”这两个准则如何落地。\n\n在本讲里，将会讲解为什么要“怀疑下游”，以及有哪些手段可以落地此条准则。此外，还会介绍在进行微服务拆分后，调用外部依赖会产生的分布式事务、消息发送等问题的应对方案。\n\n\n为什么要怀疑下游\n\n首先我们先来回顾一下“第 17 讲”里介绍过的抽象的微服务架构，如下图 1 所示：\n\n\n\n图 1：抽象的架构示意图\n\n从图一中可以看到，微服务会依赖很多其他微服务提供的接口、数据库、缓存，以及消息中间件等，这些接口及存储可能会因为代码 Bug、网络、磁盘故障、上线操作失误等因素引发线上问题。此时，由于依赖不可用，就会导致微服务对外提供的服务受到影响，出现接口可用率下降或者直接宕机的情况。\n\n为了防止上述情况的发生，在构建微服务时，就需要预先考虑微服务所依赖的各项“下游”出现故障时的应对方案。假设下游出现故障及预设计对应的方案的过程，便是在实践“怀疑下游”。\n\n\n如何落地\n\n下面将基于下图 2 所展示的三大类依赖：其他微服务、数据库、消息中间件，逐一介绍可能引发的故障的应对方案和最佳使用准则。\n\n#后期同学美化下图，注意将“其它”改为“其他”\n\n\n\n图 2：包含三大类依赖的微服务图\n\n对其他微服务的依赖\n\n在采用了微服务的架构后，各个模块间均通过 RPC 的方式进行依赖，有些模块在完成一项业务流程时可能会依赖多达几十、上百个外部微服务。比如在完成下单的流程里，就需要依赖用户、商品、促销、价格、优惠券等各个微服务提供的接口，这些被依赖的微服务的稳定性直接影响了用户是否能够成功下单。因此，需要对微服务依赖的其他微服务接口进行可用性的治理。\n\n在“第 10 讲”里，已经从写服务的角度介绍了通过依赖后置、依赖并行化、设置超时和重试、服务降级等手段，来对它的依赖进行治理，进而保障写服务的高可用。其实这些手段依然可以用在读服务里，此处便不再赘述，你可以回到“第 10 讲”进行复习。\n\n下面将重点讲解在采用微服务架构后，如何应对随之而来的分布式事务。这里以提单作为案例，介绍分布式事务的实际场景。在微服务架构下，订单和库存是两个单独的微服务，它们之间的架构如下图 3 所示：\n\n\n\n图 3：订单和库存组成的微服务架构图\n\n在提单时，订单模块需要调用库存模块进行商品的扣减，以便判断用户购买的商品是否有货。订单调用库存的扣减接口会有以下几种情况发生。\n\n 1. 调用库存接口返回成功且库存数量充足，订单模块便将此用户订单保存至数据库，并返回用户下单成功消息。\n\n 2. 调用库存接口返回成功且库存数量充足，但订单模块将此用户订单保存至数据库时出错并进行数据库回滚，同时订单模块返回用户下单失败。\n\n 3. 调用库存接口超时，订单模块判断此次调用库存接口失败，返回用户下单失败。\n\n 4. ...\n\n在微服务化之后，上述订单模块和库存模块的交互会产生非常多的可能性场景。此处我只罗列了几个，你可以继续向后梳理。其中，上述的第 2 、3 点描述的场景里就存在分布式事务问题。在第 2 点里，因为订单模块本地的数据库事务回滚了，但调用库存接口产生的已扣减的商品数量并没有回滚，此时就会导致库存数据少于实际的数据。\n\n有一些基于 TCC 和 Saga 的成熟基础框架可以解决上述分布式事务问题，但理解和接入成本较高。此处介绍一种本质上和 TCC、Saga 理论相类似，但无须借助第三方框架的简单、易落地的解决方案。理解此方案也有助于你理解 TCC 和 Saga 的思想。\n\n此方案的架构图如下图 4 所示，图中订单模块的数据库里除了订单原有的表之外，会增加一张任务表。\n\n\n\n图 4：基于本地数据库的分布式事务架构\n\n基于上述的架构，下单流程变更如下。\n\n1. 在接收到下单请求后，在调用任何外部 RPC 前，先将此订单的相关信息，如此次用户购买的商品、商品数量、用户账号、此次订单的编号等信息写入新增的任务表中。\n\n2. 调用库存的接口进行商品数量的扣减，并根据库存模块的返回值更新订单模块的数据库。这一步，又细分为以下几种场景情况：\n\n（1）如果调用库存接口成功，则在同一个事务中，将订单信息写入订单库中，同时更新第一步写入任务的状态为“已成功”；\n\n（2）如果调用库存接口明确返回失败，则直接更新订单库中的任务状态为“待回滚”，并返回用户下单失败；\n\n（3）如果调用库存接口超时，则直接更新订单库中的任务状态为“待回滚”，并返回用户下单失败；\n\n（4）无论调用库存接口是成功还是失败，只要在更新本地订单库时失败，就返回用户下单失败，同时任务库的状态保留为“初始化”。\n\n上述介绍的是用户下单的同步流程，完成这两个步骤后，用户下单便结束了。我们再来看看下单后的异步情况。\n\n3. 下单完成后，异步 Worker 功能是扫描订单库新增的任务表，获取状态为“待回滚”，任务创建时间距扫描时间点超过一定时间区间（如 5 分钟）仍为“初始化”状态的任务。获取到这些任务之后，会基于任务表中的商品和对应的数量信息，异步地调用库存接口进行商品数据的返还。\n\n通过上述方式，能够将各种失败场景里漏返回的商品数量进行返还，保证库存数量的最终一致性，完成分布式事务。上述保障数据最终一致性主要是依赖任务表和订单表在同一个数据库里，可以通过本地事务来保障订单表数据写入成功后，任务表里的任务状态绝对能够更新为“已成功”。而当提单失败后，任务表的状态为“非成功”状态，再通过类似 TCC 和 Saga 的异步补偿性 Worker 来进行业务回滚即可保证最终最一致性。\n\n在发起分布式事务的业务模块的数据库里创建补偿性任务，基本上可以复用在其他存在分布式事务的场景里。如果你不希望引入更加复杂的 TCC 和 Saga 框架，可以尝试利用此方式来解决架构微服务化之后带来的分布式事务的问题。\n\n对数据库的依赖\n\n除了对其他微服务的依赖，微服务中最常见的便是对数据库的依赖。在使用时，需要遵守以下几点基本原则。\n\n原则一：数据库一定要配置从库，且从库部署的机房需要与主库不同，从而保障数据库具备跨机房灾备的能力。\n\n此外，对于测试环境的数据库依然要配置主从复制，防止某天测试环境的数据库磁盘损坏，需要耗费大量人力恢复测试环境。\n\n原则二：在能够完成功能的前提下，使用的 SQL 要尽可能简单。\n\n因为 SQL 和代码一样，除了完成功能之外，最重要的是清晰简单地表达其自身含义，以供后续研发人员进行维护。我曾经在线上遇到过为了不使用唯一索引，纯使用 SQL 来完成防重的语句，它包含了四层 insert、select、exists、select 的语法嵌套。这一语句因为无法调试（Debug），导致后续一个需求的上线时间延期了 2 天，最终还是痛定思痛地进行了重构。\n\n原则三：在业务需求不断更新迭代的场景里，最好不要使用外键。\n\n大学时期的数据库理论课曾提到，需要使用外键来校验数据完整性。比如，在 A、B 表之间有了外键约束之后，可以设置外键级联删除，当 A 表中的某条数据删除后，自动级联地删除 B 表中的数据。此方式表面上可以极大地简化代码操作，但实则隐藏着巨大风险。因为现今互联网需求的迭代速度非常快，上个月可能 A、B 表中还存在外键关系，到了下个月又因为需求不存在了，或者需要更多字段组合才能形成外键关系。\n\n此外，外键关系是隐藏在数据库的建表语句里的，在新需求开发时，很容易被遗忘、清除或者修改为新的外键关系。在新需求上线后，也可能因此疏漏导致线上数据被误删，进而引发线上问题。\n\n原则四：表结构中尽可能不要创建一个长度为上千或上万的 varchar 类型字段，且用其来存储类似 JSON 格式的数据，因为这会带来并发更新的问题。\n\n假设创建了一个长度一千的 varchar 字段，它存储了如下的信息：\n\n{"fieldA":"valueA","fieldB":"valueB"}\n\n\n此时假设有两个请求同时对此字段进行修改，A 线程将此字段的值读取后修改了其中 filedA 的值，具体修改如下：\n\n{"fieldA":"valueAA",:"fieldB":"valueB"}\n\n\n而 B 线程将此字段的值读取后修改了其中 fieldB 的值，具体修改如下：\n\n{"fieldA":"valueA",:"fieldB":"valueBB"}\n\n\n那么，最终数据库中此字段的值会变成什么呢？\n\n答案是不一定。这取决于 A、B 这两个线程的最终修改顺序。但不管顺序如何，最终的结果都是错误的。因为 A、B 两个线程各修改了JSON 内容的其中一个字段，最终期望的结果是 fieldA、fieldB 两个字段都得到更新，但实际只会有一个字段得到更新。\n\n因此，在创建表结构的时候，不建议设置此类型的字段。如果期望这两个字段都得到更新，你需要借助并发锁来实现，但这也增加了代码实现的难度。\n\n对消息中间件的依赖\n\n在微服务的架构里，微服务间的通信除了接口调用的方式外，当前最常见的方式便是基于消息中间件（如 RabbitMQ 和 Kafka）的消息通信。同样，在使用消息中间件时，仍有一些基础原则需要你尽可能地遵守。\n\n原则一：数据要先写入数据库或缓存后，再发送消息通知。\n\n因为很多消息接收方在接收到消息通知后，会调用发送消息的微服务的接口进行数据反查，以便获取更多信息来做下一步业务的流转。\n\n假设订单模块在判断用户的下单请求的库存能够满足后， 便向外发送下单成功的消息。此时，如果物流系统监听了此消息，就会在获取到下单成功的通知后，第一时间去反查订单的接口，以便获取更多订单相关信息（如用户期望的收货时间、用户是否为会员等）来辅助判断何时发货。在极端情况下，可能会因为订单模块的数据还未写入数据库，导致反查不到数据，进而影响业务的正常流转。\n\n原则二：发送的消息要有版本号。\n\n有些消息中间件为了提升消息消费的吞吐量，支持乱序消费。但如果发送的消息没有数据变更版本号，消息消费方会因此无法判断数据是否乱序，进而有可能导致数据错乱，产生线上问题。\n\n原则三：消息的数据要尽可能全，进而减少消息消费方的反查。\n\n微服务间使用消息通信的目的就是解耦，但如果消息中包含的信息量太少，消息消费方就无法基于其中的信息处理业务，此时消息消费方便需要反查发送方的接口，来获取更多信息，但这样处理就达不到解耦的目的了，你可以参考第一点物流系统的案例。因此，在可能的情况下，建议发送尽可能全的信息。\n\n原则四：消息中需要包含标记某个字段是否变更的标识。\n\n根据原则三，你可能会发送包含较多字段的消息，有些字段可能在当次消息中并未发生数据变更。如果没有标记字段是否变更，可能会产生无效通知的情况。\n\n比如一个消息包含两个字段（如为 A、B），而某一个消息的接收方（如用户模块）只关心 A 字段是否变更。如果没有标记变更字段，那么 B 字段变更后，消息发送方也会发送消息，这会导致“用户模块”误以为 A 字段发生了变更，进而触发“用户模块”执行一次本不应该执行的业务流程。\n\n\n总结\n\n本讲介绍了采用微服务架构后，不可避免的分布式事务的解决方案，同时介绍了微服务常见的依赖：数据库、消息中间件的基本治理原则。后续你可以将本讲学习到的内容应用到你所负责的微服务的依赖治理中去。\n\n最后，我再给你留一道讨论题，你所负责的微服务对于它的依赖的使用，有哪些基本原则？欢迎留言区留言，咱们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习20 | 如何通过监控快速发现问题。再见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **烽：\n\n> 老师，关于 中间件 发送消息 添加版本号的问题，我查询相关的信息，没有明确的一些 关于 发送 消息版本号的信息。 按我理解，添加 时间戳 字段 也是可以的把。 只要是为了能区分 消息先后顺序是吗？ 不知道理解的是否正确？\n\n#     讲师回复：\n\n>     是的，时间戳也是可以的。但是如果时间戳的精度很低话，比如秒级别，可能出现重复，进而无法唯一标示数据变更\n\n# **帆：\n\n> “我曾经在线上遇到过为了不使用唯一索引，纯使用 SQL 来完成防重的语句”这个之后的方案是啥? 加唯一索引了?\n\n#     讲师回复：\n\n>     缓存前置判重。简单场景是可以使用唯一索引判断的。而如果标识一条数据唯一的条件会不断变化，比如经过业务的发展，会从两个字段组合标识一个字段，变成三个字段组合标识一个字段，这个时候，唯一索引就需要调整。对于需要频繁变更的唯一性索引，可以考虑在程序上兼容解决',normalizedContent:'在前两讲里，分别从微服务的对外接口、消息消费以及微服务自身的相关编码规范上阐述了“防备上游、做好自己”这两个准则如何落地。\n\n在本讲里，将会讲解为什么要“怀疑下游”，以及有哪些手段可以落地此条准则。此外，还会介绍在进行微服务拆分后，调用外部依赖会产生的分布式事务、消息发送等问题的应对方案。\n\n\n为什么要怀疑下游\n\n首先我们先来回顾一下“第 17 讲”里介绍过的抽象的微服务架构，如下图 1 所示：\n\n\n\n图 1：抽象的架构示意图\n\n从图一中可以看到，微服务会依赖很多其他微服务提供的接口、数据库、缓存，以及消息中间件等，这些接口及存储可能会因为代码 bug、网络、磁盘故障、上线操作失误等因素引发线上问题。此时，由于依赖不可用，就会导致微服务对外提供的服务受到影响，出现接口可用率下降或者直接宕机的情况。\n\n为了防止上述情况的发生，在构建微服务时，就需要预先考虑微服务所依赖的各项“下游”出现故障时的应对方案。假设下游出现故障及预设计对应的方案的过程，便是在实践“怀疑下游”。\n\n\n如何落地\n\n下面将基于下图 2 所展示的三大类依赖：其他微服务、数据库、消息中间件，逐一介绍可能引发的故障的应对方案和最佳使用准则。\n\n#后期同学美化下图，注意将“其它”改为“其他”\n\n\n\n图 2：包含三大类依赖的微服务图\n\n对其他微服务的依赖\n\n在采用了微服务的架构后，各个模块间均通过 rpc 的方式进行依赖，有些模块在完成一项业务流程时可能会依赖多达几十、上百个外部微服务。比如在完成下单的流程里，就需要依赖用户、商品、促销、价格、优惠券等各个微服务提供的接口，这些被依赖的微服务的稳定性直接影响了用户是否能够成功下单。因此，需要对微服务依赖的其他微服务接口进行可用性的治理。\n\n在“第 10 讲”里，已经从写服务的角度介绍了通过依赖后置、依赖并行化、设置超时和重试、服务降级等手段，来对它的依赖进行治理，进而保障写服务的高可用。其实这些手段依然可以用在读服务里，此处便不再赘述，你可以回到“第 10 讲”进行复习。\n\n下面将重点讲解在采用微服务架构后，如何应对随之而来的分布式事务。这里以提单作为案例，介绍分布式事务的实际场景。在微服务架构下，订单和库存是两个单独的微服务，它们之间的架构如下图 3 所示：\n\n\n\n图 3：订单和库存组成的微服务架构图\n\n在提单时，订单模块需要调用库存模块进行商品的扣减，以便判断用户购买的商品是否有货。订单调用库存的扣减接口会有以下几种情况发生。\n\n 1. 调用库存接口返回成功且库存数量充足，订单模块便将此用户订单保存至数据库，并返回用户下单成功消息。\n\n 2. 调用库存接口返回成功且库存数量充足，但订单模块将此用户订单保存至数据库时出错并进行数据库回滚，同时订单模块返回用户下单失败。\n\n 3. 调用库存接口超时，订单模块判断此次调用库存接口失败，返回用户下单失败。\n\n 4. ...\n\n在微服务化之后，上述订单模块和库存模块的交互会产生非常多的可能性场景。此处我只罗列了几个，你可以继续向后梳理。其中，上述的第 2 、3 点描述的场景里就存在分布式事务问题。在第 2 点里，因为订单模块本地的数据库事务回滚了，但调用库存接口产生的已扣减的商品数量并没有回滚，此时就会导致库存数据少于实际的数据。\n\n有一些基于 tcc 和 saga 的成熟基础框架可以解决上述分布式事务问题，但理解和接入成本较高。此处介绍一种本质上和 tcc、saga 理论相类似，但无须借助第三方框架的简单、易落地的解决方案。理解此方案也有助于你理解 tcc 和 saga 的思想。\n\n此方案的架构图如下图 4 所示，图中订单模块的数据库里除了订单原有的表之外，会增加一张任务表。\n\n\n\n图 4：基于本地数据库的分布式事务架构\n\n基于上述的架构，下单流程变更如下。\n\n1. 在接收到下单请求后，在调用任何外部 rpc 前，先将此订单的相关信息，如此次用户购买的商品、商品数量、用户账号、此次订单的编号等信息写入新增的任务表中。\n\n2. 调用库存的接口进行商品数量的扣减，并根据库存模块的返回值更新订单模块的数据库。这一步，又细分为以下几种场景情况：\n\n（1）如果调用库存接口成功，则在同一个事务中，将订单信息写入订单库中，同时更新第一步写入任务的状态为“已成功”；\n\n（2）如果调用库存接口明确返回失败，则直接更新订单库中的任务状态为“待回滚”，并返回用户下单失败；\n\n（3）如果调用库存接口超时，则直接更新订单库中的任务状态为“待回滚”，并返回用户下单失败；\n\n（4）无论调用库存接口是成功还是失败，只要在更新本地订单库时失败，就返回用户下单失败，同时任务库的状态保留为“初始化”。\n\n上述介绍的是用户下单的同步流程，完成这两个步骤后，用户下单便结束了。我们再来看看下单后的异步情况。\n\n3. 下单完成后，异步 worker 功能是扫描订单库新增的任务表，获取状态为“待回滚”，任务创建时间距扫描时间点超过一定时间区间（如 5 分钟）仍为“初始化”状态的任务。获取到这些任务之后，会基于任务表中的商品和对应的数量信息，异步地调用库存接口进行商品数据的返还。\n\n通过上述方式，能够将各种失败场景里漏返回的商品数量进行返还，保证库存数量的最终一致性，完成分布式事务。上述保障数据最终一致性主要是依赖任务表和订单表在同一个数据库里，可以通过本地事务来保障订单表数据写入成功后，任务表里的任务状态绝对能够更新为“已成功”。而当提单失败后，任务表的状态为“非成功”状态，再通过类似 tcc 和 saga 的异步补偿性 worker 来进行业务回滚即可保证最终最一致性。\n\n在发起分布式事务的业务模块的数据库里创建补偿性任务，基本上可以复用在其他存在分布式事务的场景里。如果你不希望引入更加复杂的 tcc 和 saga 框架，可以尝试利用此方式来解决架构微服务化之后带来的分布式事务的问题。\n\n对数据库的依赖\n\n除了对其他微服务的依赖，微服务中最常见的便是对数据库的依赖。在使用时，需要遵守以下几点基本原则。\n\n原则一：数据库一定要配置从库，且从库部署的机房需要与主库不同，从而保障数据库具备跨机房灾备的能力。\n\n此外，对于测试环境的数据库依然要配置主从复制，防止某天测试环境的数据库磁盘损坏，需要耗费大量人力恢复测试环境。\n\n原则二：在能够完成功能的前提下，使用的 sql 要尽可能简单。\n\n因为 sql 和代码一样，除了完成功能之外，最重要的是清晰简单地表达其自身含义，以供后续研发人员进行维护。我曾经在线上遇到过为了不使用唯一索引，纯使用 sql 来完成防重的语句，它包含了四层 insert、select、exists、select 的语法嵌套。这一语句因为无法调试（debug），导致后续一个需求的上线时间延期了 2 天，最终还是痛定思痛地进行了重构。\n\n原则三：在业务需求不断更新迭代的场景里，最好不要使用外键。\n\n大学时期的数据库理论课曾提到，需要使用外键来校验数据完整性。比如，在 a、b 表之间有了外键约束之后，可以设置外键级联删除，当 a 表中的某条数据删除后，自动级联地删除 b 表中的数据。此方式表面上可以极大地简化代码操作，但实则隐藏着巨大风险。因为现今互联网需求的迭代速度非常快，上个月可能 a、b 表中还存在外键关系，到了下个月又因为需求不存在了，或者需要更多字段组合才能形成外键关系。\n\n此外，外键关系是隐藏在数据库的建表语句里的，在新需求开发时，很容易被遗忘、清除或者修改为新的外键关系。在新需求上线后，也可能因此疏漏导致线上数据被误删，进而引发线上问题。\n\n原则四：表结构中尽可能不要创建一个长度为上千或上万的 varchar 类型字段，且用其来存储类似 json 格式的数据，因为这会带来并发更新的问题。\n\n假设创建了一个长度一千的 varchar 字段，它存储了如下的信息：\n\n{"fielda":"valuea","fieldb":"valueb"}\n\n\n此时假设有两个请求同时对此字段进行修改，a 线程将此字段的值读取后修改了其中 fileda 的值，具体修改如下：\n\n{"fielda":"valueaa",:"fieldb":"valueb"}\n\n\n而 b 线程将此字段的值读取后修改了其中 fieldb 的值，具体修改如下：\n\n{"fielda":"valuea",:"fieldb":"valuebb"}\n\n\n那么，最终数据库中此字段的值会变成什么呢？\n\n答案是不一定。这取决于 a、b 这两个线程的最终修改顺序。但不管顺序如何，最终的结果都是错误的。因为 a、b 两个线程各修改了json 内容的其中一个字段，最终期望的结果是 fielda、fieldb 两个字段都得到更新，但实际只会有一个字段得到更新。\n\n因此，在创建表结构的时候，不建议设置此类型的字段。如果期望这两个字段都得到更新，你需要借助并发锁来实现，但这也增加了代码实现的难度。\n\n对消息中间件的依赖\n\n在微服务的架构里，微服务间的通信除了接口调用的方式外，当前最常见的方式便是基于消息中间件（如 rabbitmq 和 kafka）的消息通信。同样，在使用消息中间件时，仍有一些基础原则需要你尽可能地遵守。\n\n原则一：数据要先写入数据库或缓存后，再发送消息通知。\n\n因为很多消息接收方在接收到消息通知后，会调用发送消息的微服务的接口进行数据反查，以便获取更多信息来做下一步业务的流转。\n\n假设订单模块在判断用户的下单请求的库存能够满足后， 便向外发送下单成功的消息。此时，如果物流系统监听了此消息，就会在获取到下单成功的通知后，第一时间去反查订单的接口，以便获取更多订单相关信息（如用户期望的收货时间、用户是否为会员等）来辅助判断何时发货。在极端情况下，可能会因为订单模块的数据还未写入数据库，导致反查不到数据，进而影响业务的正常流转。\n\n原则二：发送的消息要有版本号。\n\n有些消息中间件为了提升消息消费的吞吐量，支持乱序消费。但如果发送的消息没有数据变更版本号，消息消费方会因此无法判断数据是否乱序，进而有可能导致数据错乱，产生线上问题。\n\n原则三：消息的数据要尽可能全，进而减少消息消费方的反查。\n\n微服务间使用消息通信的目的就是解耦，但如果消息中包含的信息量太少，消息消费方就无法基于其中的信息处理业务，此时消息消费方便需要反查发送方的接口，来获取更多信息，但这样处理就达不到解耦的目的了，你可以参考第一点物流系统的案例。因此，在可能的情况下，建议发送尽可能全的信息。\n\n原则四：消息中需要包含标记某个字段是否变更的标识。\n\n根据原则三，你可能会发送包含较多字段的消息，有些字段可能在当次消息中并未发生数据变更。如果没有标记字段是否变更，可能会产生无效通知的情况。\n\n比如一个消息包含两个字段（如为 a、b），而某一个消息的接收方（如用户模块）只关心 a 字段是否变更。如果没有标记变更字段，那么 b 字段变更后，消息发送方也会发送消息，这会导致“用户模块”误以为 a 字段发生了变更，进而触发“用户模块”执行一次本不应该执行的业务流程。\n\n\n总结\n\n本讲介绍了采用微服务架构后，不可避免的分布式事务的解决方案，同时介绍了微服务常见的依赖：数据库、消息中间件的基本治理原则。后续你可以将本讲学习到的内容应用到你所负责的微服务的依赖治理中去。\n\n最后，我再给你留一道讨论题，你所负责的微服务对于它的依赖的使用，有哪些基本原则？欢迎留言区留言，咱们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习20 | 如何通过监控快速发现问题。再见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **烽：\n\n> 老师，关于 中间件 发送消息 添加版本号的问题，我查询相关的信息，没有明确的一些 关于 发送 消息版本号的信息。 按我理解，添加 时间戳 字段 也是可以的把。 只要是为了能区分 消息先后顺序是吗？ 不知道理解的是否正确？\n\n#     讲师回复：\n\n>     是的，时间戳也是可以的。但是如果时间戳的精度很低话，比如秒级别，可能出现重复，进而无法唯一标示数据变更\n\n# **帆：\n\n> “我曾经在线上遇到过为了不使用唯一索引，纯使用 sql 来完成防重的语句”这个之后的方案是啥? 加唯一索引了?\n\n#     讲师回复：\n\n>     缓存前置判重。简单场景是可以使用唯一索引判断的。而如果标识一条数据唯一的条件会不断变化，比如经过业务的发展，会从两个字段组合标识一个字段，变成三个字段组合标识一个字段，这个时候，唯一索引就需要调整。对于需要频繁变更的唯一性索引，可以考虑在程序上兼容解决',charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"如何通过监控快速发现问题？",frontmatter:{title:"如何通过监控快速发现问题？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/8d2886/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/21.%20%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E7%9B%91%E6%8E%A7%E5%BF%AB%E9%80%9F%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/21. 如何通过监控快速发现问题？.md",key:"v-19ada824",path:"/pages/8d2886/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:5733}],headersStr:"精选评论",content:"前三讲基于“防备上游、做好自己、怀疑下游”的准则，讲解了如何通过系统设计、部署，以及代码编写的方式来构建一个更加高可用的后台系统。\n\n基于上述三个准则提出的方案可以预防部分问题，但百密一疏，即使我们做了很多防护措施，仍无法保证绝对安全，避免问题发生。此时作为系统的负责人，你需要在第一时间，也就是用户感知前发现问题。\n\n发现问题的方法便是监控，本讲将介绍如何设计微服务的监控，帮助你在日常系统维护时，更快地、自动地发现问题。\n\n\n什么是监控\n\n监控是指对被监控体的运行状态数据进行持续地审查，并设置运行状态数据不符合要求的阈值，对不符合阈值的运行状态主动报警的一种方式。被监控体的运行状态数据通常以如下图 1 中 XY 轴的格式进行展示。\n\n\n\n图 1：XY 轴格式的运行状态数据图\n\n上图 1 的 X 轴表示时间，由固定的间隔组成，此间隔可以是秒级或分钟级。Y 轴表示在该时间间隔里的运行状态数据的汇聚，它可以是间隔数据的累加、平均值、最大值等方式。\n\n下面将对几种常见的被监控体，以及它们的运行状态数据、阈值设置等相关内容进行一一介绍。因为篇幅原因，关于其他类型的被监控体及对应的指标，本讲不再赘述，你可以参考拉勾教育关于“监控主题”的专栏，比如《31 讲带你搞懂 SkyWalking》、《分布式链路追踪实战》。\n\n1. 次数监控\n\n次数监控中被监控体就是次数，具体指微服务里各项代码逻辑运行的次数，可以是微服务对外提供接口的被调用次数、某一个方法被执行的次数。它的示意图如下图 2 所示，其中 Y 轴表示在指定间隔内，被监控体的总体运行次数。\n\n\n\n图 2：次数监控图\n\n2. 性能监控\n\n性能监控里的被监控体是性能，可以是微服务对外提供接口的性能、微服务依赖下游其他接口或存储的性能。\n\n在性能监控里，有几个通用的运行状态数据：平均性能（AVG）、Max 以及TP999 。下面我们具体看一下它们的含义与区别。\n\n（1）平均性能（AVG）指上述时间间隔里的代码总运行次数的耗时平均值。计算公式：间隔内所有调用的耗时累加/总次数。\n\n（2）Max 性能则是直接显示上述时间间隔里的耗时最高的一次。假设在指定间隔内代码运行了三次，对应的性能分别为 10ms、300ms、50ms，那么最终显示的 Max 性能就是 300ms。\n\n（3）TP999 性能表示对上述时间间隔里所有的耗时进行升序排序，处在第 99.9% 位置的性能耗时。打个比方，假如在指定间隔里共计发生了 1000 次代码执行，那么TP999 表示这 1000 次经过升序排序的请求的第 999 次的耗时。此指标反映了指定间隔里，99.9% 的请求的性能都低于 TP999 所代表的值。以此类推，还有 TP50、TP9999，分别表示满足 50% 和 99.99% 的请求性能所处的水平。\n\n在实际工作中，上述三个性能指标常相互组合使用，而不是单看某一个指标。比如，某一个方法的 Max 性能很差，可能超过 1s，而 TP999 或 TP9999 却很好，控制在 50ms 以内。这说明它的大部分请求性能不错，只是每个时间间隔里，会有一次请求性能很差，此时你就需要注意某次请求的数据是否和其他请求存在差异，或者是否发生了其他故障。\n\n此外，上述三个性能监控指标也通常展示在一幅图里，如下图 3 所示：\n\n\n\n图 3：性能监控图\n\n3. 可用率监控\n\n可用率里的被监控体是在指定时间里，代码执行成功的占比。假设在指定时间间隔里，代码运行了 100 次，其中 99 次经过判断都为成功，那么在可用率监控图里 Y 轴显示的值即为 99%，具体格式可以参考下图 4 所示：\n\n\n\n图 4：可用率监控图\n\n讲述“确定某一方法在执行时是否成功”时，我使用了“经过判断”这一描述。这里使用相对抽象的描述，是因为在不同的场景下，判断某一个方法执行是否成功的准则不同。同样的执行结果，在某些场景里被认为是成功，在某些场景里则认为是失败。接下来，在可用率的小节将详细描述这些场景及对应的规则。\n\n\n如何通过监控发现微服务的问题\n\n这里我仍基于“第 17 讲”里介绍的微服务骨架图，如下图 5 所示，从微服务的入口、微服务自身及微服务的依赖这三个方面，讲解如何应用上述三种监控方式，以及对应的一些最佳实践准则，从而发现微服务里的各种潜在问题。\n\n\n\n图 5：微服务骨架图\n\n微服务入口\n\n首先，微服务的入口必须设置次数监控、可用率监控和性能监控。因为微服务的入口，即对外供其他微服务调用的接口，是微服务自身能力对外提供的唯一通道，所以它的各项监控指标必须面面俱到。\n\n微服务入口在调用次数监控上，有以下几点原则可以参考。\n\n1. 需要设置调用次数报警，调用次数的报警阈值可以参考单机压测瓶颈值。\n\n设置调用次数报警的目的是，通知你感知流量异常，并能够第一时间处理，比如进行扩容、排查异常流量等操作。当然，除了次数报警外，前置的设置限流不可少，因为有些时候是半夜收到报警，响应时间可能较长，通过限流可以规避因为处理报警不及时而导致的宕机问题。\n\n2. 按调用方设置调用次数监控。\n\n正常情况下，一个微服务的调用方不止一个。当微服务的调用量在某些时刻突然暴涨时，你需要定位到是哪个调用方导致的。通过设置按调用方的次数监控，便可以排查到具体是哪个调用方导致的流量增加。\n\n3. 关于调用次数的阈值，需要设置调用次数的同环比监控。\n\n在上述流量飙升的案例里，如果有调用次数的同环比监控，不通过排查，基于监控就可以自动知道具体是哪个调用方的流量异常，导致整体流量飙升。\n\n微服务入口在性能监控上，有几点可以参考。\n\n1. 并不是每一个性能指标都需要设置报警。\n\n比如 TP99、TP999 或 TP9999，只需要设置其中之一即可。但平均性能、TP9999 （或 TP999）以及 Max 这三个指标均需要设置报警阈值。值得注意的是，报警阈值需要根据接口的 SLA 来设置，而不是“拍脑袋决策”。\n\n2. 和上述调用次数的第二点类似，需要配置按调用方的性能监控，用来观察是否存在不同的调用方，因为使用方式的差异，进而导致性能上的差异。\n\n3. 基于入参数据进行监控。\n\n假设一个接口支持调用方指定批量大小来查询用户信息。那么此时，可以按调用方传入的批量大小进行性能监控。比如将批量大小处在 0~10 之间设置一个监控点、处在 10~20 之间的设置另一个监控点，以此类推。\n\n在添加上述的监控埋点后，你可能会发现：批量大小处于 50 以内的性能都差不多，而批量大小处于 50 以后的性能会有较明显的增加。此时，通过监控，你就可以把接口的最大批量大小设置为 50。如果调用方有一次查询需要超过 50 个数量的需求，他可以通过并发的方式查询，将单次查询需要超过 50 个的数量一分为二即可，此时的性能将比一次查询超过 50 个的性能更好一些。\n\n微服务入口在可用率监控上，可参考的原则如下。\n\n1. 需要设置接口的可用率告警和按调用方设置报警（与“性能监控”第一条类似）。\n\n2. 我们讲解可用率时曾提到，判断是否需要降低可用率的方法由当次请求是业务异常还是非业务异常决定。\n\n其中，业务异常不能判断为方法执行失败，还是成功，即业务异常不能降低可用率。而非业务异常（如网络故障、连接失败、机器宕机等导致的异常），需要降低可用率。\n\n业务异常指的是用户没有按规定的要求输入数据，比如用户输入的参数如手机号码、邮箱地址不合法等场景。对于这类操作，不需要降低可用率，只需要提示客户按指定格式重新输入即可。\n\n而非业务异常指的是网络故障、连接失败、机器宕机、代码执行出现空指针、调用下游超时等现象，是需要降低可用率的。出现上述异常情况，可能是因为你的代码未按预期执行、网络环境未按预计运行，此时，通过降低可用率进而报警，可以让研发人员排查导致问题的原因。\n\n3. 可用率的阈值需要按接口的等级差异化设置。\n\n在线上环境里，网络并不是绝对稳定的，可能会产生偶发的抖动，进而导致接口调用出现几秒或几分钟的部分失败，产生可用率下降的现象。 为了规避网络抖动导致的可用率报警的情况，你可能会将可用率报警的阈值设置为低于 95% 才报警。虽然此种情况可以屏蔽误报警，但也有可能屏蔽掉真正的报警。因此你需要根据接口的等级设置报警，如果是提单接口，你就需要设置可用率低于 100% 时报警。虽然偶尔会收到一些误报警，但相对错过提单真正的报警而言，这样做还是值得的。\n\n微服务自身\n\n微服务自身执行的各个方法，可以根据需求选择使用上述三个监控指标：性能、可用率和次数监控并配置对应的预期阈值。微服务内的方法是否使用上述监控有几点准则。\n\n 1. 并不是监控点越多越好。虽然记录监控数据对机器的性能损耗很小，但一个方法设置几十、上百个监控点仍会有一定影响。\n\n 2. 太多的监控点会导致系统维护人员产生麻木。首先监控点太多，不知道从哪里看起。其次，当出现网络抖动、机器故障等异常时，所有的监控点都在告警，研发同学在排查时，无从下手。\n\n 3. 建议对核心方法、怀疑性能较差的方法增加监控，这样可以快速发现和排查到核心方法和性能差方法存在的问题。其他方法的监控数据，通过微服务入口的监控即可查看到。\n\n除了微服务自身的各类方法需要监控，微服务所属的进程，以及它部署的机器也有很多被监控体可以监控。下面我们详细介绍。\n\n1. 微服务使用的 RPC 框架的剩余线程池数量。\n\n当微服务框架的线程池变少或为零后，调用方新的请求都会被拒绝。因此，当监控到剩余的线程池快耗尽，就需要快速处理，如调整线程池的大小、扩容新的机器等。\n\n2. 如果是基于 JVM 的各类语言应用，对于 JVM 相关数据也需要监控。比如 Young GC、Full GC 的频率、每次 GC 的时间，以及堆内存的使用量。\n3. 微服务的进程存活监控。\n\n每一个微服务的进程都有一个进程号，此外对外提供接口服务的进程还会有端口号。可以使用 ping 或者 ps 命令，每一个时间间隔检查一次，如果监听到进程的进程号或端口不存在，便进行报警。\n\n4. 监控微服务所在机器的内存的使用率。\n\n类似于可用率，使用率也是一个比例值。它表示机器已使用内存占机器总内存的比值。如果机器的内存使用率很高，操作系统可能会主动将占用较高的进程关闭。因此需要监控此值，当使用率飙升，去排查具体对应的原因。\n\n5. 机器的 CPU 的使用率和内存使用率类似。\n\n太高的 CPU 使用率会导致微服务卡顿或者微服务不可用。因此，需要主动监控并配置告警，以便提前去处理。\n\n6. 机器负载（CPU Load）。\n\n这一监控容易被遗漏，它表示当前机器里有多少进程处在“正在执行”和“等待执行”这两个状态里。假设机器的 CPU 只有 4 核，而机器负载在多个监控间隔里都远超于 4，比如在 10 以上，那么说明当前机器负载过高，这些进程排队等待执行的时间较长，性能可能较差。此时，可以适当减少机器上部署的进程数。\n\n微服务依赖\n\n在介绍微服务的依赖监控前，我们再回顾下微服务依赖的架构图，如下图 6 所示：\n\n\n\n图 6：微服务依赖的架构图\n\n对微服务每一个依赖的调用，类似上述“微服务自身的监控”小节里提到的对内部方法增加监控——并不是微服务内部的所有方法都要加监控，而是要挑选重点和可能存在问题的方法。\n\n而对于微服务的所有依赖都需要统一增加监控，你可以从“第 17 讲”提到的原则“怀疑下游”找到原因——因为依赖的下游随时可能出现问题，为了快速定位问题，所以所有的外部依赖都需要增加监控。\n\n如果是 Java 应用，监控的方式可以采用统一的 AOP 切面来实现。此外，也可以借助一些框架的功能统一拦截并进行监控，比如 MyBatis 里就提供用 Interceptor 拦截所有 SQL 的执行，在此处就可以添加统一的监控。\n\n除了依赖要增加监控，判断依赖的其他微服务的接口在执行上是否成功，也需要格外注意。有些依赖的微服务执行异常时，并不会抛出异常，而是返回一个经过包装的结果对象，比如 RPCResult，并将错误信息包装在其中。此时，如果你在对外部依赖的可用率监控中没有判断 RPCResult 中的值，有可能遗漏应该告警的结果，导致问题没有被发现，进而影响线上的业务。\n\n\n监控时间间隔\n\n在上述的讲解里，一直使用了时间间隔来表示监控图的横轴，但没有指出这个时间间隔是多少，是分钟级还是秒级的？\n\n理论上这个间隔是越小越好，最好是秒级。但很多监控系统都不提供秒级的间隔，原因是时间间隔越小，需要存储的数据量就越多。\n\n以可用率监控为例，间隔为 1min 时，表示 1min 里所有成功的次数和总的调用次数比例。而间隔为 1s 时，表示 1s 里所有的成功与总的调用次数的比例。秒级产生的可用率数据量是分钟级的 60 倍，所以因为存储容量的限制，很多监控系统只提供分钟级别的监控。\n\n但如果监控系统既提供分钟级又提供秒级监控，那么优先选择秒级。因为秒级监控发现问题的速度更快。以可用率监控为例，秒级监控在 1s 间隔达到后，即可算出可用率，而分钟监控要在 1min 间隔到达后，才可算出可用率，两者相差了 59s。\n\n\n总结\n\n在本讲里，介绍了几种常见的被监控指标，可用率、调用次数、性能监控，这三个监控指标是每一个微服务应用都必须配置的。其次，从微服务入口、微服务自身、微服务依赖这三个角度梳理了如何落地上述三个监控，以及一些附加的监控，如机器监控、内存监控等。\n\n最后，留给你一个任务，根据本讲介绍的内容和原则，检查你所负责的微服务是否存在监控遗漏，可以进行一次查漏补缺。如果遇到什么问题，也可以写在留言区，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习21 | 如何进行高保真压测和服务扩容？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **4123：\n\n> 异常分析那里，通常业务实现的时候可能统一包了一个大异常，所以还取决于业务实现究竟是否区分了业务异常和非业务异常",normalizedContent:"前三讲基于“防备上游、做好自己、怀疑下游”的准则，讲解了如何通过系统设计、部署，以及代码编写的方式来构建一个更加高可用的后台系统。\n\n基于上述三个准则提出的方案可以预防部分问题，但百密一疏，即使我们做了很多防护措施，仍无法保证绝对安全，避免问题发生。此时作为系统的负责人，你需要在第一时间，也就是用户感知前发现问题。\n\n发现问题的方法便是监控，本讲将介绍如何设计微服务的监控，帮助你在日常系统维护时，更快地、自动地发现问题。\n\n\n什么是监控\n\n监控是指对被监控体的运行状态数据进行持续地审查，并设置运行状态数据不符合要求的阈值，对不符合阈值的运行状态主动报警的一种方式。被监控体的运行状态数据通常以如下图 1 中 xy 轴的格式进行展示。\n\n\n\n图 1：xy 轴格式的运行状态数据图\n\n上图 1 的 x 轴表示时间，由固定的间隔组成，此间隔可以是秒级或分钟级。y 轴表示在该时间间隔里的运行状态数据的汇聚，它可以是间隔数据的累加、平均值、最大值等方式。\n\n下面将对几种常见的被监控体，以及它们的运行状态数据、阈值设置等相关内容进行一一介绍。因为篇幅原因，关于其他类型的被监控体及对应的指标，本讲不再赘述，你可以参考拉勾教育关于“监控主题”的专栏，比如《31 讲带你搞懂 skywalking》、《分布式链路追踪实战》。\n\n1. 次数监控\n\n次数监控中被监控体就是次数，具体指微服务里各项代码逻辑运行的次数，可以是微服务对外提供接口的被调用次数、某一个方法被执行的次数。它的示意图如下图 2 所示，其中 y 轴表示在指定间隔内，被监控体的总体运行次数。\n\n\n\n图 2：次数监控图\n\n2. 性能监控\n\n性能监控里的被监控体是性能，可以是微服务对外提供接口的性能、微服务依赖下游其他接口或存储的性能。\n\n在性能监控里，有几个通用的运行状态数据：平均性能（avg）、max 以及tp999 。下面我们具体看一下它们的含义与区别。\n\n（1）平均性能（avg）指上述时间间隔里的代码总运行次数的耗时平均值。计算公式：间隔内所有调用的耗时累加/总次数。\n\n（2）max 性能则是直接显示上述时间间隔里的耗时最高的一次。假设在指定间隔内代码运行了三次，对应的性能分别为 10ms、300ms、50ms，那么最终显示的 max 性能就是 300ms。\n\n（3）tp999 性能表示对上述时间间隔里所有的耗时进行升序排序，处在第 99.9% 位置的性能耗时。打个比方，假如在指定间隔里共计发生了 1000 次代码执行，那么tp999 表示这 1000 次经过升序排序的请求的第 999 次的耗时。此指标反映了指定间隔里，99.9% 的请求的性能都低于 tp999 所代表的值。以此类推，还有 tp50、tp9999，分别表示满足 50% 和 99.99% 的请求性能所处的水平。\n\n在实际工作中，上述三个性能指标常相互组合使用，而不是单看某一个指标。比如，某一个方法的 max 性能很差，可能超过 1s，而 tp999 或 tp9999 却很好，控制在 50ms 以内。这说明它的大部分请求性能不错，只是每个时间间隔里，会有一次请求性能很差，此时你就需要注意某次请求的数据是否和其他请求存在差异，或者是否发生了其他故障。\n\n此外，上述三个性能监控指标也通常展示在一幅图里，如下图 3 所示：\n\n\n\n图 3：性能监控图\n\n3. 可用率监控\n\n可用率里的被监控体是在指定时间里，代码执行成功的占比。假设在指定时间间隔里，代码运行了 100 次，其中 99 次经过判断都为成功，那么在可用率监控图里 y 轴显示的值即为 99%，具体格式可以参考下图 4 所示：\n\n\n\n图 4：可用率监控图\n\n讲述“确定某一方法在执行时是否成功”时，我使用了“经过判断”这一描述。这里使用相对抽象的描述，是因为在不同的场景下，判断某一个方法执行是否成功的准则不同。同样的执行结果，在某些场景里被认为是成功，在某些场景里则认为是失败。接下来，在可用率的小节将详细描述这些场景及对应的规则。\n\n\n如何通过监控发现微服务的问题\n\n这里我仍基于“第 17 讲”里介绍的微服务骨架图，如下图 5 所示，从微服务的入口、微服务自身及微服务的依赖这三个方面，讲解如何应用上述三种监控方式，以及对应的一些最佳实践准则，从而发现微服务里的各种潜在问题。\n\n\n\n图 5：微服务骨架图\n\n微服务入口\n\n首先，微服务的入口必须设置次数监控、可用率监控和性能监控。因为微服务的入口，即对外供其他微服务调用的接口，是微服务自身能力对外提供的唯一通道，所以它的各项监控指标必须面面俱到。\n\n微服务入口在调用次数监控上，有以下几点原则可以参考。\n\n1. 需要设置调用次数报警，调用次数的报警阈值可以参考单机压测瓶颈值。\n\n设置调用次数报警的目的是，通知你感知流量异常，并能够第一时间处理，比如进行扩容、排查异常流量等操作。当然，除了次数报警外，前置的设置限流不可少，因为有些时候是半夜收到报警，响应时间可能较长，通过限流可以规避因为处理报警不及时而导致的宕机问题。\n\n2. 按调用方设置调用次数监控。\n\n正常情况下，一个微服务的调用方不止一个。当微服务的调用量在某些时刻突然暴涨时，你需要定位到是哪个调用方导致的。通过设置按调用方的次数监控，便可以排查到具体是哪个调用方导致的流量增加。\n\n3. 关于调用次数的阈值，需要设置调用次数的同环比监控。\n\n在上述流量飙升的案例里，如果有调用次数的同环比监控，不通过排查，基于监控就可以自动知道具体是哪个调用方的流量异常，导致整体流量飙升。\n\n微服务入口在性能监控上，有几点可以参考。\n\n1. 并不是每一个性能指标都需要设置报警。\n\n比如 tp99、tp999 或 tp9999，只需要设置其中之一即可。但平均性能、tp9999 （或 tp999）以及 max 这三个指标均需要设置报警阈值。值得注意的是，报警阈值需要根据接口的 sla 来设置，而不是“拍脑袋决策”。\n\n2. 和上述调用次数的第二点类似，需要配置按调用方的性能监控，用来观察是否存在不同的调用方，因为使用方式的差异，进而导致性能上的差异。\n\n3. 基于入参数据进行监控。\n\n假设一个接口支持调用方指定批量大小来查询用户信息。那么此时，可以按调用方传入的批量大小进行性能监控。比如将批量大小处在 0~10 之间设置一个监控点、处在 10~20 之间的设置另一个监控点，以此类推。\n\n在添加上述的监控埋点后，你可能会发现：批量大小处于 50 以内的性能都差不多，而批量大小处于 50 以后的性能会有较明显的增加。此时，通过监控，你就可以把接口的最大批量大小设置为 50。如果调用方有一次查询需要超过 50 个数量的需求，他可以通过并发的方式查询，将单次查询需要超过 50 个的数量一分为二即可，此时的性能将比一次查询超过 50 个的性能更好一些。\n\n微服务入口在可用率监控上，可参考的原则如下。\n\n1. 需要设置接口的可用率告警和按调用方设置报警（与“性能监控”第一条类似）。\n\n2. 我们讲解可用率时曾提到，判断是否需要降低可用率的方法由当次请求是业务异常还是非业务异常决定。\n\n其中，业务异常不能判断为方法执行失败，还是成功，即业务异常不能降低可用率。而非业务异常（如网络故障、连接失败、机器宕机等导致的异常），需要降低可用率。\n\n业务异常指的是用户没有按规定的要求输入数据，比如用户输入的参数如手机号码、邮箱地址不合法等场景。对于这类操作，不需要降低可用率，只需要提示客户按指定格式重新输入即可。\n\n而非业务异常指的是网络故障、连接失败、机器宕机、代码执行出现空指针、调用下游超时等现象，是需要降低可用率的。出现上述异常情况，可能是因为你的代码未按预期执行、网络环境未按预计运行，此时，通过降低可用率进而报警，可以让研发人员排查导致问题的原因。\n\n3. 可用率的阈值需要按接口的等级差异化设置。\n\n在线上环境里，网络并不是绝对稳定的，可能会产生偶发的抖动，进而导致接口调用出现几秒或几分钟的部分失败，产生可用率下降的现象。 为了规避网络抖动导致的可用率报警的情况，你可能会将可用率报警的阈值设置为低于 95% 才报警。虽然此种情况可以屏蔽误报警，但也有可能屏蔽掉真正的报警。因此你需要根据接口的等级设置报警，如果是提单接口，你就需要设置可用率低于 100% 时报警。虽然偶尔会收到一些误报警，但相对错过提单真正的报警而言，这样做还是值得的。\n\n微服务自身\n\n微服务自身执行的各个方法，可以根据需求选择使用上述三个监控指标：性能、可用率和次数监控并配置对应的预期阈值。微服务内的方法是否使用上述监控有几点准则。\n\n 1. 并不是监控点越多越好。虽然记录监控数据对机器的性能损耗很小，但一个方法设置几十、上百个监控点仍会有一定影响。\n\n 2. 太多的监控点会导致系统维护人员产生麻木。首先监控点太多，不知道从哪里看起。其次，当出现网络抖动、机器故障等异常时，所有的监控点都在告警，研发同学在排查时，无从下手。\n\n 3. 建议对核心方法、怀疑性能较差的方法增加监控，这样可以快速发现和排查到核心方法和性能差方法存在的问题。其他方法的监控数据，通过微服务入口的监控即可查看到。\n\n除了微服务自身的各类方法需要监控，微服务所属的进程，以及它部署的机器也有很多被监控体可以监控。下面我们详细介绍。\n\n1. 微服务使用的 rpc 框架的剩余线程池数量。\n\n当微服务框架的线程池变少或为零后，调用方新的请求都会被拒绝。因此，当监控到剩余的线程池快耗尽，就需要快速处理，如调整线程池的大小、扩容新的机器等。\n\n2. 如果是基于 jvm 的各类语言应用，对于 jvm 相关数据也需要监控。比如 young gc、full gc 的频率、每次 gc 的时间，以及堆内存的使用量。\n3. 微服务的进程存活监控。\n\n每一个微服务的进程都有一个进程号，此外对外提供接口服务的进程还会有端口号。可以使用 ping 或者 ps 命令，每一个时间间隔检查一次，如果监听到进程的进程号或端口不存在，便进行报警。\n\n4. 监控微服务所在机器的内存的使用率。\n\n类似于可用率，使用率也是一个比例值。它表示机器已使用内存占机器总内存的比值。如果机器的内存使用率很高，操作系统可能会主动将占用较高的进程关闭。因此需要监控此值，当使用率飙升，去排查具体对应的原因。\n\n5. 机器的 cpu 的使用率和内存使用率类似。\n\n太高的 cpu 使用率会导致微服务卡顿或者微服务不可用。因此，需要主动监控并配置告警，以便提前去处理。\n\n6. 机器负载（cpu load）。\n\n这一监控容易被遗漏，它表示当前机器里有多少进程处在“正在执行”和“等待执行”这两个状态里。假设机器的 cpu 只有 4 核，而机器负载在多个监控间隔里都远超于 4，比如在 10 以上，那么说明当前机器负载过高，这些进程排队等待执行的时间较长，性能可能较差。此时，可以适当减少机器上部署的进程数。\n\n微服务依赖\n\n在介绍微服务的依赖监控前，我们再回顾下微服务依赖的架构图，如下图 6 所示：\n\n\n\n图 6：微服务依赖的架构图\n\n对微服务每一个依赖的调用，类似上述“微服务自身的监控”小节里提到的对内部方法增加监控——并不是微服务内部的所有方法都要加监控，而是要挑选重点和可能存在问题的方法。\n\n而对于微服务的所有依赖都需要统一增加监控，你可以从“第 17 讲”提到的原则“怀疑下游”找到原因——因为依赖的下游随时可能出现问题，为了快速定位问题，所以所有的外部依赖都需要增加监控。\n\n如果是 java 应用，监控的方式可以采用统一的 aop 切面来实现。此外，也可以借助一些框架的功能统一拦截并进行监控，比如 mybatis 里就提供用 interceptor 拦截所有 sql 的执行，在此处就可以添加统一的监控。\n\n除了依赖要增加监控，判断依赖的其他微服务的接口在执行上是否成功，也需要格外注意。有些依赖的微服务执行异常时，并不会抛出异常，而是返回一个经过包装的结果对象，比如 rpcresult，并将错误信息包装在其中。此时，如果你在对外部依赖的可用率监控中没有判断 rpcresult 中的值，有可能遗漏应该告警的结果，导致问题没有被发现，进而影响线上的业务。\n\n\n监控时间间隔\n\n在上述的讲解里，一直使用了时间间隔来表示监控图的横轴，但没有指出这个时间间隔是多少，是分钟级还是秒级的？\n\n理论上这个间隔是越小越好，最好是秒级。但很多监控系统都不提供秒级的间隔，原因是时间间隔越小，需要存储的数据量就越多。\n\n以可用率监控为例，间隔为 1min 时，表示 1min 里所有成功的次数和总的调用次数比例。而间隔为 1s 时，表示 1s 里所有的成功与总的调用次数的比例。秒级产生的可用率数据量是分钟级的 60 倍，所以因为存储容量的限制，很多监控系统只提供分钟级别的监控。\n\n但如果监控系统既提供分钟级又提供秒级监控，那么优先选择秒级。因为秒级监控发现问题的速度更快。以可用率监控为例，秒级监控在 1s 间隔达到后，即可算出可用率，而分钟监控要在 1min 间隔到达后，才可算出可用率，两者相差了 59s。\n\n\n总结\n\n在本讲里，介绍了几种常见的被监控指标，可用率、调用次数、性能监控，这三个监控指标是每一个微服务应用都必须配置的。其次，从微服务入口、微服务自身、微服务依赖这三个角度梳理了如何落地上述三个监控，以及一些附加的监控，如机器监控、内存监控等。\n\n最后，留给你一个任务，根据本讲介绍的内容和原则，检查你所负责的微服务是否存在监控遗漏，可以进行一次查漏补缺。如果遇到什么问题，也可以写在留言区，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习21 | 如何进行高保真压测和服务扩容？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **4123：\n\n> 异常分析那里，通常业务实现的时候可能统一包了一个大异常，所以还取决于业务实现究竟是否区分了业务异常和非业务异常",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"重构：系统升级，如何实现不停服的数据迁移和用户切量？",frontmatter:{title:"重构：系统升级，如何实现不停服的数据迁移和用户切量？",date:"2023-02-22T16:15:53.000Z",permalink:"/pages/baf91b/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/23.%20%E9%87%8D%E6%9E%84%EF%BC%9A%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7%EF%BC%8C%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%8D%E5%81%9C%E6%9C%8D%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%92%8C%E7%94%A8%E6%88%B7%E5%88%87%E9%87%8F%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/23. 重构：系统升级，如何实现不停服的数据迁移和用户切量？.md",key:"v-4c3539d6",path:"/pages/baf91b/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4908}],headersStr:"精选评论",content:"专栏的前 21 讲，从读、写以及扣减的角度介绍了三种特点各异的微服务的构建技巧，最后从微服务的共性问题出发，介绍了这些共性问题的应对技巧。\n\n在实际工作中，你就可以参考本专栏介绍的技巧构建新的微服务，架构一个具备“三高”能力的后台服务。同时，也可以利用所学的技巧对已有的微服务进行系统升级重构，从而解决历史遗留问题。\n\n升级重构是后台架构演化增强的一个利器，本讲将为你详细讲解如何落地对用户无感知、低 Bug 的升级重构方案。\n\n\n重构常见的形式\n\n升级重构有两种常见的形式，一种是纯代码式的升级，另外一种是包含存储和代码的升级。\n\n纯代码的重构升级是指只针对代码中存在的一些历史遗留问题进行修复，比如代码中的慢 SQL、错误的日志打印方式、代码中未显式开启事务等问题。\n\n注：在本讲，将存在问题的历史版本称为V1 版；修复问题后的升级重构版本称为 V2 版。纯代码的重构升级架构如下图1所示：\n\n\n\n图 1：纯代码的升级重构对比图\n\n包含存储和代码的重构升级是指在上述纯代码之外，将原有架构里的存储也一起升级。存储升级有两种形式。\n\n第一种是将存储类型进行升级，比如将数据库升级为缓存，将原有的读接口从数据库切换至缓存。做此类存储类型升级的目的是提升微服务的性能，我们在模块二中曾介绍，同样的硬件配置下，缓存比数据库至少快一个量级。不同类型的存储升级架构如下图 2 所示：\n\n\n\n图 2：不同类型的存储升级架构对比图\n\n可以看到升级后，原有的代码从 V1 升级到 V2。同时，存储从读写都使用数据库，升级为写操作使用数据库，读操作使用缓存的架构。\n\n第二种是将一个表结构的存储升级为同类型存储的另外一个更加合理的表结构。此类升级常见于系统构建时，为了快速满足业务需求，在时间紧张的情况下，简单快速地设计了不是特别合理的表结构。比如原有的表结构采用了一张宽表存储所有的数据，包含一对多的数据都进行冗余存储。升级重构时，需要采用更加合理的表结构存储数据，以便未来能够快速响应业务的发展。它的重构升级架构如下图 3 所示，升级后，原有微服务的读写都将切换至新的表结构的存储里。\n\n\n\n图 3：同类型不同表结构的存储升级架构对比图\n\n\n纯代码重构的切换\n\n纯代码重构的切换比较简单，当上述 V2 版本通过测试环境和预发布环境的测试后，就可以直接在线上部署，替换原有的V1 版本。当部署的 V2 版本出现问题后，直接进行回滚即可，这是最简单、粗暴的切换方式。但同时也存在隐患，采用此种方式部署的V2如果出现问题，会影响所有的用户，影响面较大。\n\n为了降低影响，可以采用灰度的方式。即用 V2 版本的代码替换一台或者一定比例 V1 版本的机器，比如线上有 100 台部署 V1 版本代码的机器，当 V2 版本测试完成准备上线时，可以先发布 10 台 V2 版本的代码。这样，假设 V2 版本的代码存在 Bug，也只会影响访问这 10 台部署了 V2 版本代码的用户，即 10%的线上流量，这样就缩小了影响面。假设发布了 10 台 V2 版本的代码后，没有发现任何 Bug，此时则可以继续发布，逐步进行替换。\n\n通过此种灰度的方式，既可以做到纯代码的升级重构切换，又可以缩小因此可能带来的线上问题的影响范围。\n\n\n含存储重构的切换\n\n与上述纯代码的切换相比，含存储的重构切换有一个重要步骤便是数据迁移。不管是上述不同类型的存储还是同类型不同表结构的存储重构，都需要将原有存储中的数据全部迁移至新的存储中，才能够称为完成切换。\n\n对于含存储重构的切换，最简单的方法便是停服，之后在无任何数据写入的情况下进行数据迁移，迁移之后再进行数据对比，对比无误之后，用重构的新版本连接新的存储对外提供服务即可。\n\n这种方式适合于以下 2 种场景：\n\n 1. 业务有间断期或者有低峰期的场景。比如企业内网系统，下班或者周末期间几乎没有人使用；\n\n 2. 金融资产类业务，这些业务对于正确性要求极高，因为用户对资产极度敏感，如果资产出现错误，用户是无法容忍的。为了资产安全无误，有时候需要用户容忍停服的重构升级。\n\n但对于用户量巨大，且大部分业务场景都需要提供 7*24 服务的互联网业务来说，停服切换方式，用户是不能接受。因此，就需要设计一套既不需要停服，又可以完成用户无感知的切换方案。\n\n切换架构\n\n为了实现不停服的重构升级，整体的新版本上线、数据迁移以及用户切量的架构如下 图 4 所示：\n\n\n\n图 4：不停服的切换架构\n\n上述的架构中，左边部分是老版本未重构的服务及对应的老数据存储（后续称为老存储），图中右边部分部署的是升级重构后的新版本的服务和对应的新版本存储（后续称为新存储）。这个存储可以是缓存或者是表结构不同的数据库。\n\n在图的下方，则是数据同步模块。它主要的作用是实时进行数据同步，将老存储里的历史数据、新增的写入以及更新的数据实时地同步至新存储里。实时数据同步是实现存储升级重构不停服切换的基础。\n\n在完成数据同步之后，便可以进行用户的灰度切量了，将用户逐步切换至升级重构的新版本上。见图 4 中最上面的部分。\n\n下面将对图 4 中涉及的各个部分进行详细讲解。\n\n数据同步\n\n当升级重构后的新版本开发及测试完成后，便可以将新版本代码和存储进行线上部署了。新版本部署时，可以将新版本服务对外提供的接口的别名变更为一个新的名称，如为：new_version，具体见上图 4。因为修改了别名，即使新版本的服务上线部署并直接对外了，也不会引入老版本的流量。\n\n通过上述方式可以实现新老版本的隔离，进而完成新版本服务的线上部署。新版本线上部署及隔离后，便可以进行数据同步了。\n\n数据同步分为历史数据的全量同步和新增数据的实时同步。在上述“含存储重构的切换”小节里介绍过，存储重构涉及两个种类，第一种是数据库到缓存，第二种是数据库到另一种异构的表结构数据库里。这里以使用场景较多的数据库到缓存的重构举例讲解，另一种场景比较类似，你可以按此方式自己推演。如果有疑问，也可以写在留言区，我们一起讨论。\n\n包含全量同步、增量数据的实时同步架构如下图 5所示：\n\n\n图 5：全量同步和增量同步架构\n\n上述第一步的全量同步（见图 5 的编号 1 处）是将历史数据进行一次全量初始化同步，可以采用 Worker 的方式，对老版本的数据库的数据进行遍历，遍历的 SQL 大致如下：\n\nselect 数据 from  t_table where id> last_id limit 一批次的数量\n\n\n从数据库遍历读取完之后，便会在同步服务模块里按缓存的格式进行数据格式的转换，转换后的数据写入缓存即可。\n\n上述的数据同步 SQL 没有停止条件，且在未切量前，老库一直会有数据持续写入。使用上述 SQL 进行同步时，会导致全量同步一直执行，出现无法停止的情况。针对这个问题，可以根据当前数据库已有数据量、数据增长的速度以及数据同步的速度，评估在数据同步期间能够产生的数据量，并评估出这期间最多可能产生的数据 ID（截止 ID），并将上述 SQL 修改如下：\n\nselect 数据 from t_table where id> last_id  and id<截止ID limit 一批次的数量\n\n\n第二步的增量实时同步是在开始进行全量同步时启动的，增量同步使用的是本专栏多次介绍的Binlog 进行。通过在增量同步模块订阅老版本数据库里的数据变更，可以实时获取老版本数据库中新增和变更的数据。\n\n需要注意的是，增量同步需要在全量同步开始前便进行Binlog的订阅。如果在全量同步结束后，再订阅 Binlog 进行增量同步，可能会丢失在全量同步期间发生变更的数据。\n\n比如一张待同步的数据表里有 100 条数据，如果在全量同步前未开启增量同步。当同步至第 90 条数据时，第80 条数据发生了 update 操作，因为此时还没有开启增量同步，那么这第 80 条数据对应的变更就丢失了。为了防止此问题，就需要前置开启增量同步。\n\n最后，增量同步除了需要订阅 update 和 delete 操作外，还需要订阅 insert 操作。因为全量同步在上述截止 ID 之后的数据便不会再同步了，需要增量同步处理此类操作。\n\n数据对比验证\n\n在完成数据迁移之后，并不是立马就能够开始用户切量。还需要做一步非常重要的事情，那便是进行测试。因为做了大规模的代码重构以及存储的切换，只靠人工测试是远远不够的，很容易出现场景遗漏。\n\n因此就需要借助自动化的方式进行测试，我想你还记得在“第 07 讲：基于流量回放的自动化回归测试”的内容。在完成全量数据同步后，可以录制老版本服务的流量，并进行自动化测试回归，它的架构如下图 6 所示：\n\n#后期同学美化下图，注意图中的文字，“第7将”改为“第7讲”\n\n\n\n图 6：自动化的数据对比验证架构图\n\n通过一定时间区间的自动化回归，可以保证场景不被遗漏，极大地减少重构切换可能导致的问题，具体如何进行自动化和发现问题，你可以参考“第 07 讲”的内容。\n\n在自动化回归中，可能会出现的某一类问题需要特殊处理，因为增量同步延迟会导致数据对比不一致。原则上这类问题不应该存在，因为基于Binlog的主从同步延迟非常小。但如果遇到上述情况，因为增量同步的时延很小，所以我们可以等待几分钟后再次运行对比不一致的回放请求。\n\n用户切换\n\n完成数据对比之后，下一步需要落地的便是用户切换了。进行用户切换时，有几个原则需要遵循：\n\n 1. 切量不能一刀切，即不能一次将所有的用户全部切换至新版本服务里，需要灰度逐步地将用户从老版本切换到新版本服务里；\n\n 2. 在灰度切量时，需要尽早发现问题，而不是等到切量快完成的时候才发现问题。\n\n对于上述的几个要求，在切量的具体落地时，可以从以下几点着手落地。\n\n对于影响面小的要求。\n\n 1. 首先，对于升级重构的系统涉及的所有用户进行分析并按等级划分。可以按用户的注册时间、是否为会员等进行划分。如果重构的模块是订单模块，可以将用户按历史以来的下单量、订单金额进行排序，订单量小、下单金额低的用户排在最前面。\n\n 2. 在用户按上述的维度排序后，可以将用户分为几大批次，比如将所有用户按排序分为五等份。第一等份的用户因为单量小、下单金额少，可以最先进行切换，这样便满足前述提到的“出问题影响面少”的要求。\n\n对于在切量时，尽可能早发现问题的要求。\n\n对上述排序的第一等份的用户，再次进行分析和分类。我们知道，一个系统对外一般会提供多个功能点，比如用户模块会对外提供用户注册、查询用户基本信息、修改个人签名等功能。可以对第一等份里的用户进行数据分析，分析这些用户里哪些用户使用了较多的系统功能。在分析后，可以按使用功能的多少对第一等份里的用户进行排序，使用功能较多的用户排序在前面。在切量时，第一等份里使用系统功能最多的用户会优先进行切量，这也满足了前面所要求的尽可能多发现问题的要求。\n\n\n总结\n\n本讲介绍了系统升级重构的两种常见的类型。并分别介绍了这两种类型在升级重构后，如何实施让用户尽可能少感知的切换方案。\n\n同时，在包含存储的系统升级重构切换方案里，借鉴了很多本专栏前面介绍过的技术方案，比如基于Binlog的数据同步、基于流量回放的自动化回归方案等。\n\n由此可以看出，很多技术方案之间都是相互依赖的、相互连通的，甚至是成体系的。所以建议你在学习本专栏各讲的内容时，尝试寻找知识之间的联系，完善自己的知识体系，这样才能将专栏里的知识融会贯通，真正应用到实际的业务场景里。\n\n最后，留一道思考题给你，你认为互联网大厂的 App 和后台系统的上线发版是如何灰度切流的？欢迎写在留言区，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习 23 | 重构：烟囱式、平台化、中台化的架构演化\n\n----------------------------------------\n\n\n# 精选评论\n\n# **用户6149：\n\n> 那如果全量同步的数据 还没有同步完成 就发生了修改，这么弄？\n\n#     讲师回复：\n\n>     是先接上增量同步，再进行全量同步，这样便不会漏数据了。在增量和全量同步的代码里，需要进行同步判重。如果在全量时，发现某一条数据已经同步过，可以跳过即可。\n\n# **4123：\n\n> 其实还是少了数据回滚的方案，如果数据写入新的存储，但是发现要回滚，这个流程也需要考虑\n\n#     讲师回复：\n\n>     很好，是的。需要根据业务考虑开关回滚和数据回滚的流程",normalizedContent:"专栏的前 21 讲，从读、写以及扣减的角度介绍了三种特点各异的微服务的构建技巧，最后从微服务的共性问题出发，介绍了这些共性问题的应对技巧。\n\n在实际工作中，你就可以参考本专栏介绍的技巧构建新的微服务，架构一个具备“三高”能力的后台服务。同时，也可以利用所学的技巧对已有的微服务进行系统升级重构，从而解决历史遗留问题。\n\n升级重构是后台架构演化增强的一个利器，本讲将为你详细讲解如何落地对用户无感知、低 bug 的升级重构方案。\n\n\n重构常见的形式\n\n升级重构有两种常见的形式，一种是纯代码式的升级，另外一种是包含存储和代码的升级。\n\n纯代码的重构升级是指只针对代码中存在的一些历史遗留问题进行修复，比如代码中的慢 sql、错误的日志打印方式、代码中未显式开启事务等问题。\n\n注：在本讲，将存在问题的历史版本称为v1 版；修复问题后的升级重构版本称为 v2 版。纯代码的重构升级架构如下图1所示：\n\n\n\n图 1：纯代码的升级重构对比图\n\n包含存储和代码的重构升级是指在上述纯代码之外，将原有架构里的存储也一起升级。存储升级有两种形式。\n\n第一种是将存储类型进行升级，比如将数据库升级为缓存，将原有的读接口从数据库切换至缓存。做此类存储类型升级的目的是提升微服务的性能，我们在模块二中曾介绍，同样的硬件配置下，缓存比数据库至少快一个量级。不同类型的存储升级架构如下图 2 所示：\n\n\n\n图 2：不同类型的存储升级架构对比图\n\n可以看到升级后，原有的代码从 v1 升级到 v2。同时，存储从读写都使用数据库，升级为写操作使用数据库，读操作使用缓存的架构。\n\n第二种是将一个表结构的存储升级为同类型存储的另外一个更加合理的表结构。此类升级常见于系统构建时，为了快速满足业务需求，在时间紧张的情况下，简单快速地设计了不是特别合理的表结构。比如原有的表结构采用了一张宽表存储所有的数据，包含一对多的数据都进行冗余存储。升级重构时，需要采用更加合理的表结构存储数据，以便未来能够快速响应业务的发展。它的重构升级架构如下图 3 所示，升级后，原有微服务的读写都将切换至新的表结构的存储里。\n\n\n\n图 3：同类型不同表结构的存储升级架构对比图\n\n\n纯代码重构的切换\n\n纯代码重构的切换比较简单，当上述 v2 版本通过测试环境和预发布环境的测试后，就可以直接在线上部署，替换原有的v1 版本。当部署的 v2 版本出现问题后，直接进行回滚即可，这是最简单、粗暴的切换方式。但同时也存在隐患，采用此种方式部署的v2如果出现问题，会影响所有的用户，影响面较大。\n\n为了降低影响，可以采用灰度的方式。即用 v2 版本的代码替换一台或者一定比例 v1 版本的机器，比如线上有 100 台部署 v1 版本代码的机器，当 v2 版本测试完成准备上线时，可以先发布 10 台 v2 版本的代码。这样，假设 v2 版本的代码存在 bug，也只会影响访问这 10 台部署了 v2 版本代码的用户，即 10%的线上流量，这样就缩小了影响面。假设发布了 10 台 v2 版本的代码后，没有发现任何 bug，此时则可以继续发布，逐步进行替换。\n\n通过此种灰度的方式，既可以做到纯代码的升级重构切换，又可以缩小因此可能带来的线上问题的影响范围。\n\n\n含存储重构的切换\n\n与上述纯代码的切换相比，含存储的重构切换有一个重要步骤便是数据迁移。不管是上述不同类型的存储还是同类型不同表结构的存储重构，都需要将原有存储中的数据全部迁移至新的存储中，才能够称为完成切换。\n\n对于含存储重构的切换，最简单的方法便是停服，之后在无任何数据写入的情况下进行数据迁移，迁移之后再进行数据对比，对比无误之后，用重构的新版本连接新的存储对外提供服务即可。\n\n这种方式适合于以下 2 种场景：\n\n 1. 业务有间断期或者有低峰期的场景。比如企业内网系统，下班或者周末期间几乎没有人使用；\n\n 2. 金融资产类业务，这些业务对于正确性要求极高，因为用户对资产极度敏感，如果资产出现错误，用户是无法容忍的。为了资产安全无误，有时候需要用户容忍停服的重构升级。\n\n但对于用户量巨大，且大部分业务场景都需要提供 7*24 服务的互联网业务来说，停服切换方式，用户是不能接受。因此，就需要设计一套既不需要停服，又可以完成用户无感知的切换方案。\n\n切换架构\n\n为了实现不停服的重构升级，整体的新版本上线、数据迁移以及用户切量的架构如下 图 4 所示：\n\n\n\n图 4：不停服的切换架构\n\n上述的架构中，左边部分是老版本未重构的服务及对应的老数据存储（后续称为老存储），图中右边部分部署的是升级重构后的新版本的服务和对应的新版本存储（后续称为新存储）。这个存储可以是缓存或者是表结构不同的数据库。\n\n在图的下方，则是数据同步模块。它主要的作用是实时进行数据同步，将老存储里的历史数据、新增的写入以及更新的数据实时地同步至新存储里。实时数据同步是实现存储升级重构不停服切换的基础。\n\n在完成数据同步之后，便可以进行用户的灰度切量了，将用户逐步切换至升级重构的新版本上。见图 4 中最上面的部分。\n\n下面将对图 4 中涉及的各个部分进行详细讲解。\n\n数据同步\n\n当升级重构后的新版本开发及测试完成后，便可以将新版本代码和存储进行线上部署了。新版本部署时，可以将新版本服务对外提供的接口的别名变更为一个新的名称，如为：new_version，具体见上图 4。因为修改了别名，即使新版本的服务上线部署并直接对外了，也不会引入老版本的流量。\n\n通过上述方式可以实现新老版本的隔离，进而完成新版本服务的线上部署。新版本线上部署及隔离后，便可以进行数据同步了。\n\n数据同步分为历史数据的全量同步和新增数据的实时同步。在上述“含存储重构的切换”小节里介绍过，存储重构涉及两个种类，第一种是数据库到缓存，第二种是数据库到另一种异构的表结构数据库里。这里以使用场景较多的数据库到缓存的重构举例讲解，另一种场景比较类似，你可以按此方式自己推演。如果有疑问，也可以写在留言区，我们一起讨论。\n\n包含全量同步、增量数据的实时同步架构如下图 5所示：\n\n\n图 5：全量同步和增量同步架构\n\n上述第一步的全量同步（见图 5 的编号 1 处）是将历史数据进行一次全量初始化同步，可以采用 worker 的方式，对老版本的数据库的数据进行遍历，遍历的 sql 大致如下：\n\nselect 数据 from  t_table where id> last_id limit 一批次的数量\n\n\n从数据库遍历读取完之后，便会在同步服务模块里按缓存的格式进行数据格式的转换，转换后的数据写入缓存即可。\n\n上述的数据同步 sql 没有停止条件，且在未切量前，老库一直会有数据持续写入。使用上述 sql 进行同步时，会导致全量同步一直执行，出现无法停止的情况。针对这个问题，可以根据当前数据库已有数据量、数据增长的速度以及数据同步的速度，评估在数据同步期间能够产生的数据量，并评估出这期间最多可能产生的数据 id（截止 id），并将上述 sql 修改如下：\n\nselect 数据 from t_table where id> last_id  and id<截止id limit 一批次的数量\n\n\n第二步的增量实时同步是在开始进行全量同步时启动的，增量同步使用的是本专栏多次介绍的binlog 进行。通过在增量同步模块订阅老版本数据库里的数据变更，可以实时获取老版本数据库中新增和变更的数据。\n\n需要注意的是，增量同步需要在全量同步开始前便进行binlog的订阅。如果在全量同步结束后，再订阅 binlog 进行增量同步，可能会丢失在全量同步期间发生变更的数据。\n\n比如一张待同步的数据表里有 100 条数据，如果在全量同步前未开启增量同步。当同步至第 90 条数据时，第80 条数据发生了 update 操作，因为此时还没有开启增量同步，那么这第 80 条数据对应的变更就丢失了。为了防止此问题，就需要前置开启增量同步。\n\n最后，增量同步除了需要订阅 update 和 delete 操作外，还需要订阅 insert 操作。因为全量同步在上述截止 id 之后的数据便不会再同步了，需要增量同步处理此类操作。\n\n数据对比验证\n\n在完成数据迁移之后，并不是立马就能够开始用户切量。还需要做一步非常重要的事情，那便是进行测试。因为做了大规模的代码重构以及存储的切换，只靠人工测试是远远不够的，很容易出现场景遗漏。\n\n因此就需要借助自动化的方式进行测试，我想你还记得在“第 07 讲：基于流量回放的自动化回归测试”的内容。在完成全量数据同步后，可以录制老版本服务的流量，并进行自动化测试回归，它的架构如下图 6 所示：\n\n#后期同学美化下图，注意图中的文字，“第7将”改为“第7讲”\n\n\n\n图 6：自动化的数据对比验证架构图\n\n通过一定时间区间的自动化回归，可以保证场景不被遗漏，极大地减少重构切换可能导致的问题，具体如何进行自动化和发现问题，你可以参考“第 07 讲”的内容。\n\n在自动化回归中，可能会出现的某一类问题需要特殊处理，因为增量同步延迟会导致数据对比不一致。原则上这类问题不应该存在，因为基于binlog的主从同步延迟非常小。但如果遇到上述情况，因为增量同步的时延很小，所以我们可以等待几分钟后再次运行对比不一致的回放请求。\n\n用户切换\n\n完成数据对比之后，下一步需要落地的便是用户切换了。进行用户切换时，有几个原则需要遵循：\n\n 1. 切量不能一刀切，即不能一次将所有的用户全部切换至新版本服务里，需要灰度逐步地将用户从老版本切换到新版本服务里；\n\n 2. 在灰度切量时，需要尽早发现问题，而不是等到切量快完成的时候才发现问题。\n\n对于上述的几个要求，在切量的具体落地时，可以从以下几点着手落地。\n\n对于影响面小的要求。\n\n 1. 首先，对于升级重构的系统涉及的所有用户进行分析并按等级划分。可以按用户的注册时间、是否为会员等进行划分。如果重构的模块是订单模块，可以将用户按历史以来的下单量、订单金额进行排序，订单量小、下单金额低的用户排在最前面。\n\n 2. 在用户按上述的维度排序后，可以将用户分为几大批次，比如将所有用户按排序分为五等份。第一等份的用户因为单量小、下单金额少，可以最先进行切换，这样便满足前述提到的“出问题影响面少”的要求。\n\n对于在切量时，尽可能早发现问题的要求。\n\n对上述排序的第一等份的用户，再次进行分析和分类。我们知道，一个系统对外一般会提供多个功能点，比如用户模块会对外提供用户注册、查询用户基本信息、修改个人签名等功能。可以对第一等份里的用户进行数据分析，分析这些用户里哪些用户使用了较多的系统功能。在分析后，可以按使用功能的多少对第一等份里的用户进行排序，使用功能较多的用户排序在前面。在切量时，第一等份里使用系统功能最多的用户会优先进行切量，这也满足了前面所要求的尽可能多发现问题的要求。\n\n\n总结\n\n本讲介绍了系统升级重构的两种常见的类型。并分别介绍了这两种类型在升级重构后，如何实施让用户尽可能少感知的切换方案。\n\n同时，在包含存储的系统升级重构切换方案里，借鉴了很多本专栏前面介绍过的技术方案，比如基于binlog的数据同步、基于流量回放的自动化回归方案等。\n\n由此可以看出，很多技术方案之间都是相互依赖的、相互连通的，甚至是成体系的。所以建议你在学习本专栏各讲的内容时，尝试寻找知识之间的联系，完善自己的知识体系，这样才能将专栏里的知识融会贯通，真正应用到实际的业务场景里。\n\n最后，留一道思考题给你，你认为互联网大厂的 app 和后台系统的上线发版是如何灰度切流的？欢迎写在留言区，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，接下来我们将学习 23 | 重构：烟囱式、平台化、中台化的架构演化\n\n----------------------------------------\n\n\n# 精选评论\n\n# **用户6149：\n\n> 那如果全量同步的数据 还没有同步完成 就发生了修改，这么弄？\n\n#     讲师回复：\n\n>     是先接上增量同步，再进行全量同步，这样便不会漏数据了。在增量和全量同步的代码里，需要进行同步判重。如果在全量时，发现某一条数据已经同步过，可以跳过即可。\n\n# **4123：\n\n> 其实还是少了数据回滚的方案，如果数据写入新的存储，但是发现要回滚，这个流程也需要考虑\n\n#     讲师回复：\n\n>     很好，是的。需要根据业务考虑开关回滚和数据回滚的流程",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"重构：烟囱式、平台化、中台化的架构同与异",frontmatter:{title:"重构：烟囱式、平台化、中台化的架构同与异",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/556538/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/24.%20%E9%87%8D%E6%9E%84%EF%BC%9A%E7%83%9F%E5%9B%B1%E5%BC%8F%E3%80%81%E5%B9%B3%E5%8F%B0%E5%8C%96%E3%80%81%E4%B8%AD%E5%8F%B0%E5%8C%96%E7%9A%84%E6%9E%B6%E6%9E%84%E5%90%8C%E4%B8%8E%E5%BC%82.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/24. 重构：烟囱式、平台化、中台化的架构同与异.md",key:"v-05a5f534",path:"/pages/556538/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:5314}],headersStr:"精选评论",content:"上一讲里，我们介绍了两大类型的系统升级重构方案，还介绍了如何进行重构版本的上线，以及如何平滑地完成新老版本切换的方案。在本讲里，将会具体介绍如何判断系统发展到什么阶段需要重构，以及如何实施重构。\n\n\n系统稳定性的重构升级\n\n简单、通用的微服务架构如下图 1 所示，它包含一个应用服务和一个数据库作为存储。\n\n\n\n图 1：简单、通用的微服务架构图\n\n当上图中展示的架构出现如下一些问题时，可以采用上一讲中提到的“微服务中纯代码维度的升级重构”。\n\n 1. 代码日志打印冗余，且因为直接使用大对象进行 JSON 序列化的方式打印日志，进而导致常常出现 CPU 飙升。\n\n 2. 代码中未增加监控报警，导致用户先感知线上问题，研发再进行修复。\n\n 3. 代码可维护性低，开发需求耗时长，且开发时代码“牵一发而动全身”，产生的 Bug 较多。具体的一些表现是：\n\n（1）一个类中有上千或者上万行代码；\n\n（2）一个类中的某一个方法有上百或者上千行代码；\n\n（3）代码中没有注释；\n\n（4）为了防止影响历史业务，新需求开发均需将原有部分能复用的代码拷贝后，才能修改。\n\n此时，可以将出现上述问题的微服务进行代码重构。具体来说，可以采用 23 种设计模式、SOLID 原则将包含上千上万行代码的类进行重构。此时，重构后的微服务的上线即可对应上一讲里提到的“第一种重构类型：纯代码重构”。它的架构如下图 2 所示：\n\n\n\n图 2：纯代码升级重构\n\n完成纯代码的重构后，在日常维护中，当你发现有以下问题时，可以考虑进行包含存储的重构。\n\n 1. 随着业务的发展，微服务的流量由每秒几百的 QPS 上升至上千或上万的 QPS 时，可以将微服务的存储从数据库升级为缓存，以便有效应用业务增长带来的流量。\n\n 2. 业务或者运营需要对数据库中的四五张表进行聚合（join）分页查询，而数据库面对这些繁杂查询性能会变得非常差。此时可以将微服务的存储从数据库升级为 ElasticSearch，进而满足多维度的富查询。\n\n上述这两类便为包含存储的重构升级，第一个是从数据库升级到缓存，第二个是从数据库升级到 ElasticSearch。它们的架构如下图 3 所示：\n\n\n\n图 3：包含存储的架构升级\n\n\n烟囱式到平台化的重构升级\n\n完成上述两种重构之后，接下来就需要思考什么时候进行另一种存储类型均为数据库存储，但表结构不同的重构了。\n\n在介绍具体实施步骤前，咱们先来聊聊：什么是烟囱式架构。\n\n这里以即时通信作为讨论案例。在 PC 时代，QQ 在即时通信市场的占有率是绝对领先者，相信你也使用过。从技术的抽象层面来看，QQ 主要提供消息发送和消息接收的功能，消息可以是图片、表情、文字、视频、语音等内容。支撑 QQ 消息发送和接收的简版架构如下图 4 所示：\n\n\n\n图 4：简版的消息发送和接收架构图\n\n * 图中编号 1 的模块为安装在电脑里的 QQ 客户端，它主要给用户提供可视化的聊天界面，以及发送和接收其他用户的消息。\n\n * 编号为 2 的模块为网络接入层，它主要的作用是维护和客户端的网络连接，负责解析客户端发送到服务端的消息和推送其他用户发送的消息给到指定的客户端。在接收和发送消息时，接入层需基于 QQ 自有的数据协议进行消息内容的解码和编码。\n\n * 编号为 3 的是数据接收模块，它对外提供保存消息的 RPC 接口，并由编号 2 的网络接入层在接收到客户端消息的时候调用。接收模块接收到消息后，会将消息保存至存储中并通知编号 4 的消息发送模块。\n\n * 编号为 4 的是消息发送模块，它接收到通知后，会读取存储中的待发送消息并进行一定的逻辑处理，然后调用网络接入层进行消息的发送。\n\n关于即时通信后续的发展，你应该就有亲身感受了。为了抓住移动互联网的发展浪潮，腾讯又推出了即时通信的王者级应用：微信。从产品上看，微信和 QQ 在定位、应用界面设计、附加功能设计等方面存在差异。但抽象地从技术和核心功能上分析，两者的功能均是给用户提供消息发送和消息接收。因此，在技术实现上，微信研发团队也需要建设和上述图 4 类似的提供消息发送和接收的技术架构，如下图 5 所示：\n\n\n\n图 5：简版的微信消息发送和接收的架构图\n\n从图 5 中不难发现，除了编号 1 的微信 App 和编号 2 的网络接入层模块与图 4 有差异，其余各模块的功能基本上与图 4 类似。网络接入层之所以有差异，是因为接入层需要进行通信协议的解析，而 QQ 和微信的网络通信协议是根据各自的客户端进行定制的，因此会有格式上的差异。\n\n除了微信外，现在大部分在线游戏也都提供了即时通信的能力。因此，游戏团队也需要按上述类似的架构实现自己的消息发送和接收业务系统。\n\n类似上述介绍的这种模式：即系统架构大体上类似，其中只有个别模块存在差异，但各个研发团队还是从零开始建设全部模块的方式，称为烟囱式架构。为了方便你理解，我把QQ、微信以及游戏语音的架构放在一张图中，如下图 6 所示：\n\n\n\n图 6：即时通信的烟囱式架构示意图\n\n从上图可以看出，烟囱式架构是一种象形比喻，各个业务研发团队（如 QQ、微信、游戏语音团队）维护了一个类似烟囱式的、包含重复模块的系统架构。除了即时通信这个案例，还有很多其他会产生烟囱式架构的场景，比如电商，电商除了 PC、App、M 页面版本，现在还有很多购物场景，比如自动贩卖机、微信里的分享链接、小程序等。在实现上，如果他们的研发团队是封闭地进行自研，那么也会产生如下图 7 所示的电商版烟囱式架构。\n\n\n\n图 7：电商版烟囱式架构示意图\n\n经过前面的分析，烟囱式架构存在的问题其实已经比较明显了，即存在大量的模块重复，进而导致人力重复、成本增加。此时，为了解决这个问题，便可以启动本小节开头提到的升级重构：均为数据库存储，但表结构不同的重构了。\n\n以上述消息接收模块为例，它包含了一个代码进程和对应的消息存储（假设为 MySQL）。为了解决此模块的重复，可以合并 QQ、微信和游戏语音里此模块的代码。同时在前期设计时，各个业务只考虑自己的消息格式，所以它们的数据库的表结构是偏定制的，无法直接被复用，因此在重构时，还需要设计一套全新的、兼容原有三个版本的数据库。此时消息接收模块的重构架构如下图 8 所示：\n\n\n\n图 8：消息接收模块融合架构图（三个模块+数据库合并成一个）\n\n完成上述模块的重构融合升级之后，消息发送模块也可以进行类似的融合重构。当所有的可复用模块均完成升级重构后，上述三个不同的即时通信软件的架构演化成如下图 9 的形态：\n\n\n\n图 9：融合的系统架构\n\n融合后，三款软件有差异的系统模块依然各自维护，但消息接收和发送模块已经融合为一套。此时，从多个模块融合形成的、支持不同类型使用方的模块，称为平台化模块。而这个重构过程，有一个高大上的名称：从烟囱式架构朝着平台化演化。\n\n\n平台化到中台化的重构升级\n\n升级重构完成平台化之后，后续三款软件涉及消息接收和发送的新需求，都由平台化模块直接支持。这种需求支撑的模式，看起来十分像这几年兴起的中台化架构，但其实并不是。下面我们具体分析一下，你可以从以下两点来理解。\n\n 1. 平台化架构的概念要早于中台化架构。平台化只是将重复模块进行融合，如在平台化之后，未做任何中台化的改造，便不能直接称为中台化模块。\n\n 2. 平台化是从降低技术重复的角度出发，从而提升效率，而中台化是在平台化之后，从业务复用的角度出发，进一步提升业务需求的效率。\n\n下面，继续以上一小节的案例作为讨论对象。完成平台化，消灭重复技术之后，如果你遇到以下几种情况，则需要进一步重构，以便完成从平台化到中台化的演化。\n\n 1. 融合后的模块代码量庞大、代码中业务逻辑分散。表现就是需求承接时，需要一周时间进行评审，而开发只要一到两天时间，沟通成本巨大。\n\n 2. 当出现上述三个之外的新业务场景，融合的平台无法直接支持，而需要大量改造时。\n\n 3. 假设 QQ 的某一个需求在平台上开发上线后，微信也提出同样类似的需求，但平台无法直接复用 QQ 的需求，而需要重新开发时。\n\n从平台化到中台化演化升级，可以从业务能力可视化、业务能力在线配置化的方法进行落地改造。\n\n业务能力可视化\n\n仍以上述的数据接收模块为例，可以在平台化之后，将数据接收模块对外的接口流程进行梳理并可视化地展现出来。格式为如下图 10 所示：\n\n\n\n图 10：接收数据的接口的可视化展示\n\n> 流程：数据合法性校验 → 图片压缩 → 图片尺寸裁剪 → 图片转存到 CDN → 语音自动识别成文字 → 保存。\n\n上述这个流程图，大多数情况是在需求提出时由产品经理进行绘制，而在代码上线后便不会再实时更新。而中台化之后，需要开发建设一套业务可视化平台，将业务平台中的代码流程可视化地登记到可视化系统中，同时要保证可视化平台能够在业务代码修改后，实时更新相对应的流程。在实现上，编写业务代码时，可以增加一些代码标记，供可视化平台进行自动化扫描，进而识别业务流程，最终更新到可视化平台的显示界面上。\n\n通过将业务能力可视化之后，前面提到的因为平台化融合了太多代码，导致代码量多、业务无法直接从代码中抽取的问题便解决了。因为可视化之后，业务逻辑可以直接在可视化平台上展现出来，业务方和产品经理不需要和研发来回沟通上周的时间来确认需求，可以极大地降低沟通时间，提升效率。\n\n业务能力配置化\n\n在上述图 10 的流程中，可以看到有些是实心的圆圈，有些是空心的圆圈。空心表示代码执行到此流程节点时会直接跳过，而实心表示会执行此流程节点。流程节点是为空心还是实心，是可配置的，此配置功能可以落地在上述介绍的可视化平台里。\n\n上图 10 的可视化、可配置化流程只有一份，但假设微信在保存消息数据时，不希望图片被压缩而用原图保存；而 QQ 在保存消息数据时，不希望图片尺寸被裁剪。此时，如何通过配置化解决这样的需求呢？答案便是：基于业务身份进行业务流程的配置化。\n\n业务身份是指给 QQ、微信及游戏语音等每一个复用中台能力的应用，都分配一个全局唯一的名称。在进行配置的时候，按业务身份进行隔离，每一个业务身份都拥有属于自己的上述流程的配置，如下图 11 所示：\n\n\n\n图 11：按业务身份隔离的私有化流程配置图\n\n在执行时，各个即时通信应用在调用保存消息接口时，需传入自己的业务身份标识。对应的中台模块会根据业务身份获取相对应的配置，并按配置去编排属于此业务身份的流程。\n\n再回顾一下本小节开头提出的平台化架构会遇到的问题。\n\n 1. 再来一个新的聊天应用时，无法快速、直接复用已有能力。采用配置化后，可以给新的聊天应用配置一个业务身份，同时基于此应用的需求，去配置它需要使用的业务节点。\n\n 2. QQ 先提出的某一个业务需求并开发上线后，后续微信也想要此功能，但无法快速直接复用。在完成上述业务功能可视化、配置化的基础上，当 QQ 先提出的需求上线后，可视化的工具会将此新功能直接更新到上述流程节点里。只是在 QQ 对应的业务身份的配置里，此新加入的节点为实心。而其他不使用此新功能的业务身份里，此节点为空心。当后续微信需要使用此新功能时，直接将此节点勾选为实心，便可直接复用。\n\n至此，从平台化到中台化的重构升级便具备基本雏形。当前中台化的建设理论还处于初期，有很多种探索的实现方式，但万变不离其宗，它的核心仍然是：在面对不断出现的新的业务场景和形态时（如电商里新出现的社区购等），中台需要快速地复用已有能力，去满足业务新建站点或不断扩宽业务边界的诉求。\n\n\n总结\n\n罗马不是一日建成的，系统建设也是一样，它是随着业务的发展不断演化而来的。当业务体量较小且没有类似像 QQ 和微信的多个前台应用时，没有必要在建设初期就采用平台化或中台化的建设方案。因为它们的建设人力成本和消耗的机器资源也更高。\n\n一个系统在建设时，假如预期未来的三到五年的用户量并不会增长太大，可以先采用烟囱式的架构，快速地满足业务需求。当发展到一定体量后，再发起从烟囱式到平台化及中台化演化即可。毕竟能够发展到百万、千万用户体量的系统是少数，所有的系统都提前建设会存在较大可能的成本浪费。\n\n最后，我再给你留一个讨论话题：当前你所负责的系统处在什么样的阶段，是烟囱式、平台化或中台化的架构吗？它存在什么样的问题，你觉得是否有必要准备启动升级计划了。欢迎你在留言区说出你的想法，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，下一讲是本专栏的最后一篇内容，我想和你聊聊关于程序员发展的话题：抓住本质，是成为技术专家的不二法则。\n\n最后，我邀请你为本专栏课程进行结课评价，因为你的每一个观点都是我和拉勾教育最关注的点。点击链接，既可参与课程评价。编辑会随机抽 5 位同学送精美礼品喔。\n\n----------------------------------------\n\n\n# 精选评论\n\n# *西：\n\n> 原来是中台的接口服务实现要对上游业务系统进行业务流程与逻辑的配置，对中台架构有一些了解了，谢谢老师。😀\n\n# **4123：\n\n> 为什么可视化可以解决融合代码量大的问题呢？\n\n#     讲师回复：\n\n>     简单的来说，可视化解决的是，沟通效率、学习成本的问题。",normalizedContent:"上一讲里，我们介绍了两大类型的系统升级重构方案，还介绍了如何进行重构版本的上线，以及如何平滑地完成新老版本切换的方案。在本讲里，将会具体介绍如何判断系统发展到什么阶段需要重构，以及如何实施重构。\n\n\n系统稳定性的重构升级\n\n简单、通用的微服务架构如下图 1 所示，它包含一个应用服务和一个数据库作为存储。\n\n\n\n图 1：简单、通用的微服务架构图\n\n当上图中展示的架构出现如下一些问题时，可以采用上一讲中提到的“微服务中纯代码维度的升级重构”。\n\n 1. 代码日志打印冗余，且因为直接使用大对象进行 json 序列化的方式打印日志，进而导致常常出现 cpu 飙升。\n\n 2. 代码中未增加监控报警，导致用户先感知线上问题，研发再进行修复。\n\n 3. 代码可维护性低，开发需求耗时长，且开发时代码“牵一发而动全身”，产生的 bug 较多。具体的一些表现是：\n\n（1）一个类中有上千或者上万行代码；\n\n（2）一个类中的某一个方法有上百或者上千行代码；\n\n（3）代码中没有注释；\n\n（4）为了防止影响历史业务，新需求开发均需将原有部分能复用的代码拷贝后，才能修改。\n\n此时，可以将出现上述问题的微服务进行代码重构。具体来说，可以采用 23 种设计模式、solid 原则将包含上千上万行代码的类进行重构。此时，重构后的微服务的上线即可对应上一讲里提到的“第一种重构类型：纯代码重构”。它的架构如下图 2 所示：\n\n\n\n图 2：纯代码升级重构\n\n完成纯代码的重构后，在日常维护中，当你发现有以下问题时，可以考虑进行包含存储的重构。\n\n 1. 随着业务的发展，微服务的流量由每秒几百的 qps 上升至上千或上万的 qps 时，可以将微服务的存储从数据库升级为缓存，以便有效应用业务增长带来的流量。\n\n 2. 业务或者运营需要对数据库中的四五张表进行聚合（join）分页查询，而数据库面对这些繁杂查询性能会变得非常差。此时可以将微服务的存储从数据库升级为 elasticsearch，进而满足多维度的富查询。\n\n上述这两类便为包含存储的重构升级，第一个是从数据库升级到缓存，第二个是从数据库升级到 elasticsearch。它们的架构如下图 3 所示：\n\n\n\n图 3：包含存储的架构升级\n\n\n烟囱式到平台化的重构升级\n\n完成上述两种重构之后，接下来就需要思考什么时候进行另一种存储类型均为数据库存储，但表结构不同的重构了。\n\n在介绍具体实施步骤前，咱们先来聊聊：什么是烟囱式架构。\n\n这里以即时通信作为讨论案例。在 pc 时代，qq 在即时通信市场的占有率是绝对领先者，相信你也使用过。从技术的抽象层面来看，qq 主要提供消息发送和消息接收的功能，消息可以是图片、表情、文字、视频、语音等内容。支撑 qq 消息发送和接收的简版架构如下图 4 所示：\n\n\n\n图 4：简版的消息发送和接收架构图\n\n * 图中编号 1 的模块为安装在电脑里的 qq 客户端，它主要给用户提供可视化的聊天界面，以及发送和接收其他用户的消息。\n\n * 编号为 2 的模块为网络接入层，它主要的作用是维护和客户端的网络连接，负责解析客户端发送到服务端的消息和推送其他用户发送的消息给到指定的客户端。在接收和发送消息时，接入层需基于 qq 自有的数据协议进行消息内容的解码和编码。\n\n * 编号为 3 的是数据接收模块，它对外提供保存消息的 rpc 接口，并由编号 2 的网络接入层在接收到客户端消息的时候调用。接收模块接收到消息后，会将消息保存至存储中并通知编号 4 的消息发送模块。\n\n * 编号为 4 的是消息发送模块，它接收到通知后，会读取存储中的待发送消息并进行一定的逻辑处理，然后调用网络接入层进行消息的发送。\n\n关于即时通信后续的发展，你应该就有亲身感受了。为了抓住移动互联网的发展浪潮，腾讯又推出了即时通信的王者级应用：微信。从产品上看，微信和 qq 在定位、应用界面设计、附加功能设计等方面存在差异。但抽象地从技术和核心功能上分析，两者的功能均是给用户提供消息发送和消息接收。因此，在技术实现上，微信研发团队也需要建设和上述图 4 类似的提供消息发送和接收的技术架构，如下图 5 所示：\n\n\n\n图 5：简版的微信消息发送和接收的架构图\n\n从图 5 中不难发现，除了编号 1 的微信 app 和编号 2 的网络接入层模块与图 4 有差异，其余各模块的功能基本上与图 4 类似。网络接入层之所以有差异，是因为接入层需要进行通信协议的解析，而 qq 和微信的网络通信协议是根据各自的客户端进行定制的，因此会有格式上的差异。\n\n除了微信外，现在大部分在线游戏也都提供了即时通信的能力。因此，游戏团队也需要按上述类似的架构实现自己的消息发送和接收业务系统。\n\n类似上述介绍的这种模式：即系统架构大体上类似，其中只有个别模块存在差异，但各个研发团队还是从零开始建设全部模块的方式，称为烟囱式架构。为了方便你理解，我把qq、微信以及游戏语音的架构放在一张图中，如下图 6 所示：\n\n\n\n图 6：即时通信的烟囱式架构示意图\n\n从上图可以看出，烟囱式架构是一种象形比喻，各个业务研发团队（如 qq、微信、游戏语音团队）维护了一个类似烟囱式的、包含重复模块的系统架构。除了即时通信这个案例，还有很多其他会产生烟囱式架构的场景，比如电商，电商除了 pc、app、m 页面版本，现在还有很多购物场景，比如自动贩卖机、微信里的分享链接、小程序等。在实现上，如果他们的研发团队是封闭地进行自研，那么也会产生如下图 7 所示的电商版烟囱式架构。\n\n\n\n图 7：电商版烟囱式架构示意图\n\n经过前面的分析，烟囱式架构存在的问题其实已经比较明显了，即存在大量的模块重复，进而导致人力重复、成本增加。此时，为了解决这个问题，便可以启动本小节开头提到的升级重构：均为数据库存储，但表结构不同的重构了。\n\n以上述消息接收模块为例，它包含了一个代码进程和对应的消息存储（假设为 mysql）。为了解决此模块的重复，可以合并 qq、微信和游戏语音里此模块的代码。同时在前期设计时，各个业务只考虑自己的消息格式，所以它们的数据库的表结构是偏定制的，无法直接被复用，因此在重构时，还需要设计一套全新的、兼容原有三个版本的数据库。此时消息接收模块的重构架构如下图 8 所示：\n\n\n\n图 8：消息接收模块融合架构图（三个模块+数据库合并成一个）\n\n完成上述模块的重构融合升级之后，消息发送模块也可以进行类似的融合重构。当所有的可复用模块均完成升级重构后，上述三个不同的即时通信软件的架构演化成如下图 9 的形态：\n\n\n\n图 9：融合的系统架构\n\n融合后，三款软件有差异的系统模块依然各自维护，但消息接收和发送模块已经融合为一套。此时，从多个模块融合形成的、支持不同类型使用方的模块，称为平台化模块。而这个重构过程，有一个高大上的名称：从烟囱式架构朝着平台化演化。\n\n\n平台化到中台化的重构升级\n\n升级重构完成平台化之后，后续三款软件涉及消息接收和发送的新需求，都由平台化模块直接支持。这种需求支撑的模式，看起来十分像这几年兴起的中台化架构，但其实并不是。下面我们具体分析一下，你可以从以下两点来理解。\n\n 1. 平台化架构的概念要早于中台化架构。平台化只是将重复模块进行融合，如在平台化之后，未做任何中台化的改造，便不能直接称为中台化模块。\n\n 2. 平台化是从降低技术重复的角度出发，从而提升效率，而中台化是在平台化之后，从业务复用的角度出发，进一步提升业务需求的效率。\n\n下面，继续以上一小节的案例作为讨论对象。完成平台化，消灭重复技术之后，如果你遇到以下几种情况，则需要进一步重构，以便完成从平台化到中台化的演化。\n\n 1. 融合后的模块代码量庞大、代码中业务逻辑分散。表现就是需求承接时，需要一周时间进行评审，而开发只要一到两天时间，沟通成本巨大。\n\n 2. 当出现上述三个之外的新业务场景，融合的平台无法直接支持，而需要大量改造时。\n\n 3. 假设 qq 的某一个需求在平台上开发上线后，微信也提出同样类似的需求，但平台无法直接复用 qq 的需求，而需要重新开发时。\n\n从平台化到中台化演化升级，可以从业务能力可视化、业务能力在线配置化的方法进行落地改造。\n\n业务能力可视化\n\n仍以上述的数据接收模块为例，可以在平台化之后，将数据接收模块对外的接口流程进行梳理并可视化地展现出来。格式为如下图 10 所示：\n\n\n\n图 10：接收数据的接口的可视化展示\n\n> 流程：数据合法性校验 → 图片压缩 → 图片尺寸裁剪 → 图片转存到 cdn → 语音自动识别成文字 → 保存。\n\n上述这个流程图，大多数情况是在需求提出时由产品经理进行绘制，而在代码上线后便不会再实时更新。而中台化之后，需要开发建设一套业务可视化平台，将业务平台中的代码流程可视化地登记到可视化系统中，同时要保证可视化平台能够在业务代码修改后，实时更新相对应的流程。在实现上，编写业务代码时，可以增加一些代码标记，供可视化平台进行自动化扫描，进而识别业务流程，最终更新到可视化平台的显示界面上。\n\n通过将业务能力可视化之后，前面提到的因为平台化融合了太多代码，导致代码量多、业务无法直接从代码中抽取的问题便解决了。因为可视化之后，业务逻辑可以直接在可视化平台上展现出来，业务方和产品经理不需要和研发来回沟通上周的时间来确认需求，可以极大地降低沟通时间，提升效率。\n\n业务能力配置化\n\n在上述图 10 的流程中，可以看到有些是实心的圆圈，有些是空心的圆圈。空心表示代码执行到此流程节点时会直接跳过，而实心表示会执行此流程节点。流程节点是为空心还是实心，是可配置的，此配置功能可以落地在上述介绍的可视化平台里。\n\n上图 10 的可视化、可配置化流程只有一份，但假设微信在保存消息数据时，不希望图片被压缩而用原图保存；而 qq 在保存消息数据时，不希望图片尺寸被裁剪。此时，如何通过配置化解决这样的需求呢？答案便是：基于业务身份进行业务流程的配置化。\n\n业务身份是指给 qq、微信及游戏语音等每一个复用中台能力的应用，都分配一个全局唯一的名称。在进行配置的时候，按业务身份进行隔离，每一个业务身份都拥有属于自己的上述流程的配置，如下图 11 所示：\n\n\n\n图 11：按业务身份隔离的私有化流程配置图\n\n在执行时，各个即时通信应用在调用保存消息接口时，需传入自己的业务身份标识。对应的中台模块会根据业务身份获取相对应的配置，并按配置去编排属于此业务身份的流程。\n\n再回顾一下本小节开头提出的平台化架构会遇到的问题。\n\n 1. 再来一个新的聊天应用时，无法快速、直接复用已有能力。采用配置化后，可以给新的聊天应用配置一个业务身份，同时基于此应用的需求，去配置它需要使用的业务节点。\n\n 2. qq 先提出的某一个业务需求并开发上线后，后续微信也想要此功能，但无法快速直接复用。在完成上述业务功能可视化、配置化的基础上，当 qq 先提出的需求上线后，可视化的工具会将此新功能直接更新到上述流程节点里。只是在 qq 对应的业务身份的配置里，此新加入的节点为实心。而其他不使用此新功能的业务身份里，此节点为空心。当后续微信需要使用此新功能时，直接将此节点勾选为实心，便可直接复用。\n\n至此，从平台化到中台化的重构升级便具备基本雏形。当前中台化的建设理论还处于初期，有很多种探索的实现方式，但万变不离其宗，它的核心仍然是：在面对不断出现的新的业务场景和形态时（如电商里新出现的社区购等），中台需要快速地复用已有能力，去满足业务新建站点或不断扩宽业务边界的诉求。\n\n\n总结\n\n罗马不是一日建成的，系统建设也是一样，它是随着业务的发展不断演化而来的。当业务体量较小且没有类似像 qq 和微信的多个前台应用时，没有必要在建设初期就采用平台化或中台化的建设方案。因为它们的建设人力成本和消耗的机器资源也更高。\n\n一个系统在建设时，假如预期未来的三到五年的用户量并不会增长太大，可以先采用烟囱式的架构，快速地满足业务需求。当发展到一定体量后，再发起从烟囱式到平台化及中台化演化即可。毕竟能够发展到百万、千万用户体量的系统是少数，所有的系统都提前建设会存在较大可能的成本浪费。\n\n最后，我再给你留一个讨论话题：当前你所负责的系统处在什么样的阶段，是烟囱式、平台化或中台化的架构吗？它存在什么样的问题，你觉得是否有必要准备启动升级计划了。欢迎你在留言区说出你的想法，我们一起讨论。\n\n这一讲就到这里，感谢你学习本次课程，下一讲是本专栏的最后一篇内容，我想和你聊聊关于程序员发展的话题：抓住本质，是成为技术专家的不二法则。\n\n最后，我邀请你为本专栏课程进行结课评价，因为你的每一个观点都是我和拉勾教育最关注的点。点击链接，既可参与课程评价。编辑会随机抽 5 位同学送精美礼品喔。\n\n----------------------------------------\n\n\n# 精选评论\n\n# *西：\n\n> 原来是中台的接口服务实现要对上游业务系统进行业务流程与逻辑的配置，对中台架构有一些了解了，谢谢老师。😀\n\n# **4123：\n\n> 为什么可视化可以解决融合代码量大的问题呢？\n\n#     讲师回复：\n\n>     简单的来说，可视化解决的是，沟通效率、学习成本的问题。",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"加餐  技术人如何准备晋升答辩？",frontmatter:{title:"加餐  技术人如何准备晋升答辩？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/b987ac/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/25.%20%E5%8A%A0%E9%A4%90%C2%A0%20%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%A6%82%E4%BD%95%E5%87%86%E5%A4%87%E6%99%8B%E5%8D%87%E7%AD%94%E8%BE%A9%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/25. 加餐  技术人如何准备晋升答辩？.md",key:"v-a5868bbe",path:"/pages/b987ac/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4169}],headersStr:"精选评论",content:"岁末年初，转眼又到了绩效回顾、晋升答辩的时期，趁这个时间点，我想谈一谈我的个人经验，希望可以带给你点启发。\n\n这几年，我有幸作为答辩评委，参与过各个职级的晋升答辩，看到过形形色色的答辩现场。就在前阵子，我也花了不少时间在团队小伙伴的晋升辅导上，今天我就把一些晋升答辩的技巧和常见的坑和你唠一唠，在晋升之路上助你一臂之力。\n\n现在很多公司都有明确的《员工职级晋升管理制度》，晋升述职答辩已经非常常见了。既然是“答辩”，就涉及了准备内容、呈现内容及现场发挥，每一个环节都不容忽视。\n\n\n如何获得答辩机会\n\n有些公司的年度晋升是自主报名，每个人都有机会，但有些公司是提名制的，需要你自己争取答辩机会。下面我们就来聊一聊怎样才能获得提名资格。\n\n首先，你自身能力达到了下一个职级的要求，才有机会获得提名。但有些观点可能会认为，我晋升了才能具备下一个职级的能力。这就大错特错了。公司对人才的要求需要具备高度的确定性，通常不会冒太大风险去晋升能力不确定的人。因此你可以参考目标职级的同事，关注他们的技术深度和业务能力。如果你无法确定该往哪个方向努力，我建议你主动去和领导沟通，制定可落地的改进措施。其实上级对于希望成长的员工都是非常欢迎的。\n\n在获得答辩晋升机会后，就要开始为答辩做准备了。\n\n\n前期准备：学会生产素材而非积累素材\n\n述职答辩式的晋升需要你准备一份汇报 PPT，内容包含上次晋升以来或近一年的工作成果。在答辩时，为了防止出现刷脸，达到公平的效果，晋升答辩通常会跨团队邀请外部技术专家作为评委。他们不了解你的业务背景，因此你需要在短时间内将业务背景、工作成果介绍清楚。这对不善演讲的技术人来说，着实有着不小的挑战。\n\n那么，在日常工作中是否需要积累素材呢？我的答案是：并不需要！\n\n很多人可能都听过这样的说法：“如果你写答辩 PPT 没什么思路，那是因为平时没有积累素材。平时要做答辩素材的积累，才能就更好地编写答辩 PPT。”\n\n其实并不是这样。大部分公司的答辩时间一般在 20 分钟之内，也就是 5~10 页 PPT，只够你讲清楚 1~2 件事情。需要你在有限的时间里，展示在过去一年中做得最出彩的事情。我想这是不需要去素材库挑选的，应该瞬间跃然纸上的。如果你还要纠结一二，其实已经是问题了，因为每件事情都类似，成绩也会平淡无奇。\n\n因此我也给你一个建议，重点并不是要去记录素材，而是要生产素材。\n\n如果有机会，要尽可能多地去参与重难点项目建设，当然这可能会比较辛苦，但更容易得到价值收获。\n\n如果你没有参与过大型项目，另外一个生产素材的点，是技术深挖。比如线上产生一个问题——经常性地发生 CPU 占用突然飙高，停顿一两秒后又恢复正常。这对业务影响不大，所以很多人可能不会注意和处理这个问题。但如果你去深挖问题背后的底层原因，找到问题的根源并在团队内部分享，这就是很有价值的内容。因为你不仅主动解决了问题，还通过分享帮助了其他同学的成长。\n\n素材编写三原则\n\n确定了你准备讲解的素材案例后，在编写素材的方式上有三个原则需要遵循。\n\n原则一：不要只讲结果，要写问题和解决方式\n\n在上一年里，你负责了一个大型项目并成功完成了上线。切忌在 PPT 里花大篇幅介绍项目是什么及项目成功上线这一结果，因为评委无法通过结果评估你的能力和价值。\n\n在介绍素材时，首先要介绍背景。然后介绍这个素材案例中存在哪些问题，你是如何解决的。最后才是结果的讲述。评委主要通过你解决问题的手段，来评估你是否具备达到下一等级的能力。\n\n原则二：结果要有价值和数据体现\n\n在介绍结果时，很多人习惯讲解项目如期上线等内容，但在评委看来，这只是基本要求，并不是加分项。正确的做法是通过一些上线后的数据说话。比如介绍上线后的系统性能数据、质量等相关内容。\n\n这里我强调一点，很多研发同学习惯写上线后的一些业务数据，如新增用户数、带来的金额收入等。这类数据其实与产品、业务同学联系更紧密，毕竟需求是他们挖掘出来的。研发关注点应放在技术层面上。\n\n原则三：素材要符合职级定位\n\n如果你是从职级 6 升到职级 7，就要寻找符合职级 7 标准的素材。比如你对某一项工作成果很满意，但是职级 5 的同学也可以完成，建议就不要写了，这对你的晋升并没有帮助。\n\n如果你没有特别突出的素材，只能在过去工作内容里海选的话。在选择时，我给你 2 点建议：\n\n 1. 不要选择只有“苦劳”的内容。在工期非常赶的项目里，你加班加点的保障它如期上线，且获得了领导认可，得到了诸如绩效等嘉奖。类似的内容可不可以写呢？建议不要写，原因无法体现技术价值。你所有的“苦劳”都在绩效里体现了，你只要在 PPT 上展现你获得过几次绩优即可。\n\n 2. 无法量化和讲述出来的内容不要写。比如你做的某件事情被大领导点名表扬了，但是又很难通过文字量化出来，也不要写，因为评委感受不到。\n\nPPT 编写三建议\n\n选择了合适的素材后，就可以编写 PPT 了。有以下三个建议你可以参考。\n\n建议一：PPT 的基本格式要统一\n\n答辩的 PPT 不需要太绚丽的内容。除了要保证基本的工整，细节也很重要，比如：\n\n 1. 审查错字。有些评委会认为错别字多，可能写代码 BUG 也较多。\n\n 2. 统一字号。不要一页字大，一页字小。\n\n 3. 不要加过多动画。答辩重点是阐述内容，太多的动画容易出 BUG 且也会吸走一部分注意力。\n\n 4. 控制字数，重要的内容标红加粗。答辩一般都是集中评审，评委一天要评审很多人，没有耐心看太多字。把你想要表达的重点内容标红加粗，让评委快速吸收。\n\n建议二：不要放一张大而全的架构图\n\n很多同学都习惯在 PPT 里放一张大而全的架构图，如下图 1 所示，但在答辩时只讲解了图中的一部分内容——通过对用户写模块进行改造，以便完成对外接口的幂等性改造。\n\n\n\n图 1：大而全的架构图\n\n你认为，大而全的架构图可以彰显自己系统的完善性。但如果你只讲了其中一二，很难讲出价值内容，毕竟时间有限，反而容易给评委留下浮于表面的印象。在 PPT 编写时尽量不要出现这个情况。答辩最基本的要求是把问题说明白，然后才是高大上，此点要切记。\n\n对于用户写模块幂等性的优化改造，你可以采用更优的展现方式，如下图 2 所示，用具体问题的架构 + 细节问题描述代替大而全的架构图，这可以让评委快速了解问题的背景和你的解决手段，进而更准确地评判你到底做得好还是不好。\n\n\n\n图 2：幂等性的技改优化\n\n建议三：PPT 上不要“露马脚”\n\n我再多说一句，建议你不要放一张大而全的架构图，另一个原因是容易“露马脚”。我曾经遇到过，答辩人在 PPT 中写了“加密”两个字，我想他写出来的目的只是想表示使用了它。但评委一直对这个点“穷追不舍”，导致答辩人未能应变如流，最终答辩挂了。\n\n因此，写在 PPT 上的每一个字，你都需要十分了解，每一个内容都可能是地雷。\n\n答辩演练三建议\n\n写完 PPT 后， 正式答辩前的这段时间，就是属于你的练习时间，你要好好利用起来。在练习阶段有以下几点建议。\n\n建议一：写出答辩稿\n\n很多人没有写答辩稿的习惯，认为只要多练习就好了。撰写文字稿能够帮助你发现答辩的逻辑是否通畅。还能够框定你的表达内容，进而确定答辩时间。咱们前面提到过答辩有时间限制，如果没有固定的稿子，每次发挥的时长都不一样。最后很可能导因为超时，影响答辩效果。\n\n建议二：自己要准确按照答辩的时间要求，完整练习至少十遍以上（注意：非完整的零散练习和完整的练习节奏差别非常大。）\n\n建议三：选择正确的人做预答辩\n\n不同公司的晋升评委组成不同，有的是管理者、有的是技术专家，还有的是管理者 + 技术专家。因此，在做预答辩练习时，最好邀请相对应的人员帮助你辅导。答辩的角度需要根据评委组成做相应的调整。\n\n\n克服答辩紧张情绪\n\n焦急的等待之后，终于来到答辩时刻了。大家都会跟你说，答辩时不要紧张，会影响发挥。但过来人都知道，不紧张好像太难了。下面就说说具体有什么方式可以抑制紧张。\n\n首先还是上一小节的内容，答辩稿必须写出来，跟着演讲稿来。人在紧张时，智商和反应能力会指数级下滑，没有预先练习顺溜的稿子，你是临场发挥不出来的，只能满嘴跑火车或者照着 PPT 念，效果会大打折扣。\n\n另外一个能够避免紧张的好办法是做最坏假设。紧张是因为想要通过晋升。你可以想象下，此次晋升没有通过后的场景，你会怎么和这个结果共处并释怀？如果最坏的结果你都接纳了，还有什么不能面对的呢？这也能反过来激励你好好准备。\n\n此外，答辩一般都会有提问环节。很多时候，答辩演讲得很好，但回答得差，也可能会被一票否决，这种情况非常可惜。作为过来人，我在这里给你提几个醒：\n\n 1. 评委比较喜欢回答问题言简意赅、直达重点的人，印象分都比较高。评委听了一天的答辩，理解能力也下降得厉害，如果你半天说不到点子上，评委可能会认为你知识储备和逻辑能力薄弱。\n\n 2. 你无法提前预知评委的问题，短时间内该如何组织语言，才能达到言简意赅呢？有一个小技巧，在评委问完问题后，可以表述一遍自己理解的题目内容或者简单重复下评委的问题，来给自己争取一点思考和组织语言的时间。\n\n虽然不能预先拿到可能被问到的题目，但也可以提前做些准备的。评委的问题大多来源于PPT 和答辩稿里的内容，基本上不会凭空问你，所以最简单的应对方法便是深入思考其中每一个词语。比如，你写了一项较大幅度的技术优化，性能从 1000ms 优化至 50ms，但没有写具体如何实现，这就是评委提问的素材之一。\n\n最后，如果评委临场抛出了一个较难的问题，你可以短暂思考，尝试从几个角度简单回答一下，一定不要直接回答不知道。\n\n\n总结\n\n最后，再送给你一句鸡汤。有些人工作五年，但只有一年的经验；而有些人工作一年，却拥有了五年经验。那是因为一直在学习、思考和总结。希望正在学习本专栏的同学，能够在这里收获超过工作时间的经验。\n\n今天的加餐就到这里，下一模块我们讲解如何构建一个高性能的读服务。实战之旅即将开始，你准备好了吗？\n\n----------------------------------------\n\n\n# 精选评论\n\n# Sam：\n\n> 老师真的是过来人，明明白白的\n\n# **一：\n\n> 很可惜，公司的年底晋升在12月中就结束了，要不然我还能按照老师的讲解来做一下PPT。可恕我直言，这些都是表面工作。晋升本质上是部门利益的分配。资历呀，能力呀，绩效呀，上级倾向都是表面因素，实际上多跟领导沟通，都是能运作的。我很难过的一件事，是做完述职答辩后，评委的眼睛都不愿从手机上移开，然后夸我基础扎实，提问都免了。\n\n#     编辑回复：\n\n>     小伙伴你好，虽然这次的晋升答辩经历不尽人意，但不如冷静地思考一下过去的不足和新一年的目标。有志者事竟成，机会是留给有准备的人，相信努力的人运气都不会差。加油哦！！小编给你打气～～\n\n# **鑫：\n\n> 工作七年只有一年经验得我😂😂😂\n\n# *腾：\n\n> 最后一句总结让我开始慌了，典型的工作五年，一年经验😭\n\n#     编辑回复：\n\n>     努力吧 少年！\n\n# **淇：\n\n> 这个加餐就很舒服\n\n# *笨：\n\n> 潘老师，现在我这边是一个B端项目，数据量不大，也没有特别的技术点，属于常规业务、业务数据也不是很亮眼，平时积累的技术工作中并没有用到，这种如何准备晋升呢？我这种应该也不是个例子吧，有没有好的思路可以引导一下 ：）\n\n#     讲师回复：\n\n>     可以从解决的问题着手。并不一定是技术问题，比如团队技术文化平平，而你通过什么样的方式将团队技术文化给完善了，也可以成为亮点。 将一个问题的背景、解决思路以及落地效果讲好，也是可以的。突出你的解决思路即可。\n\n# **顺：\n\n> 值得学习，😀\n\n# *先：\n\n> 工作一年，有了五年的经验，来自于持续学习，总结，踩坑，加油。\n\n# **3961：\n\n> 进入大厂后最大的问题是自己没有思考，所以被呵呵哒了",normalizedContent:"岁末年初，转眼又到了绩效回顾、晋升答辩的时期，趁这个时间点，我想谈一谈我的个人经验，希望可以带给你点启发。\n\n这几年，我有幸作为答辩评委，参与过各个职级的晋升答辩，看到过形形色色的答辩现场。就在前阵子，我也花了不少时间在团队小伙伴的晋升辅导上，今天我就把一些晋升答辩的技巧和常见的坑和你唠一唠，在晋升之路上助你一臂之力。\n\n现在很多公司都有明确的《员工职级晋升管理制度》，晋升述职答辩已经非常常见了。既然是“答辩”，就涉及了准备内容、呈现内容及现场发挥，每一个环节都不容忽视。\n\n\n如何获得答辩机会\n\n有些公司的年度晋升是自主报名，每个人都有机会，但有些公司是提名制的，需要你自己争取答辩机会。下面我们就来聊一聊怎样才能获得提名资格。\n\n首先，你自身能力达到了下一个职级的要求，才有机会获得提名。但有些观点可能会认为，我晋升了才能具备下一个职级的能力。这就大错特错了。公司对人才的要求需要具备高度的确定性，通常不会冒太大风险去晋升能力不确定的人。因此你可以参考目标职级的同事，关注他们的技术深度和业务能力。如果你无法确定该往哪个方向努力，我建议你主动去和领导沟通，制定可落地的改进措施。其实上级对于希望成长的员工都是非常欢迎的。\n\n在获得答辩晋升机会后，就要开始为答辩做准备了。\n\n\n前期准备：学会生产素材而非积累素材\n\n述职答辩式的晋升需要你准备一份汇报 ppt，内容包含上次晋升以来或近一年的工作成果。在答辩时，为了防止出现刷脸，达到公平的效果，晋升答辩通常会跨团队邀请外部技术专家作为评委。他们不了解你的业务背景，因此你需要在短时间内将业务背景、工作成果介绍清楚。这对不善演讲的技术人来说，着实有着不小的挑战。\n\n那么，在日常工作中是否需要积累素材呢？我的答案是：并不需要！\n\n很多人可能都听过这样的说法：“如果你写答辩 ppt 没什么思路，那是因为平时没有积累素材。平时要做答辩素材的积累，才能就更好地编写答辩 ppt。”\n\n其实并不是这样。大部分公司的答辩时间一般在 20 分钟之内，也就是 5~10 页 ppt，只够你讲清楚 1~2 件事情。需要你在有限的时间里，展示在过去一年中做得最出彩的事情。我想这是不需要去素材库挑选的，应该瞬间跃然纸上的。如果你还要纠结一二，其实已经是问题了，因为每件事情都类似，成绩也会平淡无奇。\n\n因此我也给你一个建议，重点并不是要去记录素材，而是要生产素材。\n\n如果有机会，要尽可能多地去参与重难点项目建设，当然这可能会比较辛苦，但更容易得到价值收获。\n\n如果你没有参与过大型项目，另外一个生产素材的点，是技术深挖。比如线上产生一个问题——经常性地发生 cpu 占用突然飙高，停顿一两秒后又恢复正常。这对业务影响不大，所以很多人可能不会注意和处理这个问题。但如果你去深挖问题背后的底层原因，找到问题的根源并在团队内部分享，这就是很有价值的内容。因为你不仅主动解决了问题，还通过分享帮助了其他同学的成长。\n\n素材编写三原则\n\n确定了你准备讲解的素材案例后，在编写素材的方式上有三个原则需要遵循。\n\n原则一：不要只讲结果，要写问题和解决方式\n\n在上一年里，你负责了一个大型项目并成功完成了上线。切忌在 ppt 里花大篇幅介绍项目是什么及项目成功上线这一结果，因为评委无法通过结果评估你的能力和价值。\n\n在介绍素材时，首先要介绍背景。然后介绍这个素材案例中存在哪些问题，你是如何解决的。最后才是结果的讲述。评委主要通过你解决问题的手段，来评估你是否具备达到下一等级的能力。\n\n原则二：结果要有价值和数据体现\n\n在介绍结果时，很多人习惯讲解项目如期上线等内容，但在评委看来，这只是基本要求，并不是加分项。正确的做法是通过一些上线后的数据说话。比如介绍上线后的系统性能数据、质量等相关内容。\n\n这里我强调一点，很多研发同学习惯写上线后的一些业务数据，如新增用户数、带来的金额收入等。这类数据其实与产品、业务同学联系更紧密，毕竟需求是他们挖掘出来的。研发关注点应放在技术层面上。\n\n原则三：素材要符合职级定位\n\n如果你是从职级 6 升到职级 7，就要寻找符合职级 7 标准的素材。比如你对某一项工作成果很满意，但是职级 5 的同学也可以完成，建议就不要写了，这对你的晋升并没有帮助。\n\n如果你没有特别突出的素材，只能在过去工作内容里海选的话。在选择时，我给你 2 点建议：\n\n 1. 不要选择只有“苦劳”的内容。在工期非常赶的项目里，你加班加点的保障它如期上线，且获得了领导认可，得到了诸如绩效等嘉奖。类似的内容可不可以写呢？建议不要写，原因无法体现技术价值。你所有的“苦劳”都在绩效里体现了，你只要在 ppt 上展现你获得过几次绩优即可。\n\n 2. 无法量化和讲述出来的内容不要写。比如你做的某件事情被大领导点名表扬了，但是又很难通过文字量化出来，也不要写，因为评委感受不到。\n\nppt 编写三建议\n\n选择了合适的素材后，就可以编写 ppt 了。有以下三个建议你可以参考。\n\n建议一：ppt 的基本格式要统一\n\n答辩的 ppt 不需要太绚丽的内容。除了要保证基本的工整，细节也很重要，比如：\n\n 1. 审查错字。有些评委会认为错别字多，可能写代码 bug 也较多。\n\n 2. 统一字号。不要一页字大，一页字小。\n\n 3. 不要加过多动画。答辩重点是阐述内容，太多的动画容易出 bug 且也会吸走一部分注意力。\n\n 4. 控制字数，重要的内容标红加粗。答辩一般都是集中评审，评委一天要评审很多人，没有耐心看太多字。把你想要表达的重点内容标红加粗，让评委快速吸收。\n\n建议二：不要放一张大而全的架构图\n\n很多同学都习惯在 ppt 里放一张大而全的架构图，如下图 1 所示，但在答辩时只讲解了图中的一部分内容——通过对用户写模块进行改造，以便完成对外接口的幂等性改造。\n\n\n\n图 1：大而全的架构图\n\n你认为，大而全的架构图可以彰显自己系统的完善性。但如果你只讲了其中一二，很难讲出价值内容，毕竟时间有限，反而容易给评委留下浮于表面的印象。在 ppt 编写时尽量不要出现这个情况。答辩最基本的要求是把问题说明白，然后才是高大上，此点要切记。\n\n对于用户写模块幂等性的优化改造，你可以采用更优的展现方式，如下图 2 所示，用具体问题的架构 + 细节问题描述代替大而全的架构图，这可以让评委快速了解问题的背景和你的解决手段，进而更准确地评判你到底做得好还是不好。\n\n\n\n图 2：幂等性的技改优化\n\n建议三：ppt 上不要“露马脚”\n\n我再多说一句，建议你不要放一张大而全的架构图，另一个原因是容易“露马脚”。我曾经遇到过，答辩人在 ppt 中写了“加密”两个字，我想他写出来的目的只是想表示使用了它。但评委一直对这个点“穷追不舍”，导致答辩人未能应变如流，最终答辩挂了。\n\n因此，写在 ppt 上的每一个字，你都需要十分了解，每一个内容都可能是地雷。\n\n答辩演练三建议\n\n写完 ppt 后， 正式答辩前的这段时间，就是属于你的练习时间，你要好好利用起来。在练习阶段有以下几点建议。\n\n建议一：写出答辩稿\n\n很多人没有写答辩稿的习惯，认为只要多练习就好了。撰写文字稿能够帮助你发现答辩的逻辑是否通畅。还能够框定你的表达内容，进而确定答辩时间。咱们前面提到过答辩有时间限制，如果没有固定的稿子，每次发挥的时长都不一样。最后很可能导因为超时，影响答辩效果。\n\n建议二：自己要准确按照答辩的时间要求，完整练习至少十遍以上（注意：非完整的零散练习和完整的练习节奏差别非常大。）\n\n建议三：选择正确的人做预答辩\n\n不同公司的晋升评委组成不同，有的是管理者、有的是技术专家，还有的是管理者 + 技术专家。因此，在做预答辩练习时，最好邀请相对应的人员帮助你辅导。答辩的角度需要根据评委组成做相应的调整。\n\n\n克服答辩紧张情绪\n\n焦急的等待之后，终于来到答辩时刻了。大家都会跟你说，答辩时不要紧张，会影响发挥。但过来人都知道，不紧张好像太难了。下面就说说具体有什么方式可以抑制紧张。\n\n首先还是上一小节的内容，答辩稿必须写出来，跟着演讲稿来。人在紧张时，智商和反应能力会指数级下滑，没有预先练习顺溜的稿子，你是临场发挥不出来的，只能满嘴跑火车或者照着 ppt 念，效果会大打折扣。\n\n另外一个能够避免紧张的好办法是做最坏假设。紧张是因为想要通过晋升。你可以想象下，此次晋升没有通过后的场景，你会怎么和这个结果共处并释怀？如果最坏的结果你都接纳了，还有什么不能面对的呢？这也能反过来激励你好好准备。\n\n此外，答辩一般都会有提问环节。很多时候，答辩演讲得很好，但回答得差，也可能会被一票否决，这种情况非常可惜。作为过来人，我在这里给你提几个醒：\n\n 1. 评委比较喜欢回答问题言简意赅、直达重点的人，印象分都比较高。评委听了一天的答辩，理解能力也下降得厉害，如果你半天说不到点子上，评委可能会认为你知识储备和逻辑能力薄弱。\n\n 2. 你无法提前预知评委的问题，短时间内该如何组织语言，才能达到言简意赅呢？有一个小技巧，在评委问完问题后，可以表述一遍自己理解的题目内容或者简单重复下评委的问题，来给自己争取一点思考和组织语言的时间。\n\n虽然不能预先拿到可能被问到的题目，但也可以提前做些准备的。评委的问题大多来源于ppt 和答辩稿里的内容，基本上不会凭空问你，所以最简单的应对方法便是深入思考其中每一个词语。比如，你写了一项较大幅度的技术优化，性能从 1000ms 优化至 50ms，但没有写具体如何实现，这就是评委提问的素材之一。\n\n最后，如果评委临场抛出了一个较难的问题，你可以短暂思考，尝试从几个角度简单回答一下，一定不要直接回答不知道。\n\n\n总结\n\n最后，再送给你一句鸡汤。有些人工作五年，但只有一年的经验；而有些人工作一年，却拥有了五年经验。那是因为一直在学习、思考和总结。希望正在学习本专栏的同学，能够在这里收获超过工作时间的经验。\n\n今天的加餐就到这里，下一模块我们讲解如何构建一个高性能的读服务。实战之旅即将开始，你准备好了吗？\n\n----------------------------------------\n\n\n# 精选评论\n\n# sam：\n\n> 老师真的是过来人，明明白白的\n\n# **一：\n\n> 很可惜，公司的年底晋升在12月中就结束了，要不然我还能按照老师的讲解来做一下ppt。可恕我直言，这些都是表面工作。晋升本质上是部门利益的分配。资历呀，能力呀，绩效呀，上级倾向都是表面因素，实际上多跟领导沟通，都是能运作的。我很难过的一件事，是做完述职答辩后，评委的眼睛都不愿从手机上移开，然后夸我基础扎实，提问都免了。\n\n#     编辑回复：\n\n>     小伙伴你好，虽然这次的晋升答辩经历不尽人意，但不如冷静地思考一下过去的不足和新一年的目标。有志者事竟成，机会是留给有准备的人，相信努力的人运气都不会差。加油哦！！小编给你打气～～\n\n# **鑫：\n\n> 工作七年只有一年经验得我😂😂😂\n\n# *腾：\n\n> 最后一句总结让我开始慌了，典型的工作五年，一年经验😭\n\n#     编辑回复：\n\n>     努力吧 少年！\n\n# **淇：\n\n> 这个加餐就很舒服\n\n# *笨：\n\n> 潘老师，现在我这边是一个b端项目，数据量不大，也没有特别的技术点，属于常规业务、业务数据也不是很亮眼，平时积累的技术工作中并没有用到，这种如何准备晋升呢？我这种应该也不是个例子吧，有没有好的思路可以引导一下 ：）\n\n#     讲师回复：\n\n>     可以从解决的问题着手。并不一定是技术问题，比如团队技术文化平平，而你通过什么样的方式将团队技术文化给完善了，也可以成为亮点。 将一个问题的背景、解决思路以及落地效果讲好，也是可以的。突出你的解决思路即可。\n\n# **顺：\n\n> 值得学习，😀\n\n# *先：\n\n> 工作一年，有了五年的经验，来自于持续学习，总结，踩坑，加油。\n\n# **3961：\n\n> 进入大厂后最大的问题是自己没有思考，所以被呵呵哒了",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"开篇词  在管理艺术中寻找确定性的“工程逻辑”",frontmatter:{title:"开篇词  在管理艺术中寻找确定性的“工程逻辑”",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/9e818c/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/01.%20%E5%BC%80%E7%AF%87%E8%AF%8D%20%20%E5%9C%A8%E7%AE%A1%E7%90%86%E8%89%BA%E6%9C%AF%E4%B8%AD%E5%AF%BB%E6%89%BE%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84%E2%80%9C%E5%B7%A5%E7%A8%8B%E9%80%BB%E8%BE%91%E2%80%9D.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/01. 开篇词  在管理艺术中寻找确定性的“工程逻辑”.md",key:"v-6569389a",path:"/pages/9e818c/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:3178}],headersStr:"精选评论",content:"有知有行，你好，我是石佳宁，前阿里本地生活研发总监。\n\n2014 年我加入饿了么，2018 年进入阿里本地生活，这几年始终专注在业务研发和团队管理上，时刻不敢放松。\n\n在饿了么，我从 ALL IN ONE（一体化） 的内部运营系统切入，陆续负责过 BD、客服、代理商、订单、支付等领域的产研团队，既从 0 到 1 地搭建过研发团队，也半路接手过问题部门。后来，饿了么并入阿里，我搭建中台研发团队，负责交易、营销、金融三个领域的中台系统，团队的规模逐步扩大到 200 多人。\n\n在这个过程中，如果说十几人的团队大部分时候允许试错，可以实践出真知，那么 200 人的团队试错成本就太高了。所以当我看到阿里在组织、管理、规划上有一套非常成熟的体系之后，便有意识地将自己之前的经验凝练成框架性的方法论，这两年获益良多。\n\n回顾这几年的经历我发现，管理并不像很多书中说的那样难以琢磨，虽然其中包含了很多感性驱动的认知和做事方法，但依然有足够大的比重可以被理性逻辑化（比如技术工作的安排、团队机制与流程的讨论和执行，这些不单纯由感性与情感来驱动和判断）。\n\n就好比面对一套陌生的系统，即使它看起来再杂乱无章，只要你从应用初始化开始，沿着请求处理的流程去梳理，结合工程结构和运行机制，很快就能搞清楚并上手开发。管理也有类似的特性，包含了基本的结构和逻辑，只要你能够找准其规律，就可以做得更好。\n\n所以即使说管理是一门艺术，我认为其中也存在因果性很强的“工程逻辑”，你可以通过观察、模仿、学习、总结，找出管理的脉络与规律，结合你对人性的理解与实际场景，提炼出适合自己的管理方法和框架。\n\n\n管理就是“管人”和“管事”吗？\n\n管理最基本的解读，就是它的字面意思：“管人”和“理事”。但在现实中要更复杂，你要先把人凝聚起来，让团队成员有提高、有成长，形成团队战斗力，之后再把事情理清楚、做明白、拿到结果。\n\n在这个过程中，重要的是转换管理工作的目标，让目标从完成一次次独立任务，变为追求长期发展。就好似我们做技术，不仅要从 0 到 1 搭建系统，还要让系统长期可扩展可维护。\n\n当然，很难有一个明确的标准去衡量你会不会管理，管理得好不好。但在一般情况下，在一个动态的变化过程中，不断解决问题、完善机制、打造团队，一起拿到更好的结果，这样的管理就已经成功一大半了。所以在我看来，发展才是硬道理，管理就是以解决问题为根本，追求事务的可持续发展（这是管理的主线脉络）。\n\n在此基础上，不同的人在管理动作上可能有不同的倾向，比如有的更关注流程设计是否细致完善、有的更在乎任务的分配与执行是否严格，就我而言更注重管理动作的实操和迭代，我认为所有管理动作都可以提炼出两个关键的规律（它们会贯穿我整个课程，融入课程的具体场景中）：\n\n * 管理动作是否完整、足够持续与连贯，形成一套管理闭环？\n\n * 管理动作是否足够简单到可以复制，并结合自己的情况进行定制？\n\n\n技术人做管理面临什么问题？\n\n当然，你可能觉得“管理”“带团队”离你很远，因为技术才是你的真爱，但实际上如果你的技术出色，积累了 3~5 年的技术经验，具备编码（Coding）、系统设计与实现的硬核实力，很可能就被推着走到“管理”的角色上，让你开始做沟通协同、团队搭建等工作，而这个情况在互联网公司中很常见。\n\n我就是被推着走上管理的，最初老板让我尝试负责一个小 Team，2015 年突然让我接手一个几十人的大部门。那时，我既没有系统学过管理，也没得到高人指导，完全是边摸索边总结，很久之后才慢慢沉淀下来了一套自己的方法论。之前我经常和朋友说自己管理路子比较实锤也比较野，因为我本身就是野蛮生长的。\n\n所以对技术人来讲，“带团队”是迟早要掌握的能力之一，与其到时自乱阵脚，还不如趁早准备，提前具备“管理”意识，掌握“管理”能力。\n\n那么在这个过程中，你可能会面临哪些挑战呢？\n\n * 责任与问题繁多，不知道哪些是重点： 当你从单一完成任务和 Coding 转变角色之后，职责范围变得更加广泛，要解决的问题层出不穷，甚至原本轻松自如的技术问题，也从个人的变为团队的。问题是解决不完的，优先解决哪些问题？繁杂的问题中，凭借有限的时间与资源，怎样抓住重点找到核心，搞清楚这一点是你解决问题的关键。\n\n * 管理只凭感觉，找不到开箱即用的实操框架：“管理的重心要做什么，团队应该怎么带？”“网络上那么多的管理方法和框架，到底哪一种适合我？”……不少刚做管理的同学都会有类似的疑问，说白了就是被市面上众多管理理念、方法扰乱了视线。在我看来，越复杂的管理框架、越高大上的管理理念，落地成本越高，不具备普适性，简单接地气才是王道。\n\n * 结果没预想得好，频繁陷入管理陷阱中： 或许你看过许多管理方面的书，认为自己做足了准备，但一上战场，还是频繁陷入“屁股决定脑袋”“地盘意识”“山头主义”等管理者陷阱。面对具体问题或者场景主观情绪作祟，忽视管理动作的规律，无法真正解决问题。而我告诉你的是，管理本身由实践驱动，你不仅要学习理论和方法，更要知道怎么把理论和方法运用到具体的案例中。\n\n这些挑战在我刚开始带团队时都遇到过，所以我在“管理”上的一些思考可以给你切实的帮助。这里没有长篇小说般的故事，更多是我结合自身经历说一说我为什么这样认识，以及我是如何思考的。\n\n\n课程是如何设计的？\n\n因为技术管理本质上应是先“技术”后“管理”，所以我先会跟你聊一聊哪些是作为技术Leader 必须做好的本职工作。之后我们再将重心落到管理上，用一套足够简单又实用的方法框架，帮你快速建立起自己的管理认知与体系。最后，我再通过解读工作中的几个高频场景，与之前所讲的全部内容做一个验证和映射。总的来讲，课程主要划分为三个部分。\n\n第一部分：核心关注的技术事务\n\n我会指出技术 Leader 应该核心关注的技术事务，比如稳定性建设、技术债务、大项目和系统架构，这些都是具体的场景和问题，我希望你看到的虽然是具体的“术”有所不同，但是背后的“道”是一致的。\n\n第二部分：管理三板斧\n\n这里借鉴了阿里管理“三板斧”的框架：拿结果、建团队、招聘与解聘。结合我的经历与思考，将一套最基本、最质朴的管理框架拆解出来。某种程度来说，它并不受角色和业务的限制，是非常基础的管理“套路”，你甚至可以先用它来带团队，然后再结合实际的工作场景去扩展它，简单意味着容易理解，并且很好实践。\n\n第三部分：如何应对管理中的冲突与矛盾\n\n我们在日常工作、管理、做事情时很容易产生冲突和矛盾，大到做公司的大项目，小到找员工OneOne，帮助员工晋升等，在这里我会结合自己的经历以及对 Leader 角色的思考，与你分享我是如何应对这些场景，如何应用自己的“套路”，让自己拿到更好的“结果”。\n\n无论你是一位刚刚转换角色的新手 Leader，还是一名技术实力过硬，想要提升自己的综合能力的技术骨干，我都能希望你在我的课程中有所收获。\n\n\n讲师寄语\n\n技术同学更关注逻辑，习惯直面问题，而管理则包含了人性和事务之间的博弈，很难通过已知信息作出合理的预判，但其中仍有规律可循，核心是你要建立自己的认知：\n\n> 追求事务的可持续发展，保持自己管理动作的完整性、足够持续与连贯，让管理落地可以简单到容易复制。\n\n我认为，你可以用工程的视角和方式去切入和积累，逐步搭建出自己对于管理的思考方式和逻辑框架。当然，与其你看我是怎么做的，不如看看我为什么那么做，背后的思考以及逻辑规律是怎样的。\n\n通过别人的经验让自己少走一些弯路，同时形成自己的思考与沉淀，我相信未来的你会更有逻辑、更有条理地处理各种复杂问题。\n\n----------------------------------------\n\n\n# 精选评论\n\n# *强：\n\n> 请问，视频中的PPT课件，哪里可以获取？\n\n#     讲师回复：\n\n>     【持续更新】成为会带团队的技术人 链接: https://pan.baidu.com/s/1_LTQOlZs5cilJSqVfOZmfQ 提取码: xy29\n\n# *卓：\n\n> 您好。置顶的链接已经被取消了。怎么才能获取资料？谢谢。\n\n#     编辑回复：\n\n>     https://pan.baidu.com/s/1BdFCyJ_uhmDAJ8EMhquALQ，提取码：qnc8\n\n# **3615：\n\n> nice\n\n# **辰：\n\n> 看开篇就觉得肯定干货满满, 妥妥的追下去\n\n#     讲师回复：\n\n>     加油！\n\n# **0423：\n\n> 与人打交道是最难的，但也是最有趣的\n\n# *畅：\n\n> 老师逻辑很严谨，看来是有自己的方法论。 期待一下\n\n# *旻：\n\n> 喜欢大佬这种干货\n\n#     讲师回复：\n\n>     感谢支持\n\n# **杭：\n\n> 牛\n\n# **2580：\n\n> 写的挺好，很受益。\n\n#     讲师回复：\n\n>     谢谢支持\n\n# **帆：\n\n> 👍🏻\n\n# **春：\n\n> 老师讲的真好\n\n#     讲师回复：\n\n>     谢谢支持\n\n# **5138：\n\n> 三板斧听起来简单，能融会贯通很难！\n\n#     讲师回复：\n\n>     听起来最基础，其实最关键，不管什么级别这几斧都不过时。\n\n# **燕：\n\n> 666",normalizedContent:"有知有行，你好，我是石佳宁，前阿里本地生活研发总监。\n\n2014 年我加入饿了么，2018 年进入阿里本地生活，这几年始终专注在业务研发和团队管理上，时刻不敢放松。\n\n在饿了么，我从 all in one（一体化） 的内部运营系统切入，陆续负责过 bd、客服、代理商、订单、支付等领域的产研团队，既从 0 到 1 地搭建过研发团队，也半路接手过问题部门。后来，饿了么并入阿里，我搭建中台研发团队，负责交易、营销、金融三个领域的中台系统，团队的规模逐步扩大到 200 多人。\n\n在这个过程中，如果说十几人的团队大部分时候允许试错，可以实践出真知，那么 200 人的团队试错成本就太高了。所以当我看到阿里在组织、管理、规划上有一套非常成熟的体系之后，便有意识地将自己之前的经验凝练成框架性的方法论，这两年获益良多。\n\n回顾这几年的经历我发现，管理并不像很多书中说的那样难以琢磨，虽然其中包含了很多感性驱动的认知和做事方法，但依然有足够大的比重可以被理性逻辑化（比如技术工作的安排、团队机制与流程的讨论和执行，这些不单纯由感性与情感来驱动和判断）。\n\n就好比面对一套陌生的系统，即使它看起来再杂乱无章，只要你从应用初始化开始，沿着请求处理的流程去梳理，结合工程结构和运行机制，很快就能搞清楚并上手开发。管理也有类似的特性，包含了基本的结构和逻辑，只要你能够找准其规律，就可以做得更好。\n\n所以即使说管理是一门艺术，我认为其中也存在因果性很强的“工程逻辑”，你可以通过观察、模仿、学习、总结，找出管理的脉络与规律，结合你对人性的理解与实际场景，提炼出适合自己的管理方法和框架。\n\n\n管理就是“管人”和“管事”吗？\n\n管理最基本的解读，就是它的字面意思：“管人”和“理事”。但在现实中要更复杂，你要先把人凝聚起来，让团队成员有提高、有成长，形成团队战斗力，之后再把事情理清楚、做明白、拿到结果。\n\n在这个过程中，重要的是转换管理工作的目标，让目标从完成一次次独立任务，变为追求长期发展。就好似我们做技术，不仅要从 0 到 1 搭建系统，还要让系统长期可扩展可维护。\n\n当然，很难有一个明确的标准去衡量你会不会管理，管理得好不好。但在一般情况下，在一个动态的变化过程中，不断解决问题、完善机制、打造团队，一起拿到更好的结果，这样的管理就已经成功一大半了。所以在我看来，发展才是硬道理，管理就是以解决问题为根本，追求事务的可持续发展（这是管理的主线脉络）。\n\n在此基础上，不同的人在管理动作上可能有不同的倾向，比如有的更关注流程设计是否细致完善、有的更在乎任务的分配与执行是否严格，就我而言更注重管理动作的实操和迭代，我认为所有管理动作都可以提炼出两个关键的规律（它们会贯穿我整个课程，融入课程的具体场景中）：\n\n * 管理动作是否完整、足够持续与连贯，形成一套管理闭环？\n\n * 管理动作是否足够简单到可以复制，并结合自己的情况进行定制？\n\n\n技术人做管理面临什么问题？\n\n当然，你可能觉得“管理”“带团队”离你很远，因为技术才是你的真爱，但实际上如果你的技术出色，积累了 3~5 年的技术经验，具备编码（coding）、系统设计与实现的硬核实力，很可能就被推着走到“管理”的角色上，让你开始做沟通协同、团队搭建等工作，而这个情况在互联网公司中很常见。\n\n我就是被推着走上管理的，最初老板让我尝试负责一个小 team，2015 年突然让我接手一个几十人的大部门。那时，我既没有系统学过管理，也没得到高人指导，完全是边摸索边总结，很久之后才慢慢沉淀下来了一套自己的方法论。之前我经常和朋友说自己管理路子比较实锤也比较野，因为我本身就是野蛮生长的。\n\n所以对技术人来讲，“带团队”是迟早要掌握的能力之一，与其到时自乱阵脚，还不如趁早准备，提前具备“管理”意识，掌握“管理”能力。\n\n那么在这个过程中，你可能会面临哪些挑战呢？\n\n * 责任与问题繁多，不知道哪些是重点： 当你从单一完成任务和 coding 转变角色之后，职责范围变得更加广泛，要解决的问题层出不穷，甚至原本轻松自如的技术问题，也从个人的变为团队的。问题是解决不完的，优先解决哪些问题？繁杂的问题中，凭借有限的时间与资源，怎样抓住重点找到核心，搞清楚这一点是你解决问题的关键。\n\n * 管理只凭感觉，找不到开箱即用的实操框架：“管理的重心要做什么，团队应该怎么带？”“网络上那么多的管理方法和框架，到底哪一种适合我？”……不少刚做管理的同学都会有类似的疑问，说白了就是被市面上众多管理理念、方法扰乱了视线。在我看来，越复杂的管理框架、越高大上的管理理念，落地成本越高，不具备普适性，简单接地气才是王道。\n\n * 结果没预想得好，频繁陷入管理陷阱中： 或许你看过许多管理方面的书，认为自己做足了准备，但一上战场，还是频繁陷入“屁股决定脑袋”“地盘意识”“山头主义”等管理者陷阱。面对具体问题或者场景主观情绪作祟，忽视管理动作的规律，无法真正解决问题。而我告诉你的是，管理本身由实践驱动，你不仅要学习理论和方法，更要知道怎么把理论和方法运用到具体的案例中。\n\n这些挑战在我刚开始带团队时都遇到过，所以我在“管理”上的一些思考可以给你切实的帮助。这里没有长篇小说般的故事，更多是我结合自身经历说一说我为什么这样认识，以及我是如何思考的。\n\n\n课程是如何设计的？\n\n因为技术管理本质上应是先“技术”后“管理”，所以我先会跟你聊一聊哪些是作为技术leader 必须做好的本职工作。之后我们再将重心落到管理上，用一套足够简单又实用的方法框架，帮你快速建立起自己的管理认知与体系。最后，我再通过解读工作中的几个高频场景，与之前所讲的全部内容做一个验证和映射。总的来讲，课程主要划分为三个部分。\n\n第一部分：核心关注的技术事务\n\n我会指出技术 leader 应该核心关注的技术事务，比如稳定性建设、技术债务、大项目和系统架构，这些都是具体的场景和问题，我希望你看到的虽然是具体的“术”有所不同，但是背后的“道”是一致的。\n\n第二部分：管理三板斧\n\n这里借鉴了阿里管理“三板斧”的框架：拿结果、建团队、招聘与解聘。结合我的经历与思考，将一套最基本、最质朴的管理框架拆解出来。某种程度来说，它并不受角色和业务的限制，是非常基础的管理“套路”，你甚至可以先用它来带团队，然后再结合实际的工作场景去扩展它，简单意味着容易理解，并且很好实践。\n\n第三部分：如何应对管理中的冲突与矛盾\n\n我们在日常工作、管理、做事情时很容易产生冲突和矛盾，大到做公司的大项目，小到找员工oneone，帮助员工晋升等，在这里我会结合自己的经历以及对 leader 角色的思考，与你分享我是如何应对这些场景，如何应用自己的“套路”，让自己拿到更好的“结果”。\n\n无论你是一位刚刚转换角色的新手 leader，还是一名技术实力过硬，想要提升自己的综合能力的技术骨干，我都能希望你在我的课程中有所收获。\n\n\n讲师寄语\n\n技术同学更关注逻辑，习惯直面问题，而管理则包含了人性和事务之间的博弈，很难通过已知信息作出合理的预判，但其中仍有规律可循，核心是你要建立自己的认知：\n\n> 追求事务的可持续发展，保持自己管理动作的完整性、足够持续与连贯，让管理落地可以简单到容易复制。\n\n我认为，你可以用工程的视角和方式去切入和积累，逐步搭建出自己对于管理的思考方式和逻辑框架。当然，与其你看我是怎么做的，不如看看我为什么那么做，背后的思考以及逻辑规律是怎样的。\n\n通过别人的经验让自己少走一些弯路，同时形成自己的思考与沉淀，我相信未来的你会更有逻辑、更有条理地处理各种复杂问题。\n\n----------------------------------------\n\n\n# 精选评论\n\n# *强：\n\n> 请问，视频中的ppt课件，哪里可以获取？\n\n#     讲师回复：\n\n>     【持续更新】成为会带团队的技术人 链接: https://pan.baidu.com/s/1_ltqolzs5ciljsqvfozmfq 提取码: xy29\n\n# *卓：\n\n> 您好。置顶的链接已经被取消了。怎么才能获取资料？谢谢。\n\n#     编辑回复：\n\n>     https://pan.baidu.com/s/1bdfcyj_uhmdaj8emhqualq，提取码：qnc8\n\n# **3615：\n\n> nice\n\n# **辰：\n\n> 看开篇就觉得肯定干货满满, 妥妥的追下去\n\n#     讲师回复：\n\n>     加油！\n\n# **0423：\n\n> 与人打交道是最难的，但也是最有趣的\n\n# *畅：\n\n> 老师逻辑很严谨，看来是有自己的方法论。 期待一下\n\n# *旻：\n\n> 喜欢大佬这种干货\n\n#     讲师回复：\n\n>     感谢支持\n\n# **杭：\n\n> 牛\n\n# **2580：\n\n> 写的挺好，很受益。\n\n#     讲师回复：\n\n>     谢谢支持\n\n# **帆：\n\n> 👍🏻\n\n# **春：\n\n> 老师讲的真好\n\n#     讲师回复：\n\n>     谢谢支持\n\n# **5138：\n\n> 三板斧听起来简单，能融会贯通很难！\n\n#     讲师回复：\n\n>     听起来最基础，其实最关键，不管什么级别这几斧都不过时。\n\n# **燕：\n\n> 666",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"结束语  抓住本质，是成为技术专家的不二法则",frontmatter:{title:"结束语  抓住本质，是成为技术专家的不二法则",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/8c029f/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/10.%2023%E8%AE%B2%E6%90%9E%E5%AE%9A%E5%90%8E%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/26.%20%E7%BB%93%E6%9D%9F%E8%AF%AD%C2%A0%C2%A0%E6%8A%93%E4%BD%8F%E6%9C%AC%E8%B4%A8%EF%BC%8C%E6%98%AF%E6%88%90%E4%B8%BA%E6%8A%80%E6%9C%AF%E4%B8%93%E5%AE%B6%E7%9A%84%E4%B8%8D%E4%BA%8C%E6%B3%95%E5%88%99.html",relativePath:"65.他山之石/30. 后端&架构/10. 23讲搞定后台架构实战/26. 结束语  抓住本质，是成为技术专家的不二法则.md",key:"v-8dc2d6dc",path:"/pages/8c029f/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:2698}],headersStr:"精选评论",content:"时间飞逝，转眼就到专栏结束的时间。首先，给坚持学习到本讲的你点赞。同时，也感谢你的一路陪伴，你们的留言与反馈也给我持续输出内容提供了莫大的动力，再次说声谢谢。\n\n今天我想简单和你回顾一下专栏的内容。第一个模块主要从目的性的角度对后台系统的架构进行了归类，分为读、写和扣减三大类，这也是本专栏后续三个模块详细介绍的内容。在最后一个模块，对微服务的共性问题，比如 SDK 设计、依赖的治理、监控、重构升级等一一进行了讨论。通过这段时间的投入和学习，相信你对一些问题也能产生新的理解。\n\n如果你对某块内容还不太明白，那么建议你有空再复习一次，以便加深理解，进一步增强你的后端架构技能。\n\n除了本专栏讲解的后端通用架构技能之外，我还有三个观点想和你分享，希望能够在你成为架构师的道路上，助你一臂之力。\n\n\n抽象是抓住本质的最佳手段\n\n在编写本专栏之前，我已经将近年来，参加和主动学习的各类型的后台系统解决方案进行了抽象总结，并从系统的目的性出发，将整个后台系统分成了三大类，读、写和扣减类。此后，遇到各种类型的业务需求时，我都会先进行归类，再判断实现时具体属于哪一类型的系统。当完成归类后，就可以直接复用已经整理过的三大类后台系统的最佳实践，极大地提升系统设计的效率。\n\n上述介绍的，将各种类型的后台系统进行归类的过程，就是架构抽象。总的来说，抽象有几个好处。\n\n首先，抽象是指将同一类系统进行集中研究并寻找其中规律的过程。假设，在你第一次接触扣减类的业务需求时，它可能是用户每天可以登录公司某一个内部网站的次数限制。因为是内部站点，访问量和并发量很小，使用纯数据库即可满足。\n\n但如果你借助这一次需求的机会，去研究所有扣减类的业务（如支付扣减、库存扣减等）需求的特点，以及如何实现扣减，并进行总结、对比形成一套套路。那么恭喜你，你正走在成为扣减类系统架构专家的道路上。\n\n其次，当你下一次再遇到其他披着各种业务场景的外皮，但其实底层技术实现都是扣减时，便可以轻松应对，提升效率。\n\n此外，在我学习使用 Java 的数据库 API 时，抽象在其中也发挥了重要的作用。在 Java 中，只需要将不同类型的数据库的驱动加入代码工程，就可以直接使用 JDK 中定义的标准 API 连接各种不同类型的数据库了，无需任何配置。比如将 MySQL 的驱动实现放到代码中，就可以直接使用标准 API 访问 MySQL 数据库了。在我刚开始接触 Java 时，曾经非常好奇它是如何实现的。\n\n在不断寻找资料和阅读源码之后，了解到这叫 SPI 技术，它是需求方只定义标准接口并基于标准协议便可以自动选择三方实现进行装载的技术，而第三方的实现主要基于标准接口和协议进行实现，比如 MySQL 版、Oracle 版。\n\n这种从 Java 自动装配数据库驱动出发，去寻找底层原理为 SPI 的方式，就是使用抽象化的方法寻找本质的过程。当我后来接触到 Spring Boot 的时候，发现它的自动装配，其实就是 SPI 的另一种类实现，这时我学习起来就变得非常简单了。\n\n从上面的经验可以看到，如果你理解了一项技术背后的本质，再遇到这项技术的变种场景时，很容易就能理解它，从而在技术上事半功倍。\n\n\n刻意练习才能形成肌肉记忆\n\n在回顾本专栏的内容时，如果不能随着潜意识说出大纲分类，以及每种类型的系统在实现时的技术要求和架构思路，说明你对专栏的内容还没有形成肌肉记忆。\n\n一项技能形成肌肉记忆才会真正成为你自己的能力。当你面对一个需求评审或者面试时，能够很清晰、快速地输出对应的解决方案，而不是磕磕碰碰、努力地回想，无法真正解决问题或者说服面试官。\n\n将一项技术或者技能形成肌肉记忆，最好的方式就是刻意练习，有一本畅销书叫作《刻意练习》，我推荐你有空可以看一看。\n\n下面我把打篮球作为案例和你继续讨论这个话题。曾经有很多和我一起学习打篮球的同学，他们现在的篮球技术已经把我甩到九霄云外了。产生这个情况的原因是我在学会打篮球的基本技巧（如基本的投篮和运球）之后，就消耗大量的时间去和朋友进行娱乐赛。\n\n而我的这些同学，学习了基本的投篮和运球技巧之后，还会努力去思考怎样把投篮姿势纠正得更好，如何让运球的手法变得更有熟练度，变得像 NBA 球星那样。所以后来他们的篮球技巧要比我高出非常多，他们在不断地刻意练习提升篮球技能，而我则在低水平线的篮球技巧上不断重复，没有进步。\n\n学习也是一样。本专栏提供的技术和技巧，能够帮助你在后台开发中，解决一部分问题，但你并不能就此止步。因为专栏的定位和篇幅的原因，它涉及的其他技术：\n\n * Redis 为什么那么快？\n\n * 还有哪些使用顺序写比随机更改快这一特点来解决问题的业务场景？\n\n * MySQL 自身的 Binlog 是如何实现低延迟、无丢失的数据同步？\n\n * 各类监控系统如何处理海量的监控数据？\n\n这些待研究的问题都需要你去刻意练习，或者说需要你去钻牛角尖，搞明白其中涉及的所有技术点并不断地挖掘背后的本质。此时你离成为一个真正的技术大牛就不远了。\n\n\n不设限，广泛汲取，增加自己的护城河\n\n在坚持上述两点建议后，我相信，在不久的将来，你也能成为技术大佬。\n\n但我并不希望你止步于此，因为现在这个社会需要的是“T”型人才，只有一项技能并不能无往不利。 “T”这个字母由一横和一竖组成。这一竖，表示你要有一项或多项非常专业的技能；这一横，代表你要有很宽的知识面，综合能力强。\n\n那怎么才能将一横变得越来越长，一竖变得越来越厚呢？\n\n答案是，需要你保持一颗好奇心、积极的心态，广泛地去涉猎。当遇到自己不懂的技术或业务领域时，不要产生抵触心理，而是积极地去了解它。比如说你当前主要从事后端开发的工作，但是我希望当你有机会接触大数据、前端、数据挖掘、终端等领域的时候，也能够先进行抽象发现新领域的技术本质，再进行刻意练习，坚持下来，新接触的领域很有可能成为你的一项新技术专长，成为“T”这个字母中那一竖，或者至少能够拓宽“T”字母的那一横。\n\n\n寄语\n\n希望你能够一直保持一颗初心，不断归零，在面对任何新接触的领域时，都能够先去探寻它的本质并不断刻意练习，进而乘风破浪，早日成为你所期望的那个人。\n\n我是潘新宇，本讲就到在这里，再见。\n\n最后，我邀请你为本专栏课程进行结课评价，因为你的每一个观点都是我和拉勾教育最关注的点。点击链接，既可参与课程评价。编辑会随机抽 5 位同学送精美礼品喔。\n\n----------------------------------------\n\n\n# 精选评论\n\n# *敏：\n\n> 很棒，学到很多内容。谢谢\n\n# *明：\n\n> 刻意练习，闭环思维\n\n# **威：\n\n> 谢谢老师～\n\n# *广：\n\n> 这些道理都明白，但是却很难在日常工作学习过程中合理运用，所以一直都是低效的成长过程，很痛苦\n\n#     编辑回复：\n\n>     所以要打好基础，慢慢学会运用和解决问题。意识到自己的问题是好事，学习和成长是一个过程，小伙伴加油哦\n\n# **用户6149：\n\n> 66\n\n# **帆：\n\n> 刻意练习",normalizedContent:"时间飞逝，转眼就到专栏结束的时间。首先，给坚持学习到本讲的你点赞。同时，也感谢你的一路陪伴，你们的留言与反馈也给我持续输出内容提供了莫大的动力，再次说声谢谢。\n\n今天我想简单和你回顾一下专栏的内容。第一个模块主要从目的性的角度对后台系统的架构进行了归类，分为读、写和扣减三大类，这也是本专栏后续三个模块详细介绍的内容。在最后一个模块，对微服务的共性问题，比如 sdk 设计、依赖的治理、监控、重构升级等一一进行了讨论。通过这段时间的投入和学习，相信你对一些问题也能产生新的理解。\n\n如果你对某块内容还不太明白，那么建议你有空再复习一次，以便加深理解，进一步增强你的后端架构技能。\n\n除了本专栏讲解的后端通用架构技能之外，我还有三个观点想和你分享，希望能够在你成为架构师的道路上，助你一臂之力。\n\n\n抽象是抓住本质的最佳手段\n\n在编写本专栏之前，我已经将近年来，参加和主动学习的各类型的后台系统解决方案进行了抽象总结，并从系统的目的性出发，将整个后台系统分成了三大类，读、写和扣减类。此后，遇到各种类型的业务需求时，我都会先进行归类，再判断实现时具体属于哪一类型的系统。当完成归类后，就可以直接复用已经整理过的三大类后台系统的最佳实践，极大地提升系统设计的效率。\n\n上述介绍的，将各种类型的后台系统进行归类的过程，就是架构抽象。总的来说，抽象有几个好处。\n\n首先，抽象是指将同一类系统进行集中研究并寻找其中规律的过程。假设，在你第一次接触扣减类的业务需求时，它可能是用户每天可以登录公司某一个内部网站的次数限制。因为是内部站点，访问量和并发量很小，使用纯数据库即可满足。\n\n但如果你借助这一次需求的机会，去研究所有扣减类的业务（如支付扣减、库存扣减等）需求的特点，以及如何实现扣减，并进行总结、对比形成一套套路。那么恭喜你，你正走在成为扣减类系统架构专家的道路上。\n\n其次，当你下一次再遇到其他披着各种业务场景的外皮，但其实底层技术实现都是扣减时，便可以轻松应对，提升效率。\n\n此外，在我学习使用 java 的数据库 api 时，抽象在其中也发挥了重要的作用。在 java 中，只需要将不同类型的数据库的驱动加入代码工程，就可以直接使用 jdk 中定义的标准 api 连接各种不同类型的数据库了，无需任何配置。比如将 mysql 的驱动实现放到代码中，就可以直接使用标准 api 访问 mysql 数据库了。在我刚开始接触 java 时，曾经非常好奇它是如何实现的。\n\n在不断寻找资料和阅读源码之后，了解到这叫 spi 技术，它是需求方只定义标准接口并基于标准协议便可以自动选择三方实现进行装载的技术，而第三方的实现主要基于标准接口和协议进行实现，比如 mysql 版、oracle 版。\n\n这种从 java 自动装配数据库驱动出发，去寻找底层原理为 spi 的方式，就是使用抽象化的方法寻找本质的过程。当我后来接触到 spring boot 的时候，发现它的自动装配，其实就是 spi 的另一种类实现，这时我学习起来就变得非常简单了。\n\n从上面的经验可以看到，如果你理解了一项技术背后的本质，再遇到这项技术的变种场景时，很容易就能理解它，从而在技术上事半功倍。\n\n\n刻意练习才能形成肌肉记忆\n\n在回顾本专栏的内容时，如果不能随着潜意识说出大纲分类，以及每种类型的系统在实现时的技术要求和架构思路，说明你对专栏的内容还没有形成肌肉记忆。\n\n一项技能形成肌肉记忆才会真正成为你自己的能力。当你面对一个需求评审或者面试时，能够很清晰、快速地输出对应的解决方案，而不是磕磕碰碰、努力地回想，无法真正解决问题或者说服面试官。\n\n将一项技术或者技能形成肌肉记忆，最好的方式就是刻意练习，有一本畅销书叫作《刻意练习》，我推荐你有空可以看一看。\n\n下面我把打篮球作为案例和你继续讨论这个话题。曾经有很多和我一起学习打篮球的同学，他们现在的篮球技术已经把我甩到九霄云外了。产生这个情况的原因是我在学会打篮球的基本技巧（如基本的投篮和运球）之后，就消耗大量的时间去和朋友进行娱乐赛。\n\n而我的这些同学，学习了基本的投篮和运球技巧之后，还会努力去思考怎样把投篮姿势纠正得更好，如何让运球的手法变得更有熟练度，变得像 nba 球星那样。所以后来他们的篮球技巧要比我高出非常多，他们在不断地刻意练习提升篮球技能，而我则在低水平线的篮球技巧上不断重复，没有进步。\n\n学习也是一样。本专栏提供的技术和技巧，能够帮助你在后台开发中，解决一部分问题，但你并不能就此止步。因为专栏的定位和篇幅的原因，它涉及的其他技术：\n\n * redis 为什么那么快？\n\n * 还有哪些使用顺序写比随机更改快这一特点来解决问题的业务场景？\n\n * mysql 自身的 binlog 是如何实现低延迟、无丢失的数据同步？\n\n * 各类监控系统如何处理海量的监控数据？\n\n这些待研究的问题都需要你去刻意练习，或者说需要你去钻牛角尖，搞明白其中涉及的所有技术点并不断地挖掘背后的本质。此时你离成为一个真正的技术大牛就不远了。\n\n\n不设限，广泛汲取，增加自己的护城河\n\n在坚持上述两点建议后，我相信，在不久的将来，你也能成为技术大佬。\n\n但我并不希望你止步于此，因为现在这个社会需要的是“t”型人才，只有一项技能并不能无往不利。 “t”这个字母由一横和一竖组成。这一竖，表示你要有一项或多项非常专业的技能；这一横，代表你要有很宽的知识面，综合能力强。\n\n那怎么才能将一横变得越来越长，一竖变得越来越厚呢？\n\n答案是，需要你保持一颗好奇心、积极的心态，广泛地去涉猎。当遇到自己不懂的技术或业务领域时，不要产生抵触心理，而是积极地去了解它。比如说你当前主要从事后端开发的工作，但是我希望当你有机会接触大数据、前端、数据挖掘、终端等领域的时候，也能够先进行抽象发现新领域的技术本质，再进行刻意练习，坚持下来，新接触的领域很有可能成为你的一项新技术专长，成为“t”这个字母中那一竖，或者至少能够拓宽“t”字母的那一横。\n\n\n寄语\n\n希望你能够一直保持一颗初心，不断归零，在面对任何新接触的领域时，都能够先去探寻它的本质并不断刻意练习，进而乘风破浪，早日成为你所期望的那个人。\n\n我是潘新宇，本讲就到在这里，再见。\n\n最后，我邀请你为本专栏课程进行结课评价，因为你的每一个观点都是我和拉勾教育最关注的点。点击链接，既可参与课程评价。编辑会随机抽 5 位同学送精美礼品喔。\n\n----------------------------------------\n\n\n# 精选评论\n\n# *敏：\n\n> 很棒，学到很多内容。谢谢\n\n# *明：\n\n> 刻意练习，闭环思维\n\n# **威：\n\n> 谢谢老师～\n\n# *广：\n\n> 这些道理都明白，但是却很难在日常工作学习过程中合理运用，所以一直都是低效的成长过程，很痛苦\n\n#     编辑回复：\n\n>     所以要打好基础，慢慢学会运用和解决问题。意识到自己的问题是好事，学习和成长是一个过程，小伙伴加油哦\n\n# **用户6149：\n\n> 66\n\n# **帆：\n\n> 刻意练习",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"稳定性（一）：如何应对事故并做好复盘？",frontmatter:{title:"稳定性（一）：如何应对事故并做好复盘？",date:"2023-02-22T12:07:33.000Z",permalink:"/pages/a098c4/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/02.%20%20%E7%A8%B3%E5%AE%9A%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E4%BA%8B%E6%95%85%E5%B9%B6%E5%81%9A%E5%A5%BD%E5%A4%8D%E7%9B%98%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/02.  稳定性（一）：如何应对事故并做好复盘？.md",key:"v-41e962fb",path:"/pages/a098c4/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:6030}],headersStr:"精选评论",content:"这几年，我在饿了么和阿里本地生活经历了业务快速发展的黄金时期，也遇到了一些令人“出乎意料”的事故。\n\n2018 年的 915 事故，应该是这几年最严重的一次宕机，直接导致技术组织调整和一位技术大牛的离开，公司也赔了数亿的红包；1225 圣诞节宕机事故更是导致骑手罢工，甚至半年后还有城市经理和我抱怨说：“如果那一天系统不出问题，订单量肯定会创新高。”\n\n\n\n2018 年 915 事故官方公开信\n\n经历了大小数以百计的事故后，从 82 原则上看，我发现 20% 是因为人员能力和机制流程的欠缺，80% 则是因为人员的稳定性意识不足，并且故障应对方法不当。而作为技术 Leader 的你，如何认识稳定性、如何应对故障、如何从过往的事故中汲取足够的经验，就成为一个团队能否做好稳定性的关键。\n\n\n怎么衡量系统稳定性？\n\n一般来讲，通过统计系统不可用的时长或次数就可以对稳定性进行量化，比如业内常说 4 个 9 的可用性（即 1 年内 99.99% 的时间系统是可用的，不可用时长仅为 52.6 分钟）。\n\n在饿了么和阿里，每个财年我们会确定稳定性 KPI，以事故数的计量为准，结合团队情况和过往结果背负不同数量的事故指标。事故按照影响程度的不同会划分为几级，不同级别的事故数指标也不同。所以针对稳定性的提高也可以看作围绕事故的治理，可以从事故发生的前、中、后分阶段来看对应的关键点。\n\n * 事故的类型：可用性事故、资损类事故。\n\n * 事故前预防：主动治理减少系统的风险隐患，重点在变更管控、可用性设计、应急预案与演练。\n\n * 事故中应急：“止血、恢复”是原则。\n\n * 事故后复盘：目的不是追责，查根因、改进架构、完善应急、总结经验才是我们想要的。\n\n这一讲，我们来了解一下故障的应急与事故的复盘（预防治理我会在下面两讲分不同事故类型来详细讲解），因为事故的发生要结合具体的上下文背景、系统架构、甚至组织结构来看，并非千篇一律。\n\n希望今天的内容能帮你更深刻地理解稳定性的价值，并结合实际工作更加有条不紊地应对线上故障、有价值地进行事故的复盘总结。\n\n\n你遇到的事故是什么类型？\n\n从事故特性上看，我们可以分为可用性事故和资损类事故。\n\n * 可用性事故：技术原因导致系统部分或者全部功能不可用，业务没办法正常完成对应流程或者提供对应服务。比如因为网络、DB、接口 Bug 等原因，用户没办法登录、商品列表不显示等。\n\n * 资损类事故： 系统的功能都能正常使用，但因为逻辑、计算等原因让业务的某一方产生了资金损失。比如用户支付一律为 0 元、错发 999 无门槛优惠券、商户清结算少打款给商户等等。\n\n那么它们的区别是什么呢？\n\n可用性事故的根因大多在技术本身，包括但不限于： DB 设计、接口实现、链路架构、上下游的依赖、中间件的实现等原因，特点是发现容易、杜绝难、业务影响明显、对应急处理速度要求高。\n\n而资损类事故更多和隐蔽的业务逻辑和架构设计的缺陷有关，可能还涉及产品逻辑或业务错配，特点是非常隐蔽、难发现、往往持续时间长、防控成本高、大部分开发同学意识薄弱。\n\n因为这样的特性差异，两类事故在预防治理的思路和方法上有一定区别，但在故障的应急和事故复盘上，思路相对一致。那么当故障发生时，你要发挥什么作用呢？\n\n\n故障发生时应该如何应急？\n\n事故现场往往伴随着“混乱”，试想一下，你团队的小伙伴昨晚刚发布上线了新系统，今天上午一切正常，下午 App 核心页面突然无法显示、客服反馈说大量用户来电投诉，可谁都说不清楚到底是怎么回事，十几分钟过去了，系统依然没有恢复，类似的场景你是否经历过？\n\n那么这时，你应该起到“定海神针”的作用，故障发生时控场就是你的核心职责。 要有条不紊地安排同学进行排障、确定信息沟通的秩序、结合信息做好线上同步，并参与决策。\n\n在阿里，故障的处理有一个“ 1-5-10 ”的标准，即 1 分钟发现、5 分钟响应、10 分钟恢复。很明显，故障处理的核心在于“快”，让业务最快止血、恢复、避免影响进一步扩大。\n\n故障处理的生命周期，可以分为 4 个阶段：发现异常、排查问题、判断决策、恢复处理。这 4 个阶段对应的行动并不是完全串行的，虽然有一定的依赖关系，但在实际的处理过程中应该并行展开。类似 fork/join 的模式，不断完成小任务、不断汇总信息，不断做出判断与决策，形成循环直到故障恢复。\n\n接下来，我以外卖点餐的业务为例，讲一下故障的发现、排查、决策与恢复都要注意哪些核心要点，因为故障处理的核心原则相同，所以这些要点在其他业务场景中也适用。（时序图与真实系统间我做了一些模糊处理，但是不影响案例说明。）\n\n\n\n我们要点外卖的话，大体的流程是这样的：\n\n 1. 用户打开 App，根据用户 LBS 显示餐厅列表，选择进入某一家餐厅；\n\n 2. 添加菜品到购物车，进入结算页确定收货人、优惠红包、订单金额，生成订单；\n\n 3. 跳转第三方支付，并返回支付结果；\n\n 4. 商家接收订单推送，操作接单并备货；\n\n 5. 骑手根据调度取餐，送达用户，订单完成。\n\n1. 故障发现\n\n用户来电反馈订单无法支付、App 无法登录，研发发现下单 QPS 曲线同比下跌，这些都是事故发生时的现象，虽然现象不完全等于故障点，但通常最早出现异常现象的地方和故障根因关联最大，所以第一时间发现异常对于锁定问题至关重要。\n\n故障发现就是系统异常反馈到研发的过程，这里我画了一个简单的脑图，分类说明故障发现的几种常见方式：\n\n\n\n开发同学往往更关注技术类指标，比如 QPS、CPU LOAD，可 Leader 除此之外应该更多地从业务场景出发，结合需求来看系统的业务监控覆盖是否完全。业务监控往往更加敏锐，但是要想用好，就需要对业务和系统有较长链路的理解和掌握，而这恰恰是技术 Leader 的优势。\n\n比如用户进入餐厅后会添加菜品到购物车，并跳转到结算页完成下单。菜品服务会提供一个查询接口，根据餐厅 ID 返回菜品信息。假设这个查询接口最近做了变更，在库存逻辑的处理中埋下了一个 Bug，导致实际库存小于 50 时，库存的返回值被默认为 0，而其他数据则一切正常。\n\n那么此时类似 CPU、内存、I/O 等技术指标可能都不会异常。而因为是部分实际库存小于 50 的菜品被影响，用户依然可以添加其他菜品到购物车，但因为部分菜品库存为 0，用户想吃却没办法下单，那么这个时候订单成交量的环比、同比曲线就有可能下跌，而这个现象会让我们感知到异常，进而排查问题处理。\n\n总的来说，人工的被动反馈在时间和速度上有较强的不确定性，很容易出现“小故障 * 长时间 = 大事故”的情形。而纯粹的技术指标监控又会忽略掉接口正常响应，但是业务异常的场景，只有两者结合，通过监控告警，最大程度上缩短故障感知的时间，才能早发现早解决，减少业务影响。\n\n2. 故障排查\n\n发现异常，接下来就是排查故障点和故障原因，故障排查最直接有效的核心思路就是直接锁定 + 排除。\n\n * 直接锁定：最近的变更点与异常现象间有直接的逻辑关联，进而可以直接锁定到故障点。比如，刚对下单接口进行了发布变更，接口的 QPS 曲线就暴跌，可以基本断定是刚才的发布导致。\n\n * 排除法：当干扰因素过多（用户、订单等几个系统同时发生变更，引起订单下跌），很难直接锁定到故障点，就要结合业务场景，让整条架构链路上的所有关联方进行自查自证，通过排除法锁定故障。\n\n这里你要注意的是，要敢于先怀疑、排查自己的系统，再去考虑上下游关联方的问题，为的就是在信息混乱的现场，减少信息的不确定性，以身作则，带领团队成员将范围缩小，针对性地找到问题。\n\n如果你负责的是优惠券相关的系统，在下单的核心路径上，主要的场景就是优惠券领取、发放、展示、核销。你即使不是全部熟悉，也应该与团队同学共同协同，逐个确认这几个场景的核心接口是否有异常，通过对应的监控、日志收集信息并找问题，如果某一处没有发现问题，就排除并继续循环。\n\n\n\n如果还是没办法确定问题，或者只能确定大致范围，就要充分利用之前的事故经验了，此时一定要果断，可以结合情况启用标准应急手段（比如服务重启、发布回滚、非关键链路降级）。总的来说，在排障的过程中，如果团队成员都没有头绪，你一定要起到主导作用，可以参考我总结的一些要点做好“控场”。\n\n\n\n故障排查三要点\n\n3. 故障决策\n\n既然故障的表现是业务功能有损，那么在故障决策时为了让业务最快止血和恢复，就无法追求完美，一些为了抢时间的有损决策，就需要 CaseByCase 的人为处理。\n\n比如平台要搞一个 517 红包雨的活动 ，但是红包系统逻辑错误，导致满 50-10 的红包发放成满 10-50，此时已发的红包要作废吗 ？不作废有大额资损，作废会导致大量客诉。类似红包错配的场景，业务决策非常复杂，能否第一时间止损很大程度上取决于技术 Leader 的现场反应和操作， 要注意故障决策的两个关键点 ：\n\n * 一定要有明确的决策人、主导者和有效的沟通方式（钉钉群、多人电话会议、紧急作战会议室等），让信息可以通畅地交流出来，并且决策人可以根据情况做判断与取舍，形成所有人明确的处理结论。 比如，第一时间停止错误红包的发放，确保故障没有增量，并把决策第一时间同步给团队成员，并同步相关负责人后续的动作，对已发放的红包，明确要求负责人汇总各类关键信息（红包数量、涉及金额、涉及用户数、有效时长、可能资损等）。\n\n * 所有的信息一定要数据化，不同的数据量级会导致决策不同，比如红包错发 50W 可能只是暂停发放，但是存量红包依然可以核销，损失公司可以承担。但是如果错发 5000W，大概就要涉及一系列的调整，这是非常影响决策的。\n\n4. 故障恢复\n\n往往业务决策后就需要执行相应的技术操作，最好的情况当然是在系统设计时就准备了预案，那么此时可以安全且快速地执行，并且对不涉及业务决策的问题可以技术直接操作，节省时间，比如常见的应急“三板斧”：变更回滚、服务重启、降级&限流。\n\n而如果没有预案或情况比较复杂，就涉及线上Fix，比如因代码不兼容所以无法回滚，或者故障导致脏数据进而影响正常的业务流程推进，又或者红包金额错误需要做数据订正。你在这个环节要额外注意， 因为一来这种操作相当于一次“紧急变更”，有可能引入新的风险，二来不同的实现 Fix 成本和用时可能不同，Leader 需要给出自己的判断。\n\n比如刚刚提到的红包错配、错发的问题，假设影响金额过大，公司决定对存量红包作废止损，那么站在技术角度有很多方法，你需要让团队成员明确使用哪种方式：\n\n 1. 下单环节，在“我的优惠券”中通过前端隐藏对应的红包，让用户无法选择 ；\n\n 2. 根据红包批次 ID 或者类型，通过脚本刷数，将红包批量作废 ；\n\n 3. 在下单接口的校验环节，增加逻辑判断，禁止这批红包核销 ；\n\n 4. 通过风控系统拦截使用这类红包的订单。\n\n技术 Leader 要考虑不同恢复手段引入的新风险、操作用时、用户体验影响的不同，结合当前紧急程度、系统、具体操作人的情况，给出一个技术方面确定的判断。类似的问题，如果完全没有预案，我们之前常见的做法还是不动线上系统以免引入新问题，主要通过刷数据解决。\n\n\n\n故障恢复时 Leader 的关注点\n\n讲到这儿，你是不是觉得处理完事故就万事大吉了呢？并不是，你还要对这次事故做一个全面彻底的复盘，不让类似的问题重复发生，那么复盘都要注意哪些关键点呢？\n\n\n如何有价值地做事后复盘？\n\n复盘的核心不是为了追责或者甩锅，而是最大程度榨干事故的剩余价值，通过全盘的思考与总结，来看看系统设计、流程机制、应急处理、人员安排等各方面有哪些不足，哪些可以提升的地方，哪些问题是共性的，需要在各团队进行“大扫除”。\n\n通过一次事故，解决一类问题，让一个人（团队）踩过的坑变成所有人踩过的坑，正所谓“一次学费，受益终身”。\n\n你可以从时长、现象、处理时间轴、根因、改进计划这几个维度进行复盘， 在以下几个方面进行深究：\n\n * 事故时长：1-5-10 是否达成，如果没有是为什么？哪个环节用时最多，如何提高和改善？\n\n * 事故根因：根因不等于直接原因，一个事故的直接原因往往并不复杂，但是根因可能是多个维度的缺失，需要像剥洋葱一样一层层找下去。拿库存接口变更这个Case来说，直接原因就是某段代码逻辑变更导致，但是应该在测试、发布、监控、应急影响、预案设计等多个环节展开去看，根因的挖掘并不忌讳“吹毛求疵”。\n\n * 事故改进措施：由点推到面、明确到人、明确时间。与根因类似，要结合多个维度形成组合拳的改进点，避免一次性动作，要将重点放在对未来、对同类问题的预防上。核心就是如果再一次发生类似的问题，这些改进措施是不是能起到作用。\n\n关于事后复盘，你可以这样理解，我们要深挖事故如何发生的、如何处理的、未来怎么预防。但要避免情绪化，在复盘会上的反思、感悟、懊恼没有任何意义，如何带领团队把精力放在改进措施的落实以及事故前的治理上更有价值， 另外，你需要留出时间让团队伙伴进行内部的 Review，避免为了开会而复盘。\n\n\n小结\n\n虽然你会尽全力保障系统的稳定性，但是按照墨菲定律来说故障又一定会发生，这就形成了一个悖论，即不管你怎么努力还是会出问题，所以我一直强调：“稳定性是一个先有意识后有能力的事儿”，这一点尤为重要，毕竟你的态度和认识决定了团队的重视程度。 这一讲我想强调这样几个重点：\n\n 1. 毫不夸张地说，系统稳定性对于研发而言一条生死线，这方面做得不好，其他再好也是枉然，因为稳定性问题“下岗”被优化的 Leader 不在少数。\n\n 2. 对于故障的应急响应，业务的止损与恢复是最重要的，决断就是要付出一些代价的。\n\n 3. 事故的复盘不是为了追责过去，而是为了在未来避免类似的情况发生。\n\n\n\n业务快速发展的同时，技术必然存在妥协。 业务上需要快速的需求交付，技术上需要架构的可扩展，但速度和质量在工程领域总是存在冲突，而稳定性往往就是问题爆发的冲突点。作为技术 Leader，你要平衡好这两种诉求，让技术与业务协调发展的同时，最大程度确保系统的稳定运行，毕竟“没有质量的交付，再多再快都毫无意义”。\n\n\n\n留个作业： 把最近半年或一年你印象最深刻的事故重新复盘一遍吧，从事故根因、应急处理以及复盘改进几个角度去 Review，未来类似的事故是否还会发生，如果发生你能更好的应对吗？\n\n最后，感谢你的阅读，如果这节课让你有收获，欢迎你将它分享给其他的朋友，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **叔叔：\n\n> 复盘，最大程度压榨事故的剩余价值。这个深有体会，不应该变为追责会，而是需要转换为分析会，对架构策略处理等各方面进行分析总结，而不能是问责会。\n\n#     讲师回复：\n\n>     是的，会上问责只会把有价值的复盘会转化为无意义的甩锅会\n\n# *笨：\n\n> 总结一下，这一课主要是系统高可用之 应急策略整理并输出一套适合自己业务场景的SOP，提供部门新人以及其他同学参考\n\n#     讲师回复：\n\n>     应急策略适用在很多需要紧急处理和决策的场景，可以根据自己的团队与业务情况做计划，首先确保骨干都能掌握，毕竟不是每个人都有这种处理能力。\n\n# *至：\n\n> 假如事故原因分析下来是由于人为的问题如个别员工粗心、能力不足等，那是否要从制度方面来解决？\n\n#     讲师回复：\n\n>     如果真的是“人为问题”和“个别员工粗心或能力”这么强的限定条件，我建议优先解决制造问题的人，制度是应该有，但不应该是“服务于个别人的”。\n\n# **用户3335：\n\n> 1-5-10里大家都是如何实现1分钟内发现故障的\n\n#     讲师回复：\n\n>     只能靠监控告警，人工是几乎不可能的，监控本身有很多个纬度，具体可以参考文章里的脑图。\n\n# *春：\n\n> 开阔视野了，业务指标和技术指标结合了\n\n# **X：\n\n> 老师好，围绕于稳定性建设有两个问题。1.每个case如何定级呢？这个基线应该怎么来，每个业务的特点有所不同。2.如何将稳定性建设变得可复制，在大的团队方向上复制呢？是通过wiki，工具，标准，流程的建立吗？😃\n\n#     讲师回复：\n\n>     一般按照业务影响定级，可以按照公司业务量去制定一个影响百分比，比如影响用户数、减少的订单等等，标准这东西先有再优，逐步调整；想要可持续就需要建立机制，你说的那些都可以看做是机制落地时使用的工具或方法。\n\n# **7510：\n\n> 系统稳定性对于研发而言是一条生死线😅\n\n#     讲师回复：\n\n>     的确是这样\n\n# *庆：\n\n> 事故不可避免，要有充分的应急预案。\n\n#     讲师回复：\n\n>     很对",normalizedContent:"这几年，我在饿了么和阿里本地生活经历了业务快速发展的黄金时期，也遇到了一些令人“出乎意料”的事故。\n\n2018 年的 915 事故，应该是这几年最严重的一次宕机，直接导致技术组织调整和一位技术大牛的离开，公司也赔了数亿的红包；1225 圣诞节宕机事故更是导致骑手罢工，甚至半年后还有城市经理和我抱怨说：“如果那一天系统不出问题，订单量肯定会创新高。”\n\n\n\n2018 年 915 事故官方公开信\n\n经历了大小数以百计的事故后，从 82 原则上看，我发现 20% 是因为人员能力和机制流程的欠缺，80% 则是因为人员的稳定性意识不足，并且故障应对方法不当。而作为技术 leader 的你，如何认识稳定性、如何应对故障、如何从过往的事故中汲取足够的经验，就成为一个团队能否做好稳定性的关键。\n\n\n怎么衡量系统稳定性？\n\n一般来讲，通过统计系统不可用的时长或次数就可以对稳定性进行量化，比如业内常说 4 个 9 的可用性（即 1 年内 99.99% 的时间系统是可用的，不可用时长仅为 52.6 分钟）。\n\n在饿了么和阿里，每个财年我们会确定稳定性 kpi，以事故数的计量为准，结合团队情况和过往结果背负不同数量的事故指标。事故按照影响程度的不同会划分为几级，不同级别的事故数指标也不同。所以针对稳定性的提高也可以看作围绕事故的治理，可以从事故发生的前、中、后分阶段来看对应的关键点。\n\n * 事故的类型：可用性事故、资损类事故。\n\n * 事故前预防：主动治理减少系统的风险隐患，重点在变更管控、可用性设计、应急预案与演练。\n\n * 事故中应急：“止血、恢复”是原则。\n\n * 事故后复盘：目的不是追责，查根因、改进架构、完善应急、总结经验才是我们想要的。\n\n这一讲，我们来了解一下故障的应急与事故的复盘（预防治理我会在下面两讲分不同事故类型来详细讲解），因为事故的发生要结合具体的上下文背景、系统架构、甚至组织结构来看，并非千篇一律。\n\n希望今天的内容能帮你更深刻地理解稳定性的价值，并结合实际工作更加有条不紊地应对线上故障、有价值地进行事故的复盘总结。\n\n\n你遇到的事故是什么类型？\n\n从事故特性上看，我们可以分为可用性事故和资损类事故。\n\n * 可用性事故：技术原因导致系统部分或者全部功能不可用，业务没办法正常完成对应流程或者提供对应服务。比如因为网络、db、接口 bug 等原因，用户没办法登录、商品列表不显示等。\n\n * 资损类事故： 系统的功能都能正常使用，但因为逻辑、计算等原因让业务的某一方产生了资金损失。比如用户支付一律为 0 元、错发 999 无门槛优惠券、商户清结算少打款给商户等等。\n\n那么它们的区别是什么呢？\n\n可用性事故的根因大多在技术本身，包括但不限于： db 设计、接口实现、链路架构、上下游的依赖、中间件的实现等原因，特点是发现容易、杜绝难、业务影响明显、对应急处理速度要求高。\n\n而资损类事故更多和隐蔽的业务逻辑和架构设计的缺陷有关，可能还涉及产品逻辑或业务错配，特点是非常隐蔽、难发现、往往持续时间长、防控成本高、大部分开发同学意识薄弱。\n\n因为这样的特性差异，两类事故在预防治理的思路和方法上有一定区别，但在故障的应急和事故复盘上，思路相对一致。那么当故障发生时，你要发挥什么作用呢？\n\n\n故障发生时应该如何应急？\n\n事故现场往往伴随着“混乱”，试想一下，你团队的小伙伴昨晚刚发布上线了新系统，今天上午一切正常，下午 app 核心页面突然无法显示、客服反馈说大量用户来电投诉，可谁都说不清楚到底是怎么回事，十几分钟过去了，系统依然没有恢复，类似的场景你是否经历过？\n\n那么这时，你应该起到“定海神针”的作用，故障发生时控场就是你的核心职责。 要有条不紊地安排同学进行排障、确定信息沟通的秩序、结合信息做好线上同步，并参与决策。\n\n在阿里，故障的处理有一个“ 1-5-10 ”的标准，即 1 分钟发现、5 分钟响应、10 分钟恢复。很明显，故障处理的核心在于“快”，让业务最快止血、恢复、避免影响进一步扩大。\n\n故障处理的生命周期，可以分为 4 个阶段：发现异常、排查问题、判断决策、恢复处理。这 4 个阶段对应的行动并不是完全串行的，虽然有一定的依赖关系，但在实际的处理过程中应该并行展开。类似 fork/join 的模式，不断完成小任务、不断汇总信息，不断做出判断与决策，形成循环直到故障恢复。\n\n接下来，我以外卖点餐的业务为例，讲一下故障的发现、排查、决策与恢复都要注意哪些核心要点，因为故障处理的核心原则相同，所以这些要点在其他业务场景中也适用。（时序图与真实系统间我做了一些模糊处理，但是不影响案例说明。）\n\n\n\n我们要点外卖的话，大体的流程是这样的：\n\n 1. 用户打开 app，根据用户 lbs 显示餐厅列表，选择进入某一家餐厅；\n\n 2. 添加菜品到购物车，进入结算页确定收货人、优惠红包、订单金额，生成订单；\n\n 3. 跳转第三方支付，并返回支付结果；\n\n 4. 商家接收订单推送，操作接单并备货；\n\n 5. 骑手根据调度取餐，送达用户，订单完成。\n\n1. 故障发现\n\n用户来电反馈订单无法支付、app 无法登录，研发发现下单 qps 曲线同比下跌，这些都是事故发生时的现象，虽然现象不完全等于故障点，但通常最早出现异常现象的地方和故障根因关联最大，所以第一时间发现异常对于锁定问题至关重要。\n\n故障发现就是系统异常反馈到研发的过程，这里我画了一个简单的脑图，分类说明故障发现的几种常见方式：\n\n\n\n开发同学往往更关注技术类指标，比如 qps、cpu load，可 leader 除此之外应该更多地从业务场景出发，结合需求来看系统的业务监控覆盖是否完全。业务监控往往更加敏锐，但是要想用好，就需要对业务和系统有较长链路的理解和掌握，而这恰恰是技术 leader 的优势。\n\n比如用户进入餐厅后会添加菜品到购物车，并跳转到结算页完成下单。菜品服务会提供一个查询接口，根据餐厅 id 返回菜品信息。假设这个查询接口最近做了变更，在库存逻辑的处理中埋下了一个 bug，导致实际库存小于 50 时，库存的返回值被默认为 0，而其他数据则一切正常。\n\n那么此时类似 cpu、内存、i/o 等技术指标可能都不会异常。而因为是部分实际库存小于 50 的菜品被影响，用户依然可以添加其他菜品到购物车，但因为部分菜品库存为 0，用户想吃却没办法下单，那么这个时候订单成交量的环比、同比曲线就有可能下跌，而这个现象会让我们感知到异常，进而排查问题处理。\n\n总的来说，人工的被动反馈在时间和速度上有较强的不确定性，很容易出现“小故障 * 长时间 = 大事故”的情形。而纯粹的技术指标监控又会忽略掉接口正常响应，但是业务异常的场景，只有两者结合，通过监控告警，最大程度上缩短故障感知的时间，才能早发现早解决，减少业务影响。\n\n2. 故障排查\n\n发现异常，接下来就是排查故障点和故障原因，故障排查最直接有效的核心思路就是直接锁定 + 排除。\n\n * 直接锁定：最近的变更点与异常现象间有直接的逻辑关联，进而可以直接锁定到故障点。比如，刚对下单接口进行了发布变更，接口的 qps 曲线就暴跌，可以基本断定是刚才的发布导致。\n\n * 排除法：当干扰因素过多（用户、订单等几个系统同时发生变更，引起订单下跌），很难直接锁定到故障点，就要结合业务场景，让整条架构链路上的所有关联方进行自查自证，通过排除法锁定故障。\n\n这里你要注意的是，要敢于先怀疑、排查自己的系统，再去考虑上下游关联方的问题，为的就是在信息混乱的现场，减少信息的不确定性，以身作则，带领团队成员将范围缩小，针对性地找到问题。\n\n如果你负责的是优惠券相关的系统，在下单的核心路径上，主要的场景就是优惠券领取、发放、展示、核销。你即使不是全部熟悉，也应该与团队同学共同协同，逐个确认这几个场景的核心接口是否有异常，通过对应的监控、日志收集信息并找问题，如果某一处没有发现问题，就排除并继续循环。\n\n\n\n如果还是没办法确定问题，或者只能确定大致范围，就要充分利用之前的事故经验了，此时一定要果断，可以结合情况启用标准应急手段（比如服务重启、发布回滚、非关键链路降级）。总的来说，在排障的过程中，如果团队成员都没有头绪，你一定要起到主导作用，可以参考我总结的一些要点做好“控场”。\n\n\n\n故障排查三要点\n\n3. 故障决策\n\n既然故障的表现是业务功能有损，那么在故障决策时为了让业务最快止血和恢复，就无法追求完美，一些为了抢时间的有损决策，就需要 casebycase 的人为处理。\n\n比如平台要搞一个 517 红包雨的活动 ，但是红包系统逻辑错误，导致满 50-10 的红包发放成满 10-50，此时已发的红包要作废吗 ？不作废有大额资损，作废会导致大量客诉。类似红包错配的场景，业务决策非常复杂，能否第一时间止损很大程度上取决于技术 leader 的现场反应和操作， 要注意故障决策的两个关键点 ：\n\n * 一定要有明确的决策人、主导者和有效的沟通方式（钉钉群、多人电话会议、紧急作战会议室等），让信息可以通畅地交流出来，并且决策人可以根据情况做判断与取舍，形成所有人明确的处理结论。 比如，第一时间停止错误红包的发放，确保故障没有增量，并把决策第一时间同步给团队成员，并同步相关负责人后续的动作，对已发放的红包，明确要求负责人汇总各类关键信息（红包数量、涉及金额、涉及用户数、有效时长、可能资损等）。\n\n * 所有的信息一定要数据化，不同的数据量级会导致决策不同，比如红包错发 50w 可能只是暂停发放，但是存量红包依然可以核销，损失公司可以承担。但是如果错发 5000w，大概就要涉及一系列的调整，这是非常影响决策的。\n\n4. 故障恢复\n\n往往业务决策后就需要执行相应的技术操作，最好的情况当然是在系统设计时就准备了预案，那么此时可以安全且快速地执行，并且对不涉及业务决策的问题可以技术直接操作，节省时间，比如常见的应急“三板斧”：变更回滚、服务重启、降级&限流。\n\n而如果没有预案或情况比较复杂，就涉及线上fix，比如因代码不兼容所以无法回滚，或者故障导致脏数据进而影响正常的业务流程推进，又或者红包金额错误需要做数据订正。你在这个环节要额外注意， 因为一来这种操作相当于一次“紧急变更”，有可能引入新的风险，二来不同的实现 fix 成本和用时可能不同，leader 需要给出自己的判断。\n\n比如刚刚提到的红包错配、错发的问题，假设影响金额过大，公司决定对存量红包作废止损，那么站在技术角度有很多方法，你需要让团队成员明确使用哪种方式：\n\n 1. 下单环节，在“我的优惠券”中通过前端隐藏对应的红包，让用户无法选择 ；\n\n 2. 根据红包批次 id 或者类型，通过脚本刷数，将红包批量作废 ；\n\n 3. 在下单接口的校验环节，增加逻辑判断，禁止这批红包核销 ；\n\n 4. 通过风控系统拦截使用这类红包的订单。\n\n技术 leader 要考虑不同恢复手段引入的新风险、操作用时、用户体验影响的不同，结合当前紧急程度、系统、具体操作人的情况，给出一个技术方面确定的判断。类似的问题，如果完全没有预案，我们之前常见的做法还是不动线上系统以免引入新问题，主要通过刷数据解决。\n\n\n\n故障恢复时 leader 的关注点\n\n讲到这儿，你是不是觉得处理完事故就万事大吉了呢？并不是，你还要对这次事故做一个全面彻底的复盘，不让类似的问题重复发生，那么复盘都要注意哪些关键点呢？\n\n\n如何有价值地做事后复盘？\n\n复盘的核心不是为了追责或者甩锅，而是最大程度榨干事故的剩余价值，通过全盘的思考与总结，来看看系统设计、流程机制、应急处理、人员安排等各方面有哪些不足，哪些可以提升的地方，哪些问题是共性的，需要在各团队进行“大扫除”。\n\n通过一次事故，解决一类问题，让一个人（团队）踩过的坑变成所有人踩过的坑，正所谓“一次学费，受益终身”。\n\n你可以从时长、现象、处理时间轴、根因、改进计划这几个维度进行复盘， 在以下几个方面进行深究：\n\n * 事故时长：1-5-10 是否达成，如果没有是为什么？哪个环节用时最多，如何提高和改善？\n\n * 事故根因：根因不等于直接原因，一个事故的直接原因往往并不复杂，但是根因可能是多个维度的缺失，需要像剥洋葱一样一层层找下去。拿库存接口变更这个case来说，直接原因就是某段代码逻辑变更导致，但是应该在测试、发布、监控、应急影响、预案设计等多个环节展开去看，根因的挖掘并不忌讳“吹毛求疵”。\n\n * 事故改进措施：由点推到面、明确到人、明确时间。与根因类似，要结合多个维度形成组合拳的改进点，避免一次性动作，要将重点放在对未来、对同类问题的预防上。核心就是如果再一次发生类似的问题，这些改进措施是不是能起到作用。\n\n关于事后复盘，你可以这样理解，我们要深挖事故如何发生的、如何处理的、未来怎么预防。但要避免情绪化，在复盘会上的反思、感悟、懊恼没有任何意义，如何带领团队把精力放在改进措施的落实以及事故前的治理上更有价值， 另外，你需要留出时间让团队伙伴进行内部的 review，避免为了开会而复盘。\n\n\n小结\n\n虽然你会尽全力保障系统的稳定性，但是按照墨菲定律来说故障又一定会发生，这就形成了一个悖论，即不管你怎么努力还是会出问题，所以我一直强调：“稳定性是一个先有意识后有能力的事儿”，这一点尤为重要，毕竟你的态度和认识决定了团队的重视程度。 这一讲我想强调这样几个重点：\n\n 1. 毫不夸张地说，系统稳定性对于研发而言一条生死线，这方面做得不好，其他再好也是枉然，因为稳定性问题“下岗”被优化的 leader 不在少数。\n\n 2. 对于故障的应急响应，业务的止损与恢复是最重要的，决断就是要付出一些代价的。\n\n 3. 事故的复盘不是为了追责过去，而是为了在未来避免类似的情况发生。\n\n\n\n业务快速发展的同时，技术必然存在妥协。 业务上需要快速的需求交付，技术上需要架构的可扩展，但速度和质量在工程领域总是存在冲突，而稳定性往往就是问题爆发的冲突点。作为技术 leader，你要平衡好这两种诉求，让技术与业务协调发展的同时，最大程度确保系统的稳定运行，毕竟“没有质量的交付，再多再快都毫无意义”。\n\n\n\n留个作业： 把最近半年或一年你印象最深刻的事故重新复盘一遍吧，从事故根因、应急处理以及复盘改进几个角度去 review，未来类似的事故是否还会发生，如果发生你能更好的应对吗？\n\n最后，感谢你的阅读，如果这节课让你有收获，欢迎你将它分享给其他的朋友，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **叔叔：\n\n> 复盘，最大程度压榨事故的剩余价值。这个深有体会，不应该变为追责会，而是需要转换为分析会，对架构策略处理等各方面进行分析总结，而不能是问责会。\n\n#     讲师回复：\n\n>     是的，会上问责只会把有价值的复盘会转化为无意义的甩锅会\n\n# *笨：\n\n> 总结一下，这一课主要是系统高可用之 应急策略整理并输出一套适合自己业务场景的sop，提供部门新人以及其他同学参考\n\n#     讲师回复：\n\n>     应急策略适用在很多需要紧急处理和决策的场景，可以根据自己的团队与业务情况做计划，首先确保骨干都能掌握，毕竟不是每个人都有这种处理能力。\n\n# *至：\n\n> 假如事故原因分析下来是由于人为的问题如个别员工粗心、能力不足等，那是否要从制度方面来解决？\n\n#     讲师回复：\n\n>     如果真的是“人为问题”和“个别员工粗心或能力”这么强的限定条件，我建议优先解决制造问题的人，制度是应该有，但不应该是“服务于个别人的”。\n\n# **用户3335：\n\n> 1-5-10里大家都是如何实现1分钟内发现故障的\n\n#     讲师回复：\n\n>     只能靠监控告警，人工是几乎不可能的，监控本身有很多个纬度，具体可以参考文章里的脑图。\n\n# *春：\n\n> 开阔视野了，业务指标和技术指标结合了\n\n# **x：\n\n> 老师好，围绕于稳定性建设有两个问题。1.每个case如何定级呢？这个基线应该怎么来，每个业务的特点有所不同。2.如何将稳定性建设变得可复制，在大的团队方向上复制呢？是通过wiki，工具，标准，流程的建立吗？😃\n\n#     讲师回复：\n\n>     一般按照业务影响定级，可以按照公司业务量去制定一个影响百分比，比如影响用户数、减少的订单等等，标准这东西先有再优，逐步调整；想要可持续就需要建立机制，你说的那些都可以看做是机制落地时使用的工具或方法。\n\n# **7510：\n\n> 系统稳定性对于研发而言是一条生死线😅\n\n#     讲师回复：\n\n>     的确是这样\n\n# *庆：\n\n> 事故不可避免，要有充分的应急预案。\n\n#     讲师回复：\n\n>     很对",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"稳定性（二）：可用性治理的三个关键要点",frontmatter:{title:"稳定性（二）：可用性治理的三个关键要点",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/f500e9/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/03.%20%20%E7%A8%B3%E5%AE%9A%E6%80%A7%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%8F%AF%E7%94%A8%E6%80%A7%E6%B2%BB%E7%90%86%E7%9A%84%E4%B8%89%E4%B8%AA%E5%85%B3%E9%94%AE%E8%A6%81%E7%82%B9.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/03.  稳定性（二）：可用性治理的三个关键要点.md",key:"v-04fb6bbd",path:"/pages/f500e9/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:6383}],headersStr:"精选评论",content:"上一讲我们学习了事故的应急和复盘，但“预防胜于治疗”，所以今天我想从事故预防的角度和你聊一聊可用性治理的关键动作。\n\n可能你听过这样一句俗语：只有千日做贼，没有千日防贼。但是在系统稳定性建设上，却无法通过一次优化完全杜绝事故发生的可能。因为业务发展会带动系统演进，它是一个动态变化的过程，并非一个常量，所以系统可用性的治理是持久战，需要你“保持敬畏，坚持防范”。如果把事故比作火灾，那么技术 Leader 日常工作的核心就是围绕系统的风险隐患，建立“防火墙”。\n\n我们从研发的流程阶段来看，确定产品需求后，会通过架构设计、编码、测试、上线几阶段来交付系统。在这个过程中，上线环节是事故的高发阶段，因为随着变更的加入，原本系统稳定的运行状态会被打破；编码与测试阶段主要是实现功能，但不合理的实现是在架构设计阶段就被埋下的。当然，除了关注技术外，还要从团队、机制等管理手段出发，逐步建立你团队的稳定性军规。\n\n所以今天我想从变更管控、架构设计、管理手段分享系统可用性的治理经验，希望能对你治理系统稳定性有所帮助。\n\n\n变更会引起90%以上的故障\n\n我们曾以年为单位统计了事故，得出了 90% 的数字，而且理论上说，公司越大、发布越多、这个数字就越大。因为互联网公司的研发模式基本都是“小步快走、高速迭代”，一个业务一周十几次的发布变更很正常，而每一次变更会都会打破系统原本的“稳定运行态”，引入了新的变量，所以发布变更是研发最“高危”的动作之一。\n\n除了研发模式导致的高频变更外，随着业务发展，系统也会逐渐复杂，链路越来越长、完成一个功能相关联的系统服务越来越多。系统复杂度的提高，增加了变更时所带来的不确定性，为了应对这样的情况，这几年，我们在团队内部实施了严格的发布 SOP，简称为“发布三板斧”：\n\n\n\n在我看来，“发布三板斧”的落地与推进，就是可用性治理的第一步（也是最关键的一步）。我们来看一下，发布三板斧的实施具体要注意哪些关键点。\n\n1. 变更需要监控\n\n在 01 讲中我提到过，完善的监控告警比人工反馈响应更快，也会减少故障的持续时间进而降低影响。而没有监控的变更就像盲人摸象，甚至会出现“你负责的系统宕机了，都要用户电话告诉你”的尴尬局面。\n\n在推进监控落地的过程中，你要和团队成员讲明监控的重要性，还要确保监控的完善与有效，而针对某个业务场景，有效的监控要回答三个问题：\n\n * 是否有问题发生？\n\n * 哪里发生了问题？\n\n * 发生了什么问题？\n\n这三者是递进关系，对监控的覆盖程度与范围要求越来越细致。一般情况下，我们监控的都是 API 这一层面，但是单纯的技术指标并不能完整回答上面三个问题，往往要结合业务场景去设计，才能够更加精细化地感知异常。\n\n比如之前饿了么有商家开放平台的系统，用以对接类似星巴克一类的 KA 品牌自己的餐饮系统，开放平台的核心价值就是对外暴露统一的协议，屏蔽各个 KA 品牌内部系统的数据逻辑。假设 A 品牌的系统今天出现了问题，导致 A 品牌餐厅都无法接单，那么从饿了么所有商户的接单曲线上看，可能没有直观的感知，毕竟一个品牌的订单量在平台上可能无法凸显，单一品牌接单量会淹没在海量的数据中。而如果有一个“KA商户接单曲线”的监控，就能很容易看到异常了。\n\n\n\n外卖接单曲线图\n\n所以我们要结合业务配置有效的监控，而能否第一时间发现变更导致的异常、缩短异常带来的影响，就要看监控是否完善了。\n\n如果说监控让我们更快地知道系统有没有问题，那灰度就是确保即使有问题也只在小范围产生影响，降低风险的作用范围。\n\n2. 有效灰度必须有耐心\n\n一些技术 Leader 认为“灰度就是在生产环境进行小范围测试”，就算嘴上不这么说，心里也这么想。但这个认知是绝对错误的，灰度从来不是为了测试，也不等于 A/B Test。它本身是为了对抗“未知的不确定性”。\n\n\n\n我们之所以在编码完成后，会在测试环境进行测试验证，主要就是在找问题、找错误，而当我们走完一个完整的测试流程后就可以认为，已知的问题都已经解决了，又因为在测试环境，所以没有给线上真实的业务与用户造成影响。\n\n而灰度就是假设“还存在我们不知道的问题”所以你才需要更加谨慎地进行灰度，确保即使问题真的在生产环境出现，造成的影响也是可控的。\n\n在灰度的落地与推进过程中，要注意有效性，因为灰度这个动作很复杂、费时间，稍不注意就会“形式化”。比如一个系统部署在 2 个机房，每个机房 4个集群，正常的灰度顺序应该是单机房单集群中部分节点、单机房单集群中全部节点、单机房中全部集群，然后另外一个机房重复这个步骤。\n\n\n\n要想实现灰度的有效性，关键点在于时间和流量。\n\n * 时间：每个灰度阶段至少有 5 ~ 10 min 的观察，在监控、日志和各方反馈没有异常后再扩大灰度范围，确保一些运行时异常或量变积累质变的问题可以暴露出来。\n\n * 流量：有时一些业务场景需要特定的触发条件，比如满足某些条件的用户或满足某些条件的订单，那么在灰度时就不能仅通过单位时间内有没有异常来判断，还要确保有足够的有效流量。\n\n有效的灰度可以把问题影响锁定在一个小范围内，但是同样也降低了问题的“明显性”，所以你要通过监控和日志更加仔细、谨慎地去寻找、观测异常并对比发现问题。并且因为动作烦琐，用时也长，还要和开发同学沟通好“这样做有什么意义？”一类投入产出比的问题。\n\n我建议你结合实际的系统情况与风险程度来确定灰度的程度，平衡好时间与效率，“好钢花在刀刃上”，因为以我的经验来看，这些投入的时间无论怎样都会大大少于你在事故复盘会上后悔的时间。\n\n3. 回滚就是变更的“后悔药”\n\n在 01 讲中，我提到过故障恢复最好的手段是各种预案，而回滚则是预案中最普遍、也最有效的。回滚这件事儿，你并不陌生，我重点想强调“何时回滚”以及“如何确保能回滚”。\n\n我记得很清楚，2019 年有一天我刚下班回家，风控的研发负责人就打来电话说：“订单系统前两天的一个变更导致风控有部分订单拦截失败。”涉及风控就意味着资金会有损失，事儿不小，我立刻电话相关的同学，得知是前几天上线的一个功能导致的，因为与风控评估下来影响面不大，所以新功能没有下线，计划过两天修复这个Bug。我顿时有一种三花聚顶的错觉，整个人都不好了。\n\n * “已经产生了线上影响，并且可能有资损，怎么能过两天再修复？”\n\n * “发现问题第一时间回滚就能解决的事儿，为什么不回滚？”\n\n没人能回答我的问题，而我当时的决定是系统立刻回滚，并第一时间处理系统回滚带来的业务影响，承诺第二天尽快修复后完成新功能的重新上线，同时按照事故进行申报。\n\n这件事儿也让我意识到，在研发对事故的敬畏之心不足时，回滚也会失灵。所以我建议你，除非影响面非常小并且可控，或者涉及重要的商业合同，否则一般情况下应该有立刻回滚止损、业务恢复的意识，不要有侥幸心理，你要成为这种意识的宣讲者与践行者。\n\n那么如何确保变更是可以回滚的呢？ 要知道，系统并不是天然可以无缝回滚的，想要系统具备回滚的能力，在设计与实现阶段需要付出额外的精力。可回滚的本质是系统的兼容性设计与实现，比如常见的“只增不改”，一个 API 内要调整很多实现逻辑才能满足新业务的需求，此时不妨直接新增一个 API ，两个 API 保持参数一致，那么一旦新 API 有异常直接切换回旧的 API 即可。\n\n所以，不论是灰度计划还是回滚策略都应该在架构设计阶段就去考虑，结合排期、风险程度、成本投入这些方面，要做好评估与平衡。\n\n\n坚守 Design For Failure 的架构理念\n\n“Design for failure and nothing will fail”，最早是 AWS 的一条最佳实践，即面向失败进行系统设计。你也可以理解为：考虑系统所有可能发生故障或不可用的情形，并假设这些可能都会发生，倒逼自己设计足够健壮的系统。\n\n其实这个理念在分布式系统中很早就应用了，比如“非关键路径都要可以降级”“核心系统一定要有熔断、限流、超时这些保护手段”“架构上要避免单点”等，而今天我更多地想从正反两个角度来讲讲技术团队如何推行并落地这种理念。\n\n * 正向：如何形成 Design For Failure 的系统设计习惯？\n\n * 反向：如何确定系统真的可以 Failover？\n\n1. 将经验教训沉淀下来\n\n大部分技术 Leader 对于系统的参与都在架构设计这一环节，通过业务对焦、方案梳理，敲定系统架构、DB 和 API 的实现。这一过程中，你的重点不能只在功能的实现上，还要敏锐地去感知系统可能存在的风险隐患。\n\n历史是最好的老师，我建议你总结并分析过去发生过的事故，并结合常规分布式系统的可用性风险，以此梳理出一个围绕事故隐患的风险点 Checklist，在需求迭代或者架构设计时，通过它高效地找到系统实现的薄弱环节。当然了，这个 Checklist 需要你结合系统演进不断地完善，以 DB 为例，最基本的你可以考虑下面这些风险点：\n\n\n\n在不断梳理并实践这些风险点的过程中，我们又会形成一些问题的通用解决思路，和标准的设计原则。比如超出预期的主从延迟是分布式系统中很可能出现的情况，如果业务场景上主从延迟的容忍度很高，还不是关键路径，做好降级开关可能就足够了；如果是写完即读的场景，就要考虑是不是让读请求直接绑定主库，并且对主库是否造成较大的负载压力以及缓存是否能起到作用，或者改为消息推送的方式。\n\n当然了，解决一个问题的方案很多，除了完善 Checklist，在团队普及这种设计理念之外，更关键的是将这些解决方案沉淀成设计原则，让研发人员可以在实际中落地。\n\n2. 通过演练验证预案设计\n\n因为 Design For Failure 的设计思想，我们日常在系统中做了很多预案的准备，同时也发现在真实事故发生时，很多设计并没有按照预期那样发挥作用。\n\n在系统正常运行时，我们无法验证自己准备的灾备方案是否有用（比如，这些措施在故障发生时是否真的有效？处理流程与沟通协作是否通畅？），而一旦方案真的有问题，在真实故障发生时也为时已晚。\n\n为此我们在 2016 年还参考了当时 Netflix 的 ChaosMonkey 设计并实现了自己的故障演练系统 Kennel，日常主动制造事故上下文来验证我们的设计与系统是否可靠。\n\n通过这个例子，我想强调的是， 技术Leader 要化被动为主动，有意识地推进故障演练，不论是以注入还是回放的方式制造可控的故障，以此验证应急处理的机制流程和预先设计的灾备方案是否有效，通过持续的日常演练来提高故障发现和恢复的能力，以便在真实事故发生时应对得更加从容。\n\n当然了，我想提醒你，演练是一个逐步发展的过程，不需要一步到位。我们也是从最开始测试环境检验，然后在生产环境进行有预案的演练（即制造一个故障并启动预案看其是否生效），直到最近一两年才开始进行真正的随机故障演练，即运维或稳定性的专项同学在不提前通知的情况下注入不确定的故障，验证对应的团队和系统是否能及时感知、操作并恢复。\n\n以上就是关于 Design For Failure 在团队中推行落地的一些关键点和建议，同时可用性的治理与预防还要结合管理手段，技术 Leader 通过适当的管理手段把理念落地、把执行到位、把结果做好。\n\n\n把稳定性当作机制与文化去建设\n\n系统稳定性结果好坏很大程度上取决于技术 Leader 的重视程度，如果一个团队的管理者都不能身体力行的去重视它，而仅仅只是喊喊口号，那就不要指望团队成员能认真地对待这件事。\n\n所以要把稳定性当作一个机制和团队的文化去建设，不断加深大家对稳定性的认识以及和每个人切身利益的关联程度，进一步形成团队的氛围与文化。管理的方法需要结合团队与自身的情况去落地，这里我分享几个之前的做法，希望给你一些启发。\n\n1. 新人 Landing 从稳定性学习开始\n\n团队中新入职的同学往往有 1~2 周的适应期，除了熟悉基本情况外，新同学必须学习并通过发布变更 SOP 考试后，才能取得对应系统的发布权限。除此之外，还要学习这个部门最近半年发生的真实事故，并写一篇总结邮件给部门内所有人。\n\n其实这是利用了心理学中的“承诺一致性原则”，人们往往会重视自己公开承诺的事情，并形成对应的行为约束。新人的公开邮件不仅是通报自己的学习总结，某种程度上也是一种承诺“这些错误和教训我认识到了，我不会犯类似的错误”，进一步加强对事故的敬畏之心。\n\n在新人入职 3 个月进行述职转正时，作为评委之一，我一定会对他试用期内稳定性的结果进行评定，也会针对稳定性相关的内容进行问答。\n\n总之，团队的新成员一定要在一开始就对稳定性有足够的认识与敬畏，技术 Leader 要严控这个环节，从人的维度避免风险的主动流入。\n\n2. 每人不低于 35% 的稳定性 KPI\n\n重要且生死攸关的事儿，一定要在 KPI 中体现出来，避免出现口号响亮但是落地无声的情况。一般来讲，我会要求技术Leader的稳定性 KPI 占比在 35% 到 40%，一线研发的同学可能是 50% 以上。\n\n虽然占比上技术 Leader 因为有其他职责可能未必有一线研发同学高，但是其评判标准会更严格，比如达标默认是 B，唯有超出预期才可能到 B+ 或者 A-。\n\n这部分稳定性 KPI 除了会影响最终绩效，也会直接影响年终奖、调薪、晋升等各方面，比如上一年度如果存在发布 SOP 红线违规导致事故，则晋升资格取消。总之，通过稳定性 KPI 的设计，将稳定性的结果与所有人的切身利益实实在在地绑定到一起。\n\n3. 好的坏的都要在阳光之下晒一晒\n\n想要落实一件事儿，往往要奖惩结合，而榜样的力量是无穷的，你可以通过榜样来告诉团队小伙伴，公司需要什么样的人才、不能容忍什么样的行为。\n\n我们之前每个月会做一次红黑榜单，以不同的维度公示部门内各团队的稳定性结果，统计维度可以是：事故数、冒烟数、1-5-10 达成率、本月严重事故……把做得好与不好的都拿出来给大家看看，那些结果好的我们可以学习什么，那些结果不好的我们要规避什么，通过这样的形式让我们共同看见、共同学习。\n\n当然，管理的手段千变万化，你要清楚的是，奖惩不是目的而是手段，要选择合适的手段提高团队成员的稳定性意识，并且最终取得好的结果，我建议你根据今天的内容，结合自己团队的具体情况去设计，“拿来主义”也要有一个本地化的过程才能发挥好的作用。\n\n\n小结\n\n对于技术 Leader 而言，你不能用一次次的重大事故让团队成员慢慢理解系统稳定性的重要性。同样没发生火灾之前，大部分人都意识不到消防通道的重要性，唯有经历过才知道这些措施的珍贵。可用性的预防与治理需要投入大量的时间和精力，这一点上需要技术 Leader 做好投入产出的评估与平衡。\n\n发布变更、架构设计的 “Design For Failure”以及机制与文化的建立是三个重要的驱动方向，技术 Leader 可以围绕这三个方面不断延伸，用运营与治理的视角去看待可用性的预防，希望本节内容对你有所启发和帮助。\n\n\n\n留个作业： 相信你在系统中肯定也有很多design for failure的设计，回顾一下它们发挥作用的高光时刻并梳理一下当时是如何思考这些设计的，同时也尝试优化这些设计看是否还有更好的方案。\n\n最后，感谢你的阅读，如果这节课让你有收获，欢迎你将它分享给其他的朋友，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **琛：\n\n> 请教下老师，稳定性 KPI 50% 这个是怎么理解的？不是很明白？\n\n#     讲师回复：\n\n>     比如原来我的KPI中就有50%是稳定性相关，如果我团队负责的系统有故障就会影响我的KPI\n\n# **叔叔：\n\n> 监控，回滚，灰布。个人理解，监控至关重要，是提前发现问题，提前将问题暴露出来用以发现，不完全依赖客户投诉的阶段。从常规的系统监控，DB监控，服务监控，到关键服务交易量监控，交易量波动等进行观察。先积累以往经验，培养团队的风险意识，当发现异常问题时，再进行后续紧急处理。\n\n#     讲师回复：\n\n>     监控是研发的眼睛，没有监控的话很容易出现自己负责的系统挂了自己都不知道的笑话\n\n# **群：\n\n> 不错，学到很多\n\n# *欢：\n\n> 讲的很棒，并且有一定实操性，赞\n\n#     讲师回复：\n\n>     感谢支持，很开心\n\n# **升：\n\n> 学习了，文章质量真好，感谢\n\n#     讲师回复：\n\n>     谢谢支持，很开心\n\n# **慈：\n\n> 您好，请问互联网应急预案应该怎么写，您有参考示例吗，谢谢\n\n#     讲师回复：\n\n>     这个内容太多了，不适合在评论留言回答，知道这个意思可以自己定义，就是一个流程设计，发生什么情况 = 谁 + 做什么\n\n# **慈：\n\n> 谢谢",normalizedContent:"上一讲我们学习了事故的应急和复盘，但“预防胜于治疗”，所以今天我想从事故预防的角度和你聊一聊可用性治理的关键动作。\n\n可能你听过这样一句俗语：只有千日做贼，没有千日防贼。但是在系统稳定性建设上，却无法通过一次优化完全杜绝事故发生的可能。因为业务发展会带动系统演进，它是一个动态变化的过程，并非一个常量，所以系统可用性的治理是持久战，需要你“保持敬畏，坚持防范”。如果把事故比作火灾，那么技术 leader 日常工作的核心就是围绕系统的风险隐患，建立“防火墙”。\n\n我们从研发的流程阶段来看，确定产品需求后，会通过架构设计、编码、测试、上线几阶段来交付系统。在这个过程中，上线环节是事故的高发阶段，因为随着变更的加入，原本系统稳定的运行状态会被打破；编码与测试阶段主要是实现功能，但不合理的实现是在架构设计阶段就被埋下的。当然，除了关注技术外，还要从团队、机制等管理手段出发，逐步建立你团队的稳定性军规。\n\n所以今天我想从变更管控、架构设计、管理手段分享系统可用性的治理经验，希望能对你治理系统稳定性有所帮助。\n\n\n变更会引起90%以上的故障\n\n我们曾以年为单位统计了事故，得出了 90% 的数字，而且理论上说，公司越大、发布越多、这个数字就越大。因为互联网公司的研发模式基本都是“小步快走、高速迭代”，一个业务一周十几次的发布变更很正常，而每一次变更会都会打破系统原本的“稳定运行态”，引入了新的变量，所以发布变更是研发最“高危”的动作之一。\n\n除了研发模式导致的高频变更外，随着业务发展，系统也会逐渐复杂，链路越来越长、完成一个功能相关联的系统服务越来越多。系统复杂度的提高，增加了变更时所带来的不确定性，为了应对这样的情况，这几年，我们在团队内部实施了严格的发布 sop，简称为“发布三板斧”：\n\n\n\n在我看来，“发布三板斧”的落地与推进，就是可用性治理的第一步（也是最关键的一步）。我们来看一下，发布三板斧的实施具体要注意哪些关键点。\n\n1. 变更需要监控\n\n在 01 讲中我提到过，完善的监控告警比人工反馈响应更快，也会减少故障的持续时间进而降低影响。而没有监控的变更就像盲人摸象，甚至会出现“你负责的系统宕机了，都要用户电话告诉你”的尴尬局面。\n\n在推进监控落地的过程中，你要和团队成员讲明监控的重要性，还要确保监控的完善与有效，而针对某个业务场景，有效的监控要回答三个问题：\n\n * 是否有问题发生？\n\n * 哪里发生了问题？\n\n * 发生了什么问题？\n\n这三者是递进关系，对监控的覆盖程度与范围要求越来越细致。一般情况下，我们监控的都是 api 这一层面，但是单纯的技术指标并不能完整回答上面三个问题，往往要结合业务场景去设计，才能够更加精细化地感知异常。\n\n比如之前饿了么有商家开放平台的系统，用以对接类似星巴克一类的 ka 品牌自己的餐饮系统，开放平台的核心价值就是对外暴露统一的协议，屏蔽各个 ka 品牌内部系统的数据逻辑。假设 a 品牌的系统今天出现了问题，导致 a 品牌餐厅都无法接单，那么从饿了么所有商户的接单曲线上看，可能没有直观的感知，毕竟一个品牌的订单量在平台上可能无法凸显，单一品牌接单量会淹没在海量的数据中。而如果有一个“ka商户接单曲线”的监控，就能很容易看到异常了。\n\n\n\n外卖接单曲线图\n\n所以我们要结合业务配置有效的监控，而能否第一时间发现变更导致的异常、缩短异常带来的影响，就要看监控是否完善了。\n\n如果说监控让我们更快地知道系统有没有问题，那灰度就是确保即使有问题也只在小范围产生影响，降低风险的作用范围。\n\n2. 有效灰度必须有耐心\n\n一些技术 leader 认为“灰度就是在生产环境进行小范围测试”，就算嘴上不这么说，心里也这么想。但这个认知是绝对错误的，灰度从来不是为了测试，也不等于 a/b test。它本身是为了对抗“未知的不确定性”。\n\n\n\n我们之所以在编码完成后，会在测试环境进行测试验证，主要就是在找问题、找错误，而当我们走完一个完整的测试流程后就可以认为，已知的问题都已经解决了，又因为在测试环境，所以没有给线上真实的业务与用户造成影响。\n\n而灰度就是假设“还存在我们不知道的问题”所以你才需要更加谨慎地进行灰度，确保即使问题真的在生产环境出现，造成的影响也是可控的。\n\n在灰度的落地与推进过程中，要注意有效性，因为灰度这个动作很复杂、费时间，稍不注意就会“形式化”。比如一个系统部署在 2 个机房，每个机房 4个集群，正常的灰度顺序应该是单机房单集群中部分节点、单机房单集群中全部节点、单机房中全部集群，然后另外一个机房重复这个步骤。\n\n\n\n要想实现灰度的有效性，关键点在于时间和流量。\n\n * 时间：每个灰度阶段至少有 5 ~ 10 min 的观察，在监控、日志和各方反馈没有异常后再扩大灰度范围，确保一些运行时异常或量变积累质变的问题可以暴露出来。\n\n * 流量：有时一些业务场景需要特定的触发条件，比如满足某些条件的用户或满足某些条件的订单，那么在灰度时就不能仅通过单位时间内有没有异常来判断，还要确保有足够的有效流量。\n\n有效的灰度可以把问题影响锁定在一个小范围内，但是同样也降低了问题的“明显性”，所以你要通过监控和日志更加仔细、谨慎地去寻找、观测异常并对比发现问题。并且因为动作烦琐，用时也长，还要和开发同学沟通好“这样做有什么意义？”一类投入产出比的问题。\n\n我建议你结合实际的系统情况与风险程度来确定灰度的程度，平衡好时间与效率，“好钢花在刀刃上”，因为以我的经验来看，这些投入的时间无论怎样都会大大少于你在事故复盘会上后悔的时间。\n\n3. 回滚就是变更的“后悔药”\n\n在 01 讲中，我提到过故障恢复最好的手段是各种预案，而回滚则是预案中最普遍、也最有效的。回滚这件事儿，你并不陌生，我重点想强调“何时回滚”以及“如何确保能回滚”。\n\n我记得很清楚，2019 年有一天我刚下班回家，风控的研发负责人就打来电话说：“订单系统前两天的一个变更导致风控有部分订单拦截失败。”涉及风控就意味着资金会有损失，事儿不小，我立刻电话相关的同学，得知是前几天上线的一个功能导致的，因为与风控评估下来影响面不大，所以新功能没有下线，计划过两天修复这个bug。我顿时有一种三花聚顶的错觉，整个人都不好了。\n\n * “已经产生了线上影响，并且可能有资损，怎么能过两天再修复？”\n\n * “发现问题第一时间回滚就能解决的事儿，为什么不回滚？”\n\n没人能回答我的问题，而我当时的决定是系统立刻回滚，并第一时间处理系统回滚带来的业务影响，承诺第二天尽快修复后完成新功能的重新上线，同时按照事故进行申报。\n\n这件事儿也让我意识到，在研发对事故的敬畏之心不足时，回滚也会失灵。所以我建议你，除非影响面非常小并且可控，或者涉及重要的商业合同，否则一般情况下应该有立刻回滚止损、业务恢复的意识，不要有侥幸心理，你要成为这种意识的宣讲者与践行者。\n\n那么如何确保变更是可以回滚的呢？ 要知道，系统并不是天然可以无缝回滚的，想要系统具备回滚的能力，在设计与实现阶段需要付出额外的精力。可回滚的本质是系统的兼容性设计与实现，比如常见的“只增不改”，一个 api 内要调整很多实现逻辑才能满足新业务的需求，此时不妨直接新增一个 api ，两个 api 保持参数一致，那么一旦新 api 有异常直接切换回旧的 api 即可。\n\n所以，不论是灰度计划还是回滚策略都应该在架构设计阶段就去考虑，结合排期、风险程度、成本投入这些方面，要做好评估与平衡。\n\n\n坚守 design for failure 的架构理念\n\n“design for failure and nothing will fail”，最早是 aws 的一条最佳实践，即面向失败进行系统设计。你也可以理解为：考虑系统所有可能发生故障或不可用的情形，并假设这些可能都会发生，倒逼自己设计足够健壮的系统。\n\n其实这个理念在分布式系统中很早就应用了，比如“非关键路径都要可以降级”“核心系统一定要有熔断、限流、超时这些保护手段”“架构上要避免单点”等，而今天我更多地想从正反两个角度来讲讲技术团队如何推行并落地这种理念。\n\n * 正向：如何形成 design for failure 的系统设计习惯？\n\n * 反向：如何确定系统真的可以 failover？\n\n1. 将经验教训沉淀下来\n\n大部分技术 leader 对于系统的参与都在架构设计这一环节，通过业务对焦、方案梳理，敲定系统架构、db 和 api 的实现。这一过程中，你的重点不能只在功能的实现上，还要敏锐地去感知系统可能存在的风险隐患。\n\n历史是最好的老师，我建议你总结并分析过去发生过的事故，并结合常规分布式系统的可用性风险，以此梳理出一个围绕事故隐患的风险点 checklist，在需求迭代或者架构设计时，通过它高效地找到系统实现的薄弱环节。当然了，这个 checklist 需要你结合系统演进不断地完善，以 db 为例，最基本的你可以考虑下面这些风险点：\n\n\n\n在不断梳理并实践这些风险点的过程中，我们又会形成一些问题的通用解决思路，和标准的设计原则。比如超出预期的主从延迟是分布式系统中很可能出现的情况，如果业务场景上主从延迟的容忍度很高，还不是关键路径，做好降级开关可能就足够了；如果是写完即读的场景，就要考虑是不是让读请求直接绑定主库，并且对主库是否造成较大的负载压力以及缓存是否能起到作用，或者改为消息推送的方式。\n\n当然了，解决一个问题的方案很多，除了完善 checklist，在团队普及这种设计理念之外，更关键的是将这些解决方案沉淀成设计原则，让研发人员可以在实际中落地。\n\n2. 通过演练验证预案设计\n\n因为 design for failure 的设计思想，我们日常在系统中做了很多预案的准备，同时也发现在真实事故发生时，很多设计并没有按照预期那样发挥作用。\n\n在系统正常运行时，我们无法验证自己准备的灾备方案是否有用（比如，这些措施在故障发生时是否真的有效？处理流程与沟通协作是否通畅？），而一旦方案真的有问题，在真实故障发生时也为时已晚。\n\n为此我们在 2016 年还参考了当时 netflix 的 chaosmonkey 设计并实现了自己的故障演练系统 kennel，日常主动制造事故上下文来验证我们的设计与系统是否可靠。\n\n通过这个例子，我想强调的是， 技术leader 要化被动为主动，有意识地推进故障演练，不论是以注入还是回放的方式制造可控的故障，以此验证应急处理的机制流程和预先设计的灾备方案是否有效，通过持续的日常演练来提高故障发现和恢复的能力，以便在真实事故发生时应对得更加从容。\n\n当然了，我想提醒你，演练是一个逐步发展的过程，不需要一步到位。我们也是从最开始测试环境检验，然后在生产环境进行有预案的演练（即制造一个故障并启动预案看其是否生效），直到最近一两年才开始进行真正的随机故障演练，即运维或稳定性的专项同学在不提前通知的情况下注入不确定的故障，验证对应的团队和系统是否能及时感知、操作并恢复。\n\n以上就是关于 design for failure 在团队中推行落地的一些关键点和建议，同时可用性的治理与预防还要结合管理手段，技术 leader 通过适当的管理手段把理念落地、把执行到位、把结果做好。\n\n\n把稳定性当作机制与文化去建设\n\n系统稳定性结果好坏很大程度上取决于技术 leader 的重视程度，如果一个团队的管理者都不能身体力行的去重视它，而仅仅只是喊喊口号，那就不要指望团队成员能认真地对待这件事。\n\n所以要把稳定性当作一个机制和团队的文化去建设，不断加深大家对稳定性的认识以及和每个人切身利益的关联程度，进一步形成团队的氛围与文化。管理的方法需要结合团队与自身的情况去落地，这里我分享几个之前的做法，希望给你一些启发。\n\n1. 新人 landing 从稳定性学习开始\n\n团队中新入职的同学往往有 1~2 周的适应期，除了熟悉基本情况外，新同学必须学习并通过发布变更 sop 考试后，才能取得对应系统的发布权限。除此之外，还要学习这个部门最近半年发生的真实事故，并写一篇总结邮件给部门内所有人。\n\n其实这是利用了心理学中的“承诺一致性原则”，人们往往会重视自己公开承诺的事情，并形成对应的行为约束。新人的公开邮件不仅是通报自己的学习总结，某种程度上也是一种承诺“这些错误和教训我认识到了，我不会犯类似的错误”，进一步加强对事故的敬畏之心。\n\n在新人入职 3 个月进行述职转正时，作为评委之一，我一定会对他试用期内稳定性的结果进行评定，也会针对稳定性相关的内容进行问答。\n\n总之，团队的新成员一定要在一开始就对稳定性有足够的认识与敬畏，技术 leader 要严控这个环节，从人的维度避免风险的主动流入。\n\n2. 每人不低于 35% 的稳定性 kpi\n\n重要且生死攸关的事儿，一定要在 kpi 中体现出来，避免出现口号响亮但是落地无声的情况。一般来讲，我会要求技术leader的稳定性 kpi 占比在 35% 到 40%，一线研发的同学可能是 50% 以上。\n\n虽然占比上技术 leader 因为有其他职责可能未必有一线研发同学高，但是其评判标准会更严格，比如达标默认是 b，唯有超出预期才可能到 b+ 或者 a-。\n\n这部分稳定性 kpi 除了会影响最终绩效，也会直接影响年终奖、调薪、晋升等各方面，比如上一年度如果存在发布 sop 红线违规导致事故，则晋升资格取消。总之，通过稳定性 kpi 的设计，将稳定性的结果与所有人的切身利益实实在在地绑定到一起。\n\n3. 好的坏的都要在阳光之下晒一晒\n\n想要落实一件事儿，往往要奖惩结合，而榜样的力量是无穷的，你可以通过榜样来告诉团队小伙伴，公司需要什么样的人才、不能容忍什么样的行为。\n\n我们之前每个月会做一次红黑榜单，以不同的维度公示部门内各团队的稳定性结果，统计维度可以是：事故数、冒烟数、1-5-10 达成率、本月严重事故……把做得好与不好的都拿出来给大家看看，那些结果好的我们可以学习什么，那些结果不好的我们要规避什么，通过这样的形式让我们共同看见、共同学习。\n\n当然，管理的手段千变万化，你要清楚的是，奖惩不是目的而是手段，要选择合适的手段提高团队成员的稳定性意识，并且最终取得好的结果，我建议你根据今天的内容，结合自己团队的具体情况去设计，“拿来主义”也要有一个本地化的过程才能发挥好的作用。\n\n\n小结\n\n对于技术 leader 而言，你不能用一次次的重大事故让团队成员慢慢理解系统稳定性的重要性。同样没发生火灾之前，大部分人都意识不到消防通道的重要性，唯有经历过才知道这些措施的珍贵。可用性的预防与治理需要投入大量的时间和精力，这一点上需要技术 leader 做好投入产出的评估与平衡。\n\n发布变更、架构设计的 “design for failure”以及机制与文化的建立是三个重要的驱动方向，技术 leader 可以围绕这三个方面不断延伸，用运营与治理的视角去看待可用性的预防，希望本节内容对你有所启发和帮助。\n\n\n\n留个作业： 相信你在系统中肯定也有很多design for failure的设计，回顾一下它们发挥作用的高光时刻并梳理一下当时是如何思考这些设计的，同时也尝试优化这些设计看是否还有更好的方案。\n\n最后，感谢你的阅读，如果这节课让你有收获，欢迎你将它分享给其他的朋友，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **琛：\n\n> 请教下老师，稳定性 kpi 50% 这个是怎么理解的？不是很明白？\n\n#     讲师回复：\n\n>     比如原来我的kpi中就有50%是稳定性相关，如果我团队负责的系统有故障就会影响我的kpi\n\n# **叔叔：\n\n> 监控，回滚，灰布。个人理解，监控至关重要，是提前发现问题，提前将问题暴露出来用以发现，不完全依赖客户投诉的阶段。从常规的系统监控，db监控，服务监控，到关键服务交易量监控，交易量波动等进行观察。先积累以往经验，培养团队的风险意识，当发现异常问题时，再进行后续紧急处理。\n\n#     讲师回复：\n\n>     监控是研发的眼睛，没有监控的话很容易出现自己负责的系统挂了自己都不知道的笑话\n\n# **群：\n\n> 不错，学到很多\n\n# *欢：\n\n> 讲的很棒，并且有一定实操性，赞\n\n#     讲师回复：\n\n>     感谢支持，很开心\n\n# **升：\n\n> 学习了，文章质量真好，感谢\n\n#     讲师回复：\n\n>     谢谢支持，很开心\n\n# **慈：\n\n> 您好，请问互联网应急预案应该怎么写，您有参考示例吗，谢谢\n\n#     讲师回复：\n\n>     这个内容太多了，不适合在评论留言回答，知道这个意思可以自己定义，就是一个流程设计，发生什么情况 = 谁 + 做什么\n\n# **慈：\n\n> 谢谢",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"稳定性（三）：那些年源源不断的“红包”事故",frontmatter:{title:"稳定性（三）：那些年源源不断的“红包”事故",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/961c14/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/04.%20%20%E7%A8%B3%E5%AE%9A%E6%80%A7%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%BA%90%E6%BA%90%E4%B8%8D%E6%96%AD%E7%9A%84%E2%80%9C%E7%BA%A2%E5%8C%85%E2%80%9D%E4%BA%8B%E6%95%85.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/04.  稳定性（三）：那些年源源不断的“红包”事故.md",key:"v-c95b003e",path:"/pages/961c14/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:5930}],headersStr:"精选评论",content:"今天咱们来聊一下资损事故的防控。\n\n我想你一定很熟悉近几年“百亿补贴”“天降红包”“签到抽奖”这些电商、外卖、打车花样百出的营销活动和用户补贴。而且它们的营销逐渐从特有的大促场景中（比如双 11、618）常态化，红包、返现、抽奖、X 元套餐等活动玩法层出不穷，随之而来的还有各类资损事件，比如：\n\n2020 年 1 月，京东被爆出可以领取 200 元无门槛小家电优惠券，微波炉、电烤箱等小家电甚至可以 0 元购，网传损失 7000W，研发团队整体被裁掉，虽然后来京东官方辟谣，但根据按订单发货和砍单补偿红包的处理措施来看，最终的资损肯定是个天文数字。\n\n\n\n6 元的美的电烤箱\n\n除了这个案例，还有商户配错价格、秒杀商品大量超卖等资损类事件，它们主要有这样几个共性的特点：\n\n * 平台感知能力弱，技术指标不敏感，大部分是舆论爆发后人工反馈；\n\n * 因为感知困难，往往持续时间长，最终资金损失大；\n\n * 问题难以第一时间立刻恢复，并且止损后容易引起舆论关注和公关事件。\n\n简单来讲就是感知难、修复慢、影响大。\n\n而我观察后发现，大部分研发同学对资损类事故的了解相对缺乏，因为它比可用性事故更隐蔽，并且很多同学会将其简单归为“线上Bug”，忽略背后的资金损失，也没有量化具体的业务影响。所以，如果一个团队要想在资损上不栽跟头，能结合具体的业务场景在系统上做好防控建设，技术 Leader 的认识和引导就起到关键作用。\n\n这一讲我会从“如何理解资损事故”和“如何预防、应对资损事故”两个角度出发，围绕红包这个常见的场景分享一下我对资损防控的理解（上一讲已经涵盖了管理部分，所以本节不会重点强调管理动作）。\n\n\n建立资损概念的宏观认知\n\n很多 Leader 有这样一个认知误区： 平台有资金外流或者因为平台的系统故障导致某一方客户有资金外流，这才是资损事故。这种只关注真实流失的资金，是狭义的。\n\n从广义上来看，存在理论损失也应该算资损， 比如因为搜索推荐系统出问题（不论什么原因）导致这一阶段广告的收入减少，或者因系统 Bug 导致用户取消订单的申请被默认同意（虽然原本商户可能也会做同意处理，但是申诉的话平台依然要赔付），类似预计收益减少或者因系统问题产生赔付的场景都应算为资损。\n\n我列举了常见的定义与分类，因为资损场景与业务是息息相关的，所以我又简单地举了几个例子，方便你理解。\n\n\n\n资损定义与分类\n\n在这里，我想提醒你注意资损分类的“已知资损”。 听起来有点儿怪，怎么还能允许已知资损存在呢？其实这种情况很常见，主要还是因为业务规则与用户体验之间的平衡，比如电商平台有跨店铺满减优惠券，如果你凑单后，退掉不需要的商品就可以跨过“本不满足的优惠券使用条件”。\n\n虽然这种“钻空子”是业务规则允许的，但是也会存在风险，有可能形成超出预期的问题，比如家居这类大客单价的场景，如果忽略“已知资损风险”，发出了 3000-500 的优惠券，和 300-30 带来的风险肯定天上地下了。\n\n讲到这儿，你可能感觉跟自己的关联不大，因为自己负责的不是交易或者营销这类与资金关联很强的系统。可我认为，只要你公司的业务存在资金流，那么体系中的任何一个系统都很难完全规避资损风险，只是概率高低而已。很多时候，你一松懈，也许问题就会发生。\n\n2014 年，我刚加入公司参与开发的是内部运营系统，既没有大流量也没有高并发，订单、支付、红包这些只涉及查询，看着蛮“安全”，但当时在迭代一个菜单编辑功能的时候，因为我的疏忽导致一个前端 Bug：某种情况下菜品的价格传到后端是 0，后端接口也没有完整的校验，上线后第二天大量用户喜提 0 元午餐…… 直到现在，我印象依旧很深刻。\n\n那说了这么多，资损防控的关键是什么呢？\n\n\n资损防控的三个关键\n\n资损事故感知难、修复慢、影响大，所以更应该把精力投入到预防上，这样才能从根本上解决问题。修复慢是因为缺少预案，只能临时 Fix，时间上紧迫还容易引入新的风险。而想要更早发现问题，就要有监控，这样才能在事发第一时间响应处理，缩短事故持续时间。\n\n所以你要争取做到事前梳理出风险点做好预防、事发可以及时感知响应、事中可以快速止损恢复（简单来讲三个字：防、监、控）。\n\n从阶段上来讲，资损防控的落地动作与可用性治理的有所类似，但是每一部分的关键点和可用性治理又不相同，这些是 Leader 要格外注意的。\n\n1.防：资金视角做风险点识别\n\n核心是引导团队将精力放在风险点的识别与修复上，从我过去经历过的资损事故来看，虽然大部分事故都和技术 Bug、产品逻辑设计、人为配置错误这三部分有关，但是具体的原因非常离散。比如围绕红包可能出现的资损风险点，从红包的生命周期切入，就有很多可能。\n\n * 配置阶段： 金额、数量、使用条件、补贴结构等信息是否配置正确？\n\n * 发放阶段： 红包发放人群是否有超出？\n\n * 核销阶段： 优惠互斥关系是否满足（比如满减和新用户红包不可同享）？单笔订单可使用红包数量是否超出？\n\n * 退回阶段： 订单取消后，红包是否退回？如果用在 B 订单上的红包是来自 A 订单的奖励，那么 A 订单取消后，B 订单使用的红包是否受影响？\n\n你可以看到，抛开技术问题仅从业务逻辑的角度去假设，在红包的各个阶段都可能出现资损风险，并且问题非常多样。这一方面说明资损风险点与业务场景联系紧密，另一方面也说明穷举风险点有很强的不确定性，我们需要一些可迭代的“套路”去分析和发现问题。\n\n如果说我们通常以 DB 设计、API 契约、架构图作为切入点，梳理可用性的风险点，关注的是流量请求、调用链路以及数据变化（这是一个信息流的视角）。那么与之对应的，在资损方面我们关注的是业务逻辑中隐含的资金逻辑，也就是资金流的视角。\n\n因为不管是技术问题还是业务逻辑问题，资损风险最终的都会反映到资金层面上，而资金的变化是受业务逻辑影响的，二者结合就有了一个很好的切入点。 一般系统中资金的变化主要体现在 4个 方面，分别是资金流、资金账户、资金计算和资金凭据。\n\n * 资金流：通过梳理资金的流向，来确认资金转移的链路是否有错误。比如用户领取了满 15-5 的红包，其中 3 元平台补贴，2 元商户补贴。用户下单购买了 15 元的商品，那么从红包补贴到用户支付再到商户收款，就形成了一个简单的资金流，这个流向可以形成很多个“等式”，通过梳理和验证这些等式的正确性检查资金流中是否存在错误，比如最简单的：\n\n用户应付/实付（10）= 商品价格（15）- 红包优惠（5）\n\n商户应收/实收（13）=商品价格（15）-商户补贴（2）=用户实付（10）+红包内平台补贴（3）\n\n * 资金账户，通过流水和记录核对资金账户数据的正确性，比如用户账户、商户收款账户……同样也包含一些虚拟资产的核对，比如积分、优惠券……\n\n * 资金计算：涉及资金计算的部分需要单独 Review，并通过数据对比进行正确性核算。比如优惠金额的计算、订单金额的计算、商户抽佣的计算……\n\n * 资金凭据：资金在各系统扭转的过程中一定会落有大量的凭据，比如订单上会存有使用优惠的信息、对一笔订单进行支付理论上在支付系统会存在一笔支付单，这些凭据的数据准确性以及彼此关联的数据正确性都需要验证。\n\n除了从这 4 个资金的角度梳理风险点之外，还要考虑到一些技术实现引入的问题，比如接口契约、计价单位等，这些技术实现所导致的数据不一致和不正确的问题都会引发资损事故，所以你要额外注意并且参考 02 讲提过的方案，不断完善 Checklist 和设计原则，整体的梳理思路可以参考下方的脑图：\n\n\n\n资损风险点识别\n\n2. 监：一致性与正确性双核对\n\n虽然资损类事故有点儿“润物无声”的味道，但是无声胜有声。比如一定规模的电商平台，如果红包补贴金额有问题，哪怕一个红包平台只损失 0.01 元，但是在庞大体量和长时间的作用下，最终的损失也会是一个天文数字。\n\n所以在 02 讲我提到过，除了技术指标外，更敏锐的是业务监控。然而它对于短时间资损严重的场景会有比较好的感知能力，但是对于某些细小的资损的场景则无能为力，这就需要我们建立更加敏感、完善的监控体系。\n\n在我看来，针对资损感知的核心思想是：基于线上业务结果收拢进行监控，基于线下业务场景扩散进行核对。\n\n\n\n基于线上结果收拢进行监控，是忽略“因”聚焦“果”的一种假设方法，通过观察结果的变化来反推因子是否发生变化。我们可以这样思考，假设系统存在资损漏洞或Bug，那么哪些关键的业务指标会发生变化？这样你会发现：\n\n * 原本满 10-5 的红包，因红包模版Bug，实际生成的红包使用门槛为满 5-5；\n\n * 原本仅能在星巴克使用的 15 元专享红包，因为配置错误，变成可以在任意门店使用的平台通用红包。\n\n不同原因导致的问题，最终都会促使交易GMV、用户单均实付金额等宏观业务指标与日常的同比环比出现差异，不同原因的业务影响会逐渐往关键的业务指标上汇集。\n\n因此可以结合这样的规律，通过组合观察关键业务指标，形成一个基本的资损监控大盘，这样的大盘对来势汹涌、单位时间内流血量大的资损问题是比较敏感的。\n\n而基于线下业务扩散进行核对，则聚焦到我们在资损预防阶段梳理出的业务场景和业务链路。通过建立实时核对的机制确保每一个红包涉及的资金流动与计算都准确无误。这里实时核对的思想是一种 DoubleCheck 的做法， 比如我们认为虽然系统会将记录中的 A 数据变更为 B 数据，但是我怎么知道它实际操作中是否所有的变都正确呢？那么我就每次变更完都看一下，A 有没有变为 B，只要检验时发现没有变为 B 我就告警出来。\n\n在实际业务中，首先根据不同的业务场景、逻辑规则和资金、资产的变化，梳理出一个个核对公式，这部分其实在风险点梳理时就应该有整理。然后通过系统实时判断等式左右两边本应该相等数据是否一致，一旦不一致则告警出来。举几个简单的例子。\n\n * 积分发放： 积分系统发放 100 积分给用户 A = A 用户账户中新增 100 积分\n\n * 库存扣减： 订单系统生成包含 2 件 A 商品的订单 = 商品系统中 A 商品库存减 2\n\n * 下单返红包： 用户支付金额 * 返还比例 = 用户账户新增红包金额\n\n其中，资产的转移发放是比较清晰简单的，涉及资金组成（比如订单金额计算）的公式就会更复杂一些，但是核对的原理是类似的，都是基于业务场景顺着资金或资产流向建立一个个核对公式，在每一次资金或资产变动时，都会通过核对公式左右是否一致判断是否有资损发生。\n\n这里需要技术 Leader 注意， 与可用性监控围绕接口的技术指标不同，资损更关注的是数据核对，监控的并不是运行状态而是运行结果，并且资损监控的粒度要求非常高，精细到每一笔交易、每一次金额计算、每一个红包发放。所以资损监控的有效性很依赖于场景的覆盖率，仅覆盖几个关键场景是不足以规避资损风险的，除了要定期梳理外，每次系统有变更或者新功能时，都需检查是否有新的核对点，以及旧有核对公式是否需要调整。\n\n\n\n资损监控核对\n\n3. 控：资金拦截 + 资产控制\n\n除了防和监，资损防控的关键主要在“控”字上，我们希望在问题发生后第一时间止损，这就需要技术在系统层面对资金和资产有很强的控制能力。这种能力的表现就是： 不仅可以通过预案将某些场景与链路降级，还可以拦截资金的流出和资产的使用，同时具备快速订正错误数据的能力。\n\n在我们开始处理资损事故时，会有三个共性的需求。\n\n * 问题止血不新增：核心是关闭问题产生源头，往往通过业务场景降级来实现，比如对错误红包或者满减活动进行下线。\n\n * 控制资金流出：核心是对资金和资产进行拦截与冻结，避免外流后损失无法修正，比如禁止用户下单时勾选使用有问题的红包。\n\n * 存量数据订正：核心是捞取问题数据后可以快速地批量处理，比如批量更改红包的金额、甚至直接将红包无效。\n\n虽然其中一些操作对用户体验是有损的，但有而不用是一回事儿，无能为力则是另外一回事儿，其中：\n\n * 资金拦截的能力主要从资金的流入和流出这两端进行把控。以红包而言就是管控其创建与核销。在红包创建时，有预算系统进行管控，避免无限制地生成红包进而超发。在红包核销时，由交易和营销系统进行验证，确保订单上下文以及红包合法，避免问题红包被核销进而造成无法挽回的资损。\n\n * 资产管控的能力则是资产的快速锁定和数据订正展开，以红包而言，如果不同模版不同活动的红包都有一个统一的批次号，就可以通过这个标记快速捞取某一批有问题的数据。同时如果提前准备批量订正的脚本，或者有订正数据的平台，就可以快速修改红包金额、使用时间、使用门槛等关键信息，甚至批量无效所有问题红包。\n\n你需要注意，这些能力的实现更多依赖于技术 Leader 在日常需求迭代和架构设计时，是否有意识引导团队加强这方面的建设。大部分的预案思路来源于过去已经发生的问题，或者对未来可能发生问题的假设，将预案常态化是你重点关注并推进落地的。\n\n除了建设预案，还要有预案演练，以此保证预案的有效性。技术 Leader 更应该鼓励测试和开发的同学主动做攻防演练，寻找漏洞、验证止损方案、及时发现并修复问题。\n\n\n\n资损预案止损\n\n\n小结\n\n资损事故很特殊，除非之前有过金融行业的从业经验或者在这方面吃过大亏，否则很容易忽视其在系统中的风险。今天这一讲，我强调这样几个关键点：\n\n * 技术 Leader 应该加深对资损概念的理解，并引导团队加强这方面的认识；\n\n * 围绕你负责的业务，构建风险梳理的“套路”，排查隐患；\n\n * 重点围绕业务场景打造高覆盖度的监控核对，早发现、早治疗、少损失；\n\n * 尊重墨菲定律，围绕可能发生的问题做好预案和演练。\n\n在稳定性这个领域，不论是可用性还是资损，都是将系统中大量不确定性的风险识别出来，通过各种手段降低风险的过程。想要改变一件事，先要对其有足够的认识和理解，技术 Leader 在这个过程中应该起主导作用，看到别人看不到的，想到别人没想到的，引领团队往正确的方向走。\n\n\n\n留个作业： 尝试从资金风险的角度去梳理一下你负责的系统，看看都存在哪些资损风险点，以及如何治理这些问题。\n\n最后，感谢你的阅读，如果这节课让你有收获，欢迎你将它分享给其他的朋友，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **叔叔：\n\n> 如若上升到资金类事故，无论大小，事故等级均会上升很高。技术防控是一部分，比较难抓的是业务链路，技术leader对业务链路也要全盘了解，业务漏洞会导致整体的设计方案出现缺陷，从而造成资金损失\n\n#     讲师回复：\n\n>     很多时候资损产生和系统故障并不是同时发生的，也没有绝对的关联关系",normalizedContent:"今天咱们来聊一下资损事故的防控。\n\n我想你一定很熟悉近几年“百亿补贴”“天降红包”“签到抽奖”这些电商、外卖、打车花样百出的营销活动和用户补贴。而且它们的营销逐渐从特有的大促场景中（比如双 11、618）常态化，红包、返现、抽奖、x 元套餐等活动玩法层出不穷，随之而来的还有各类资损事件，比如：\n\n2020 年 1 月，京东被爆出可以领取 200 元无门槛小家电优惠券，微波炉、电烤箱等小家电甚至可以 0 元购，网传损失 7000w，研发团队整体被裁掉，虽然后来京东官方辟谣，但根据按订单发货和砍单补偿红包的处理措施来看，最终的资损肯定是个天文数字。\n\n\n\n6 元的美的电烤箱\n\n除了这个案例，还有商户配错价格、秒杀商品大量超卖等资损类事件，它们主要有这样几个共性的特点：\n\n * 平台感知能力弱，技术指标不敏感，大部分是舆论爆发后人工反馈；\n\n * 因为感知困难，往往持续时间长，最终资金损失大；\n\n * 问题难以第一时间立刻恢复，并且止损后容易引起舆论关注和公关事件。\n\n简单来讲就是感知难、修复慢、影响大。\n\n而我观察后发现，大部分研发同学对资损类事故的了解相对缺乏，因为它比可用性事故更隐蔽，并且很多同学会将其简单归为“线上bug”，忽略背后的资金损失，也没有量化具体的业务影响。所以，如果一个团队要想在资损上不栽跟头，能结合具体的业务场景在系统上做好防控建设，技术 leader 的认识和引导就起到关键作用。\n\n这一讲我会从“如何理解资损事故”和“如何预防、应对资损事故”两个角度出发，围绕红包这个常见的场景分享一下我对资损防控的理解（上一讲已经涵盖了管理部分，所以本节不会重点强调管理动作）。\n\n\n建立资损概念的宏观认知\n\n很多 leader 有这样一个认知误区： 平台有资金外流或者因为平台的系统故障导致某一方客户有资金外流，这才是资损事故。这种只关注真实流失的资金，是狭义的。\n\n从广义上来看，存在理论损失也应该算资损， 比如因为搜索推荐系统出问题（不论什么原因）导致这一阶段广告的收入减少，或者因系统 bug 导致用户取消订单的申请被默认同意（虽然原本商户可能也会做同意处理，但是申诉的话平台依然要赔付），类似预计收益减少或者因系统问题产生赔付的场景都应算为资损。\n\n我列举了常见的定义与分类，因为资损场景与业务是息息相关的，所以我又简单地举了几个例子，方便你理解。\n\n\n\n资损定义与分类\n\n在这里，我想提醒你注意资损分类的“已知资损”。 听起来有点儿怪，怎么还能允许已知资损存在呢？其实这种情况很常见，主要还是因为业务规则与用户体验之间的平衡，比如电商平台有跨店铺满减优惠券，如果你凑单后，退掉不需要的商品就可以跨过“本不满足的优惠券使用条件”。\n\n虽然这种“钻空子”是业务规则允许的，但是也会存在风险，有可能形成超出预期的问题，比如家居这类大客单价的场景，如果忽略“已知资损风险”，发出了 3000-500 的优惠券，和 300-30 带来的风险肯定天上地下了。\n\n讲到这儿，你可能感觉跟自己的关联不大，因为自己负责的不是交易或者营销这类与资金关联很强的系统。可我认为，只要你公司的业务存在资金流，那么体系中的任何一个系统都很难完全规避资损风险，只是概率高低而已。很多时候，你一松懈，也许问题就会发生。\n\n2014 年，我刚加入公司参与开发的是内部运营系统，既没有大流量也没有高并发，订单、支付、红包这些只涉及查询，看着蛮“安全”，但当时在迭代一个菜单编辑功能的时候，因为我的疏忽导致一个前端 bug：某种情况下菜品的价格传到后端是 0，后端接口也没有完整的校验，上线后第二天大量用户喜提 0 元午餐…… 直到现在，我印象依旧很深刻。\n\n那说了这么多，资损防控的关键是什么呢？\n\n\n资损防控的三个关键\n\n资损事故感知难、修复慢、影响大，所以更应该把精力投入到预防上，这样才能从根本上解决问题。修复慢是因为缺少预案，只能临时 fix，时间上紧迫还容易引入新的风险。而想要更早发现问题，就要有监控，这样才能在事发第一时间响应处理，缩短事故持续时间。\n\n所以你要争取做到事前梳理出风险点做好预防、事发可以及时感知响应、事中可以快速止损恢复（简单来讲三个字：防、监、控）。\n\n从阶段上来讲，资损防控的落地动作与可用性治理的有所类似，但是每一部分的关键点和可用性治理又不相同，这些是 leader 要格外注意的。\n\n1.防：资金视角做风险点识别\n\n核心是引导团队将精力放在风险点的识别与修复上，从我过去经历过的资损事故来看，虽然大部分事故都和技术 bug、产品逻辑设计、人为配置错误这三部分有关，但是具体的原因非常离散。比如围绕红包可能出现的资损风险点，从红包的生命周期切入，就有很多可能。\n\n * 配置阶段： 金额、数量、使用条件、补贴结构等信息是否配置正确？\n\n * 发放阶段： 红包发放人群是否有超出？\n\n * 核销阶段： 优惠互斥关系是否满足（比如满减和新用户红包不可同享）？单笔订单可使用红包数量是否超出？\n\n * 退回阶段： 订单取消后，红包是否退回？如果用在 b 订单上的红包是来自 a 订单的奖励，那么 a 订单取消后，b 订单使用的红包是否受影响？\n\n你可以看到，抛开技术问题仅从业务逻辑的角度去假设，在红包的各个阶段都可能出现资损风险，并且问题非常多样。这一方面说明资损风险点与业务场景联系紧密，另一方面也说明穷举风险点有很强的不确定性，我们需要一些可迭代的“套路”去分析和发现问题。\n\n如果说我们通常以 db 设计、api 契约、架构图作为切入点，梳理可用性的风险点，关注的是流量请求、调用链路以及数据变化（这是一个信息流的视角）。那么与之对应的，在资损方面我们关注的是业务逻辑中隐含的资金逻辑，也就是资金流的视角。\n\n因为不管是技术问题还是业务逻辑问题，资损风险最终的都会反映到资金层面上，而资金的变化是受业务逻辑影响的，二者结合就有了一个很好的切入点。 一般系统中资金的变化主要体现在 4个 方面，分别是资金流、资金账户、资金计算和资金凭据。\n\n * 资金流：通过梳理资金的流向，来确认资金转移的链路是否有错误。比如用户领取了满 15-5 的红包，其中 3 元平台补贴，2 元商户补贴。用户下单购买了 15 元的商品，那么从红包补贴到用户支付再到商户收款，就形成了一个简单的资金流，这个流向可以形成很多个“等式”，通过梳理和验证这些等式的正确性检查资金流中是否存在错误，比如最简单的：\n\n用户应付/实付（10）= 商品价格（15）- 红包优惠（5）\n\n商户应收/实收（13）=商品价格（15）-商户补贴（2）=用户实付（10）+红包内平台补贴（3）\n\n * 资金账户，通过流水和记录核对资金账户数据的正确性，比如用户账户、商户收款账户……同样也包含一些虚拟资产的核对，比如积分、优惠券……\n\n * 资金计算：涉及资金计算的部分需要单独 review，并通过数据对比进行正确性核算。比如优惠金额的计算、订单金额的计算、商户抽佣的计算……\n\n * 资金凭据：资金在各系统扭转的过程中一定会落有大量的凭据，比如订单上会存有使用优惠的信息、对一笔订单进行支付理论上在支付系统会存在一笔支付单，这些凭据的数据准确性以及彼此关联的数据正确性都需要验证。\n\n除了从这 4 个资金的角度梳理风险点之外，还要考虑到一些技术实现引入的问题，比如接口契约、计价单位等，这些技术实现所导致的数据不一致和不正确的问题都会引发资损事故，所以你要额外注意并且参考 02 讲提过的方案，不断完善 checklist 和设计原则，整体的梳理思路可以参考下方的脑图：\n\n\n\n资损风险点识别\n\n2. 监：一致性与正确性双核对\n\n虽然资损类事故有点儿“润物无声”的味道，但是无声胜有声。比如一定规模的电商平台，如果红包补贴金额有问题，哪怕一个红包平台只损失 0.01 元，但是在庞大体量和长时间的作用下，最终的损失也会是一个天文数字。\n\n所以在 02 讲我提到过，除了技术指标外，更敏锐的是业务监控。然而它对于短时间资损严重的场景会有比较好的感知能力，但是对于某些细小的资损的场景则无能为力，这就需要我们建立更加敏感、完善的监控体系。\n\n在我看来，针对资损感知的核心思想是：基于线上业务结果收拢进行监控，基于线下业务场景扩散进行核对。\n\n\n\n基于线上结果收拢进行监控，是忽略“因”聚焦“果”的一种假设方法，通过观察结果的变化来反推因子是否发生变化。我们可以这样思考，假设系统存在资损漏洞或bug，那么哪些关键的业务指标会发生变化？这样你会发现：\n\n * 原本满 10-5 的红包，因红包模版bug，实际生成的红包使用门槛为满 5-5；\n\n * 原本仅能在星巴克使用的 15 元专享红包，因为配置错误，变成可以在任意门店使用的平台通用红包。\n\n不同原因导致的问题，最终都会促使交易gmv、用户单均实付金额等宏观业务指标与日常的同比环比出现差异，不同原因的业务影响会逐渐往关键的业务指标上汇集。\n\n因此可以结合这样的规律，通过组合观察关键业务指标，形成一个基本的资损监控大盘，这样的大盘对来势汹涌、单位时间内流血量大的资损问题是比较敏感的。\n\n而基于线下业务扩散进行核对，则聚焦到我们在资损预防阶段梳理出的业务场景和业务链路。通过建立实时核对的机制确保每一个红包涉及的资金流动与计算都准确无误。这里实时核对的思想是一种 doublecheck 的做法， 比如我们认为虽然系统会将记录中的 a 数据变更为 b 数据，但是我怎么知道它实际操作中是否所有的变都正确呢？那么我就每次变更完都看一下，a 有没有变为 b，只要检验时发现没有变为 b 我就告警出来。\n\n在实际业务中，首先根据不同的业务场景、逻辑规则和资金、资产的变化，梳理出一个个核对公式，这部分其实在风险点梳理时就应该有整理。然后通过系统实时判断等式左右两边本应该相等数据是否一致，一旦不一致则告警出来。举几个简单的例子。\n\n * 积分发放： 积分系统发放 100 积分给用户 a = a 用户账户中新增 100 积分\n\n * 库存扣减： 订单系统生成包含 2 件 a 商品的订单 = 商品系统中 a 商品库存减 2\n\n * 下单返红包： 用户支付金额 * 返还比例 = 用户账户新增红包金额\n\n其中，资产的转移发放是比较清晰简单的，涉及资金组成（比如订单金额计算）的公式就会更复杂一些，但是核对的原理是类似的，都是基于业务场景顺着资金或资产流向建立一个个核对公式，在每一次资金或资产变动时，都会通过核对公式左右是否一致判断是否有资损发生。\n\n这里需要技术 leader 注意， 与可用性监控围绕接口的技术指标不同，资损更关注的是数据核对，监控的并不是运行状态而是运行结果，并且资损监控的粒度要求非常高，精细到每一笔交易、每一次金额计算、每一个红包发放。所以资损监控的有效性很依赖于场景的覆盖率，仅覆盖几个关键场景是不足以规避资损风险的，除了要定期梳理外，每次系统有变更或者新功能时，都需检查是否有新的核对点，以及旧有核对公式是否需要调整。\n\n\n\n资损监控核对\n\n3. 控：资金拦截 + 资产控制\n\n除了防和监，资损防控的关键主要在“控”字上，我们希望在问题发生后第一时间止损，这就需要技术在系统层面对资金和资产有很强的控制能力。这种能力的表现就是： 不仅可以通过预案将某些场景与链路降级，还可以拦截资金的流出和资产的使用，同时具备快速订正错误数据的能力。\n\n在我们开始处理资损事故时，会有三个共性的需求。\n\n * 问题止血不新增：核心是关闭问题产生源头，往往通过业务场景降级来实现，比如对错误红包或者满减活动进行下线。\n\n * 控制资金流出：核心是对资金和资产进行拦截与冻结，避免外流后损失无法修正，比如禁止用户下单时勾选使用有问题的红包。\n\n * 存量数据订正：核心是捞取问题数据后可以快速地批量处理，比如批量更改红包的金额、甚至直接将红包无效。\n\n虽然其中一些操作对用户体验是有损的，但有而不用是一回事儿，无能为力则是另外一回事儿，其中：\n\n * 资金拦截的能力主要从资金的流入和流出这两端进行把控。以红包而言就是管控其创建与核销。在红包创建时，有预算系统进行管控，避免无限制地生成红包进而超发。在红包核销时，由交易和营销系统进行验证，确保订单上下文以及红包合法，避免问题红包被核销进而造成无法挽回的资损。\n\n * 资产管控的能力则是资产的快速锁定和数据订正展开，以红包而言，如果不同模版不同活动的红包都有一个统一的批次号，就可以通过这个标记快速捞取某一批有问题的数据。同时如果提前准备批量订正的脚本，或者有订正数据的平台，就可以快速修改红包金额、使用时间、使用门槛等关键信息，甚至批量无效所有问题红包。\n\n你需要注意，这些能力的实现更多依赖于技术 leader 在日常需求迭代和架构设计时，是否有意识引导团队加强这方面的建设。大部分的预案思路来源于过去已经发生的问题，或者对未来可能发生问题的假设，将预案常态化是你重点关注并推进落地的。\n\n除了建设预案，还要有预案演练，以此保证预案的有效性。技术 leader 更应该鼓励测试和开发的同学主动做攻防演练，寻找漏洞、验证止损方案、及时发现并修复问题。\n\n\n\n资损预案止损\n\n\n小结\n\n资损事故很特殊，除非之前有过金融行业的从业经验或者在这方面吃过大亏，否则很容易忽视其在系统中的风险。今天这一讲，我强调这样几个关键点：\n\n * 技术 leader 应该加深对资损概念的理解，并引导团队加强这方面的认识；\n\n * 围绕你负责的业务，构建风险梳理的“套路”，排查隐患；\n\n * 重点围绕业务场景打造高覆盖度的监控核对，早发现、早治疗、少损失；\n\n * 尊重墨菲定律，围绕可能发生的问题做好预案和演练。\n\n在稳定性这个领域，不论是可用性还是资损，都是将系统中大量不确定性的风险识别出来，通过各种手段降低风险的过程。想要改变一件事，先要对其有足够的认识和理解，技术 leader 在这个过程中应该起主导作用，看到别人看不到的，想到别人没想到的，引领团队往正确的方向走。\n\n\n\n留个作业： 尝试从资金风险的角度去梳理一下你负责的系统，看看都存在哪些资损风险点，以及如何治理这些问题。\n\n最后，感谢你的阅读，如果这节课让你有收获，欢迎你将它分享给其他的朋友，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **叔叔：\n\n> 如若上升到资金类事故，无论大小，事故等级均会上升很高。技术防控是一部分，比较难抓的是业务链路，技术leader对业务链路也要全盘了解，业务漏洞会导致整体的设计方案出现缺陷，从而造成资金损失\n\n#     讲师回复：\n\n>     很多时候资损产生和系统故障并不是同时发生的，也没有绝对的关联关系",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"技术债务：如何带领团队从困境中突围而出？",frontmatter:{title:"技术债务：如何带领团队从困境中突围而出？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/c88807/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/05.%20%20%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%EF%BC%9A%E5%A6%82%E4%BD%95%E5%B8%A6%E9%A2%86%E5%9B%A2%E9%98%9F%E4%BB%8E%E5%9B%B0%E5%A2%83%E4%B8%AD%E7%AA%81%E5%9B%B4%E8%80%8C%E5%87%BA%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/05.  技术债务：如何带领团队从困境中突围而出？.md",key:"v-1b28ac1d",path:"/pages/c88807/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:5694}],headersStr:"精选评论",content:"在工作中，我们除了做好团队管理的工作外，还要解决技术与业务发展过程中产生的种种矛盾，而技术债务就是这种矛盾最常见的产物。所以今天，我想结合自己的经验，和你聊一聊应该怎么管理技术债务（Technical Debt）。\n\n\n我对技术债务的理解\n\n技术债务在研发领域类似于“金融债务”的概念，大部分情况下是说因为人为妥协，系统的设计和实现没有遵循最佳实践，所以虽然在短期做到了快速交付，但也制约了系统未来的可扩展性，并且埋下了稳定性的风险隐患。就好比你信用卡分期消费，虽然可以立刻满足自己的购买意愿（得到眼前的好处），但同时也会背上一定的负担，在未来必须得偿还。\n\n其实，包括我在内，很多同学最早接触“技术债务”这个概念是读了《重构》这本书。\n\n在这本书里，Martin Fowler 曾发表过他对技术债务的定义，即“技术债务象限”。他根据债务产生时的原因，将技术债务从两个维度分成四个象限：即有意（Deliberate）的还是无心（Inadvertent）的，谨慎（Prudent）的还是草率（Reckless）的。\n\n简单来讲，就是开发人员是否清楚接下来的设计与实现会造成未来的技术债务，以及在做决策时是否经过慎重的考虑。从我过往的经验来看，技术债务“是否已知”是比较关键的，因为往往最难的不是解决问题，是根本不知道这里有问题，而下面两种情况在实际工作中最为普遍：\n\n * 因为能力不足根本没有意识到债务的产生与积累；\n\n * 因为交付压力进而在技术方案与实现上妥协形成已知的技术债务。\n\n什么是能力不足呢？ 比如开发者编写了低质量或者有潜在风险的代码；对系统的实现和运行不了解，重复代码被大量构造，缺少抽象与沉淀；缺少完善的开发机制和流程把控，比如测试、文档等方面做得不到位……\n\n而交付压力（技术妥协） 则被很多 Leader 认为是产生技术债务最关键的原因，因为项目很复杂或排期压力，不得不在系统的架构设计与代码实现上作出妥协，选择最容易的方式而非最好的方式。甚至会跳过方案的详细设计，直接开始 Coding，不深究代码风格、标准、最佳实践，更进一步则会压缩测试方面的时间与投入，只为了尽早上线。\n\n而当技术债务产生后，因为系统和项目的惯性，债务会积累并使系统散发出一些“坏味道”，这些坏味道有很多个方面，我列了三种最常见的情形，如果你负责的系统中出现类似的情况，那你需要警惕了。\n\n\n\n技术债务的坏味道\n\n\n为什么你要重视技术债务？\n\n1. 影响系统扩展和需求交付\n\n结合技术债务产生时的情况，我们不难发现，随着技术债务的累加，系统的负担也不断增加，糟糕的设计与实现导致系统变更时需要处理的代码、考虑的问题越来越多，影响最大的是系统扩展和需求交付。\n\n其中对系统可扩展性影响最大的，大部分和架构以及系统链路的设计有关（比如对业务代码缺少抽象，模块间过度耦合、服务间职能边界不清晰等）。当新业务需求出现时，这些问题的改造和修复成本很高，并且大部分问题积重难返，这就使系统迭代非常困难，最终影响项目进展使系统无法按期交付。这也是技术债务对研发而言，最大、最主要的影响，需要你有足够的认识。\n\n2. 恶性循环导致人员流失\n\n除了影响系统扩展和需求交付之外，技术债务还会导致人员流失。我接触的大部分研发同学最喜欢的就是搭建从 0 到 1 的新系统，因为没有“历史包袱”可以轻装上阵，最大程度在设计和实现上完善它。\n\n接手一个旧系统就不一样了，这样的系统往往运行了很久，出问题影响大，又因为人员变化多、文档缺失严重，谁也说不清楚系统的架构，最终只能一行行读代码来结合业务场景进行理解。并且很多看上去不合理的实现，也许会存在特定的原因，往往想改又不敢改。等你梳理清楚所有的关联与影响后，又发现工作量太大改不动，只能像打补丁一样维持着，等到某些外界因素（组织分工变化、重大事故等）发生变化导致问题不能再拖延时，再通过一次大的重构（实为重做）来解决。\n\n不过，与其说研发同学苦恼的是旧系统，不如说是其中沉重的技术债务，它会导致系统未来的迭代愈发困难，迭代困难又会导致交付压力增大，所以只能再次做技术妥协以实现业务优先。\n\n这样就会进入恶性循环，研发同学就好似修补一座破屋，每次修好一点，下一次迭代时就被破坏更多，随着时间持续和系统腐化的加剧，研发同学开发的难度越来越大、风险隐患越来越多、自身能力的成长与提高也很有限，自然就容易导致人员流失。\n\n所以你一定要清楚，技术债务的恶性循环会影响开发团队的生产力，并降低团队的士气和成员的驱动力，而低生产率导致团队只能优先交付功能，这就推迟了技术债务的解决，从而进一步增加技术债务。\n\n\n\n既然技术债务如此令人头疼，我们要怎么从这样的困境中突围而出呢？我根据经验总结了4个步骤，供你参考。\n\n\n如何从循环的债务困境中突围而出？\n\n1.债务的 Owner 是技术 Leader\n\n前面我提到，大部分技术 Leader 认为是业务节奏导致了技术债务的产生，因为研发资源永远不会 100% 充足。所以一些技术 Leader 觉得委屈，明明业务压迫技术导致的问题，最终还要自己来承担责任。\n\n要想解决清楚一个问题，就必须先定义清楚这个问题。 所以我们要先定义清楚技术债务与技术Leader的关联，针对“交付压力 - 技术妥协 - Leader 责任”这个技术债务形成的关系链，我想说几句个人的理解，供你参考。\n\n我们会下意识地觉得交付压力导致的技术债务和自己无关，因为我们并不是技术债务的“始作俑者”。但是在我看来，任何一家成长中的公司，都会存在技术资源与业务发展的矛盾，如果矛盾消失，说明公司业务增长放缓，甚至陷入瓶颈，甚至导致技术资源过剩要裁人。这肯定不是我们追求的结果，大部分情况下，我们追求的是技术与业务之间的 Balance，将它们控制在一个动态适配的状态。\n\n当“交付压力产生技术债务”变成一个普遍的现象，而非某种特例后，我们应该认识到这就是发展中的一部分，而解决这类问题，是你的责任和本职工作之一。 换一个角度来说，你是整个团队中最理解技术债务影响、最懂系统架构与迭代能力的人，你不解决这类“技术问题”，难道要靠产品、销售、运营或者管理层来解决吗？\n\n所以我非常不建议你一谈到技术债务，就下意识地路由到“交付压力太大、排期太紧、产品设计太复杂”等理由上，这样的“甩锅”只会将你从解决问题的决策者变为服从安排的执行者，不但对解决问题没有任何帮助，还从另一个方面证明了自己失职。\n\n那么要想解决技术债务，你需要找到技术与业务的平衡点，我的经验是“内外双修”：\n\n * 内：加强团队的战斗力，减少债务产生的机会，增强债务处理的能力。\n\n * 外：要深刻地理解业务，并且做好与其他协作方（尤其是产品、业务）的沟通。这样你才能理解协作方想解决什么问题，他们以为要么A、要么B才能解决的问题，既懂技术又懂业务的你能否找到方案C？\n\n我建议你，面对选择题时不要只看到可选项，要永远寻找第三条路。 如果实在没有其他选择，在技术妥协的同时，做好沟通，让协作方明白方案的临时性以及对未来的影响，争取到承诺在未来给你足够的空间解决这些问题。\n\n2. 通过 CheckList 识别债务\n\n除了明确债务的 Owner 是自己之外，技术债务的度量一直是个难题，因为没有很好的量化方式，所以债务的识别以及收益 ROI 的计算都没有什么标准。所以，我们在处理技术债务的第一阶段就是要识别出技术债务，将其从看不到的未知隐患转变为可视的已知问题。\n\n我习惯根据系统的情况，建立一个债务 Review 的 CheckList ，并且不断完善。技术债务从表象上可以做一些细分（我整理了一张图）：\n\n\n\n债务细分脑图\n\n通过现象我们就可以反推出一些导致现象的原因，将这些原因结合系统的架构进行分类，就会形成一个个具体的关注点。这些关注点往往是结合我们之前踩过的坑、发生过的问题，以及编码、架构上广为遵守的一些最佳实践所形成的，这样你就可以制定出一个较为详细的 CheckList 用以具体的债务识别（下图供你参考）。\n\n\n\n债务识别 Demo\n\n3. 有计划地分级偿债\n\n通过 CheckList 将技术债务作出识别后，往往要解决的问题非常多，但是我们又几乎无法停止需求迭代只做还债这一件事，所以此时要对技术债务做一个“轻重缓急”的区分，以确定需要处理的优先级。我结合之前的经验总结了一些分级原则供你参考。\n\n * 关键链路优先： 并非所有糟糕的设计与实现都能产生严重后果，即使能，它们发生的概率也不一样，而关键链路意味着业务影响最大，同时日常的改动频率和事故风险也较高，优先解决它的收益是最大的。\n\n * 历史事故命中优先： 一些设计与实现在过往导致过线上真实问题的发生，不管是否发生在本系统还是当前团队，都相当于已经被证实过的这类债务的严重性，所以应该尽早修复它们，避免类似问题反复发生。\n\n * 可扩展性优先： 在 CheckList 以及债务现象中我们可以发现，有些问题影响了系统未来的演进，增加了迭代成本，有些问题影响系统的维护，比如代码风格没有统一、缺少文档，在处理时应该优先处理影响可扩展性的问题，后续逐步处理影响可维护性的问题。\n\n * 权责清晰优先： 一些问题在处理时受到历史架构、组织分工（康威定律）的影响，会导致系统的权责不清晰，这类系统的推进和改造往往需要花费更多的时间精力，并且从顶层设计出发去重新考量，所以权责清晰的部分可以优先处理。\n\n总的来说，通过对技术债务进行分级，实质上也是一个问题分治的过程，将大问题切分成一个个小问题，这样就可以将它们加入日常的迭代中，形成一个分期偿还技术债务的计划，逐步减少技术债务，减轻负担让团队与系统可以轻装上阵。\n\n4. 正视债务做好预防\n\n除此之外，预防永远胜于治疗，技术债务汇总预防的关键点在于那些“原本未知”的技术债务要逐渐减少，大家对于实现质量的追求不能止步于“测试没有明显 Bug”，写出能运行的代码是不够的，还要易维护易扩展。而你可以从几个方面着手：\n\n * 提升团队认识，通过项目复盘、系统重构、事故 Review 等各种机会，通过实际的案例让研发同学清楚技术债务对团队产生的负担，以及对个人能力提升的影响。\n\n * 建立机制流程，比如在方案设计阶段向下深挖一下实现的要点，更多资深的开发参与到架构评审，或者促进团队形成 code review 的习惯并且达成一个共识标准以提升系统质量。\n\n * 确保资源投入，在通过债务识别和分级后，将还债的投入提前计算到每次迭代中，确保有一定的资源投入其中。\n\n5. 一些常见的误区\n\n通过 CheckList 做债务识别，然后定期诊断、水平扫描、债务定级、分期偿还来做技术债务的处理，最终在团队认识、机制氛围、资源保障上下功夫做预防，这就是技术债务管理的核心思路。\n\n而这个过程中，有一些问题是日常你很容易走入误区的，我简单总结了一下几个注意点：\n\n * 存在即合理，动态变化才是王道。 不要总想着毕其功于一役，也几乎不太可能有完美的实现或系统，接受技术债务一定会存在的事实，重点在于控制债务积压的程度，欠债本身不可怕，欠债不知且不还才可怕。\n\n * 不积跬步无以至千里。我们往往过度轻视日常微小积累，又过度重视“大事件”产生的影响。日常这里凑合一下，那里妥协一点，没人关注小问题发生的原因。而一旦发生重大的影响，则恨不得把之前的系统全盘推翻重做一遍。\n\n * 机制流程外还要讲策略和方法。很多技术 Leader 觉得这件事很重要，讲的同时设计了很多流程和机制，不遵守就要承担怎样怎样的后果，这样往往事半功倍。机制流程不是越多越好，也不能光有惩罚而没有激励，同时最重要的是你不能只追杀要结果，要给帮助、给方法、给支持。\n\n\n小结\n\n技术债务和金融债务有很多类似之处，金融借债往往是为了解决当前的资金压力，从而在商业上赢得先机，着眼于未来的长远收益。技术债务往往也出于同样的目的，通过当前适当的技术妥协换取业务更早的交付上线，尽可能与业务的发展节奏匹配，在业务的发展与变化过程中不断完善而非一开始就追求完美。\n\n所以，我们并不能将技术债务单纯看作是“不好的事务”，与金融借债在金融领域中起到货币杠杆的作用类似，适当的技术债务对加速业务发展、推动系统演进是有积极作用的。所以完全没必要谈“债”色变，放眼现实企业中，不能说没有债务的一定是三流企业，但是一流企业基本都有合理的负债。\n\n但是对于技术债务而言，怎样的债务才是“适当”的，就非常考验你的能力了。金融借债会产生利息，如果定期还款则不会产生太大影响，而如果不偿还的话，不仅有利息还会产生高额的违约金，并且随着不还款的次数增加，还款将会变得越来越困难，最终可能导致企业破产。\n\n同样类比到技术领域的系统项目中，大量的技术债务产生的利息就是系统变得难以扩展和维护，而这些问题没有被及时处理就相当于利息和本金没有按期偿还，那么以事故和交付延期为代表的违约金就不期而至了。\n\n所以我们谈及技术债务时，既要清楚它的种种弊端，也要具备正视技术债务的勇气。一方面不能过于追求完美导致因噎废食，另一方面也不能忽略或者无限期推迟技术债务的处理，因为随着时间的推移，技术债务会逐渐积累，最终量变引发质变只能通过休克疗法来解决（暂停一切业务进展，系统推倒重来）。\n\n以务实的态度来对待技术债务，团队在技术战略上高度重视、在日常研发节奏和项目中寻求战术上的平衡，这是我给你的建议，希望能对你有所帮助。\n\n\n\n留个作业： 过往让你印象最深刻的技术债务是如何产生的，它导致了怎样的后果，你最终是如何如处理的？如果现在重新Review，你会改变当初的处理方式吗，为什么？\n\n最后，感谢你的阅读，如果这节课让你有收获，欢迎你将它分享给其他的朋友，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **8904：\n\n> 结合过往，深有体会，真的讲得非常好！\n\n# **涛：\n\n> 技术债务确实是需要解决的问题，分级偿债很有效，也是很考验能力的，之前在项目开发中这方面做得不够好，感谢历史给了一些方法论指导\n\n# **锋：\n\n> 在N前的老项目上，继续堆代码，也是实属无奈。老板也不给时间重构，不敢改，明看着不合理也不敢改。",normalizedContent:"在工作中，我们除了做好团队管理的工作外，还要解决技术与业务发展过程中产生的种种矛盾，而技术债务就是这种矛盾最常见的产物。所以今天，我想结合自己的经验，和你聊一聊应该怎么管理技术债务（technical debt）。\n\n\n我对技术债务的理解\n\n技术债务在研发领域类似于“金融债务”的概念，大部分情况下是说因为人为妥协，系统的设计和实现没有遵循最佳实践，所以虽然在短期做到了快速交付，但也制约了系统未来的可扩展性，并且埋下了稳定性的风险隐患。就好比你信用卡分期消费，虽然可以立刻满足自己的购买意愿（得到眼前的好处），但同时也会背上一定的负担，在未来必须得偿还。\n\n其实，包括我在内，很多同学最早接触“技术债务”这个概念是读了《重构》这本书。\n\n在这本书里，martin fowler 曾发表过他对技术债务的定义，即“技术债务象限”。他根据债务产生时的原因，将技术债务从两个维度分成四个象限：即有意（deliberate）的还是无心（inadvertent）的，谨慎（prudent）的还是草率（reckless）的。\n\n简单来讲，就是开发人员是否清楚接下来的设计与实现会造成未来的技术债务，以及在做决策时是否经过慎重的考虑。从我过往的经验来看，技术债务“是否已知”是比较关键的，因为往往最难的不是解决问题，是根本不知道这里有问题，而下面两种情况在实际工作中最为普遍：\n\n * 因为能力不足根本没有意识到债务的产生与积累；\n\n * 因为交付压力进而在技术方案与实现上妥协形成已知的技术债务。\n\n什么是能力不足呢？ 比如开发者编写了低质量或者有潜在风险的代码；对系统的实现和运行不了解，重复代码被大量构造，缺少抽象与沉淀；缺少完善的开发机制和流程把控，比如测试、文档等方面做得不到位……\n\n而交付压力（技术妥协） 则被很多 leader 认为是产生技术债务最关键的原因，因为项目很复杂或排期压力，不得不在系统的架构设计与代码实现上作出妥协，选择最容易的方式而非最好的方式。甚至会跳过方案的详细设计，直接开始 coding，不深究代码风格、标准、最佳实践，更进一步则会压缩测试方面的时间与投入，只为了尽早上线。\n\n而当技术债务产生后，因为系统和项目的惯性，债务会积累并使系统散发出一些“坏味道”，这些坏味道有很多个方面，我列了三种最常见的情形，如果你负责的系统中出现类似的情况，那你需要警惕了。\n\n\n\n技术债务的坏味道\n\n\n为什么你要重视技术债务？\n\n1. 影响系统扩展和需求交付\n\n结合技术债务产生时的情况，我们不难发现，随着技术债务的累加，系统的负担也不断增加，糟糕的设计与实现导致系统变更时需要处理的代码、考虑的问题越来越多，影响最大的是系统扩展和需求交付。\n\n其中对系统可扩展性影响最大的，大部分和架构以及系统链路的设计有关（比如对业务代码缺少抽象，模块间过度耦合、服务间职能边界不清晰等）。当新业务需求出现时，这些问题的改造和修复成本很高，并且大部分问题积重难返，这就使系统迭代非常困难，最终影响项目进展使系统无法按期交付。这也是技术债务对研发而言，最大、最主要的影响，需要你有足够的认识。\n\n2. 恶性循环导致人员流失\n\n除了影响系统扩展和需求交付之外，技术债务还会导致人员流失。我接触的大部分研发同学最喜欢的就是搭建从 0 到 1 的新系统，因为没有“历史包袱”可以轻装上阵，最大程度在设计和实现上完善它。\n\n接手一个旧系统就不一样了，这样的系统往往运行了很久，出问题影响大，又因为人员变化多、文档缺失严重，谁也说不清楚系统的架构，最终只能一行行读代码来结合业务场景进行理解。并且很多看上去不合理的实现，也许会存在特定的原因，往往想改又不敢改。等你梳理清楚所有的关联与影响后，又发现工作量太大改不动，只能像打补丁一样维持着，等到某些外界因素（组织分工变化、重大事故等）发生变化导致问题不能再拖延时，再通过一次大的重构（实为重做）来解决。\n\n不过，与其说研发同学苦恼的是旧系统，不如说是其中沉重的技术债务，它会导致系统未来的迭代愈发困难，迭代困难又会导致交付压力增大，所以只能再次做技术妥协以实现业务优先。\n\n这样就会进入恶性循环，研发同学就好似修补一座破屋，每次修好一点，下一次迭代时就被破坏更多，随着时间持续和系统腐化的加剧，研发同学开发的难度越来越大、风险隐患越来越多、自身能力的成长与提高也很有限，自然就容易导致人员流失。\n\n所以你一定要清楚，技术债务的恶性循环会影响开发团队的生产力，并降低团队的士气和成员的驱动力，而低生产率导致团队只能优先交付功能，这就推迟了技术债务的解决，从而进一步增加技术债务。\n\n\n\n既然技术债务如此令人头疼，我们要怎么从这样的困境中突围而出呢？我根据经验总结了4个步骤，供你参考。\n\n\n如何从循环的债务困境中突围而出？\n\n1.债务的 owner 是技术 leader\n\n前面我提到，大部分技术 leader 认为是业务节奏导致了技术债务的产生，因为研发资源永远不会 100% 充足。所以一些技术 leader 觉得委屈，明明业务压迫技术导致的问题，最终还要自己来承担责任。\n\n要想解决清楚一个问题，就必须先定义清楚这个问题。 所以我们要先定义清楚技术债务与技术leader的关联，针对“交付压力 - 技术妥协 - leader 责任”这个技术债务形成的关系链，我想说几句个人的理解，供你参考。\n\n我们会下意识地觉得交付压力导致的技术债务和自己无关，因为我们并不是技术债务的“始作俑者”。但是在我看来，任何一家成长中的公司，都会存在技术资源与业务发展的矛盾，如果矛盾消失，说明公司业务增长放缓，甚至陷入瓶颈，甚至导致技术资源过剩要裁人。这肯定不是我们追求的结果，大部分情况下，我们追求的是技术与业务之间的 balance，将它们控制在一个动态适配的状态。\n\n当“交付压力产生技术债务”变成一个普遍的现象，而非某种特例后，我们应该认识到这就是发展中的一部分，而解决这类问题，是你的责任和本职工作之一。 换一个角度来说，你是整个团队中最理解技术债务影响、最懂系统架构与迭代能力的人，你不解决这类“技术问题”，难道要靠产品、销售、运营或者管理层来解决吗？\n\n所以我非常不建议你一谈到技术债务，就下意识地路由到“交付压力太大、排期太紧、产品设计太复杂”等理由上，这样的“甩锅”只会将你从解决问题的决策者变为服从安排的执行者，不但对解决问题没有任何帮助，还从另一个方面证明了自己失职。\n\n那么要想解决技术债务，你需要找到技术与业务的平衡点，我的经验是“内外双修”：\n\n * 内：加强团队的战斗力，减少债务产生的机会，增强债务处理的能力。\n\n * 外：要深刻地理解业务，并且做好与其他协作方（尤其是产品、业务）的沟通。这样你才能理解协作方想解决什么问题，他们以为要么a、要么b才能解决的问题，既懂技术又懂业务的你能否找到方案c？\n\n我建议你，面对选择题时不要只看到可选项，要永远寻找第三条路。 如果实在没有其他选择，在技术妥协的同时，做好沟通，让协作方明白方案的临时性以及对未来的影响，争取到承诺在未来给你足够的空间解决这些问题。\n\n2. 通过 checklist 识别债务\n\n除了明确债务的 owner 是自己之外，技术债务的度量一直是个难题，因为没有很好的量化方式，所以债务的识别以及收益 roi 的计算都没有什么标准。所以，我们在处理技术债务的第一阶段就是要识别出技术债务，将其从看不到的未知隐患转变为可视的已知问题。\n\n我习惯根据系统的情况，建立一个债务 review 的 checklist ，并且不断完善。技术债务从表象上可以做一些细分（我整理了一张图）：\n\n\n\n债务细分脑图\n\n通过现象我们就可以反推出一些导致现象的原因，将这些原因结合系统的架构进行分类，就会形成一个个具体的关注点。这些关注点往往是结合我们之前踩过的坑、发生过的问题，以及编码、架构上广为遵守的一些最佳实践所形成的，这样你就可以制定出一个较为详细的 checklist 用以具体的债务识别（下图供你参考）。\n\n\n\n债务识别 demo\n\n3. 有计划地分级偿债\n\n通过 checklist 将技术债务作出识别后，往往要解决的问题非常多，但是我们又几乎无法停止需求迭代只做还债这一件事，所以此时要对技术债务做一个“轻重缓急”的区分，以确定需要处理的优先级。我结合之前的经验总结了一些分级原则供你参考。\n\n * 关键链路优先： 并非所有糟糕的设计与实现都能产生严重后果，即使能，它们发生的概率也不一样，而关键链路意味着业务影响最大，同时日常的改动频率和事故风险也较高，优先解决它的收益是最大的。\n\n * 历史事故命中优先： 一些设计与实现在过往导致过线上真实问题的发生，不管是否发生在本系统还是当前团队，都相当于已经被证实过的这类债务的严重性，所以应该尽早修复它们，避免类似问题反复发生。\n\n * 可扩展性优先： 在 checklist 以及债务现象中我们可以发现，有些问题影响了系统未来的演进，增加了迭代成本，有些问题影响系统的维护，比如代码风格没有统一、缺少文档，在处理时应该优先处理影响可扩展性的问题，后续逐步处理影响可维护性的问题。\n\n * 权责清晰优先： 一些问题在处理时受到历史架构、组织分工（康威定律）的影响，会导致系统的权责不清晰，这类系统的推进和改造往往需要花费更多的时间精力，并且从顶层设计出发去重新考量，所以权责清晰的部分可以优先处理。\n\n总的来说，通过对技术债务进行分级，实质上也是一个问题分治的过程，将大问题切分成一个个小问题，这样就可以将它们加入日常的迭代中，形成一个分期偿还技术债务的计划，逐步减少技术债务，减轻负担让团队与系统可以轻装上阵。\n\n4. 正视债务做好预防\n\n除此之外，预防永远胜于治疗，技术债务汇总预防的关键点在于那些“原本未知”的技术债务要逐渐减少，大家对于实现质量的追求不能止步于“测试没有明显 bug”，写出能运行的代码是不够的，还要易维护易扩展。而你可以从几个方面着手：\n\n * 提升团队认识，通过项目复盘、系统重构、事故 review 等各种机会，通过实际的案例让研发同学清楚技术债务对团队产生的负担，以及对个人能力提升的影响。\n\n * 建立机制流程，比如在方案设计阶段向下深挖一下实现的要点，更多资深的开发参与到架构评审，或者促进团队形成 code review 的习惯并且达成一个共识标准以提升系统质量。\n\n * 确保资源投入，在通过债务识别和分级后，将还债的投入提前计算到每次迭代中，确保有一定的资源投入其中。\n\n5. 一些常见的误区\n\n通过 checklist 做债务识别，然后定期诊断、水平扫描、债务定级、分期偿还来做技术债务的处理，最终在团队认识、机制氛围、资源保障上下功夫做预防，这就是技术债务管理的核心思路。\n\n而这个过程中，有一些问题是日常你很容易走入误区的，我简单总结了一下几个注意点：\n\n * 存在即合理，动态变化才是王道。 不要总想着毕其功于一役，也几乎不太可能有完美的实现或系统，接受技术债务一定会存在的事实，重点在于控制债务积压的程度，欠债本身不可怕，欠债不知且不还才可怕。\n\n * 不积跬步无以至千里。我们往往过度轻视日常微小积累，又过度重视“大事件”产生的影响。日常这里凑合一下，那里妥协一点，没人关注小问题发生的原因。而一旦发生重大的影响，则恨不得把之前的系统全盘推翻重做一遍。\n\n * 机制流程外还要讲策略和方法。很多技术 leader 觉得这件事很重要，讲的同时设计了很多流程和机制，不遵守就要承担怎样怎样的后果，这样往往事半功倍。机制流程不是越多越好，也不能光有惩罚而没有激励，同时最重要的是你不能只追杀要结果，要给帮助、给方法、给支持。\n\n\n小结\n\n技术债务和金融债务有很多类似之处，金融借债往往是为了解决当前的资金压力，从而在商业上赢得先机，着眼于未来的长远收益。技术债务往往也出于同样的目的，通过当前适当的技术妥协换取业务更早的交付上线，尽可能与业务的发展节奏匹配，在业务的发展与变化过程中不断完善而非一开始就追求完美。\n\n所以，我们并不能将技术债务单纯看作是“不好的事务”，与金融借债在金融领域中起到货币杠杆的作用类似，适当的技术债务对加速业务发展、推动系统演进是有积极作用的。所以完全没必要谈“债”色变，放眼现实企业中，不能说没有债务的一定是三流企业，但是一流企业基本都有合理的负债。\n\n但是对于技术债务而言，怎样的债务才是“适当”的，就非常考验你的能力了。金融借债会产生利息，如果定期还款则不会产生太大影响，而如果不偿还的话，不仅有利息还会产生高额的违约金，并且随着不还款的次数增加，还款将会变得越来越困难，最终可能导致企业破产。\n\n同样类比到技术领域的系统项目中，大量的技术债务产生的利息就是系统变得难以扩展和维护，而这些问题没有被及时处理就相当于利息和本金没有按期偿还，那么以事故和交付延期为代表的违约金就不期而至了。\n\n所以我们谈及技术债务时，既要清楚它的种种弊端，也要具备正视技术债务的勇气。一方面不能过于追求完美导致因噎废食，另一方面也不能忽略或者无限期推迟技术债务的处理，因为随着时间的推移，技术债务会逐渐积累，最终量变引发质变只能通过休克疗法来解决（暂停一切业务进展，系统推倒重来）。\n\n以务实的态度来对待技术债务，团队在技术战略上高度重视、在日常研发节奏和项目中寻求战术上的平衡，这是我给你的建议，希望能对你有所帮助。\n\n\n\n留个作业： 过往让你印象最深刻的技术债务是如何产生的，它导致了怎样的后果，你最终是如何如处理的？如果现在重新review，你会改变当初的处理方式吗，为什么？\n\n最后，感谢你的阅读，如果这节课让你有收获，欢迎你将它分享给其他的朋友，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **8904：\n\n> 结合过往，深有体会，真的讲得非常好！\n\n# **涛：\n\n> 技术债务确实是需要解决的问题，分级偿债很有效，也是很考验能力的，之前在项目开发中这方面做得不够好，感谢历史给了一些方法论指导\n\n# **锋：\n\n> 在n前的老项目上，继续堆代码，也是实属无奈。老板也不给时间重构，不敢改，明看着不合理也不敢改。",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"大项目：把握关键点，谋定而后动",frontmatter:{title:"大项目：把握关键点，谋定而后动",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/86eda9/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/06.%20%20%E5%A4%A7%E9%A1%B9%E7%9B%AE%EF%BC%9A%E6%8A%8A%E6%8F%A1%E5%85%B3%E9%94%AE%E7%82%B9%EF%BC%8C%E8%B0%8B%E5%AE%9A%E8%80%8C%E5%90%8E%E5%8A%A8.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/06.  大项目：把握关键点，谋定而后动.md",key:"v-070a859d",path:"/pages/86eda9/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:5634}],headersStr:"精选评论",content:"对技术 Leader 来讲，团队的开发模式多以项目制或敏捷迭代为主，不论哪种方式，项目管理都是最主要的工作之一。在互联网公司中，日常迭代和重点项目的同步进行几乎成了常态，你也会遇到一些特殊的项目，比如“一号工程（老板项目）”“技改项目（核心系统重写）”“倒排期的重大业务（1111 和 618 的大促、新业务新产品研发）”。这些项目我统称为“大项目”。\n\n大项目因为时间投入大、人员规模大、系统更大，和日常迭代项目在“项目管理”和具体做法上存在很多不同，在成员的协同、事务的推进上也存在困难，而你要具备解决这些困难的能力，有两个原因。\n\n * 公司基于战略规划等目的，一定会启动大项目，你必须具备处理这类项目的能力，并不断抽象与思考，形成自己的方法论。这是环境对你的要求。\n\n * 我观察后发现，一些公认出色的同学，往往是在大项目中脱颖而出的（这个因果关系在我所经历的互联网公司中近乎100%）。优秀者一般都会重点参与或主导几次重要的项目来证明自己，进而在未来得到更大的发展空间。\n\n由此可见，大项目在技术工作中很重要，今天我想结合自己的一些经历与思考，具体聊一聊这些特殊的大项目中，你要重点注意什么，怎么去解决问题。\n\n\n认清异同，做到心中有数\n\n想解决一个问题，先要定义清楚问题，一般而言，要想认清大项目，我建议你以常规项目为参照物，通过对比二者特征总结差异点。一般项目迭代的常规流程如下：\n\n\n\n常规项目迭代流程\n\n这个流程并不复杂，大多是自上而下敲定需求内容和优先级，做好时间预估后就进入开发流程，有时受开发周期的影响，会压缩一些环节上的时间（比如方案设计、开发自测等），将大部分时间花在业务逻辑的实现上。在这个常规流程中，技术团队的重心是把执行做到位，你要更关注过程管控，确保系统交付。\n\n大项目与常规项目的核心差异点，我认为主要在于这个“大”字上，你可以从三个方面去理解。\n\n * 出发点不同，业务期望更大\n\n在大部分互联网公司中，产品研发模式侧重敏捷迭代：项目小步快跑，尽早试错、及时调整，通过逐步完善系统实现量变积累质变。大项目完全相反，不再小步快跑，而是“蓄力憋大招”，希望以此建立公司的竞争优势。\n\n以双十一为例，阿里相关团队要提前 3~5 个月进入双十一专项（最核心的团队半年前就会 ALL IN ）。这类项目投入巨大，自然有极高的业务目标，比如双十一和 618 主打 GMV，历史新高的 GMV 映射到产品技术上，就要有更多、更复杂的营销玩法，系统也要有更强的负载能力。\n\n * 规模不同，复杂度更高\n\n日常迭代项目一般以周为单位，以小组为执行单元，需要跨部门协作的往往是单点的需求（比如某个接口需要大家一起联调）。又因为需求和交付产物拆分得足够小，关联性也不强，即使在迭代周期内遇到一些意外情况（比如开发人员突然短缺、需求紧急变更）也只会让一小部分业务受阻，不会影响全部的项目。\n\n而大项目往往是重新建立一个产品或体系，以月为单位，涉及的人员跨多个部门甚至整个公司（协作者会变成几十甚至上百人）。需求拆分的粒度并不细，并且随着项目推进可能会持续识别到新的需求，这就让整个项目处于动态变化的过程中，增加了系统复杂度和项目难度。\n\n项目规模变大后，会放大很多问题，比如你会发现跨部门沟通协同比系统 Bug 难处理，开会汇报项目进度比写代码更花时间。除此之外，项目往往会倒排期，开发资源永远不够，组织与组织间协同效率低下等问题在大项目中极其常见。\n\n * 结果评判标准不同，影响更大\n\n在日常迭代项目中，我们往往只关心交付的时间、质量，无法在短期内判定业务上的效果。可对大项目来说，最初立项就是奔着业务效果去的，所以相对而言，它可以容忍项目过程中的一些不顺利，但看重业务目标的达成情况。如果没达成业务目标，会浪费之前投入的资源与时间，从而在竞争中处于劣势，所以很多公司是把自己“折腾”没的。\n\n除了业务层面的宏观影响，项目的交付直接影响相关人的绩效 KPI，也间接影响年终奖、晋升。\n\n总的来说，大项目对你的要求与常规项目有很大不同，除了把项目管理的基本功做到位，还要考虑如何达成业务结果，如何协同人与团队，如何解决各种突发问题。最关键的就是你要脱离系统交付的角色定位，站在团队实现业务结果的角度去考虑问题，认识到系统的交付并不等于项目的结果，要在业务的思考上迈出一大步。\n\n\n把握关键点，谋定而后动\n\n前面我提到，大项目中系统的交付固然重要，但更关键的还要看项目目的是否达成，关注效果更重于关注交付，这是大项目的核心特征。\n\n以核心系统的重构（重写）项目为例，要想重写，就要投入大量时间，承担极高的系统风险，为什么要重写呢？答案可能是“系统是其他团队开发好交接到手里的，不好维护。”或者“最早的设计实现有问题，必须大改。”这时，你要明确重构到底是目的还是手段？是否一定要做重构？\n\n在我看来，重构除了解决过去的问题，更要预防未来的问题，这样才能平衡好投入产出比。如果单纯考虑解决过去的问题，忽略系统未来的演进方向，过不了多久就会回到原状。不要为了重构而重构，要知道你要的结果是什么。\n\n为了确保大项目成功，关键点应该是制定完备的计划，因为想清楚比做到位更重要。从我的经验来看，大项目的失败存在一个共性的问题：围绕业务结果的思考、计划不足，目标的定义不清晰或没有充分同步给所有相关人，项目同学知其然而不知其所以然。连目标都没有共识，何谈执行到位，项目成功？\n\n所以我认为越是重大的项目，在计划、设计、准备上投入的精力就应该越多，谋定而后动。 我建议你围绕业务、技术、团队等几个方面，把 WHY、WHAT、WHO、HOW 问明白，想清楚。\n\n\n\nWHY（项目为什么做）。 很多 Leader 因为习惯做执行和交付，或者觉得即使有不一样的观点也无法改变什么，所以并不热衷去探究项目背后的 WHY。不清楚 WHY，当你要解决困难时，就会缺少核心的逻辑依据，并且你很难识别真正的需求，很难判断业务想要的功能和想解决的问题到底是不是同一件事儿。\n\nWHAT（项目做成什么样）。 WHY 是在确定项目的动机和目标，WHAT 是确定项目的具体形态，简单来说就是要做怎样的产品和系统来实现目标。比如每年的双十一大促，会推出新的玩法和营销活动。如果参与这样的“ Super ”项目，你至少应该搞清楚以下两点。\n\n\n\nWHO（哪些人来一起做项目）。 很多问题不仅仅是系统的问题，人也是其中的关键因素，而你需要确定项目的核心人员并罗列项目所有的关联方。\n\nHOW（启动项目后如何做）。 明确了业务目标、结果期望和相关人之后，就进入项目的执行过程，在常规项目管理的基础上，你要注意这样两点。\n\n * 合理拆分任务（模块）是项目成功的一半：大项目是把最终的效果打包放在一起去设计规划，在执行过程中一定会被分治。关键在于你要等所有人对最终架构达成共识后，再去按照团队、业务领域、具体场景任务等维度拆分任务和模块，以终为始，从最终要的结果来确定如何开始拆分（最终架构的形态应该以产品和系统的全局架构大图为参照）。\n\n * 保持风险意识，敬畏墨菲定律：大项目在推进过程中极易发生突发情况和概率性事件，你要做好预案，比如项目排期上一定要预留足够的 Buffer，提前确定好紧急处理问题的机制等。\n\n做好充分的准备之后，可以召开立项会，将 WHY、WHAT、WHO、HOW 的信息与思考同步给项目相关人员。通过 Kick Off 会议确定项目的基调、同步必要信息，为项目推进扫清障碍。\n\n\n如何处理棘手问题\n\n大项目复杂度极高，容易产生很多棘手问题，而处理这些问题的核心原则是：以最终结果为导向，借助所有可能的帮助与资源，在不违背原则的前提下适当平衡与妥协，达成目标。接下来，我就从人和事两个维度分享一些曾经踩过的坑，希望能对你有所启发。\n\n问题一：缺兵少将怎么办？\n\n项目中人不够已经成了一个常态，比如部门内一套核心系统要重写，而团队无法一边持续迭代、一边在规定时间内完成重写，如果所有人 ALL IN 重写，系统迭代要暂停 2~3 个月，业务上无法接受。如果拉长周期，将重写项目持续半年，不仅会增加意外风险，并且很长一段时间内重写项目无法创造价值，会变成团队的负担。\n\n如果你遇到类似的情况，需要在内部腾挪的同时，以项目的价值与收益为本金，借助上级组织的力量从其他团队借人。如果你有过“借人”或“被借”的经历，大概会对其深恶痛绝，因为这种方法会产生很多新问题，比如其他团队的同学不熟悉业务和系统（进入状态的成本很高），或者你们之间没有汇报关系，在工作安排和任务执行上并不通畅。\n\n所以，我并不建议大项目时常通过借人来补充项目成员， 人员的经常借调本身体现的就是权责不匹配，会导致一系列问题。好的方式应该是在组织内，让项目组的跨组织结构成为常态与共识，设计灵活的绩效、考核、汇报体系，让每个人都可以按需灵活地加入项目组。另外项目组人时你要注意以下几点。\n\n * 当项目开始时，从更大的范围内寻找合适的同学，而不是看你团队有哪些人。\n\n * 将参与项目的同学在一定时间内的汇报关系和绩效考核汇总到项目组中，由项目负责人根据实际情况重新安排每个人的权责，并确定绩效的绑定关系与比例。\n\n * 项目交付并不等于结束，所有人的绩效结果都应和项目目标的达成情况紧密且长期关联。\n\n最后，有时不仅要解决“缺兵”的问题，还要认真考虑是否“少将”？要充分考虑当前的人员是否适合做项目的 Owner，以我的经验来看，项目 Owner 几乎决定了项目成败的 80%，如果 Owner 能力不足，你要给予帮助和支持，或者另找他人，乃至上级的帮助，不要在 Owner 的人选上妥协，毕竟项目成败才是关键。\n\n问题二：推不动的到底是人还是事？\n\n你是否有类似的经历：一些功能或模块经常会出现大家都不做，要么抢着做的情况（比如双十一新增的活动玩法会让很多相关团队都做到自己负责的系统中），这会阻塞项目进展。\n\n之前，我有很长的时间是负责公司的订单交易系统，熟悉这个领域的同学肯定知道，订单系统是一个大杂烩，任何业务都想加一个字段到订单表上。最开始，我经常会为了是否让一个数据加入订单系统而和别人争论，因为我担心不干净的设计会拖累系统的稳定性和可维护性。\n\n由这两种情况你会发现，事情推不动的背后跟人和组织有很大关系，处理不当会加剧不同关联方的冲突，你必须处理好类似的问题，我提供给你 3 点建议。\n\n * 搞明白冲突现象下的利益诉求： 不同关联方产生观点冲突的现象背后其实是利益冲突，你要搞清楚彼此的顾虑。比如我不愿想让某个系统字段落到订单中，主要是考虑到订单系统的可维护以及稳定性，如果你能解决我的顾虑，会容易说服我。\n\n * 为项目结果适当妥协： 在很多情况下，我们无法做出完美的方案，可能就是要在系统内通过很糟糕的实现去实现需求。项目没有 100% 完美，抓住核心原则不放弃，可控部分适当妥协换取项目前进是很好的策略。\n\n * 通过项目地位和决策机制推动项目： 大项目往往是公司重大战略下的产物，一般情况下，不会有人去反对公司的某项既定战略，而你可以通过大项目的重要性在体系内争取更多的资源和帮助。如果你面临一些冲突，要学会利用决策机制，通过更高级别成员的沟通决策拿到解决方案。\n\n问题三：一定会有项目变更吗？\n\n对你来说，最难处理的就是突如其来的变化，变化意味着要调整之前的计划，又会出现新的困难与问题。常见的变化往往有两种：\n\n * 项目演进过程中识别出之前未能识别或考虑缺失的点，导致方案需要调整。\n\n * 出自老板的需求变更，很多情况下都是要新增内容。\n\n项目变化和老板 CR 之所以难处理就在于它会打乱项目原本的计划节奏，本来一环扣一环的时间安排、人力安排、任务与模块安排都要重新编排、组合、解决冲突，单点的风险通过链路传递到整个项目链路上，产生了极强的联动效应。\n\n我给你的建议是保持平常心，几乎所有的项目都会遇到类似的情况，出现负面情绪只会增加你解决问题的难度，你要做好两点。\n\n * 由外至内解决，先从优先级调整、新增资源、调整排期入手，不行就考虑压缩时间、调整方案乃至加班。做好 ROI 和风险的权衡，不要为了解决 A 问题制造更难解决的 B 问题。\n\n * 统一变更管理，所有的变更都应该统一管理、审核、评估、记录最后广播给项目全员，确保大家信息一致，对终点的认识没有误差。\n\n另外分享一个我自己的经验，如果你被老板频繁的变更所困扰，试着多做汇报，让他对项目的进展与正在解决的困难有更直观的感受，这样他对新变化带来的不确定性风险会有更强的同理心。\n\n\n小结\n\n大项目是技术 Leader 的试炼场，不仅考验你的技术能力，还会从产品、业务、沟通、事务推进等多方面考验其综合能力。而经历过大项目毒打的同学在处理别的问题时，会更加从容。\n\n所以，如果你在实际的工作中，有机会参与或主导类似的项目大可放手一试，这样会极大提高你解决问题的能力。今天这一讲我想强调这样三个重点：\n\n * 驾驭大项目是你的试金石和分水岭，对自己职业规划有一定要求的同学一定不要放过打磨修炼的机会。\n\n * 在大项目中，往往人的问题会比技术与系统的问题难解决，因为与人相关的问题未必完全理性和逻辑，那么此时你也不妨看看感性的沟通与交流是不是有更好的效果。\n\n * 时刻牢记你将项目按时上线没有故障只是做到了60分，更关键的是业务效果，所以除了盯紧开发过程外，还要在最开始的业务与产品设计阶段就投身其中。\n\n\n\n留个作业：在你过往的大项目经历中，有哪些让你印象深刻的困难与问题，你是如何解决它们的，分享出来吧，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **士：\n\n> 老师讲的很有启发，本节的PPT课件可以分享出来吗\n\n#     编辑回复：\n\n>     【持续更新】成为会带团队的技术人 链接: https://pan.baidu.com/s/1_LTQOlZs5cilJSqVfOZmfQ 提取码: xy29\n\n# **士：\n\n> 网盘里边课件缺第5讲，而且第9讲后面就没更新课件了，可以更新发出吗\n\n#     编辑回复：\n\n>     抱歉，小编跟负责课件上传的小伙伴同步了一下问题，现在已经把课程补充完毕啦，感谢提出意见：【成为会带团队的技术人】 已经更新到15讲了 链接: https://pan.baidu.com/s/1BdFCyJ_uhmDAJ8EMhquALQ 提取码: qnc8\n\n# **学：\n\n> 大项目的业务很重要，这个是首要目标。其次，要用互联网的思维去达成目标，小步迭代，逐渐完成最终的目标。最后沟通能力比技术能力更重要。\n\n# **士：\n\n> 困难与问题：数据开发中缺少数据源，数据质量偏低。针对数据源问题，技术方面：1、与业务方确定缺少数据源的格式（结构化、非结构化和半结构化）；2、与业务方确定缺少数据源的存储服务（关系型，非关系型或离线数据）；3、针对不同的数据源格式及存储进行数据同步etl；流程方面，定时跟进数据源问题，做到每天同步状态，推进业务进展。针对数据质量问题，从数据量、主键、离散值、汇总值、业务规则和逻辑规则方面进行处理，首先进行数据清洗与异常数据过滤，然后进行数据表和数据字段层面进行数据质量监控，最后根据数据产出时间进行及时性优化。\n\n# **0691：\n\n> 老板CR是什么意思？\n\n#     讲师回复：\n\n>     需求变更\n\n# **9360：\n\n> 课程太棒了。 继续淦\n\n#     讲师回复：\n\n>     感谢支持\n\n# **升：\n\n> 老师说的太好了，基本都是在大项目中遇到的，深有体会\n\n#     讲师回复：\n\n>     谢谢支持",normalizedContent:"对技术 leader 来讲，团队的开发模式多以项目制或敏捷迭代为主，不论哪种方式，项目管理都是最主要的工作之一。在互联网公司中，日常迭代和重点项目的同步进行几乎成了常态，你也会遇到一些特殊的项目，比如“一号工程（老板项目）”“技改项目（核心系统重写）”“倒排期的重大业务（1111 和 618 的大促、新业务新产品研发）”。这些项目我统称为“大项目”。\n\n大项目因为时间投入大、人员规模大、系统更大，和日常迭代项目在“项目管理”和具体做法上存在很多不同，在成员的协同、事务的推进上也存在困难，而你要具备解决这些困难的能力，有两个原因。\n\n * 公司基于战略规划等目的，一定会启动大项目，你必须具备处理这类项目的能力，并不断抽象与思考，形成自己的方法论。这是环境对你的要求。\n\n * 我观察后发现，一些公认出色的同学，往往是在大项目中脱颖而出的（这个因果关系在我所经历的互联网公司中近乎100%）。优秀者一般都会重点参与或主导几次重要的项目来证明自己，进而在未来得到更大的发展空间。\n\n由此可见，大项目在技术工作中很重要，今天我想结合自己的一些经历与思考，具体聊一聊这些特殊的大项目中，你要重点注意什么，怎么去解决问题。\n\n\n认清异同，做到心中有数\n\n想解决一个问题，先要定义清楚问题，一般而言，要想认清大项目，我建议你以常规项目为参照物，通过对比二者特征总结差异点。一般项目迭代的常规流程如下：\n\n\n\n常规项目迭代流程\n\n这个流程并不复杂，大多是自上而下敲定需求内容和优先级，做好时间预估后就进入开发流程，有时受开发周期的影响，会压缩一些环节上的时间（比如方案设计、开发自测等），将大部分时间花在业务逻辑的实现上。在这个常规流程中，技术团队的重心是把执行做到位，你要更关注过程管控，确保系统交付。\n\n大项目与常规项目的核心差异点，我认为主要在于这个“大”字上，你可以从三个方面去理解。\n\n * 出发点不同，业务期望更大\n\n在大部分互联网公司中，产品研发模式侧重敏捷迭代：项目小步快跑，尽早试错、及时调整，通过逐步完善系统实现量变积累质变。大项目完全相反，不再小步快跑，而是“蓄力憋大招”，希望以此建立公司的竞争优势。\n\n以双十一为例，阿里相关团队要提前 3~5 个月进入双十一专项（最核心的团队半年前就会 all in ）。这类项目投入巨大，自然有极高的业务目标，比如双十一和 618 主打 gmv，历史新高的 gmv 映射到产品技术上，就要有更多、更复杂的营销玩法，系统也要有更强的负载能力。\n\n * 规模不同，复杂度更高\n\n日常迭代项目一般以周为单位，以小组为执行单元，需要跨部门协作的往往是单点的需求（比如某个接口需要大家一起联调）。又因为需求和交付产物拆分得足够小，关联性也不强，即使在迭代周期内遇到一些意外情况（比如开发人员突然短缺、需求紧急变更）也只会让一小部分业务受阻，不会影响全部的项目。\n\n而大项目往往是重新建立一个产品或体系，以月为单位，涉及的人员跨多个部门甚至整个公司（协作者会变成几十甚至上百人）。需求拆分的粒度并不细，并且随着项目推进可能会持续识别到新的需求，这就让整个项目处于动态变化的过程中，增加了系统复杂度和项目难度。\n\n项目规模变大后，会放大很多问题，比如你会发现跨部门沟通协同比系统 bug 难处理，开会汇报项目进度比写代码更花时间。除此之外，项目往往会倒排期，开发资源永远不够，组织与组织间协同效率低下等问题在大项目中极其常见。\n\n * 结果评判标准不同，影响更大\n\n在日常迭代项目中，我们往往只关心交付的时间、质量，无法在短期内判定业务上的效果。可对大项目来说，最初立项就是奔着业务效果去的，所以相对而言，它可以容忍项目过程中的一些不顺利，但看重业务目标的达成情况。如果没达成业务目标，会浪费之前投入的资源与时间，从而在竞争中处于劣势，所以很多公司是把自己“折腾”没的。\n\n除了业务层面的宏观影响，项目的交付直接影响相关人的绩效 kpi，也间接影响年终奖、晋升。\n\n总的来说，大项目对你的要求与常规项目有很大不同，除了把项目管理的基本功做到位，还要考虑如何达成业务结果，如何协同人与团队，如何解决各种突发问题。最关键的就是你要脱离系统交付的角色定位，站在团队实现业务结果的角度去考虑问题，认识到系统的交付并不等于项目的结果，要在业务的思考上迈出一大步。\n\n\n把握关键点，谋定而后动\n\n前面我提到，大项目中系统的交付固然重要，但更关键的还要看项目目的是否达成，关注效果更重于关注交付，这是大项目的核心特征。\n\n以核心系统的重构（重写）项目为例，要想重写，就要投入大量时间，承担极高的系统风险，为什么要重写呢？答案可能是“系统是其他团队开发好交接到手里的，不好维护。”或者“最早的设计实现有问题，必须大改。”这时，你要明确重构到底是目的还是手段？是否一定要做重构？\n\n在我看来，重构除了解决过去的问题，更要预防未来的问题，这样才能平衡好投入产出比。如果单纯考虑解决过去的问题，忽略系统未来的演进方向，过不了多久就会回到原状。不要为了重构而重构，要知道你要的结果是什么。\n\n为了确保大项目成功，关键点应该是制定完备的计划，因为想清楚比做到位更重要。从我的经验来看，大项目的失败存在一个共性的问题：围绕业务结果的思考、计划不足，目标的定义不清晰或没有充分同步给所有相关人，项目同学知其然而不知其所以然。连目标都没有共识，何谈执行到位，项目成功？\n\n所以我认为越是重大的项目，在计划、设计、准备上投入的精力就应该越多，谋定而后动。 我建议你围绕业务、技术、团队等几个方面，把 why、what、who、how 问明白，想清楚。\n\n\n\nwhy（项目为什么做）。 很多 leader 因为习惯做执行和交付，或者觉得即使有不一样的观点也无法改变什么，所以并不热衷去探究项目背后的 why。不清楚 why，当你要解决困难时，就会缺少核心的逻辑依据，并且你很难识别真正的需求，很难判断业务想要的功能和想解决的问题到底是不是同一件事儿。\n\nwhat（项目做成什么样）。 why 是在确定项目的动机和目标，what 是确定项目的具体形态，简单来说就是要做怎样的产品和系统来实现目标。比如每年的双十一大促，会推出新的玩法和营销活动。如果参与这样的“ super ”项目，你至少应该搞清楚以下两点。\n\n\n\nwho（哪些人来一起做项目）。 很多问题不仅仅是系统的问题，人也是其中的关键因素，而你需要确定项目的核心人员并罗列项目所有的关联方。\n\nhow（启动项目后如何做）。 明确了业务目标、结果期望和相关人之后，就进入项目的执行过程，在常规项目管理的基础上，你要注意这样两点。\n\n * 合理拆分任务（模块）是项目成功的一半：大项目是把最终的效果打包放在一起去设计规划，在执行过程中一定会被分治。关键在于你要等所有人对最终架构达成共识后，再去按照团队、业务领域、具体场景任务等维度拆分任务和模块，以终为始，从最终要的结果来确定如何开始拆分（最终架构的形态应该以产品和系统的全局架构大图为参照）。\n\n * 保持风险意识，敬畏墨菲定律：大项目在推进过程中极易发生突发情况和概率性事件，你要做好预案，比如项目排期上一定要预留足够的 buffer，提前确定好紧急处理问题的机制等。\n\n做好充分的准备之后，可以召开立项会，将 why、what、who、how 的信息与思考同步给项目相关人员。通过 kick off 会议确定项目的基调、同步必要信息，为项目推进扫清障碍。\n\n\n如何处理棘手问题\n\n大项目复杂度极高，容易产生很多棘手问题，而处理这些问题的核心原则是：以最终结果为导向，借助所有可能的帮助与资源，在不违背原则的前提下适当平衡与妥协，达成目标。接下来，我就从人和事两个维度分享一些曾经踩过的坑，希望能对你有所启发。\n\n问题一：缺兵少将怎么办？\n\n项目中人不够已经成了一个常态，比如部门内一套核心系统要重写，而团队无法一边持续迭代、一边在规定时间内完成重写，如果所有人 all in 重写，系统迭代要暂停 2~3 个月，业务上无法接受。如果拉长周期，将重写项目持续半年，不仅会增加意外风险，并且很长一段时间内重写项目无法创造价值，会变成团队的负担。\n\n如果你遇到类似的情况，需要在内部腾挪的同时，以项目的价值与收益为本金，借助上级组织的力量从其他团队借人。如果你有过“借人”或“被借”的经历，大概会对其深恶痛绝，因为这种方法会产生很多新问题，比如其他团队的同学不熟悉业务和系统（进入状态的成本很高），或者你们之间没有汇报关系，在工作安排和任务执行上并不通畅。\n\n所以，我并不建议大项目时常通过借人来补充项目成员， 人员的经常借调本身体现的就是权责不匹配，会导致一系列问题。好的方式应该是在组织内，让项目组的跨组织结构成为常态与共识，设计灵活的绩效、考核、汇报体系，让每个人都可以按需灵活地加入项目组。另外项目组人时你要注意以下几点。\n\n * 当项目开始时，从更大的范围内寻找合适的同学，而不是看你团队有哪些人。\n\n * 将参与项目的同学在一定时间内的汇报关系和绩效考核汇总到项目组中，由项目负责人根据实际情况重新安排每个人的权责，并确定绩效的绑定关系与比例。\n\n * 项目交付并不等于结束，所有人的绩效结果都应和项目目标的达成情况紧密且长期关联。\n\n最后，有时不仅要解决“缺兵”的问题，还要认真考虑是否“少将”？要充分考虑当前的人员是否适合做项目的 owner，以我的经验来看，项目 owner 几乎决定了项目成败的 80%，如果 owner 能力不足，你要给予帮助和支持，或者另找他人，乃至上级的帮助，不要在 owner 的人选上妥协，毕竟项目成败才是关键。\n\n问题二：推不动的到底是人还是事？\n\n你是否有类似的经历：一些功能或模块经常会出现大家都不做，要么抢着做的情况（比如双十一新增的活动玩法会让很多相关团队都做到自己负责的系统中），这会阻塞项目进展。\n\n之前，我有很长的时间是负责公司的订单交易系统，熟悉这个领域的同学肯定知道，订单系统是一个大杂烩，任何业务都想加一个字段到订单表上。最开始，我经常会为了是否让一个数据加入订单系统而和别人争论，因为我担心不干净的设计会拖累系统的稳定性和可维护性。\n\n由这两种情况你会发现，事情推不动的背后跟人和组织有很大关系，处理不当会加剧不同关联方的冲突，你必须处理好类似的问题，我提供给你 3 点建议。\n\n * 搞明白冲突现象下的利益诉求： 不同关联方产生观点冲突的现象背后其实是利益冲突，你要搞清楚彼此的顾虑。比如我不愿想让某个系统字段落到订单中，主要是考虑到订单系统的可维护以及稳定性，如果你能解决我的顾虑，会容易说服我。\n\n * 为项目结果适当妥协： 在很多情况下，我们无法做出完美的方案，可能就是要在系统内通过很糟糕的实现去实现需求。项目没有 100% 完美，抓住核心原则不放弃，可控部分适当妥协换取项目前进是很好的策略。\n\n * 通过项目地位和决策机制推动项目： 大项目往往是公司重大战略下的产物，一般情况下，不会有人去反对公司的某项既定战略，而你可以通过大项目的重要性在体系内争取更多的资源和帮助。如果你面临一些冲突，要学会利用决策机制，通过更高级别成员的沟通决策拿到解决方案。\n\n问题三：一定会有项目变更吗？\n\n对你来说，最难处理的就是突如其来的变化，变化意味着要调整之前的计划，又会出现新的困难与问题。常见的变化往往有两种：\n\n * 项目演进过程中识别出之前未能识别或考虑缺失的点，导致方案需要调整。\n\n * 出自老板的需求变更，很多情况下都是要新增内容。\n\n项目变化和老板 cr 之所以难处理就在于它会打乱项目原本的计划节奏，本来一环扣一环的时间安排、人力安排、任务与模块安排都要重新编排、组合、解决冲突，单点的风险通过链路传递到整个项目链路上，产生了极强的联动效应。\n\n我给你的建议是保持平常心，几乎所有的项目都会遇到类似的情况，出现负面情绪只会增加你解决问题的难度，你要做好两点。\n\n * 由外至内解决，先从优先级调整、新增资源、调整排期入手，不行就考虑压缩时间、调整方案乃至加班。做好 roi 和风险的权衡，不要为了解决 a 问题制造更难解决的 b 问题。\n\n * 统一变更管理，所有的变更都应该统一管理、审核、评估、记录最后广播给项目全员，确保大家信息一致，对终点的认识没有误差。\n\n另外分享一个我自己的经验，如果你被老板频繁的变更所困扰，试着多做汇报，让他对项目的进展与正在解决的困难有更直观的感受，这样他对新变化带来的不确定性风险会有更强的同理心。\n\n\n小结\n\n大项目是技术 leader 的试炼场，不仅考验你的技术能力，还会从产品、业务、沟通、事务推进等多方面考验其综合能力。而经历过大项目毒打的同学在处理别的问题时，会更加从容。\n\n所以，如果你在实际的工作中，有机会参与或主导类似的项目大可放手一试，这样会极大提高你解决问题的能力。今天这一讲我想强调这样三个重点：\n\n * 驾驭大项目是你的试金石和分水岭，对自己职业规划有一定要求的同学一定不要放过打磨修炼的机会。\n\n * 在大项目中，往往人的问题会比技术与系统的问题难解决，因为与人相关的问题未必完全理性和逻辑，那么此时你也不妨看看感性的沟通与交流是不是有更好的效果。\n\n * 时刻牢记你将项目按时上线没有故障只是做到了60分，更关键的是业务效果，所以除了盯紧开发过程外，还要在最开始的业务与产品设计阶段就投身其中。\n\n\n\n留个作业：在你过往的大项目经历中，有哪些让你印象深刻的困难与问题，你是如何解决它们的，分享出来吧，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **士：\n\n> 老师讲的很有启发，本节的ppt课件可以分享出来吗\n\n#     编辑回复：\n\n>     【持续更新】成为会带团队的技术人 链接: https://pan.baidu.com/s/1_ltqolzs5ciljsqvfozmfq 提取码: xy29\n\n# **士：\n\n> 网盘里边课件缺第5讲，而且第9讲后面就没更新课件了，可以更新发出吗\n\n#     编辑回复：\n\n>     抱歉，小编跟负责课件上传的小伙伴同步了一下问题，现在已经把课程补充完毕啦，感谢提出意见：【成为会带团队的技术人】 已经更新到15讲了 链接: https://pan.baidu.com/s/1bdfcyj_uhmdaj8emhqualq 提取码: qnc8\n\n# **学：\n\n> 大项目的业务很重要，这个是首要目标。其次，要用互联网的思维去达成目标，小步迭代，逐渐完成最终的目标。最后沟通能力比技术能力更重要。\n\n# **士：\n\n> 困难与问题：数据开发中缺少数据源，数据质量偏低。针对数据源问题，技术方面：1、与业务方确定缺少数据源的格式（结构化、非结构化和半结构化）；2、与业务方确定缺少数据源的存储服务（关系型，非关系型或离线数据）；3、针对不同的数据源格式及存储进行数据同步etl；流程方面，定时跟进数据源问题，做到每天同步状态，推进业务进展。针对数据质量问题，从数据量、主键、离散值、汇总值、业务规则和逻辑规则方面进行处理，首先进行数据清洗与异常数据过滤，然后进行数据表和数据字段层面进行数据质量监控，最后根据数据产出时间进行及时性优化。\n\n# **0691：\n\n> 老板cr是什么意思？\n\n#     讲师回复：\n\n>     需求变更\n\n# **9360：\n\n> 课程太棒了。 继续淦\n\n#     讲师回复：\n\n>     感谢支持\n\n# **升：\n\n> 老师说的太好了，基本都是在大项目中遇到的，深有体会\n\n#     讲师回复：\n\n>     谢谢支持",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"架构设计：治理好系统复杂度才最务实",frontmatter:{title:"架构设计：治理好系统复杂度才最务实",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/98e29e/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/08.%20%20%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%B2%BB%E7%90%86%E5%A5%BD%E7%B3%BB%E7%BB%9F%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%89%8D%E6%9C%80%E5%8A%A1%E5%AE%9E.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/08.  架构设计：治理好系统复杂度才最务实.md",key:"v-701a569a",path:"/pages/98e29e/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:7042}],headersStr:"精选评论",content:"上一讲我们以架构之名聊了一下理解业务这件事儿，这一讲我想进一步来聊一聊日常工作中架构工作的核心关注点是什么？\n\n我是在接触分布式开发之后，才对“架构”有了概念，从三高（高可用、高性能、高可扩展）到 DevOps（集群、网关、复杂均衡等），从系统的功能模块设计到微服务的业务建模、领域设计。很长的时间里，架构好似包罗万象，可以装进与技术相关的所有内容，给人的感觉就是想做好架构就要无所不精无所不通。\n\n但在真实的工作场景中，你不可能擅长所有技术，而且由于分工问题和精力有限，我们也不会所有事情一手抓，因为容易一地鸡毛，错失重点。\n\n那围绕架构你的工作重点是什么呢？在我看来，就是系统复杂度的治理。因为像功能实现、性能优化、稳定性等方面存在共识标准，其他角色（如架构师、运维专家）会一起补位。但系统复杂度就有点儿如人饮水，冷暖自知的感觉，可能只有你自己，才会对此有足够的认识和把握。而足够清晰、健壮可以支撑业务发展的系统才有机会谈架构演进，所以今天这一讲，我想从系统复杂度治理以及演进两个维度来聊聊架构。\n\n\n治理好系统复杂度才最务实\n\n> C.A.R. Hoare曾说过：“软件设计有两种风格，一种是将软件设计得很复杂，以使其缺陷没那么明显；一种是把软件设计得很简单，以使其没有明显的缺陷”。\n\n我非常喜欢这句话，可能是这几年见多了“过于复杂”的系统，我对简单和清晰异常执着。在我看来，业务复杂所以设计出复杂的系统不是本事，业务复杂，而你依旧能通过足够好的抽象与分层将系统做得简单才是本事。\n\n不过在日常工作中，你可能没有机会从零去设计一个新系统，很多时候都是从接手历史系统，处理一个个问题开始的，比如系统某个接口响应变慢，需要解决性能问题。在解决问题的过程中，你会逐渐思考问题产生的原因、解决方案，这时你会发现这些问题是之前一些设计和迭代时导致的。很多问题源于在系统的结构性设计上就没有做好，比如服务的拆分、数据库的冗余、调用的链路或接口范式。\n\n而它们在系统后期迭代中往往只能改善、难以根治，日积月累之后，我们只好重构系统。其实，随着业务与人员的发展和变化，你几乎无法避免系统重构的问题，“系统腐化——重构系统”的趋势近乎必然，背后的原因在于：日常系统的迭代以满足业务需求为主，其他精力都用来解决类似高性能、高可用这类明显影响系统“生存”的问题，而对高可扩展（延长系统的生命周期）的投入会比较少，因为系统的高可扩展是一个相对隐蔽的问题。有趣的是产品、运营乃至业务对技术在“可扩展”上的需求极为清晰且强烈，他们期望需求快点实现，并不关心实现得是否优雅、性能是否足够。\n\n就算抛除产品和运营等诉求，从系统架构的角度来说，技术价值在商业环境（业务方）中最核心的体现就是让系统实现“可持续的快速交付”。而在这方面表现好的系统也都有一些明显的特征：系统的结构清晰、即使整体繁杂但是每个局部都相对简单、链路干脆直接，没有不必要的冗余。 所以，我认为日常开发中，对架构最核心的关注点应该是复杂度的治理，如何在满足需求的前提下，尽可能地降低系统复杂度，保持系统灵活就是你应该关注的事情。\n\n衡量复杂度\n\n在实际工作中，我们虽然能直观感受到系统复杂与否，但却很难找到类似QPS、响应时间等数据指标去准确地衡量它。所以很多时候技术 Leader 在衡量系统复杂度时，除了凭借主观感受外，还要参考系统和团队的一些表现特征（这些表现与技术债务有很多类似之处，毕竟产生技术债务也是系统复杂度的一种体现）。\n\n * 理解成本高：需要很长时间才能理解系统模块的组成及运作，比如新同学加入或系统交接时，老同学很难讲完整、新同学不容易听明白，要几周甚至1~2个月才能完全了解系统的实现和运作机理。\n\n * 变更牵连多：哪怕是实现一个小的需求都要改造系统的多个部分、甚至多个系统（上下游等），有的还需要协调其他团队或部门，结果导致迭代成本高，并可能引入更高的风险。\n\n * 一张图装不下：即你无法在一块白板上清晰且完整地画出系统主要功能场景的架构图，可能是牵连的系统、服务、组件过多或者链路设计不合理导致的。\n\n * 加人无法解决问题：即便你增加人员也难提高系统的交付速度和产出质量，比如原本3个人负责系统，增加到 6 个人的交付产出可能和 3 个人时所差无几，原因在于复杂度过高并且系统结构模糊，很难通过清晰的分工让生产力最大化。\n\n而你可以结合这 4 点表现特征以及自己的主观感受进一步判断系统的复杂度是否过高，如果系统复杂度过高，可能带来一系列问题：迭代压力大、经常延期、稳定性问题频发等。这时，你要着手治理复杂度，尽力不让问题扩大到难以解决只能重做系统的程度。\n\n复杂度治理的思路\n\n“复杂度的治理”这句话很宽泛，因为不同的系统和团队面临不同的环境上下文，很难一招鲜吃遍天。而且在现实业务场景中，系统发展一段时间后，往往要对抗业务发展的不确定性。所以不论是考虑不周到，还是为了赶时间的妥协，在架构上总是不完美的。这也是为什么你在公司很难找到“干净”的系统。\n\n但你要注意，不要把“简单清晰”理解为“干净完美”，复杂度治理并不是一个污水净化的过程。而是在限定 ROI 和考虑到业务不确定的情况下，通过架构的设计与实现，追求系统的可控与可持续。我非常认可“高内聚、低耦合”架构理念，并认为在复杂度治理的思路上应遵照这一原则，对系统做简化和分治。\n\n简化就是去掉不必要的复杂，让设计与实现保持简单。比如某个业务场景在系统上可能 A 调用 B 就够了，结果因为某些原因（团队职责、旧系统设计等），一定要 A 调用 C 再调用 B，甚至 C 里面还存在不必要的冗余。这种画蛇添足的设计与实现，就是让系统逐渐复杂化，类似的情形在技术组件使用、系统链路设计、数据库设计和接口实现上不胜枚举。\n\n分治则是将原本难解决的问题，拆分到可解决的粒度，然后再逐一击破。当然，分治不是单纯的“拆”，而是注重并管理拆分后，不同部分的关联关系。很多系统从早期单体应用过渡到分布式系统时，就是一个长期拆分的过程，所以你会觉得架构一直在拆分，并通过拆分解决了问题。如果说早前在软件设计领域，大家都说：“没有什么问题是加一个中间层解决不了的，如果有就再加一层”。演变到分布式和微服务时代，就变成：“没有什么问题是拆模块解决不了的，如果有就继续拆”。\n\n这种说法有一定的道理，因为业务发展，必然会导致系统复杂度增加，而适当的拆分可以把复杂度均摊到多个部分，让人均维护的系统复杂度降低。但你要注意，复杂度在系统中只是被转移和分散了，并没有消失（消灭），你终究还是要处理那些拆分出来的复杂度，所以如果盲目地拆分，可能只解决眼下的问题，却在未来得到更糟的结果（比如到时候已经拆无可拆）。那具体怎么拆分呢？\n\n常见的拆分方式是垂直拆分和水平分层： 垂直拆分把差异明确可以独立迭代的业务拆分开；水平分层把共性的能力下沉隔离。比如电商场景中，购物车和订单可以分成两个服务，它们虽然在业务流程上前后关联，但是各自具备独立完整的业务场景和生命周期，商品加入购物车未必会交易生成订单，可以各自独立存在；而库存和商品则是强依赖的关系，库存无法独立于商品存在。\n\n但是拆分的原则并非一成不变，会随着业务和系统的发展而变化。比如评价一般是用户评价商品，所以早期的系统中，评价可能是耦合在商品模块内的。等到被评价的内容越来越多、评价的作用越来越大（用户画像、商品推荐度），可能会将评价作为一个垂直的系统独立出来。之后随着不同的业务展开，可能会出现多个独立的评价系统。它们的业务在早期会存在一定的差异，后面为了避免重复造轮子和打通数据，这些评价系统又会被合并成一个功能更强大的评价系统，这就是一个动态变化的过程。\n\n所以拆分与合并不绝对，过度地拆分会导致系统无法高内聚，零散分离的系统，会增加稳定性风险和治理与迭代的代价，并且造成大量的协作成本。Linus也曾说过：把复杂系统拆分成模块，似乎没有降低整个系统的复杂度，它降低的只是子系统的复杂度。而整个系统的复杂度，反而会由于拆分后的模块之间，不得不进行交互，变得更加复杂。\n\n复杂度治理实践\n\n复杂度治理的思路更多是帮你如何理解和思考，除此之外在实际工作中我们还需要一些更具体的行动，要重视代码的实现和每一次需求的迭代，“千里之堤溃于蚁穴”，在这里我分享几点简单的实践。\n\n * 相比 coding 更重视设计：与其花时间去 review 代码，不如用更多时间思考如何设计并实现某一个功能。“重视设计”这点听起来简单到让人忽视，但据我观察，如果一个团队重视设计，那么其负责的系统肯定也不会差。我的第一任 Leader 和我强调过，写代码之前要先用笔和纸把编码思路写下来，捋清楚了再干。这一点我延续至今，我也建议你将这样的习惯推广下去（未必是笔和纸的形式）。\n\n * 永远做 2 套以上的方案：很多时候可行方案未必是最优方案，局部最优未必是全局最优，多几套方案不光能促使你多思考利与弊，也能让你对未来多一些考量。系统变得复杂，与我们选择最容易的实现方案有关，这就容易出现“为了实现某个需求，只能对系统做复杂改造”的情况，所以不要习惯于选择最容易的实现方案，也不要满足能 Work 就好。\n\n * 从 MVP 的视角考虑设计：从 MVP （最小完整业务的角度）去考虑系统要如何设计与实现，先做减法再做加法，比如有些设计去掉之后，系统也可以很好地实现，说明这些设计不必要，因为架构本身也需要“断舍离”。\n\n * 关注上下游的实现：站得高才能看得远，重视系统之间的相互作用。从实操的角度来说，上下游的系统就是你负责系统的背景环境，了解它们的实现不仅会帮你进一步了解业务，也会让你避免出现更多的问题（比如 API 的共识契约、上下游的超时、降级等）。\n\n * 坚持“日拱一卒”：尽可能在每次迭代中修复之前的问题，逐渐完善系统的实现。如果日常不能逐渐完善系统那么即使经过重写或重构，也只是短时间内“刷新”了系统状态，之后系统依然会出现各种问题，不会有根本性的改变，所以，不要把复杂度的治理当作一次性动作，它应该成为长久的习惯。\n\n总的来说，架构层面的复杂度治理是为了让系统更简单、更轻便，可以更灵活地跟上业务的变化。而这是一个两手都要抓的过程：先满足业务，然后从技术的视角去前瞻业务，通过架构的演进让技术走在业务前面，为业务赋能。那么有意思的问题来了：很多人在说中台是系统演进的终态，那么从系统演进的角度来说，你是不是一定要把系统做成中台呢？\n\n\n没必要一定把系统做成中台\n\n最近两年，我在本地生活负责技术中的业务中台，最初组建时我的团队就叫“中台研发部”，也与很多公司内外的同学交流过中台，其中很多同学都会问到类似的问题：“不做中台是不是就跟不上时代了？我们打算这样做中台你觉得怎么样？”。先抛出我的观点：没必要一定把系统做成中台，不做中台就会落后更是无稽之谈，不过，你可以借鉴中台的思路作为系统设计与演进上的形态参考。\n\n\n\n我曾经看过逍遥子的一个访谈，他说：“第一天就想做平台的人，基本没有做成的”。这句话我深有感触，系统的演进本质上是公司业务发展在技术上的映射，适合永远比最好要重要。比如饿了么早期不管系统还是业务，都是 ALL IN ONE 的，在快速发展的过程中，业务逐渐形成更多形态，技术也以 DDD 的思路拆分并逐渐微服务化，过程中大量的业务模块拆分为独立系统和基础中间件的分层下沉。伴随着业务发展同时也推动了技术演进，对应的多活、中台、全面云也就自然地落地了。\n\n而你的系统是否适合往中台的结构上演化，可以从下面三个方面，结合你的实际情况去考虑。\n\n是否有土壤基础\n\n宏观上看，中台优先侧重在组织和分工的重定义上，优先解决生产关系的问题，所以会有“小前台，大中台”的说法。可以说，新组织结构的设计是中台落地的土壤和前提，技术团队想要做好中台，单纯靠理念与共识是不够的，往往要通过组织自上而下地推进，能自下而上实现变革的公司少之又少。\n\n很多同学看过 SuperCell 的中台奇迹后觉得热血沸腾，不过当你看到 SuperCell 的公司文化和工作机制后，才能知道它创造奇迹的根因，比如庆祝失败、最大程度授权（CEO倒金字塔）、追求最好玩（而非最赚钱）。从SuperCell 的宣传中可以看到，他们追求小而精的业务开发团队（前台）与提供强大工具与服务的中台。前者追求麻雀虽小五脏俱全，小到足够灵活并且沟通成本最低，后者追求的是足够强，而非足够广（并不是什么都统一做到中台）。\n\n所以如果你的公司（大部门）没有中台的战略方向或者对应的组织落地动作，那么单纯的技术中台是非常难落地的。\n\n清楚中台并不完美\n\n过去两年我可以说既是中台的打造者（饿了么）也是中台的使用者（阿里），不管从哪个角度来说我都不认为中台已经是一个完善到可以开箱即用的解决方案，甚至如果你仔细观察会发现大部分说中台很好、很赞的往往是中台的打造者，很少有中台的使用者站出来说点什么。听起来中台只有好处没有坏处，这明显不正常，中台在落地过程中存在很多困难，我分享给你 3 个深刻感受。\n\n * 中台离业务较远\n\n如果说技术中间件的底层复用能力可以解决系统 10% ~20% 的问题，那么中台要解决的问题其实已经进入了业务的深水区。可做中台的同学远离一线业务，想对业务做足够的抽象和沉淀非常困难，所以中台的抽象会有一定的滞后性，对业务快速迭代和开发起到的作用有限。\n\n拿阿里来说，中台最早要解决的也不是业务快速支持的问题，而是不同业务的打通问题，只不过通过中台打通业务之后，中台本身也会变成一个单点瓶颈，然后才考虑如何解决瓶颈带来的开发效率和对新业务的快速支持与赋能的问题。很多时候最初要解决的问题，决定了出发点和终点的方向，所以如果考虑的是能力复用的需求，那么中台更适合沉淀已有的能力，对于全新业务如果和之前沉淀的业务关联不大，中台支持并不好（中台也不是万能的）。\n\n * 中台资源有限\n\n通俗点儿说，中台的团队也是有 KPI 的，从服务业务的结果看，肯定会优先支持大业务和关键业务，所以如果老板不指定小业务或创新业务，它们很难得到足够的资源支持，即使得到支持，也会因为中台要进行很多定制开发，使协作周期变长，参与人员变多。所以，很可能你本来的开发成本转移到中台一部分，但协作成本上升得更多，整体的效果与周期并没有很理想。\n\n * 中台的灵活度有限\n\n中台本身对业务的抽象和开放定制是有限的，比如订单中台的状态机有不同的开放程度，如果任一状态都可以配置编排，就会因为太灵活，使相关联的业务能力做得很碎才能与之配合。所以中台更多是有限开放，比如支付是固定的不能跳过，但是交付可以是快递交付、也可以是到店交付等方式。但是不管如何，都要在中台定义的框架内去设计，这就导致有些业务其实是无法 100% 适配的，很多时候会有各种小问题。\n\n演进思路可以先行\n\n前面提到中台存在一些问题，但我并不是完全否定中台，中台体现了很强的技术属性（抽象、沉淀、复用、打通），可以说是进一步把技术上的这些追求延展到了业务上，当企业体量到一定程度总是利大于弊的，如果说原来我们抽象沉淀的是技术组件，那么中台抽象沉淀的就是业务组件。但你也要认识到企业数字化的需求和场景千差万别，很难有一招鲜吃遍天。做业务关注差异，做系统关注共性，能不能做出技术中台很大程度上受业务形态、阶段和组织结构的影响。\n\n如果环境和业务发展没到那个阶段，我认为大张旗鼓做中台的 ROI 比较低，技术人员很难准确预测业务的形态。实际一点的做法是： 借鉴中台的系统演化思路，对业务的实现多做抽象和共性的沉淀，尽可能保持系统灵活同时多支撑相似的业务形态。比如做订单就考虑如何支持多种类商品或营销、做支付就考虑除了微信与支付宝未来要支持银行卡怎么办，每次做设计时都假想下如果又多一个业务形态你怎么支持。\n\n于你而言未必公司从上至下定一个叫“中台”的战略之后，再大刀阔斧地去做中台，完全可以先从一个很小的系统下手。另外，不要借着做中台的契机，不管什么业务、什么系统都往所谓的中台里合并，如果一个中台系统又大、又厚重、响应又慢，我真的找不出它有什么存在的价值。想清楚你要的是什么效果，如果你追求的是一个足够灵活的系统，叫不叫中台又有什么关系？\n\n\n小结\n\n这一节的主题是架构，但是我没有和大家讲分布式的三高，也没有聊微服务的 DDD，这些内容对我们做架构当然是非常重要的，不过正因为特别重要所以不管是大量的文章书籍还是现实工作都已经给予它们足够的关注点，做不好大部分是资源或者能力的问题，属于已知问题。\n\n而复杂度在我看来是一个隐蔽杀手，虽然不会立刻让系统崩溃，但是会逐渐腐蚀系统，更像是慢性病，需要长期的治疗（开发和架构习惯）才能克服，并且对很多同学而言属于未知问题，你都没有察觉到它的严重性和影响又谈何解决呢，所以建议你在系统设计时多从人和系统两个方面去考虑复杂度的变化，尽量让现在做的事对未来有帮助。\n\n\n\n作业：针对自己负责的系统你是如何在复杂度上进行治理的？从目前你对业务的了解来看，这个系统的终态应该是怎样的，为什么？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **士：\n\n> 1．1）先分层：关注完整链路和水平分层，看到全链路 以及 组织结构（不同组织对应不同分层）， 明确职责边界和范围；不同的业务按照垂直分层 2）找重点：整体上和过程中找到重点（主要矛盾），比如追求扩展性，那设计上需要考虑抽象和可扩展 3）业务化：基于业务的理解设计，基于业务发展的趋势设计架构，有时业务场景改变伴随着一些重构和优化 2．确定化的业务相关系统固化，发展中的业务对应的系统支持快速迭代而不影响其他，公共的能力下沉至公共模块；总之支持业务的发展阶段\n\n# **叔叔：\n\n> 中台概念的产生，不是一蹴而就，而是经过业务的积累，进行深度的业务抽象而产生。从设计者角度考虑，需要将业务场景抽象，能适应多样的业务变化，从而达到更容易的适配支持\n\n#     讲师回复：\n\n>     每个人都会说：“发展最好、合适最好”，但实际做的时候能掌握好这个度的人寥寥无几，向往大力出奇迹才是常态",normalizedContent:"上一讲我们以架构之名聊了一下理解业务这件事儿，这一讲我想进一步来聊一聊日常工作中架构工作的核心关注点是什么？\n\n我是在接触分布式开发之后，才对“架构”有了概念，从三高（高可用、高性能、高可扩展）到 devops（集群、网关、复杂均衡等），从系统的功能模块设计到微服务的业务建模、领域设计。很长的时间里，架构好似包罗万象，可以装进与技术相关的所有内容，给人的感觉就是想做好架构就要无所不精无所不通。\n\n但在真实的工作场景中，你不可能擅长所有技术，而且由于分工问题和精力有限，我们也不会所有事情一手抓，因为容易一地鸡毛，错失重点。\n\n那围绕架构你的工作重点是什么呢？在我看来，就是系统复杂度的治理。因为像功能实现、性能优化、稳定性等方面存在共识标准，其他角色（如架构师、运维专家）会一起补位。但系统复杂度就有点儿如人饮水，冷暖自知的感觉，可能只有你自己，才会对此有足够的认识和把握。而足够清晰、健壮可以支撑业务发展的系统才有机会谈架构演进，所以今天这一讲，我想从系统复杂度治理以及演进两个维度来聊聊架构。\n\n\n治理好系统复杂度才最务实\n\n> c.a.r. hoare曾说过：“软件设计有两种风格，一种是将软件设计得很复杂，以使其缺陷没那么明显；一种是把软件设计得很简单，以使其没有明显的缺陷”。\n\n我非常喜欢这句话，可能是这几年见多了“过于复杂”的系统，我对简单和清晰异常执着。在我看来，业务复杂所以设计出复杂的系统不是本事，业务复杂，而你依旧能通过足够好的抽象与分层将系统做得简单才是本事。\n\n不过在日常工作中，你可能没有机会从零去设计一个新系统，很多时候都是从接手历史系统，处理一个个问题开始的，比如系统某个接口响应变慢，需要解决性能问题。在解决问题的过程中，你会逐渐思考问题产生的原因、解决方案，这时你会发现这些问题是之前一些设计和迭代时导致的。很多问题源于在系统的结构性设计上就没有做好，比如服务的拆分、数据库的冗余、调用的链路或接口范式。\n\n而它们在系统后期迭代中往往只能改善、难以根治，日积月累之后，我们只好重构系统。其实，随着业务与人员的发展和变化，你几乎无法避免系统重构的问题，“系统腐化——重构系统”的趋势近乎必然，背后的原因在于：日常系统的迭代以满足业务需求为主，其他精力都用来解决类似高性能、高可用这类明显影响系统“生存”的问题，而对高可扩展（延长系统的生命周期）的投入会比较少，因为系统的高可扩展是一个相对隐蔽的问题。有趣的是产品、运营乃至业务对技术在“可扩展”上的需求极为清晰且强烈，他们期望需求快点实现，并不关心实现得是否优雅、性能是否足够。\n\n就算抛除产品和运营等诉求，从系统架构的角度来说，技术价值在商业环境（业务方）中最核心的体现就是让系统实现“可持续的快速交付”。而在这方面表现好的系统也都有一些明显的特征：系统的结构清晰、即使整体繁杂但是每个局部都相对简单、链路干脆直接，没有不必要的冗余。 所以，我认为日常开发中，对架构最核心的关注点应该是复杂度的治理，如何在满足需求的前提下，尽可能地降低系统复杂度，保持系统灵活就是你应该关注的事情。\n\n衡量复杂度\n\n在实际工作中，我们虽然能直观感受到系统复杂与否，但却很难找到类似qps、响应时间等数据指标去准确地衡量它。所以很多时候技术 leader 在衡量系统复杂度时，除了凭借主观感受外，还要参考系统和团队的一些表现特征（这些表现与技术债务有很多类似之处，毕竟产生技术债务也是系统复杂度的一种体现）。\n\n * 理解成本高：需要很长时间才能理解系统模块的组成及运作，比如新同学加入或系统交接时，老同学很难讲完整、新同学不容易听明白，要几周甚至1~2个月才能完全了解系统的实现和运作机理。\n\n * 变更牵连多：哪怕是实现一个小的需求都要改造系统的多个部分、甚至多个系统（上下游等），有的还需要协调其他团队或部门，结果导致迭代成本高，并可能引入更高的风险。\n\n * 一张图装不下：即你无法在一块白板上清晰且完整地画出系统主要功能场景的架构图，可能是牵连的系统、服务、组件过多或者链路设计不合理导致的。\n\n * 加人无法解决问题：即便你增加人员也难提高系统的交付速度和产出质量，比如原本3个人负责系统，增加到 6 个人的交付产出可能和 3 个人时所差无几，原因在于复杂度过高并且系统结构模糊，很难通过清晰的分工让生产力最大化。\n\n而你可以结合这 4 点表现特征以及自己的主观感受进一步判断系统的复杂度是否过高，如果系统复杂度过高，可能带来一系列问题：迭代压力大、经常延期、稳定性问题频发等。这时，你要着手治理复杂度，尽力不让问题扩大到难以解决只能重做系统的程度。\n\n复杂度治理的思路\n\n“复杂度的治理”这句话很宽泛，因为不同的系统和团队面临不同的环境上下文，很难一招鲜吃遍天。而且在现实业务场景中，系统发展一段时间后，往往要对抗业务发展的不确定性。所以不论是考虑不周到，还是为了赶时间的妥协，在架构上总是不完美的。这也是为什么你在公司很难找到“干净”的系统。\n\n但你要注意，不要把“简单清晰”理解为“干净完美”，复杂度治理并不是一个污水净化的过程。而是在限定 roi 和考虑到业务不确定的情况下，通过架构的设计与实现，追求系统的可控与可持续。我非常认可“高内聚、低耦合”架构理念，并认为在复杂度治理的思路上应遵照这一原则，对系统做简化和分治。\n\n简化就是去掉不必要的复杂，让设计与实现保持简单。比如某个业务场景在系统上可能 a 调用 b 就够了，结果因为某些原因（团队职责、旧系统设计等），一定要 a 调用 c 再调用 b，甚至 c 里面还存在不必要的冗余。这种画蛇添足的设计与实现，就是让系统逐渐复杂化，类似的情形在技术组件使用、系统链路设计、数据库设计和接口实现上不胜枚举。\n\n分治则是将原本难解决的问题，拆分到可解决的粒度，然后再逐一击破。当然，分治不是单纯的“拆”，而是注重并管理拆分后，不同部分的关联关系。很多系统从早期单体应用过渡到分布式系统时，就是一个长期拆分的过程，所以你会觉得架构一直在拆分，并通过拆分解决了问题。如果说早前在软件设计领域，大家都说：“没有什么问题是加一个中间层解决不了的，如果有就再加一层”。演变到分布式和微服务时代，就变成：“没有什么问题是拆模块解决不了的，如果有就继续拆”。\n\n这种说法有一定的道理，因为业务发展，必然会导致系统复杂度增加，而适当的拆分可以把复杂度均摊到多个部分，让人均维护的系统复杂度降低。但你要注意，复杂度在系统中只是被转移和分散了，并没有消失（消灭），你终究还是要处理那些拆分出来的复杂度，所以如果盲目地拆分，可能只解决眼下的问题，却在未来得到更糟的结果（比如到时候已经拆无可拆）。那具体怎么拆分呢？\n\n常见的拆分方式是垂直拆分和水平分层： 垂直拆分把差异明确可以独立迭代的业务拆分开；水平分层把共性的能力下沉隔离。比如电商场景中，购物车和订单可以分成两个服务，它们虽然在业务流程上前后关联，但是各自具备独立完整的业务场景和生命周期，商品加入购物车未必会交易生成订单，可以各自独立存在；而库存和商品则是强依赖的关系，库存无法独立于商品存在。\n\n但是拆分的原则并非一成不变，会随着业务和系统的发展而变化。比如评价一般是用户评价商品，所以早期的系统中，评价可能是耦合在商品模块内的。等到被评价的内容越来越多、评价的作用越来越大（用户画像、商品推荐度），可能会将评价作为一个垂直的系统独立出来。之后随着不同的业务展开，可能会出现多个独立的评价系统。它们的业务在早期会存在一定的差异，后面为了避免重复造轮子和打通数据，这些评价系统又会被合并成一个功能更强大的评价系统，这就是一个动态变化的过程。\n\n所以拆分与合并不绝对，过度地拆分会导致系统无法高内聚，零散分离的系统，会增加稳定性风险和治理与迭代的代价，并且造成大量的协作成本。linus也曾说过：把复杂系统拆分成模块，似乎没有降低整个系统的复杂度，它降低的只是子系统的复杂度。而整个系统的复杂度，反而会由于拆分后的模块之间，不得不进行交互，变得更加复杂。\n\n复杂度治理实践\n\n复杂度治理的思路更多是帮你如何理解和思考，除此之外在实际工作中我们还需要一些更具体的行动，要重视代码的实现和每一次需求的迭代，“千里之堤溃于蚁穴”，在这里我分享几点简单的实践。\n\n * 相比 coding 更重视设计：与其花时间去 review 代码，不如用更多时间思考如何设计并实现某一个功能。“重视设计”这点听起来简单到让人忽视，但据我观察，如果一个团队重视设计，那么其负责的系统肯定也不会差。我的第一任 leader 和我强调过，写代码之前要先用笔和纸把编码思路写下来，捋清楚了再干。这一点我延续至今，我也建议你将这样的习惯推广下去（未必是笔和纸的形式）。\n\n * 永远做 2 套以上的方案：很多时候可行方案未必是最优方案，局部最优未必是全局最优，多几套方案不光能促使你多思考利与弊，也能让你对未来多一些考量。系统变得复杂，与我们选择最容易的实现方案有关，这就容易出现“为了实现某个需求，只能对系统做复杂改造”的情况，所以不要习惯于选择最容易的实现方案，也不要满足能 work 就好。\n\n * 从 mvp 的视角考虑设计：从 mvp （最小完整业务的角度）去考虑系统要如何设计与实现，先做减法再做加法，比如有些设计去掉之后，系统也可以很好地实现，说明这些设计不必要，因为架构本身也需要“断舍离”。\n\n * 关注上下游的实现：站得高才能看得远，重视系统之间的相互作用。从实操的角度来说，上下游的系统就是你负责系统的背景环境，了解它们的实现不仅会帮你进一步了解业务，也会让你避免出现更多的问题（比如 api 的共识契约、上下游的超时、降级等）。\n\n * 坚持“日拱一卒”：尽可能在每次迭代中修复之前的问题，逐渐完善系统的实现。如果日常不能逐渐完善系统那么即使经过重写或重构，也只是短时间内“刷新”了系统状态，之后系统依然会出现各种问题，不会有根本性的改变，所以，不要把复杂度的治理当作一次性动作，它应该成为长久的习惯。\n\n总的来说，架构层面的复杂度治理是为了让系统更简单、更轻便，可以更灵活地跟上业务的变化。而这是一个两手都要抓的过程：先满足业务，然后从技术的视角去前瞻业务，通过架构的演进让技术走在业务前面，为业务赋能。那么有意思的问题来了：很多人在说中台是系统演进的终态，那么从系统演进的角度来说，你是不是一定要把系统做成中台呢？\n\n\n没必要一定把系统做成中台\n\n最近两年，我在本地生活负责技术中的业务中台，最初组建时我的团队就叫“中台研发部”，也与很多公司内外的同学交流过中台，其中很多同学都会问到类似的问题：“不做中台是不是就跟不上时代了？我们打算这样做中台你觉得怎么样？”。先抛出我的观点：没必要一定把系统做成中台，不做中台就会落后更是无稽之谈，不过，你可以借鉴中台的思路作为系统设计与演进上的形态参考。\n\n\n\n我曾经看过逍遥子的一个访谈，他说：“第一天就想做平台的人，基本没有做成的”。这句话我深有感触，系统的演进本质上是公司业务发展在技术上的映射，适合永远比最好要重要。比如饿了么早期不管系统还是业务，都是 all in one 的，在快速发展的过程中，业务逐渐形成更多形态，技术也以 ddd 的思路拆分并逐渐微服务化，过程中大量的业务模块拆分为独立系统和基础中间件的分层下沉。伴随着业务发展同时也推动了技术演进，对应的多活、中台、全面云也就自然地落地了。\n\n而你的系统是否适合往中台的结构上演化，可以从下面三个方面，结合你的实际情况去考虑。\n\n是否有土壤基础\n\n宏观上看，中台优先侧重在组织和分工的重定义上，优先解决生产关系的问题，所以会有“小前台，大中台”的说法。可以说，新组织结构的设计是中台落地的土壤和前提，技术团队想要做好中台，单纯靠理念与共识是不够的，往往要通过组织自上而下地推进，能自下而上实现变革的公司少之又少。\n\n很多同学看过 supercell 的中台奇迹后觉得热血沸腾，不过当你看到 supercell 的公司文化和工作机制后，才能知道它创造奇迹的根因，比如庆祝失败、最大程度授权（ceo倒金字塔）、追求最好玩（而非最赚钱）。从supercell 的宣传中可以看到，他们追求小而精的业务开发团队（前台）与提供强大工具与服务的中台。前者追求麻雀虽小五脏俱全，小到足够灵活并且沟通成本最低，后者追求的是足够强，而非足够广（并不是什么都统一做到中台）。\n\n所以如果你的公司（大部门）没有中台的战略方向或者对应的组织落地动作，那么单纯的技术中台是非常难落地的。\n\n清楚中台并不完美\n\n过去两年我可以说既是中台的打造者（饿了么）也是中台的使用者（阿里），不管从哪个角度来说我都不认为中台已经是一个完善到可以开箱即用的解决方案，甚至如果你仔细观察会发现大部分说中台很好、很赞的往往是中台的打造者，很少有中台的使用者站出来说点什么。听起来中台只有好处没有坏处，这明显不正常，中台在落地过程中存在很多困难，我分享给你 3 个深刻感受。\n\n * 中台离业务较远\n\n如果说技术中间件的底层复用能力可以解决系统 10% ~20% 的问题，那么中台要解决的问题其实已经进入了业务的深水区。可做中台的同学远离一线业务，想对业务做足够的抽象和沉淀非常困难，所以中台的抽象会有一定的滞后性，对业务快速迭代和开发起到的作用有限。\n\n拿阿里来说，中台最早要解决的也不是业务快速支持的问题，而是不同业务的打通问题，只不过通过中台打通业务之后，中台本身也会变成一个单点瓶颈，然后才考虑如何解决瓶颈带来的开发效率和对新业务的快速支持与赋能的问题。很多时候最初要解决的问题，决定了出发点和终点的方向，所以如果考虑的是能力复用的需求，那么中台更适合沉淀已有的能力，对于全新业务如果和之前沉淀的业务关联不大，中台支持并不好（中台也不是万能的）。\n\n * 中台资源有限\n\n通俗点儿说，中台的团队也是有 kpi 的，从服务业务的结果看，肯定会优先支持大业务和关键业务，所以如果老板不指定小业务或创新业务，它们很难得到足够的资源支持，即使得到支持，也会因为中台要进行很多定制开发，使协作周期变长，参与人员变多。所以，很可能你本来的开发成本转移到中台一部分，但协作成本上升得更多，整体的效果与周期并没有很理想。\n\n * 中台的灵活度有限\n\n中台本身对业务的抽象和开放定制是有限的，比如订单中台的状态机有不同的开放程度，如果任一状态都可以配置编排，就会因为太灵活，使相关联的业务能力做得很碎才能与之配合。所以中台更多是有限开放，比如支付是固定的不能跳过，但是交付可以是快递交付、也可以是到店交付等方式。但是不管如何，都要在中台定义的框架内去设计，这就导致有些业务其实是无法 100% 适配的，很多时候会有各种小问题。\n\n演进思路可以先行\n\n前面提到中台存在一些问题，但我并不是完全否定中台，中台体现了很强的技术属性（抽象、沉淀、复用、打通），可以说是进一步把技术上的这些追求延展到了业务上，当企业体量到一定程度总是利大于弊的，如果说原来我们抽象沉淀的是技术组件，那么中台抽象沉淀的就是业务组件。但你也要认识到企业数字化的需求和场景千差万别，很难有一招鲜吃遍天。做业务关注差异，做系统关注共性，能不能做出技术中台很大程度上受业务形态、阶段和组织结构的影响。\n\n如果环境和业务发展没到那个阶段，我认为大张旗鼓做中台的 roi 比较低，技术人员很难准确预测业务的形态。实际一点的做法是： 借鉴中台的系统演化思路，对业务的实现多做抽象和共性的沉淀，尽可能保持系统灵活同时多支撑相似的业务形态。比如做订单就考虑如何支持多种类商品或营销、做支付就考虑除了微信与支付宝未来要支持银行卡怎么办，每次做设计时都假想下如果又多一个业务形态你怎么支持。\n\n于你而言未必公司从上至下定一个叫“中台”的战略之后，再大刀阔斧地去做中台，完全可以先从一个很小的系统下手。另外，不要借着做中台的契机，不管什么业务、什么系统都往所谓的中台里合并，如果一个中台系统又大、又厚重、响应又慢，我真的找不出它有什么存在的价值。想清楚你要的是什么效果，如果你追求的是一个足够灵活的系统，叫不叫中台又有什么关系？\n\n\n小结\n\n这一节的主题是架构，但是我没有和大家讲分布式的三高，也没有聊微服务的 ddd，这些内容对我们做架构当然是非常重要的，不过正因为特别重要所以不管是大量的文章书籍还是现实工作都已经给予它们足够的关注点，做不好大部分是资源或者能力的问题，属于已知问题。\n\n而复杂度在我看来是一个隐蔽杀手，虽然不会立刻让系统崩溃，但是会逐渐腐蚀系统，更像是慢性病，需要长期的治疗（开发和架构习惯）才能克服，并且对很多同学而言属于未知问题，你都没有察觉到它的严重性和影响又谈何解决呢，所以建议你在系统设计时多从人和系统两个方面去考虑复杂度的变化，尽量让现在做的事对未来有帮助。\n\n\n\n作业：针对自己负责的系统你是如何在复杂度上进行治理的？从目前你对业务的了解来看，这个系统的终态应该是怎样的，为什么？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **士：\n\n> 1．1）先分层：关注完整链路和水平分层，看到全链路 以及 组织结构（不同组织对应不同分层）， 明确职责边界和范围；不同的业务按照垂直分层 2）找重点：整体上和过程中找到重点（主要矛盾），比如追求扩展性，那设计上需要考虑抽象和可扩展 3）业务化：基于业务的理解设计，基于业务发展的趋势设计架构，有时业务场景改变伴随着一些重构和优化 2．确定化的业务相关系统固化，发展中的业务对应的系统支持快速迭代而不影响其他，公共的能力下沉至公共模块；总之支持业务的发展阶段\n\n# **叔叔：\n\n> 中台概念的产生，不是一蹴而就，而是经过业务的积累，进行深度的业务抽象而产生。从设计者角度考虑，需要将业务场景抽象，能适应多样的业务变化，从而达到更容易的适配支持\n\n#     讲师回复：\n\n>     每个人都会说：“发展最好、合适最好”，但实际做的时候能掌握好这个度的人寥寥无几，向往大力出奇迹才是常态",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"业务理解：深入业务是做好架构的前提",frontmatter:{title:"业务理解：深入业务是做好架构的前提",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/41e44b/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/07.%20%20%E4%B8%9A%E5%8A%A1%E7%90%86%E8%A7%A3%EF%BC%9A%E6%B7%B1%E5%85%A5%E4%B8%9A%E5%8A%A1%E6%98%AF%E5%81%9A%E5%A5%BD%E6%9E%B6%E6%9E%84%E7%9A%84%E5%89%8D%E6%8F%90.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/07.  业务理解：深入业务是做好架构的前提.md",key:"v-36683b8b",path:"/pages/41e44b/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:5066}],headersStr:"精选评论",content:"前面 5 讲我围绕稳定性、技术债务和大项目管理分享了一些过往的经验与思考，从今天开始，我会用两讲的时间，围绕“架构设计与系统演进”与你分享我的经验。这几方面是我认为技术 Leader 在技术工作上一定要做好并且极为重要的，从八二法则上看，它们也是我认为值得花 80% 的精力去做好的，而你能否做好这几点会影响团队未来的发展。\n\n其实对任何一个技术人来讲，“架构设计与系统演进”都不是陌生的话题，早些年“架构”还是一个有身份、充满力量的词，很多同学不敢张嘴闭嘴谈“架构”，但最近几年这个词变得愈发平常，与架构有关的各类书籍、文章层出不穷，而很多文章里都会有这样一个观点：架构要结合具体的业务场景来设计。“结合业务场景”听起来应该是一件容易的事儿，但据我观察，在自己负责的领域里真正深刻理解业务的技术人凤毛麟角，所以我想专门拿出一讲，和你好好聊一聊“理解业务这件事”。\n\n\n为什么技术要理解业务？\n\n产品需求不等于业务诉求\n\n日常工作中，往往产品提出要实现的系统功能未必等于业务想要解决的问题，但是有了一个明确的功能需求再搭配好 DeadLine，大部分技术同学的关注点就会变成：怎么在规定的时间内搞定这个需求。至于为什么要实现这个需求、它能否真正解决业务问题可能就没人关心了，这种情况你肯定不陌生。\n\n有时产品需求就好像说我们要造一艘船，这艘船要满足：载客量1W、速度200km/h，能抵抗10 级海浪，2 个月后完工。技术一看需求这么明确，马上着手实现，开始计划按照标准需要多少钢材、多少工人、几个发动机、船舱结构要如何设计。但是业务上的诉求是造船吗？如果你去找业务的同学仔细了解，可能会发现他的要求是：安全到达对岸。至于你是修桥、造船、开着老爷车绕路他其实并不是那么在意。\n\n虽然我的例子略微极端，但是在实际的开发工作中，如果你不关心需求的源头，不去理解业务，只是低头实现，长此下去，真实的情况会更可怕。\n\n另外，在大部分商业公司中，技术处于价值创造流程的末端（技术团队会被定义为支撑实现的团队），用户的真实需求在到达技术之前会经过业务、运营、产品等多个环节，每一层都会被加工、处理、拆分，技术看到的问题可能距想解决的问题已经很远了，没有搞清楚问题的源头而去解决问题，结果会很糟糕。\n\n同样的，技术 Leader 可能会花时间参加各种会议，尤其是产品需求的会，在会上如果仅仅是听“自己团队应该做什么”，而没有思考和探究业务的根本诉求，那么就我的经验来说，技术团队不可避免的会成为工具人。Leader 缺乏独立思考，人云亦云，最后整个团队都会被拖累，这也是为什么大多数研发团队被产品以及业务按在地上摩擦的原因！\n\n领域建模的前提是理解业务\n\n在大型互联网公司中，DDD（领域驱动架构设计）是目前的主流，也是微服务落地的最佳实践之一。我们定义领域并且通过 DDD 思想设计服务模型是为了通过一套统一的标准描述业务流程与组成，但业界并没有一个共识的标准去定义，主要是根据经验、主观地设计，其中发挥最大作用的就是你对业务的理解。\n\n以饿了么交易系统为例，熟悉订单系统的同学可能不会陌生，订单作为交易的载体需要承载大量的数据，在一开始，订单系统的演进完全跟着业务需求走，我们发现总有一些数据要存储在订单上，比如商户系统要在订单上加一个标志、营销系统需要在订单上放一个计算中间值……之前我们很难判断是否应该让这些数据落到订单上，因为这些系统的研发同学说得也有道理，数据落在订单上可以少几次调用，可以根据订单号便捷地获取。但是早期订单系统并没有做好对应的冗余设计，所以这些信息都存储在一个无法管理的 JSON 字段中，给我们带来了数不尽的麻烦。\n\n我们复盘后发现，出现这个问题表面上看是系统设计和实现不够好，但是根本原因是没有在深度理解业务的基础上对交易系统进行建模，确定边界与能力范围。如果可以更早地设计好交易模型，拆分正逆向交易，将订单场景、类型配置化实现，设计好标记数据的存储结构，那么很多问题都不会发生。\n\n正因为没有仔细看业务的现状、推测业务的发展、去思考业务上对交易的诉求，我们认识的只是一个个需求，而非整体的从业务维度思考系统的设计，导致系统复杂度越来越高。所以要想设计可靠、简单、真正可持续迭代的系统，深度理解业务就是前提，你对业务的理解程度影响了你对系统未来发展的预判程度。\n\n提升技术团队的使命感\n\n最后，我认为通过理解业务可以让团队的同学进一步了解自己工作的价值和意义。技术同学对业务的直观感受大多来自线上的产品和系统，这和直接接触用户有很大差别，就好像有些设计你可能觉得不那么好，但如果有用户打电话过来投诉，你才能真的意识这个“不那么好”有多糟糕。\n\n我之前负责的技术团队会定期安排同学在客服中心听线，然后与一线的客服人员直接沟通痛点，往往技术同学会受到来自用户和客服的双向暴击。比如营销系统研发的同学，可能一边用户会责问为什么某个红包无法使用、为什么系统优惠计算的金额和自己算的不一样，另外一边客服同学也在抱怨优惠信息查询复杂、不同红包的互斥规则在系统中没有体现等。技术同学一边收集问题，一边真实地与这个世界交互，而不是写完一段代码提交发布就结束了。\n\n这种感知到自己的代码对真实世界产生影响进而生成的同理心是非常关键的，当你能清晰且直观地感受到：你写的每一行代码，线上的每一次发布，都会改变用户的体验，解决实际的问题，你就会发现这份工作的意义。\n\n\n\n\n如何理解业务？\n\n根据我的观察，很多 Leader 之所以能在技术组织中崭露头角，除了技术功底扎实之外，对业务的熟悉和理解也占了很大因素，尤其是阿里这样“尊重技术的公司”，P7 以上的技术人员能否晋升，深度理解业务很重要。而且级别越高，对你理解业务的程度要求也越高，可能你觉得理解业务并不难，某个领域的系统做久了，自然而然就了解了，但了解、熟悉和深刻理解不能混为一谈，这里面还有深度与广度之分。\n\n很多人一开始对饿了么的理解就是一个送外卖的公司，觉得系统的架构和设计与电商会很类似，送外卖这么件小事儿能有多复杂？可能这些同学在饿了么上点过餐，加之这是一个 To C 的业务，在流程和操作上看起来也并不复杂，所以推理出背后的系统应该不难。\n\n但实际身处其中的感受可能会完全不一样，我们常说看得见的都是最简单的，难的东西都藏在背后。过千万的订单、数百万商户和骑手，这背后是一整套业务体系和复杂的系统支持，餐厅和餐品的数字化、交易流程包括商户和骑手并且时效性要在 30 分钟以内、营销补贴长年持续不断，种种业务上的差异在系统上的体现会更加明显。单是一个骑手调度就包含了业务、商业、技术等多个角度的博弈，所以远观一个个业务只能说是知道，近观乃至下场去看、去做、去思考和尝试才能说是真正理解。关于理解业务我有三个小的建议：\n\n不要盲信产品\n\n借用雷军的话：永远不要试图用战术上的勤奋，去掩盖你战略上的懒惰。这句话形容大部分的PD 再贴切不过，厉害的PD很多，“说起来厉害的PD”就更多了，他们从业务方接收需求描述说明，然后简单加工成 PRD，再根据业务方的嗓门大小进行优先级的排序，最后直接输出给技术。\n\n我对技术同学尤其是技术 Leader 的建议是： 不要盲信产品与 PRD，在讨论 PRD 和执行开发任务之前学会独立思考，深入理解业务想要解决什么问题，需要什么效果或作用，严格把控那些伪需求和无价值需求，防止它们侵占团队的技术资源。\n\n要知道，如果 PD 已经退化成一个 PPT Designer 和业务需求的传话筒，那你就更不能让技术同学充当需求的实现机器，不然技术会陷入无价值的需求中，很难创造自己的价值，这也是为什么很多技术团队没时间偿还技术债务、业务节奏停不下来的原因。你要去看业务想要什么、处于一个怎样的环境、为什么想做这件事儿，把自己作为半个业务同学去理解业务，这样才能找到技术与业务平衡的空间。\n\n建立走进业务的机制\n\n技术领域 90% 的事情可以在理论层面证伪，10% 的事情在意料之外需要遵守墨菲定律，大体上还是可以通过数据来判断。但在业务领域，并不是所有的内容都可以通过数据判断对错，技术同学去理解业务，就是应该加强对业务的认知和体感，毕竟大家日常的思维方式已经很结构化和数字化了，更需要在理性之上去建立感性那部分。\n\n最简单的方法就是代入用户视角，去实际地体验一下，看一看具体的服务、感受和业务流程是怎样的。滴滴就建立了走进业务的机制，滴滴的朋友曾经和我提起过这样一件事儿：他们内部有一个打车体验改进的机制，每个月选取一些同学，并给予他们一定的打车报销额度，这些同学将日常打车的体验总结下来，觉得哪些比较好、哪些比较糟糕，然后统一反馈给专门的同学，之后会按照问题的分类在业务流程上形成一个个实际的需求，由运营、产品、业务一起去解决。\n\n饿了么也是这样，我们也会定期到某个城市去和市场 BD 的同学一起走访商户，或者作为骑手去餐厅取餐送餐，以此体验业务上的细节。比如走访商户后我发现如果营销系统比较复杂，大部分商户的使用成本就会增高，使用的意愿就会降低，往往商户只会用满减和红包几个简单的玩法；我之前在珠海体验送餐，因为珠海禁止电动车所以只能自行车送餐，每一公里都累得想吐，那时你才会发现派单系统有多么关键。\n\n在技术团队你也要建立走进业务的机制，因为实际去体验业务会让你建立很强的认识感与同理心，还能发现一些痛点问题。你从统计数字上看一个骑手一天可以送20单，和你真的作为骑手一天去送20单，那个感觉是完全不一样的。只有站在他们的角度你才能看到他们的痛点，才会思考技术是不是能解决这些你原本未必知道或关注的问题，这就是业务同理心。\n\n当然，我也想提醒你，不要让业务机制成为“一次性作秀”，最好有一个低成本可持续的机制，而不是仅仅是为了走个形式到业务侧打个卡。要带着发现问题、解决问题的想法走进业务。我建议你从客服入手，成本低、效果好、每次都带着任务来也带着问题走，很容易就形成一个可持续的循环。\n\n业务上多参会多画图\n\n可以适当参加业务会议，比如运营、客服、BD 的月度复盘会，或者给老板做的业绩汇报会，定期与产品一起参加业务需求的评审会，从源头来看业务方想解决的问题是处于一个怎样的背景。\n\n另外，如果说技术了解系统，梳理架构是通过画各种架构图和系统链路图，那么对于业务同样可以结合自己的整理去画业务流程图。技术视角的业务流程图并不需要特别复杂，也没必要一定遵守某个标准范式，只要能将“谁在、在什么时候、做什么、产生什么变化”这些画明白就可以了。比如饿了么点餐的交易流程图，可以简单画为：\n\n\n\n技术人员梳理业务流程图时还有一个优势就是可以借助系统和数据来辅助你理解，因为系统是你做的所以你非常清楚数据流是怎样的，中间发生了什么变化，通过追踪数据来研究每一步的处理逻辑进而理解业务的处理步骤。\n\n同时，你可以将自己的理解分享给团队的其他成员，对一个团队而言，最好的改变肯定是从个体到集体，你一个人认识、熟悉、理解业务还不够，还要让整个团队认识、熟悉和理解业务，这样才会让系统和产品产生质变。在这个过程中也会让团队成员建立正确的认知，让成员明白理解业务与编码交付同样重要，这样一来，其他人也会有意识地去关注业务的变化、去了解业务的现状。试想如果团队中每个人都对某一部分业务了解很深，大家就可以通过各自分享的方式组合成一个完整的业务认识。道理与熟悉系统、分析架构是一样的，重要的是形成这种认识和氛围。\n\n\n小结\n\n这一讲我和你分享了理解业务的重要性和一些小的建议方法，希望你意识到理解业务对实际工作会有巨大的帮助。并且理解业务并不是嘴上说说或者参加一两次业务会议就够了，你要先在心里意识到理解业务的重要性和收益，然后愿意像研究代码一样去琢磨业务是如何运作、接下来可能会怎样发展，并且将这些思考和对业务重要性的认识反复传达给团队。\n\n技术人深刻地理解业务所产生的结果是“1 + 1 > 2”的，很多时候业务乃至产品认为只能通过A方案来解决的问题，可能在你眼里还有B、C、D的方案，或者更清楚不同方案的利弊与取舍，因为懂技术可以带来无限的可能。\n\n\n\n留个作业：你对当前负责的业务是如何理解的？如果你团队有新成员，你会通过何种方式帮助他快速理解你们的业务？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **8904：\n\n> BD是什么意思呀？\n\n#     讲师回复：\n\n>     business development，我们一般指的是一线业务人员，直接面向商户的，以前饿了么比较多\n\n# **涛：\n\n> 十分同意，业务同理心很重要，理解起来有点类似于广义上的用户体验\n\n# **锋：\n\n> 这个技术领导，还写代码吗？\n\n# *春：\n\n> 非常认同，业务可能要个马，其实背后是要辆车\n\n#     讲师回复：\n\n>     没错，业务要的和技术做的，之间永远有一个适配，多了少了都不行",normalizedContent:"前面 5 讲我围绕稳定性、技术债务和大项目管理分享了一些过往的经验与思考，从今天开始，我会用两讲的时间，围绕“架构设计与系统演进”与你分享我的经验。这几方面是我认为技术 leader 在技术工作上一定要做好并且极为重要的，从八二法则上看，它们也是我认为值得花 80% 的精力去做好的，而你能否做好这几点会影响团队未来的发展。\n\n其实对任何一个技术人来讲，“架构设计与系统演进”都不是陌生的话题，早些年“架构”还是一个有身份、充满力量的词，很多同学不敢张嘴闭嘴谈“架构”，但最近几年这个词变得愈发平常，与架构有关的各类书籍、文章层出不穷，而很多文章里都会有这样一个观点：架构要结合具体的业务场景来设计。“结合业务场景”听起来应该是一件容易的事儿，但据我观察，在自己负责的领域里真正深刻理解业务的技术人凤毛麟角，所以我想专门拿出一讲，和你好好聊一聊“理解业务这件事”。\n\n\n为什么技术要理解业务？\n\n产品需求不等于业务诉求\n\n日常工作中，往往产品提出要实现的系统功能未必等于业务想要解决的问题，但是有了一个明确的功能需求再搭配好 deadline，大部分技术同学的关注点就会变成：怎么在规定的时间内搞定这个需求。至于为什么要实现这个需求、它能否真正解决业务问题可能就没人关心了，这种情况你肯定不陌生。\n\n有时产品需求就好像说我们要造一艘船，这艘船要满足：载客量1w、速度200km/h，能抵抗10 级海浪，2 个月后完工。技术一看需求这么明确，马上着手实现，开始计划按照标准需要多少钢材、多少工人、几个发动机、船舱结构要如何设计。但是业务上的诉求是造船吗？如果你去找业务的同学仔细了解，可能会发现他的要求是：安全到达对岸。至于你是修桥、造船、开着老爷车绕路他其实并不是那么在意。\n\n虽然我的例子略微极端，但是在实际的开发工作中，如果你不关心需求的源头，不去理解业务，只是低头实现，长此下去，真实的情况会更可怕。\n\n另外，在大部分商业公司中，技术处于价值创造流程的末端（技术团队会被定义为支撑实现的团队），用户的真实需求在到达技术之前会经过业务、运营、产品等多个环节，每一层都会被加工、处理、拆分，技术看到的问题可能距想解决的问题已经很远了，没有搞清楚问题的源头而去解决问题，结果会很糟糕。\n\n同样的，技术 leader 可能会花时间参加各种会议，尤其是产品需求的会，在会上如果仅仅是听“自己团队应该做什么”，而没有思考和探究业务的根本诉求，那么就我的经验来说，技术团队不可避免的会成为工具人。leader 缺乏独立思考，人云亦云，最后整个团队都会被拖累，这也是为什么大多数研发团队被产品以及业务按在地上摩擦的原因！\n\n领域建模的前提是理解业务\n\n在大型互联网公司中，ddd（领域驱动架构设计）是目前的主流，也是微服务落地的最佳实践之一。我们定义领域并且通过 ddd 思想设计服务模型是为了通过一套统一的标准描述业务流程与组成，但业界并没有一个共识的标准去定义，主要是根据经验、主观地设计，其中发挥最大作用的就是你对业务的理解。\n\n以饿了么交易系统为例，熟悉订单系统的同学可能不会陌生，订单作为交易的载体需要承载大量的数据，在一开始，订单系统的演进完全跟着业务需求走，我们发现总有一些数据要存储在订单上，比如商户系统要在订单上加一个标志、营销系统需要在订单上放一个计算中间值……之前我们很难判断是否应该让这些数据落到订单上，因为这些系统的研发同学说得也有道理，数据落在订单上可以少几次调用，可以根据订单号便捷地获取。但是早期订单系统并没有做好对应的冗余设计，所以这些信息都存储在一个无法管理的 json 字段中，给我们带来了数不尽的麻烦。\n\n我们复盘后发现，出现这个问题表面上看是系统设计和实现不够好，但是根本原因是没有在深度理解业务的基础上对交易系统进行建模，确定边界与能力范围。如果可以更早地设计好交易模型，拆分正逆向交易，将订单场景、类型配置化实现，设计好标记数据的存储结构，那么很多问题都不会发生。\n\n正因为没有仔细看业务的现状、推测业务的发展、去思考业务上对交易的诉求，我们认识的只是一个个需求，而非整体的从业务维度思考系统的设计，导致系统复杂度越来越高。所以要想设计可靠、简单、真正可持续迭代的系统，深度理解业务就是前提，你对业务的理解程度影响了你对系统未来发展的预判程度。\n\n提升技术团队的使命感\n\n最后，我认为通过理解业务可以让团队的同学进一步了解自己工作的价值和意义。技术同学对业务的直观感受大多来自线上的产品和系统，这和直接接触用户有很大差别，就好像有些设计你可能觉得不那么好，但如果有用户打电话过来投诉，你才能真的意识这个“不那么好”有多糟糕。\n\n我之前负责的技术团队会定期安排同学在客服中心听线，然后与一线的客服人员直接沟通痛点，往往技术同学会受到来自用户和客服的双向暴击。比如营销系统研发的同学，可能一边用户会责问为什么某个红包无法使用、为什么系统优惠计算的金额和自己算的不一样，另外一边客服同学也在抱怨优惠信息查询复杂、不同红包的互斥规则在系统中没有体现等。技术同学一边收集问题，一边真实地与这个世界交互，而不是写完一段代码提交发布就结束了。\n\n这种感知到自己的代码对真实世界产生影响进而生成的同理心是非常关键的，当你能清晰且直观地感受到：你写的每一行代码，线上的每一次发布，都会改变用户的体验，解决实际的问题，你就会发现这份工作的意义。\n\n\n\n\n如何理解业务？\n\n根据我的观察，很多 leader 之所以能在技术组织中崭露头角，除了技术功底扎实之外，对业务的熟悉和理解也占了很大因素，尤其是阿里这样“尊重技术的公司”，p7 以上的技术人员能否晋升，深度理解业务很重要。而且级别越高，对你理解业务的程度要求也越高，可能你觉得理解业务并不难，某个领域的系统做久了，自然而然就了解了，但了解、熟悉和深刻理解不能混为一谈，这里面还有深度与广度之分。\n\n很多人一开始对饿了么的理解就是一个送外卖的公司，觉得系统的架构和设计与电商会很类似，送外卖这么件小事儿能有多复杂？可能这些同学在饿了么上点过餐，加之这是一个 to c 的业务，在流程和操作上看起来也并不复杂，所以推理出背后的系统应该不难。\n\n但实际身处其中的感受可能会完全不一样，我们常说看得见的都是最简单的，难的东西都藏在背后。过千万的订单、数百万商户和骑手，这背后是一整套业务体系和复杂的系统支持，餐厅和餐品的数字化、交易流程包括商户和骑手并且时效性要在 30 分钟以内、营销补贴长年持续不断，种种业务上的差异在系统上的体现会更加明显。单是一个骑手调度就包含了业务、商业、技术等多个角度的博弈，所以远观一个个业务只能说是知道，近观乃至下场去看、去做、去思考和尝试才能说是真正理解。关于理解业务我有三个小的建议：\n\n不要盲信产品\n\n借用雷军的话：永远不要试图用战术上的勤奋，去掩盖你战略上的懒惰。这句话形容大部分的pd 再贴切不过，厉害的pd很多，“说起来厉害的pd”就更多了，他们从业务方接收需求描述说明，然后简单加工成 prd，再根据业务方的嗓门大小进行优先级的排序，最后直接输出给技术。\n\n我对技术同学尤其是技术 leader 的建议是： 不要盲信产品与 prd，在讨论 prd 和执行开发任务之前学会独立思考，深入理解业务想要解决什么问题，需要什么效果或作用，严格把控那些伪需求和无价值需求，防止它们侵占团队的技术资源。\n\n要知道，如果 pd 已经退化成一个 ppt designer 和业务需求的传话筒，那你就更不能让技术同学充当需求的实现机器，不然技术会陷入无价值的需求中，很难创造自己的价值，这也是为什么很多技术团队没时间偿还技术债务、业务节奏停不下来的原因。你要去看业务想要什么、处于一个怎样的环境、为什么想做这件事儿，把自己作为半个业务同学去理解业务，这样才能找到技术与业务平衡的空间。\n\n建立走进业务的机制\n\n技术领域 90% 的事情可以在理论层面证伪，10% 的事情在意料之外需要遵守墨菲定律，大体上还是可以通过数据来判断。但在业务领域，并不是所有的内容都可以通过数据判断对错，技术同学去理解业务，就是应该加强对业务的认知和体感，毕竟大家日常的思维方式已经很结构化和数字化了，更需要在理性之上去建立感性那部分。\n\n最简单的方法就是代入用户视角，去实际地体验一下，看一看具体的服务、感受和业务流程是怎样的。滴滴就建立了走进业务的机制，滴滴的朋友曾经和我提起过这样一件事儿：他们内部有一个打车体验改进的机制，每个月选取一些同学，并给予他们一定的打车报销额度，这些同学将日常打车的体验总结下来，觉得哪些比较好、哪些比较糟糕，然后统一反馈给专门的同学，之后会按照问题的分类在业务流程上形成一个个实际的需求，由运营、产品、业务一起去解决。\n\n饿了么也是这样，我们也会定期到某个城市去和市场 bd 的同学一起走访商户，或者作为骑手去餐厅取餐送餐，以此体验业务上的细节。比如走访商户后我发现如果营销系统比较复杂，大部分商户的使用成本就会增高，使用的意愿就会降低，往往商户只会用满减和红包几个简单的玩法；我之前在珠海体验送餐，因为珠海禁止电动车所以只能自行车送餐，每一公里都累得想吐，那时你才会发现派单系统有多么关键。\n\n在技术团队你也要建立走进业务的机制，因为实际去体验业务会让你建立很强的认识感与同理心，还能发现一些痛点问题。你从统计数字上看一个骑手一天可以送20单，和你真的作为骑手一天去送20单，那个感觉是完全不一样的。只有站在他们的角度你才能看到他们的痛点，才会思考技术是不是能解决这些你原本未必知道或关注的问题，这就是业务同理心。\n\n当然，我也想提醒你，不要让业务机制成为“一次性作秀”，最好有一个低成本可持续的机制，而不是仅仅是为了走个形式到业务侧打个卡。要带着发现问题、解决问题的想法走进业务。我建议你从客服入手，成本低、效果好、每次都带着任务来也带着问题走，很容易就形成一个可持续的循环。\n\n业务上多参会多画图\n\n可以适当参加业务会议，比如运营、客服、bd 的月度复盘会，或者给老板做的业绩汇报会，定期与产品一起参加业务需求的评审会，从源头来看业务方想解决的问题是处于一个怎样的背景。\n\n另外，如果说技术了解系统，梳理架构是通过画各种架构图和系统链路图，那么对于业务同样可以结合自己的整理去画业务流程图。技术视角的业务流程图并不需要特别复杂，也没必要一定遵守某个标准范式，只要能将“谁在、在什么时候、做什么、产生什么变化”这些画明白就可以了。比如饿了么点餐的交易流程图，可以简单画为：\n\n\n\n技术人员梳理业务流程图时还有一个优势就是可以借助系统和数据来辅助你理解，因为系统是你做的所以你非常清楚数据流是怎样的，中间发生了什么变化，通过追踪数据来研究每一步的处理逻辑进而理解业务的处理步骤。\n\n同时，你可以将自己的理解分享给团队的其他成员，对一个团队而言，最好的改变肯定是从个体到集体，你一个人认识、熟悉、理解业务还不够，还要让整个团队认识、熟悉和理解业务，这样才会让系统和产品产生质变。在这个过程中也会让团队成员建立正确的认知，让成员明白理解业务与编码交付同样重要，这样一来，其他人也会有意识地去关注业务的变化、去了解业务的现状。试想如果团队中每个人都对某一部分业务了解很深，大家就可以通过各自分享的方式组合成一个完整的业务认识。道理与熟悉系统、分析架构是一样的，重要的是形成这种认识和氛围。\n\n\n小结\n\n这一讲我和你分享了理解业务的重要性和一些小的建议方法，希望你意识到理解业务对实际工作会有巨大的帮助。并且理解业务并不是嘴上说说或者参加一两次业务会议就够了，你要先在心里意识到理解业务的重要性和收益，然后愿意像研究代码一样去琢磨业务是如何运作、接下来可能会怎样发展，并且将这些思考和对业务重要性的认识反复传达给团队。\n\n技术人深刻地理解业务所产生的结果是“1 + 1 > 2”的，很多时候业务乃至产品认为只能通过a方案来解决的问题，可能在你眼里还有b、c、d的方案，或者更清楚不同方案的利弊与取舍，因为懂技术可以带来无限的可能。\n\n\n\n留个作业：你对当前负责的业务是如何理解的？如果你团队有新成员，你会通过何种方式帮助他快速理解你们的业务？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **8904：\n\n> bd是什么意思呀？\n\n#     讲师回复：\n\n>     business development，我们一般指的是一线业务人员，直接面向商户的，以前饿了么比较多\n\n# **涛：\n\n> 十分同意，业务同理心很重要，理解起来有点类似于广义上的用户体验\n\n# **锋：\n\n> 这个技术领导，还写代码吗？\n\n# *春：\n\n> 非常认同，业务可能要个马，其实背后是要辆车\n\n#     讲师回复：\n\n>     没错，业务要的和技术做的，之间永远有一个适配，多了少了都不行",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"定目标：让你的方向与公司的方向保持一致",frontmatter:{title:"定目标：让你的方向与公司的方向保持一致",date:"2023-02-22T16:15:53.000Z",permalink:"/pages/658fc0/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/09.%20%20%E5%AE%9A%E7%9B%AE%E6%A0%87%EF%BC%9A%E8%AE%A9%E4%BD%A0%E7%9A%84%E6%96%B9%E5%90%91%E4%B8%8E%E5%85%AC%E5%8F%B8%E7%9A%84%E6%96%B9%E5%90%91%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/09.  定目标：让你的方向与公司的方向保持一致.md",key:"v-59797b30",path:"/pages/658fc0/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4510}],headersStr:"精选评论",content:"今天我们正式进入第二个模块，这一讲我想与你分享管理第一板斧拿结果的第一招，定目标。\n\n这几年，我观察过很多刚开始做技术 Leader 的同学，有一些因为技术扎实、为人友善、熟悉系统与业务等原因成为团队 Leader，但是角色转变后被各种产品需求会、技术方案会、汇报会搞得焦头烂额，然后还要安排团队成员的工作，协调跨部门协作的事务，失去了 Coding 的“硬核时间”，忙得晕头转向，能力不但没得到提升，最终交付的项目也没有得到老板的肯定。\n\n我也曾有过这种泥足深陷的感觉。本来，在没有介入管理职能之前，每个人管理好自己就可以了，需要考虑的都是围绕自己的事情，方向和维度都比较垂直。角色转变后，从解决自己的问题变为要解决团队的问题，要解决的问题也由单点变成多点，在这个过程中，你很容易抓不住核心点，最终取得的结果自然会跟预期产生偏差。\n\n我们工作的过程就是一个不停拿结果的过程，首先你得有一个明确的目标作为参考，知道自己要拿什么结果、什么是好的结果，最终的交付与开始的目标间差值越小，结果才会越好。\n\n那怎么才能确定目标呢？为了回答这个问题，你要知道“定目标”的三个关键步骤：怎么解读目标、制定目标、传递目标。自上而下确定目标，自下而上完成目标。\n\n\n怎么解读目标？\n\n解读目标就是要确保自己做的事儿和公司的方向一致，顺势而为，没有走偏（这里的“势”就是公司的战略和目标），正因为有了目标才有根据目标制定的 KPI，才会有围绕目标的执行动作和最终取得的结果。\n\n那假设一个公司今年的一个目标是“交易 GMV 要提高 30%”，面对这样一个目标，你要怎么来解读呢？\n\n解读目标有一个具体的流程，以阿里为例，阿里会将使命、愿景、价值观作为内核驱动，结合目前的公司状况形成战略，各 BU、部门根据战略拆解自己的组织目标，然后目标逐级拆解并下发，最终形成各部门可衡量的 KPI；接下来进行执行环节，最终以结果交付进行考核验收。\n\n这个流程确保组织目标可以拆分到各层级并且落地，是一个上下同欲、力出一孔的过程：\n\n\n\n目标解读大图和解读自问点\n\n不过，这对于研发 TL 很有挑战，因为要解读业务并且做好技术与业务之间的平衡。而且“交易 GMV 要提高 30%”又比较虚，当研发 TL 看到类似的战略时，不知道怎么和自己负责的系统、日常代码建立起联系。不要急，目标不是一句口号，它是一个个层层拆解、递进的过程。说白了，解读目标是把公司的方向变成你的方向，把上一层的问题转变成你可以改变的问题。\n\n\n\n所以面对“交易 GMV 要提高 30%”，你一定要在业务、运营、产品技术团队上进一步拆解，通过一系列的分析、数据、讨论、决策后，这个目标会被拆解为几个可以理解、执行的目标，比如：\n\n * 新客增长 200%；\n\n * 老客流失率降低 30%；\n\n * 营销支出提高 50%，但是人均营销成本降低 20%。\n\n * ……\n\n接下来就是围绕这些目标进一步拆分，一直到你的团队可以执行发力的程度。\n\n比如新客增长可能涉及新的活动玩法、分销模式、渠道打通等，这背后的实现都要靠技术和产品的支持。可能你会问了：既然业务以及老板们敲定好了，我是不是只要保证需求做得又快又好就行了。并不是，因为技术团队的目标并不是“业务对研发交付的满意度提高 100%”！\n\n当然了，确保目标解读正确有很多技巧和方法。根据目标逐层分解的特性，可以考虑四个方面。\n\n 1. 你的主管，确定你老板的目标是什么；\n\n 2. 你自身所在的团队、团队的成员们，根据团队情况确定现状；\n\n 3. 与你紧密合作的上下游（研发），比如你是做订单系统的，那么支持属性很重，商户、导购、用户很多研发团队都是你的上下游关联方；\n\n 4. 直接对口的业务与产品，这是业务目标拆解、业务痛点、客户诉求的直接来源方。\n\n\n\n目标解读的关键点示意图\n\n在我看来，这四点中主管层是相对比较重要的，主管（代表的是公司层面）作为你以及你团队结果交付的重要裁判，你要完全确定自己和他的目标一致，而且你的信息来源是从上往下得来的，由上而下的信息更加接近公司战略核心。通过反复对焦，将所有模糊、分歧的点都讲明白，讲到你清楚地知道为什么有这样的目标为止。\n\n除此之外，好的对焦一定是有互动的，你要充分去拿到信息，给后面的所有决策作为依据，所以我建议你多了解团队情况、客户需求、上下游合作方的意见，这样一来，在你理解目标、跟主管对齐目标时会有的放矢。\n\n\n怎么制定目标？\n\n当你充分解读了公司和上级团队的目标后，就要制定你自己、团队和团队成员的目标了。在这个阶段，核心点就在于把你的方向变成团队、成员的目标。\n\n很多同学会把解读目标当作了解目标的过程，设定目标时继续按照自己的想法或者被其他外在因素影响。而且现实总比理论要复杂一些，因为你考虑问题时会带有主观性，比如趋利避害地按照“去年怎么定，今年就在这个基础上预估一个可以实现的目标来制定目标”这样做虽然不会出彩，但肯定不会出错。\n\n可这就犯了一个很明显的错误，因为制定目标并不是制定自己的 KPI ，而是团队整体的目标，要从整体出发，而且，主管既然赋予了你角色肯定是期望你能做出更好的结果。如果以目前制定的目标为导向，对组织发展贡献的力量就很有限了。\n\n那么怎么设定目标更好呢？ 我认为可以结合 4 个关键点来考虑。\n\n * “短长”结合：事情分轻重缓急，你一直盯着“急”和“重”，“轻”和“缓”的事情就会转变成“重”和“急”，进入死循环。所以长短期目标是有关联的，达成短期目标是为了长期规划做铺垫，逐步达成一个大目标，但往往很多同学会注重短期目标，忽略长期目标。\n\n * 要足够聚焦：一些同学在定目标的时候往往会列出十几个关键问题，觉得把问题都解决掉，团队就“干净了”。可这样做反而会因为资源、精力、时间不够聚焦，导致每一个点都没有解决到位。我建议关键目标不要超过 3 个，最多控制在 5 个以内，要找最有客户价值、对公司战略最有帮助的点，目标越少、方向越清晰，当问题发生或者需要判断时越容易做决策，在有限的时间内做出更好的结果。\n\n * 要有足够的挑战：系统可用性假如去年是 3 个 9，今年考虑业务会发展保守起见还是力保 3 个 9，这样的目标挑战性就不足，也无法体现技术的价值。这个度量是很考验你的，一旦极端就会出现过犹不及的情况。就好比考试前，你用希望考 80 分的努力可能实际只能考 60 分，但如果告诉你 99 分以下都是不及格，可能你就干脆放弃了。\n\n * 要让组织有沉淀、个人有成长：很多同学在目标制定特别容易忽略这一点，但其实制定目标的过程，也是一个让成员不断打磨自己的过程。通过一个个目标的完成，让参与的同学得到个人能力的提升，未来可以承担更大的职责，组织也在这个过程做能力的积累与沉淀。\n\n也许你会觉得这四个点比较简单，但是往往越简单的道理，在做起来的时候就比较难。你可以结合这四点，围绕目标和团队一起讨论策略与打法，将目标拆解成几个关键任务，明确到责任人，总结一下就是：定策略、拆任务、细到人。然后结合 KPI 或者 OKR 等考核方式，进一步落到每个成员的结果考核上，目标的达成也就是成果的交付，一定要有考核。不过，需要提醒你的是，KPI 不完全等于目标，它是目标的拆解与落地可执行的指标。\n\n\n怎么传递目标？\n\n在制定完目标之后，就要传递目标了，因为你要让大家力出一孔，有劲儿往一块使。这个阶段的核心是让员工把你的方向和目标变成自己的目标，最终走到同一个终点。\n\n可往往期望和现实会存在冲突，因为大部分的开发者是不关注公司战略和目标的。你不妨问一下团队伙伴看看有多少人能正确且清晰地回答出下面这些问题：\n\n * 公司今年的战略是什么？\n\n * 你所在的大部门重点项目是什么？\n\n * 你们小团队的 KPI 是什么？\n\n * 你老板的 KPI 是什么？\n\n很多人都回答不上来，或者回答得不准确。原因有两点，一个是很多Leader 根本没有意识到要传递目标，默认确定目标之后，大家都知道了；第二个原因是很多同学只是单纯地复述目标是什么，但是却没有强调目标是怎么来的，没有把目标和团队成员的获益点关联起来，让团队成员了解自己的 KPI 为什么要这么设计。\n\n\n\n常见的目标传递过程\n\n大部分情况下，你会发现信息不对等、传递过程中的损失、个人理解的差异，直接导致不是所有人都清楚“我们要往哪去”。\n\n我以前也犯过类似的错误，当我察觉到很多同学对部门目标不清楚时，发全员邮件、组织全员大会、Review 大家的 KPI 设定这些事儿我也都干过，但是收效甚微，原因在于姿势不对。\n\n * 首先这些沟通方式有距离感，不利于我与大家的情感传递，也没有营造出一个轻松接收大家反馈的场子；\n\n * 再者我只是告诉大家有这样的目标，而没有讲清楚这些目标是怎么来的，这些结论背后的思考、 Why 我没有很好地讲出来。因此大家光看一个结论自然难以理解。\n\n那合适的传递目标的方式是什么样的呢？ 我建议硬传递和软传递相结合，注意场合和时机。\n\n刚刚我提到，我会用邮件和全员大会的形式进行目标的传递，但是效果并不好。不过这也要结合你自己团队现状，在一些必要的情况下，你其实是需要这两种硬传递的方式来传递目标的，因为你需要有一个公开的场合让全员先知道有这么一回事。\n\n除了硬传递，你还可以在合适的时机组织小的场子去聊这件事儿，聊一聊现在我们团队的目标是什么样的？这个目标是怎么来的，即将面临的困难又是什么，比如在团建里策划这个环节，当然聊得可以自由一些。\n\n最重要的是，我们不要把管理动作神化、复杂化，你可以参照图中这几点来传递目标。\n\n\n\n目标传递的关键点\n\n最后，目标的传递是一个连贯的动作，要落到日常的管理动作、重点项目与任务、KPI 的过程管理这些平日的点滴中。目标要反复讲，要经常对焦，重要的事儿，3 遍是不够的，要说“300 遍！”。\n\n\n总结\n\n所谓的方向与目标就是：你要往哪去，你要走多远，你要走到哪。清晰的目标就好比沙漠中的指南针，让你能比其他人更快找到水源并生存下去，今天这节课，我提醒你注意这样几点：\n\n * 解读目标非常重要，切勿陷入极端，要么不解读，要么领导说什么就是什么。\n\n * 制定目标一定要够聚焦，但切勿只考虑眼前，注意“长短结合”。\n\n * 注意目标传递，要充分考虑团队成员的感受，选取合适的方式。\n\n也许你会发现，目标的制定只是拿结果的起点，而拿结果也只是整个团队里的一部分。我会在专栏中不断强调这一理念：管理是一套逻辑框架，每一部分都不是孤立存在而是彼此关联的，同时其思想与动作需要具备连贯性以形成完整的管理闭环，所以我希望你也能秉持这样的理念去学习接下来的内容。\n\n\n\n最后，留个问题吧，在目标对齐这件事上，你觉得你的上级最让你难受的是什么？为什么会这样？以及你是如何将目标传递给你的团队成员的？分享出来，我在留言区等你。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **升：\n\n> 目前遇到的问题经常是不知道公司，甚至部门今年的战略和目标是什么，领导也没有什么解读。很是迷茫，谢谢讲述这些，知道接下来该怎么做了。\n\n#     讲师回复：\n\n>     有这种感觉是常态，一般公司也很难像五年计划一样那么精确，核心是负责人有一个主动找目标和定义目标的意识\n\n# **2900：\n\n> 最难受的是，第一，目标太高，拿手榴弹去炸航母。第二，曾经对齐的目标，后来又改变了，总有新想法\n\n#     讲师回复：\n\n>     有这种感觉是常态，一般公司也很难像五年计划一样那么精确，核心是负责人有一个主动找目标和定义目标的意识\n\n# **士：\n\n> 1．讲两个最常见的 1）目标比较抽象，没有办法把握准确 2）没有办法发挥出优势来这两个问题也比较好解决；问题1），原因一般是 上级时间不够上级自己没想清楚/自己信息的摄入不够；解决方法：需要有比较好的沟通渠道和向上管理，增加信息摄入，在上级想不清楚的时候，可以增加探讨和选择项来确认目标问题2），原因一般是 上级对自己了解不够/目前没有合适的岗位解决方法：主动表达自己的诉求或者优势，岗位本身并没有限制，限制是自己的心里设限，打开心里天窗后可以通过一些事项进行引导和反馈2．1）沟通渠道：硬渠道：周会、面谈、绩效等； 软渠道：日常交流，想法和行为中 2）传递方式：广播式（比如公开培训、演讲），交流探讨（增加周会议题等），认知反馈（可以一线员工讲一些自己的理解）\n\n# **叔叔：\n\n> 公司目标是大而泛的，而解读目标转换为个人和团队的目标最为重要，这样才能体现个人价值，让团队体现价值。\n\n#     讲师回复：\n\n>     员工更关注个人价值，与其浪费时间去画大家都不信的饼，不如找到或建立团队价值与员工价值之间的关联",normalizedContent:"今天我们正式进入第二个模块，这一讲我想与你分享管理第一板斧拿结果的第一招，定目标。\n\n这几年，我观察过很多刚开始做技术 leader 的同学，有一些因为技术扎实、为人友善、熟悉系统与业务等原因成为团队 leader，但是角色转变后被各种产品需求会、技术方案会、汇报会搞得焦头烂额，然后还要安排团队成员的工作，协调跨部门协作的事务，失去了 coding 的“硬核时间”，忙得晕头转向，能力不但没得到提升，最终交付的项目也没有得到老板的肯定。\n\n我也曾有过这种泥足深陷的感觉。本来，在没有介入管理职能之前，每个人管理好自己就可以了，需要考虑的都是围绕自己的事情，方向和维度都比较垂直。角色转变后，从解决自己的问题变为要解决团队的问题，要解决的问题也由单点变成多点，在这个过程中，你很容易抓不住核心点，最终取得的结果自然会跟预期产生偏差。\n\n我们工作的过程就是一个不停拿结果的过程，首先你得有一个明确的目标作为参考，知道自己要拿什么结果、什么是好的结果，最终的交付与开始的目标间差值越小，结果才会越好。\n\n那怎么才能确定目标呢？为了回答这个问题，你要知道“定目标”的三个关键步骤：怎么解读目标、制定目标、传递目标。自上而下确定目标，自下而上完成目标。\n\n\n怎么解读目标？\n\n解读目标就是要确保自己做的事儿和公司的方向一致，顺势而为，没有走偏（这里的“势”就是公司的战略和目标），正因为有了目标才有根据目标制定的 kpi，才会有围绕目标的执行动作和最终取得的结果。\n\n那假设一个公司今年的一个目标是“交易 gmv 要提高 30%”，面对这样一个目标，你要怎么来解读呢？\n\n解读目标有一个具体的流程，以阿里为例，阿里会将使命、愿景、价值观作为内核驱动，结合目前的公司状况形成战略，各 bu、部门根据战略拆解自己的组织目标，然后目标逐级拆解并下发，最终形成各部门可衡量的 kpi；接下来进行执行环节，最终以结果交付进行考核验收。\n\n这个流程确保组织目标可以拆分到各层级并且落地，是一个上下同欲、力出一孔的过程：\n\n\n\n目标解读大图和解读自问点\n\n不过，这对于研发 tl 很有挑战，因为要解读业务并且做好技术与业务之间的平衡。而且“交易 gmv 要提高 30%”又比较虚，当研发 tl 看到类似的战略时，不知道怎么和自己负责的系统、日常代码建立起联系。不要急，目标不是一句口号，它是一个个层层拆解、递进的过程。说白了，解读目标是把公司的方向变成你的方向，把上一层的问题转变成你可以改变的问题。\n\n\n\n所以面对“交易 gmv 要提高 30%”，你一定要在业务、运营、产品技术团队上进一步拆解，通过一系列的分析、数据、讨论、决策后，这个目标会被拆解为几个可以理解、执行的目标，比如：\n\n * 新客增长 200%；\n\n * 老客流失率降低 30%；\n\n * 营销支出提高 50%，但是人均营销成本降低 20%。\n\n * ……\n\n接下来就是围绕这些目标进一步拆分，一直到你的团队可以执行发力的程度。\n\n比如新客增长可能涉及新的活动玩法、分销模式、渠道打通等，这背后的实现都要靠技术和产品的支持。可能你会问了：既然业务以及老板们敲定好了，我是不是只要保证需求做得又快又好就行了。并不是，因为技术团队的目标并不是“业务对研发交付的满意度提高 100%”！\n\n当然了，确保目标解读正确有很多技巧和方法。根据目标逐层分解的特性，可以考虑四个方面。\n\n 1. 你的主管，确定你老板的目标是什么；\n\n 2. 你自身所在的团队、团队的成员们，根据团队情况确定现状；\n\n 3. 与你紧密合作的上下游（研发），比如你是做订单系统的，那么支持属性很重，商户、导购、用户很多研发团队都是你的上下游关联方；\n\n 4. 直接对口的业务与产品，这是业务目标拆解、业务痛点、客户诉求的直接来源方。\n\n\n\n目标解读的关键点示意图\n\n在我看来，这四点中主管层是相对比较重要的，主管（代表的是公司层面）作为你以及你团队结果交付的重要裁判，你要完全确定自己和他的目标一致，而且你的信息来源是从上往下得来的，由上而下的信息更加接近公司战略核心。通过反复对焦，将所有模糊、分歧的点都讲明白，讲到你清楚地知道为什么有这样的目标为止。\n\n除此之外，好的对焦一定是有互动的，你要充分去拿到信息，给后面的所有决策作为依据，所以我建议你多了解团队情况、客户需求、上下游合作方的意见，这样一来，在你理解目标、跟主管对齐目标时会有的放矢。\n\n\n怎么制定目标？\n\n当你充分解读了公司和上级团队的目标后，就要制定你自己、团队和团队成员的目标了。在这个阶段，核心点就在于把你的方向变成团队、成员的目标。\n\n很多同学会把解读目标当作了解目标的过程，设定目标时继续按照自己的想法或者被其他外在因素影响。而且现实总比理论要复杂一些，因为你考虑问题时会带有主观性，比如趋利避害地按照“去年怎么定，今年就在这个基础上预估一个可以实现的目标来制定目标”这样做虽然不会出彩，但肯定不会出错。\n\n可这就犯了一个很明显的错误，因为制定目标并不是制定自己的 kpi ，而是团队整体的目标，要从整体出发，而且，主管既然赋予了你角色肯定是期望你能做出更好的结果。如果以目前制定的目标为导向，对组织发展贡献的力量就很有限了。\n\n那么怎么设定目标更好呢？ 我认为可以结合 4 个关键点来考虑。\n\n * “短长”结合：事情分轻重缓急，你一直盯着“急”和“重”，“轻”和“缓”的事情就会转变成“重”和“急”，进入死循环。所以长短期目标是有关联的，达成短期目标是为了长期规划做铺垫，逐步达成一个大目标，但往往很多同学会注重短期目标，忽略长期目标。\n\n * 要足够聚焦：一些同学在定目标的时候往往会列出十几个关键问题，觉得把问题都解决掉，团队就“干净了”。可这样做反而会因为资源、精力、时间不够聚焦，导致每一个点都没有解决到位。我建议关键目标不要超过 3 个，最多控制在 5 个以内，要找最有客户价值、对公司战略最有帮助的点，目标越少、方向越清晰，当问题发生或者需要判断时越容易做决策，在有限的时间内做出更好的结果。\n\n * 要有足够的挑战：系统可用性假如去年是 3 个 9，今年考虑业务会发展保守起见还是力保 3 个 9，这样的目标挑战性就不足，也无法体现技术的价值。这个度量是很考验你的，一旦极端就会出现过犹不及的情况。就好比考试前，你用希望考 80 分的努力可能实际只能考 60 分，但如果告诉你 99 分以下都是不及格，可能你就干脆放弃了。\n\n * 要让组织有沉淀、个人有成长：很多同学在目标制定特别容易忽略这一点，但其实制定目标的过程，也是一个让成员不断打磨自己的过程。通过一个个目标的完成，让参与的同学得到个人能力的提升，未来可以承担更大的职责，组织也在这个过程做能力的积累与沉淀。\n\n也许你会觉得这四个点比较简单，但是往往越简单的道理，在做起来的时候就比较难。你可以结合这四点，围绕目标和团队一起讨论策略与打法，将目标拆解成几个关键任务，明确到责任人，总结一下就是：定策略、拆任务、细到人。然后结合 kpi 或者 okr 等考核方式，进一步落到每个成员的结果考核上，目标的达成也就是成果的交付，一定要有考核。不过，需要提醒你的是，kpi 不完全等于目标，它是目标的拆解与落地可执行的指标。\n\n\n怎么传递目标？\n\n在制定完目标之后，就要传递目标了，因为你要让大家力出一孔，有劲儿往一块使。这个阶段的核心是让员工把你的方向和目标变成自己的目标，最终走到同一个终点。\n\n可往往期望和现实会存在冲突，因为大部分的开发者是不关注公司战略和目标的。你不妨问一下团队伙伴看看有多少人能正确且清晰地回答出下面这些问题：\n\n * 公司今年的战略是什么？\n\n * 你所在的大部门重点项目是什么？\n\n * 你们小团队的 kpi 是什么？\n\n * 你老板的 kpi 是什么？\n\n很多人都回答不上来，或者回答得不准确。原因有两点，一个是很多leader 根本没有意识到要传递目标，默认确定目标之后，大家都知道了；第二个原因是很多同学只是单纯地复述目标是什么，但是却没有强调目标是怎么来的，没有把目标和团队成员的获益点关联起来，让团队成员了解自己的 kpi 为什么要这么设计。\n\n\n\n常见的目标传递过程\n\n大部分情况下，你会发现信息不对等、传递过程中的损失、个人理解的差异，直接导致不是所有人都清楚“我们要往哪去”。\n\n我以前也犯过类似的错误，当我察觉到很多同学对部门目标不清楚时，发全员邮件、组织全员大会、review 大家的 kpi 设定这些事儿我也都干过，但是收效甚微，原因在于姿势不对。\n\n * 首先这些沟通方式有距离感，不利于我与大家的情感传递，也没有营造出一个轻松接收大家反馈的场子；\n\n * 再者我只是告诉大家有这样的目标，而没有讲清楚这些目标是怎么来的，这些结论背后的思考、 why 我没有很好地讲出来。因此大家光看一个结论自然难以理解。\n\n那合适的传递目标的方式是什么样的呢？ 我建议硬传递和软传递相结合，注意场合和时机。\n\n刚刚我提到，我会用邮件和全员大会的形式进行目标的传递，但是效果并不好。不过这也要结合你自己团队现状，在一些必要的情况下，你其实是需要这两种硬传递的方式来传递目标的，因为你需要有一个公开的场合让全员先知道有这么一回事。\n\n除了硬传递，你还可以在合适的时机组织小的场子去聊这件事儿，聊一聊现在我们团队的目标是什么样的？这个目标是怎么来的，即将面临的困难又是什么，比如在团建里策划这个环节，当然聊得可以自由一些。\n\n最重要的是，我们不要把管理动作神化、复杂化，你可以参照图中这几点来传递目标。\n\n\n\n目标传递的关键点\n\n最后，目标的传递是一个连贯的动作，要落到日常的管理动作、重点项目与任务、kpi 的过程管理这些平日的点滴中。目标要反复讲，要经常对焦，重要的事儿，3 遍是不够的，要说“300 遍！”。\n\n\n总结\n\n所谓的方向与目标就是：你要往哪去，你要走多远，你要走到哪。清晰的目标就好比沙漠中的指南针，让你能比其他人更快找到水源并生存下去，今天这节课，我提醒你注意这样几点：\n\n * 解读目标非常重要，切勿陷入极端，要么不解读，要么领导说什么就是什么。\n\n * 制定目标一定要够聚焦，但切勿只考虑眼前，注意“长短结合”。\n\n * 注意目标传递，要充分考虑团队成员的感受，选取合适的方式。\n\n也许你会发现，目标的制定只是拿结果的起点，而拿结果也只是整个团队里的一部分。我会在专栏中不断强调这一理念：管理是一套逻辑框架，每一部分都不是孤立存在而是彼此关联的，同时其思想与动作需要具备连贯性以形成完整的管理闭环，所以我希望你也能秉持这样的理念去学习接下来的内容。\n\n\n\n最后，留个问题吧，在目标对齐这件事上，你觉得你的上级最让你难受的是什么？为什么会这样？以及你是如何将目标传递给你的团队成员的？分享出来，我在留言区等你。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **升：\n\n> 目前遇到的问题经常是不知道公司，甚至部门今年的战略和目标是什么，领导也没有什么解读。很是迷茫，谢谢讲述这些，知道接下来该怎么做了。\n\n#     讲师回复：\n\n>     有这种感觉是常态，一般公司也很难像五年计划一样那么精确，核心是负责人有一个主动找目标和定义目标的意识\n\n# **2900：\n\n> 最难受的是，第一，目标太高，拿手榴弹去炸航母。第二，曾经对齐的目标，后来又改变了，总有新想法\n\n#     讲师回复：\n\n>     有这种感觉是常态，一般公司也很难像五年计划一样那么精确，核心是负责人有一个主动找目标和定义目标的意识\n\n# **士：\n\n> 1．讲两个最常见的 1）目标比较抽象，没有办法把握准确 2）没有办法发挥出优势来这两个问题也比较好解决；问题1），原因一般是 上级时间不够上级自己没想清楚/自己信息的摄入不够；解决方法：需要有比较好的沟通渠道和向上管理，增加信息摄入，在上级想不清楚的时候，可以增加探讨和选择项来确认目标问题2），原因一般是 上级对自己了解不够/目前没有合适的岗位解决方法：主动表达自己的诉求或者优势，岗位本身并没有限制，限制是自己的心里设限，打开心里天窗后可以通过一些事项进行引导和反馈2．1）沟通渠道：硬渠道：周会、面谈、绩效等； 软渠道：日常交流，想法和行为中 2）传递方式：广播式（比如公开培训、演讲），交流探讨（增加周会议题等），认知反馈（可以一线员工讲一些自己的理解）\n\n# **叔叔：\n\n> 公司目标是大而泛的，而解读目标转换为个人和团队的目标最为重要，这样才能体现个人价值，让团队体现价值。\n\n#     讲师回复：\n\n>     员工更关注个人价值，与其浪费时间去画大家都不信的饼，不如找到或建立团队价值与员工价值之间的关联",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"追过程：如何用 PDCA 做过程管理？",frontmatter:{title:"追过程：如何用 PDCA 做过程管理？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/fb54bb/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/10.%20%20%E8%BF%BD%E8%BF%87%E7%A8%8B%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%A8%20PDCA%20%E5%81%9A%E8%BF%87%E7%A8%8B%E7%AE%A1%E7%90%86%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/10.  追过程：如何用 PDCA 做过程管理？.md",key:"v-164c8fec",path:"/pages/fb54bb/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4662}],headersStr:"精选评论",content:"上节课我们已经知道了怎么定目标，那么接下来要解决的问题就是“怎么达成目标”。我见过不少的技术 Leader（包括我在内），在刚开始做管理时，往往在做一个任务或项目的过程中都是靠经验或者直觉去把控整个过程。\n\n比如技术类的重构项目，诉求并不是直接来源于业务，所以也就没有业务节奏的影响，往往是技术团队基于技术规划（比如提高代码质量，引入新技术、新框架提升整个系统）自发地做一些调整。如果项目较小（ 1~2 周），你凭借个人经验和直觉可能会顺利完成，但项目规模较大时，结果就未必可控，有可能往坏的方向发展，比如：\n\n * 范围越做越大， 本来想解决一个问题，但是在项目过程中，不断识别出关联问题，导致原本计划一个月的重构可能延续半年甚至更久；\n\n * 交付质量不理想， 项目节奏缺少关键点的把控，加之任务安排不合理，项目节奏一拖再拖，交付质量也随之下滑。\n\n总而言之，没有方法也可以做过程管理，但只有掌握过程管理的方法，才会尽可能减少事务往不好方向发展的波动，从而更轻松、更低风险、更稳妥地去拿到结果，让一切尽在掌控。\n\n\n什么是过程管理？\n\n要想探讨这个问题，我想先抛出我的管理理念（也是“管理者三板斧”的核心理念），在我看来，管理就是追求事务的可持续发展，而想要达成这个目标有两个基本点：\n\n * 管理动作要形成可持续迭代的闭环；\n\n * 管理动作足够简单到可以复制和个性化升级。\n\n\n\n过程管理当然也遵循这个理念。比如你这次 A 项目做得很好，下次做 B 项目时能否依然做好？在 A 项目中发现问题、解决问题的方法和思路，是否可以在 B 项目中沿用？\n\n这就是方法的形成与积累。所以根本上说，过程管理是为了让你的想法、灵感、不稳定的发挥逐渐规律化，可以持续迭代被你应用，它的本质就是希望结果越来越好，让你原本靠运气或者模糊经验得来的成功可以被复制，让你在项目中灵光一闪的 Idea 变成你的常规能力。\n\n而且过程管理也是在把管理者处理问题的一些方法，渐渐地“套路化”，形成可以灵活变换应用到不同的场景中的方法体系。比如你抽象总结了一套体系“ ABC ”，针对 D 场景时，你觉得体系中的“ A ”是没有必要的，其实你就可以省略“ A ”,你觉得缺少了“ F ”，也可以添上。\n\n\nPDCA 模型\n\n我相信，你肯定接触过很多过程管理的方法，不同的理论框架是否好用，这个问题见仁见智，而我的推荐标准只有一个，那就是“足够简单、直接、易用”，因为如果某一个方法太过复杂，实操性肯定不强，假设这个管理方法有 10 条标准，组成比较复杂，那么它的容错率就会降低，因为如果你有一条没有做好，整个体系的矛盾点就会产生，在落地时，理论和现实就会存在冲突。\n\n而 PDCA 模型就胜在简单、实用，还能让我根据自己的习惯和积累不断优化。\n\n\n\n * Plan（定计划）：围绕着目标明确里程碑，确定关键节点，与执行的员工达成共识。\n\n * Do（做执行）：多给员工空间、多走动、多观察、少干预，放手而非放任，你也不能置身事外。\n\n * Check（勤检查）：狠抓关键节点做检查、问进展、问困难、给建议、做辅导、协调资源。\n\n * Action（复盘调优）：小事尽快复盘、大事分阶段复盘、事后全面复盘，抓住每一次提升和优化的机会。\n\n上面四条是 PDCA 的关键记忆点，言简意赅方便你记忆。按照 PDCA 的模型来看，很多 Leader 比较注重 D 和 C ，因为很多初级管理者为了证明自己，关注点在能够跟结果迅速产生关联的动作上， 而不是认真地思考整件事（事情的背景、关键节点、里程碑……）。\n\n除此之外，C 和 D 一样，同是执行层，而执行往往比分析和决策要容易得多。 P 和 A 就被很多 同学忽视了，尤其是 A ，存在感并不强。这跟互联网公司普遍追求持续迭代、快速验证的工作模式有关，我们其实并没有关注很多项目为什么失败，错了再继续下一个项目，但这样一来久而久之很容易丧失持续迭代自己的能力。\n\n说了这么多，你要怎么用 PDCA 做过程管理呢？我们先来还原一个案例，然后再逐点分析。\n\n\n如何用 PDCA 做过程管理？\n\n1.案例还原\n\n李明亮是一家教育公司研发中心的技术总监，前两天，公司启动了 S 级的大促项目，李明亮的团队接了其中 3 个子项目：A、B、C，那么他要怎么分配自己的时间、精力、抓住重点把控过程呢？这是第一个问题。\n\n子项目 A （对交易系统进行改造）最复杂，风险也最高，需要对旧的核心系统做大量的改造，可旧的核心系统已经运行了好几年，负责人也迭代了好几次，这次要让谁负责呢？是团队目前能力最强的小王，还是对旧系统比较熟悉的老张？为了保证顺利交付，他想从方案设计、资源协调、落地执行、上线安排全程的深度参与，不知道是否合适，这是他遇到的第二个问题。\n\n子项目 B（增加对新营销玩法的支持） 难度适中，李明亮交给了刚进入部门的小宇，小宇主观意识非常强，给出了很多的方案，一直希望李明亮放手让自己去试，李明亮犹豫了。这是他遇到的第三个问题。\n\n子项目 C （根据压测瓶颈联合多团队进行系统调优）难度低，但是琐碎，涉及外部团队，老马虽然沉稳，但是沟通能力差，李明亮不知道是否让他担任这个工作，遇到了第四个难题。\n\n他计划在确定人选之后，每周五与各个项目负责人 OneOne 项目进展，每两周三个项目一起做整体进展的对焦和复盘，但因为日常也在了解情况，目前节奏很紧张，例会该取消吗？这是他遇到的最后一个问题。\n\n2.思路分析\n\n如果是你遇到类似的问题，怎么解决这 5 个问题呢？\n\n在 08 讲我提到，目标的制定要“定策略、拆任务、细到人”，Plan 的重点就是把复杂的任务或项目拆解出它的关键节点与里程碑，这样你才能确认自己应该跟进什么、什么时候跟进、跟进到什么程度（以一般的技术项目为例，很多同学眼中最基本的里程碑就是各个开发的关键节点：方案确定，开始编码，进入测试，系统上线……）。\n\n总的来说，P 需要结合具体的实际场景情况而定，比如 DB 的设计、服务的设计、上线的方案，不同的项目中可能未必都是关键节点，你要看人、看项目具体分析。\n\n那么在前两个问题中，李明亮应该重点抓 D （执行）和 C （检查）：多给空间勤观察、狠抓节点做辅导。因为公司级项目目标比较清晰，重点在执行过程的把控上，并且因为几个项目同步进行，李明亮要保证的是三个项目的结果，自然无法完全 ALL IN 到某一个项目中。\n\n所以，他一方面要放手给员工完成 Plan 的时间和空间，根据项目需要来确定会议的频次，确保信息及时且充分地对焦。另一方面要按照约定检查节点、对不同的项目和员工，要采取不同的方式。\n\n子项目 A 既然难度最大，改造也是面向新系统和未来发展考虑，所以如果我是李明亮的话，会选择能力最强的小王来主导，最熟悉的老张为辅助，然后再结合最初定义好的关键节点，适当放手。\n\n因为计划实施的主角是员工，过度干预会让员工束手束脚，所以给负责具体任务的同学足够的时间和空间，Leader 少干预，日常以观察和帮助为主。**在这里，比较重要的一点就是在于你怎么拿捏干预的度，这其实是你管理动作的核心，**我建议你在项目关键节点（P）的基础上关注团队伙伴的动态，比如项目进展中遇到的问题、团队成员的工作状态等。\n\n很多能力和经验是历练出来的，只要过程可控，过程中走一些弯路也未必是坏事，要允许犯错。但是你要注意，放手不等于放任，更不等于不闻不问，你依然要对最终的结果负责。\n\n针对第三个问题，既然子项目 B 的小宇能力稍弱，李明亮就应该多关注细节，了解进展，给予帮助，放手是对结果的不负责。你要在 Check 的环节多下功夫，才能确保项目和目标的一致与达成，一定要定期、多维度、较真地 Check！（比如，可以借助会议和邮件做好关键节点的把控与对焦，同时也将信息最大程度打通，那怎么用好它们就比较关键了。）以会议为例：\n\n\n当然了，有的时候我们在 Check 时也会走进一些误区，比如：\n\n * 到了里程碑和关键点时间才进去 Check，日常对进展不关注、不跟进；\n\n * 把追杀结果当作追过程，与员工不讲 Why，不讲方法，这是“管理者”的常见病。团队 Leader 要清楚，成员需要的是你的帮助和支持，而不是简单的情绪发泄；\n\n * 关键动作不够连续连贯，做出决策或者给出解决办法之后就默认问题已经解决，后续缺少跟进。\n\n第四个问题比较容易解决。阿里有一句土话，叫“借事修人，借人成事”。项目 C 的难度和风险小就意味着更加可控，老马比较合适，针对沟通的问题，你可以驱动并帮助他在这个项目中得到锻炼，同时保持足够的关注确保整体进展与结果。\n\n最后一个问题， 如果项目节奏紧张、你日常跟进也比较到位，那么可以取消周会。但是复盘会依然需要召开，因为前者的作用更多是信息同步对焦，它可以融入日常，而后者是将三个项目放在一起看整体，思考过程中的得失好坏，这是对团队和项目一个提炼沉淀的动作。\n\n而Action的核心在于建立循环，复盘优化。 没有一成不变的计划与执行，只有不断调整的行动力。具体要怎么做呢？可以参考下面这些关键点。\n\n * 复盘前：复盘前的核心在于思考复盘的目的和产出是什么。借此，你才可以明确复盘会议主要会聊些什么，哪些人会参加。\n\n * 复盘中：自省是复盘会的基调，复盘就一个目的“找到团队的不足加以改进，以便在未来取得更好的结果”。所以每个人没必要甩锅，也没必要全盘否定。在复盘的过程中，一定要把问题找准，内部对齐，达成所有人的共识。\n\n * 复盘后：会议有结论，结论有计划，计划有责任人，责任人有行动，要建立机制保证在复盘会上讨论出的结论能够落地。\n\n总的来说，小事儿尽快复盘，借此向团队成员传授自己的经验；大事儿分阶段复盘，抓住重点矛盾，推动事情的顺利发展而非追求完美；事后全面复盘，不管对个人还是团队，找自己的问题都是 ROI 最高的方式，找到问题的一方才有改善提升的可能。\n\n\n小结\n\n今天，我结合李明亮的案例讲了对过程管理的理解，以及PDCA模型的认知和具体的应用技巧。我日常会用 PDCA 模型处理各类事务性工作，因为它不复杂，可以以较低的成本，更有条理地处理日常繁杂的工作，希望这个模型也可以是你做过程管理的利器，用它将管理方法体系化，使结果越变越好。\n\n总的来说，这节课我想强调这样三个重点：\n\n 1. 目标不会自己长腿走向终点，你一定要做好过程管理以取得可靠的结果。\n\n 2. 追过程不意味着事无巨细都要做，追哪些、什么时候追、追到什么程度才是你更应该关心的。\n\n 3. 复盘是 PDCA 管理动作中的闭环，如果每次都能提高一点点，长期积累的变化就很大了。\n\n最后，我想说PDCA不只在管理上有用，它还是一种能够帮你应对各种问题的思考框架，也适用于项目处理，日常生活安排（比如旅游、购物等）。\n\n在我看来，PDCA 这个管理方法遵循了个人的本能，它会将你处理事情的本能更加条理化、清晰化。所以我希望你能举一反三，把 PDCA 这个思考框架融入你生活的方方面面，既提高管理效率，也借此提高生活质量。\n\n最后，你不妨想一想在生活和工作中，哪些事你认为利用 PDCA 的方式来管理会有更好的结果，分享出来，我在留言区等你。\n\n----------------------------------------\n\n\n# 精选评论\n\n# axot：\n\n> 最好能有个具体的例子 特别是Check时候怎么跟进 用什么工具之类的 具体该如何着手还有点模糊\n\n# *旻：\n\n> 戴明环真的很棒",normalizedContent:"上节课我们已经知道了怎么定目标，那么接下来要解决的问题就是“怎么达成目标”。我见过不少的技术 leader（包括我在内），在刚开始做管理时，往往在做一个任务或项目的过程中都是靠经验或者直觉去把控整个过程。\n\n比如技术类的重构项目，诉求并不是直接来源于业务，所以也就没有业务节奏的影响，往往是技术团队基于技术规划（比如提高代码质量，引入新技术、新框架提升整个系统）自发地做一些调整。如果项目较小（ 1~2 周），你凭借个人经验和直觉可能会顺利完成，但项目规模较大时，结果就未必可控，有可能往坏的方向发展，比如：\n\n * 范围越做越大， 本来想解决一个问题，但是在项目过程中，不断识别出关联问题，导致原本计划一个月的重构可能延续半年甚至更久；\n\n * 交付质量不理想， 项目节奏缺少关键点的把控，加之任务安排不合理，项目节奏一拖再拖，交付质量也随之下滑。\n\n总而言之，没有方法也可以做过程管理，但只有掌握过程管理的方法，才会尽可能减少事务往不好方向发展的波动，从而更轻松、更低风险、更稳妥地去拿到结果，让一切尽在掌控。\n\n\n什么是过程管理？\n\n要想探讨这个问题，我想先抛出我的管理理念（也是“管理者三板斧”的核心理念），在我看来，管理就是追求事务的可持续发展，而想要达成这个目标有两个基本点：\n\n * 管理动作要形成可持续迭代的闭环；\n\n * 管理动作足够简单到可以复制和个性化升级。\n\n\n\n过程管理当然也遵循这个理念。比如你这次 a 项目做得很好，下次做 b 项目时能否依然做好？在 a 项目中发现问题、解决问题的方法和思路，是否可以在 b 项目中沿用？\n\n这就是方法的形成与积累。所以根本上说，过程管理是为了让你的想法、灵感、不稳定的发挥逐渐规律化，可以持续迭代被你应用，它的本质就是希望结果越来越好，让你原本靠运气或者模糊经验得来的成功可以被复制，让你在项目中灵光一闪的 idea 变成你的常规能力。\n\n而且过程管理也是在把管理者处理问题的一些方法，渐渐地“套路化”，形成可以灵活变换应用到不同的场景中的方法体系。比如你抽象总结了一套体系“ abc ”，针对 d 场景时，你觉得体系中的“ a ”是没有必要的，其实你就可以省略“ a ”,你觉得缺少了“ f ”，也可以添上。\n\n\npdca 模型\n\n我相信，你肯定接触过很多过程管理的方法，不同的理论框架是否好用，这个问题见仁见智，而我的推荐标准只有一个，那就是“足够简单、直接、易用”，因为如果某一个方法太过复杂，实操性肯定不强，假设这个管理方法有 10 条标准，组成比较复杂，那么它的容错率就会降低，因为如果你有一条没有做好，整个体系的矛盾点就会产生，在落地时，理论和现实就会存在冲突。\n\n而 pdca 模型就胜在简单、实用，还能让我根据自己的习惯和积累不断优化。\n\n\n\n * plan（定计划）：围绕着目标明确里程碑，确定关键节点，与执行的员工达成共识。\n\n * do（做执行）：多给员工空间、多走动、多观察、少干预，放手而非放任，你也不能置身事外。\n\n * check（勤检查）：狠抓关键节点做检查、问进展、问困难、给建议、做辅导、协调资源。\n\n * action（复盘调优）：小事尽快复盘、大事分阶段复盘、事后全面复盘，抓住每一次提升和优化的机会。\n\n上面四条是 pdca 的关键记忆点，言简意赅方便你记忆。按照 pdca 的模型来看，很多 leader 比较注重 d 和 c ，因为很多初级管理者为了证明自己，关注点在能够跟结果迅速产生关联的动作上， 而不是认真地思考整件事（事情的背景、关键节点、里程碑……）。\n\n除此之外，c 和 d 一样，同是执行层，而执行往往比分析和决策要容易得多。 p 和 a 就被很多 同学忽视了，尤其是 a ，存在感并不强。这跟互联网公司普遍追求持续迭代、快速验证的工作模式有关，我们其实并没有关注很多项目为什么失败，错了再继续下一个项目，但这样一来久而久之很容易丧失持续迭代自己的能力。\n\n说了这么多，你要怎么用 pdca 做过程管理呢？我们先来还原一个案例，然后再逐点分析。\n\n\n如何用 pdca 做过程管理？\n\n1.案例还原\n\n李明亮是一家教育公司研发中心的技术总监，前两天，公司启动了 s 级的大促项目，李明亮的团队接了其中 3 个子项目：a、b、c，那么他要怎么分配自己的时间、精力、抓住重点把控过程呢？这是第一个问题。\n\n子项目 a （对交易系统进行改造）最复杂，风险也最高，需要对旧的核心系统做大量的改造，可旧的核心系统已经运行了好几年，负责人也迭代了好几次，这次要让谁负责呢？是团队目前能力最强的小王，还是对旧系统比较熟悉的老张？为了保证顺利交付，他想从方案设计、资源协调、落地执行、上线安排全程的深度参与，不知道是否合适，这是他遇到的第二个问题。\n\n子项目 b（增加对新营销玩法的支持） 难度适中，李明亮交给了刚进入部门的小宇，小宇主观意识非常强，给出了很多的方案，一直希望李明亮放手让自己去试，李明亮犹豫了。这是他遇到的第三个问题。\n\n子项目 c （根据压测瓶颈联合多团队进行系统调优）难度低，但是琐碎，涉及外部团队，老马虽然沉稳，但是沟通能力差，李明亮不知道是否让他担任这个工作，遇到了第四个难题。\n\n他计划在确定人选之后，每周五与各个项目负责人 oneone 项目进展，每两周三个项目一起做整体进展的对焦和复盘，但因为日常也在了解情况，目前节奏很紧张，例会该取消吗？这是他遇到的最后一个问题。\n\n2.思路分析\n\n如果是你遇到类似的问题，怎么解决这 5 个问题呢？\n\n在 08 讲我提到，目标的制定要“定策略、拆任务、细到人”，plan 的重点就是把复杂的任务或项目拆解出它的关键节点与里程碑，这样你才能确认自己应该跟进什么、什么时候跟进、跟进到什么程度（以一般的技术项目为例，很多同学眼中最基本的里程碑就是各个开发的关键节点：方案确定，开始编码，进入测试，系统上线……）。\n\n总的来说，p 需要结合具体的实际场景情况而定，比如 db 的设计、服务的设计、上线的方案，不同的项目中可能未必都是关键节点，你要看人、看项目具体分析。\n\n那么在前两个问题中，李明亮应该重点抓 d （执行）和 c （检查）：多给空间勤观察、狠抓节点做辅导。因为公司级项目目标比较清晰，重点在执行过程的把控上，并且因为几个项目同步进行，李明亮要保证的是三个项目的结果，自然无法完全 all in 到某一个项目中。\n\n所以，他一方面要放手给员工完成 plan 的时间和空间，根据项目需要来确定会议的频次，确保信息及时且充分地对焦。另一方面要按照约定检查节点、对不同的项目和员工，要采取不同的方式。\n\n子项目 a 既然难度最大，改造也是面向新系统和未来发展考虑，所以如果我是李明亮的话，会选择能力最强的小王来主导，最熟悉的老张为辅助，然后再结合最初定义好的关键节点，适当放手。\n\n因为计划实施的主角是员工，过度干预会让员工束手束脚，所以给负责具体任务的同学足够的时间和空间，leader 少干预，日常以观察和帮助为主。**在这里，比较重要的一点就是在于你怎么拿捏干预的度，这其实是你管理动作的核心，**我建议你在项目关键节点（p）的基础上关注团队伙伴的动态，比如项目进展中遇到的问题、团队成员的工作状态等。\n\n很多能力和经验是历练出来的，只要过程可控，过程中走一些弯路也未必是坏事，要允许犯错。但是你要注意，放手不等于放任，更不等于不闻不问，你依然要对最终的结果负责。\n\n针对第三个问题，既然子项目 b 的小宇能力稍弱，李明亮就应该多关注细节，了解进展，给予帮助，放手是对结果的不负责。你要在 check 的环节多下功夫，才能确保项目和目标的一致与达成，一定要定期、多维度、较真地 check！（比如，可以借助会议和邮件做好关键节点的把控与对焦，同时也将信息最大程度打通，那怎么用好它们就比较关键了。）以会议为例：\n\n\n当然了，有的时候我们在 check 时也会走进一些误区，比如：\n\n * 到了里程碑和关键点时间才进去 check，日常对进展不关注、不跟进；\n\n * 把追杀结果当作追过程，与员工不讲 why，不讲方法，这是“管理者”的常见病。团队 leader 要清楚，成员需要的是你的帮助和支持，而不是简单的情绪发泄；\n\n * 关键动作不够连续连贯，做出决策或者给出解决办法之后就默认问题已经解决，后续缺少跟进。\n\n第四个问题比较容易解决。阿里有一句土话，叫“借事修人，借人成事”。项目 c 的难度和风险小就意味着更加可控，老马比较合适，针对沟通的问题，你可以驱动并帮助他在这个项目中得到锻炼，同时保持足够的关注确保整体进展与结果。\n\n最后一个问题， 如果项目节奏紧张、你日常跟进也比较到位，那么可以取消周会。但是复盘会依然需要召开，因为前者的作用更多是信息同步对焦，它可以融入日常，而后者是将三个项目放在一起看整体，思考过程中的得失好坏，这是对团队和项目一个提炼沉淀的动作。\n\n而action的核心在于建立循环，复盘优化。 没有一成不变的计划与执行，只有不断调整的行动力。具体要怎么做呢？可以参考下面这些关键点。\n\n * 复盘前：复盘前的核心在于思考复盘的目的和产出是什么。借此，你才可以明确复盘会议主要会聊些什么，哪些人会参加。\n\n * 复盘中：自省是复盘会的基调，复盘就一个目的“找到团队的不足加以改进，以便在未来取得更好的结果”。所以每个人没必要甩锅，也没必要全盘否定。在复盘的过程中，一定要把问题找准，内部对齐，达成所有人的共识。\n\n * 复盘后：会议有结论，结论有计划，计划有责任人，责任人有行动，要建立机制保证在复盘会上讨论出的结论能够落地。\n\n总的来说，小事儿尽快复盘，借此向团队成员传授自己的经验；大事儿分阶段复盘，抓住重点矛盾，推动事情的顺利发展而非追求完美；事后全面复盘，不管对个人还是团队，找自己的问题都是 roi 最高的方式，找到问题的一方才有改善提升的可能。\n\n\n小结\n\n今天，我结合李明亮的案例讲了对过程管理的理解，以及pdca模型的认知和具体的应用技巧。我日常会用 pdca 模型处理各类事务性工作，因为它不复杂，可以以较低的成本，更有条理地处理日常繁杂的工作，希望这个模型也可以是你做过程管理的利器，用它将管理方法体系化，使结果越变越好。\n\n总的来说，这节课我想强调这样三个重点：\n\n 1. 目标不会自己长腿走向终点，你一定要做好过程管理以取得可靠的结果。\n\n 2. 追过程不意味着事无巨细都要做，追哪些、什么时候追、追到什么程度才是你更应该关心的。\n\n 3. 复盘是 pdca 管理动作中的闭环，如果每次都能提高一点点，长期积累的变化就很大了。\n\n最后，我想说pdca不只在管理上有用，它还是一种能够帮你应对各种问题的思考框架，也适用于项目处理，日常生活安排（比如旅游、购物等）。\n\n在我看来，pdca 这个管理方法遵循了个人的本能，它会将你处理事情的本能更加条理化、清晰化。所以我希望你能举一反三，把 pdca 这个思考框架融入你生活的方方面面，既提高管理效率，也借此提高生活质量。\n\n最后，你不妨想一想在生活和工作中，哪些事你认为利用 pdca 的方式来管理会有更好的结果，分享出来，我在留言区等你。\n\n----------------------------------------\n\n\n# 精选评论\n\n# axot：\n\n> 最好能有个具体的例子 特别是check时候怎么跟进 用什么工具之类的 具体该如何着手还有点模糊\n\n# *旻：\n\n> 戴明环真的很棒",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"奖优罚劣：怎样传递我们要什么与“不要什么”？",frontmatter:{title:"奖优罚劣：怎样传递我们要什么与“不要什么”？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/2e6f7c/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/11.%20%20%E5%A5%96%E4%BC%98%E7%BD%9A%E5%8A%A3%EF%BC%9A%E6%80%8E%E6%A0%B7%E4%BC%A0%E9%80%92%E6%88%91%E4%BB%AC%E8%A6%81%E4%BB%80%E4%B9%88%E4%B8%8E%E2%80%9C%E4%B8%8D%E8%A6%81%E4%BB%80%E4%B9%88%E2%80%9D%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/11.  奖优罚劣：怎样传递我们要什么与“不要什么”？.md",key:"v-5aecbf42",path:"/pages/2e6f7c/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4628}],headersStr:"精选评论",content:"前面我讲了定目标和追过程的关键动作，今天我们来聊一聊拿结果的闭环动作“奖优罚劣”。\n\n如果把拿结果比作种菜，那么定目标就是在筛选种子，确定最终要种什么；追过程就是照看种子生长发芽、浇水灌溉，对过程进行持续管控和追踪；而奖优罚劣就是通过给种子施肥（优），洒农药（劣），保证这一次种得好之外，也让这片土壤（团队）在未来还能继续播种、结果，进入良性循环。\n\n所以“奖优罚劣”之所以重要，是因为它能让团队形成可持续发展的氛围，是拿结果的闭环。而我们在这个过程中要注意的就是：引导人性而非对抗人性。\n\n趋利避害是本能，任何人都希望付出和回报成正比，这是人性所驱。如果你在“奖优罚劣”时，团队中的优等生和差生得到的回报（收益）一样，就是在对抗人性，高绩效的同学缺少奖励，低绩效的同学缺少鞭策，势必会引起不满，影响团队发展。那具体要怎么做呢？\n\n\n什么是奖优、罚劣\n\n你首先要对“奖优罚劣”有个清晰的认知。在我看来，奖优是通过一些具体的动作（调薪/晋升）告诉大家团队选择什么样的人，鼓励什么行为，罚劣表明团队不需要什么样的人，不能容忍什么行为……它的本质是传递团队要什么和不要什么。你也可以理解成论功行赏，按结果问责。\n\n奖优最终会落到物质和精神上：\n\n * 物质上的奖优作用大，但是频次较低，比如以半年/年为单位的晋升、调薪，它能够打开成员的天花板，比如拿了A绩效的同学，第二年他依然希望是A而不是B，从而提高对自己的要求与期望，更容易取得好的成绩。\n\n * 精神上的奖优体现在日常行为上，频次较高，比如你关注和肯定某位成员的行为，在团队内通过邮件、钉钉等方式简单鼓励推广他的行为。\n\n罚劣也会落到物质和精神上，但它是动作而非目的，你要通过罚劣来传递团队不能容忍什么样的行为，以此提醒、鞭策大家。奖优和罚劣是相互依赖的。\n\n当然，一些同学在“奖优罚劣”上会存在一些误区：\n\n * 没有意识到奖优罚劣的示范作用。 你要把“奖优罚劣”当作宣传动作，把结果辐散出去，比如玛丽拿了 A ，那你要让别人看到，玛丽是因为怎样的表现，拿到了怎样的结果，要让成员产生想要学习和模仿的热情，发挥玛丽的示范作用，引导团队风向。\n\n * 注重罚劣，忽略奖优。 这一点与你获得的权利息息相关（我有权利去让你做不喜欢的事儿）甚至有的 Leader 喜欢用罚钱的方式（开会迟到、报告不合规等）来做日常的“罚劣”。可当你只能用惩罚来驱动一件事儿时，你未来也只有惩罚这一条路了，惩罚带来的是负面的能量和情绪，对成员的影响也是负面的。\n\n * 奖惩动作过于儿戏，容易被滥用：“奖惩动作”要建立在尊重的基础上，让成员有收获和反思。比如当系统出现故障，如果你换一种方式，比如直接责任人组织内部复盘，跟进后续的改进动作，那他会在今后的工作中避免这件事。要注意，“奖惩”不是宣泄情绪与不满的动作，而是带有目的性，先想明白你的目的是什么。\n\n\n奖优罚劣的关键动作\n\n绩效考核\n\n一般而言，绩效考核是对 KPI 达成的 Review，是从结果的维度给成员做分类的动作，比如哪一部分同学是A，哪一部分同学是B。我们在刚开始设计目标设计时，就要明确结果是如何考核并度量的，将其形成具体的 KPI ，作为结果的指向灯。要通过绩效考核清晰地将我们“要什么，不要什么”明确、公开且坚定地传达给所有人。\n\n一般互联网公司的考核是以全员为基数，按照 361 或者 271 的比例划分出绩效等级（A、B、C）我总结了几个最容易踏入的陷阱。\n\n * 新人和老人之分： 往往新入职的同学都默认给了 B ，甚至有人被强制分配了 C ，不是试用期间干得有多差，仅仅是因为他入职时间最短，绩效结果在当前那一秒对他的影响最小。\n\n * 高 P 和低 P 之分： 越是高 P 的同学低绩效就越少，大部分 B、B-、C 的绩效都被安放在了低 P 的同学上。\n\n * Leader 和成员之分： 作为老板的直接下级，管理岗位的人绩效都不错，一个团队即使整体结果不理想、成绩很差劲，负责人往往最低拿个 B，但是组内可能就要有更多同学拿 C。\n\n * 离职和在职之分： 考核前离职的同学，不管他之前有没有出色的成绩，绩效 C 他是背定了，Leader 不用纠结 C 指标的人选，这也算是常规操作。\n\n其实绩效考核对于技术 Leader 而言是一个给团队做体检、给自己照镜子的过程。其中你会发现积累了很多的问题，问题多不可怕，不知道问题、看不出问题、对问题视而不见才真正可怕。\n\n上面这些问题没有绝对意义上的对错，在事后的证伪我认为也意义不大，我建议你首先要认识到团队是否存在类似的问题，不同问题所造成的影响是什么，然后再结合团队当前与未来的情况考虑是否要忍痛解决。你可以参考两个关键点：如果做了严格的调整，团队是否能更加健康地发展下去？以及如果不解决这些矛盾，下一次的团队考核问题是否更加严峻？如果你的答案是“Yes”，那我建议你早点儿把解决该问题提上日程，毕竟管理是面向未来的。\n\n总的来说，我们要从一开始被主观因素影响，逐渐认识到客观的环境与现实，最终在理性与人性中寻找一个平衡，让大家看到付出和能做出好成绩的同学，回报是远远高于其他人的，对于拖整体后退、持续不能改善的同学，团队是不欢迎的。\n\n绩效面谈\n\n绩效考核结束之后，你会有一个对齐结果的动作：绩效面谈。不要小瞧这个过程，从我过往的经验来看，真正改变团队未来的未必是绩效系统上显示的 A 或 B ，而是绩效面谈的效果。\n\n绩效面谈的核心出发点是通过这次绩效的结果改变某些行为与认识，让团队在未来取得更好的成绩，并不是单纯地通知结果。比如“李明你今天的绩效是 A，玛丽你今年的绩效是 C”，如果是这样谈还不如邮件通知更加省力。重点是讲明白为什么是 A 和 C，你的考核与成员自评间的分歧在哪儿，同学以后要怎么提高或改进，你们最终的共识是什么。\n\n所以每年考核季的时候，其实我花在绩效面谈的时间要远超出打考核本身，投入了相当多的精力，我老板（原饿了么 CTO）经常说，绩效这件事儿的重要程度仅次于线上宕机。\n\n当然了，沟通的形式没必要固化，但由于沟通的内容对成员未来的收益和发展影响很大，所以应该有相对正式的感觉，最好还是有一些仪式感。绩效面谈由主管、员工、HR、主管的主管（可选）一起参加，可以参考的绩效面谈流程如下。\n\n * 开场定基调：讲清楚你们接下来要谈什么、怎么谈、过程是怎样的，让成员明确这是一个可以平和而坦诚的场合，沟通是为了彼此更好地发展与未来。\n\n * 员工自评：听员工讲自己对绩效的理解，以倾听为主，这一点是最重要的（我不建议你讲的比员工还要多，真诚且认真的倾听会给你带来更多的收获，比如从对话中寻找并认识自己的不足）不要随意打断对方，不清楚的地方可以问但要让员工完整表达出自己的理解和认识，从中可以看到员工自己的感受，也侧面反映出对组织、对管理和对你是怎样的态度。\n\n * 主管评价：结合绩效考核的结果，以及刚才员工自评的内容，逐条说出你打分的 Why，要给出你的观察、你的思考。\n\n * 对焦共识：往往员工自评与主管评价会有落差，这个落差往往是双方所处角度和所思考问题的方式不同造成的。这些分歧要掰碎了、揉开了，一条一条地聊透。\n\n * 面谈总结 & 后续跟进：这几讲中我一直强调**管理动作一定要形成闭环并且可持续。**换句话说，面谈结束后你一定要有所行动，面谈时热火朝天，聊完之后没有任何动作上的变化，光说不做不仅会让大家丧失对你的信任，同时也错过了改变团队最好的时机，这一点是大忌。\n\n除此之外，在整个绩效面谈环节，不排除有同学情绪会比较激动。作为 Leader 要保持清醒，不要陷入情绪化的对抗中。本质上你们是同事而非家人，可以体谅但不能对结果妥协，不能用情感和主观去驱动你的逻辑，带有同理心地从理性的角度探讨并陈述事实，讲明原因和背后的思考才是你最正确的选择。\n\n薪酬激励\n\n绩效的考核与面谈结束后，接下来就是薪酬激励。一般来讲，互联网公司中研发薪酬主要由三部分组成：月薪 + 年终奖 + 期权，当然有时大家也会将晋升、职能调整看作是激励的一部分，这里还是围绕薪酬激励为主，不管绩效考评和面谈部分做得多么到位，如果薪酬激励没有处理好，很可能出现与预期截然相反的情况。\n\n薪酬是对绩效和结果的激励，绩优的同学会得到些资源的加码，并且促使大家在未来可以持续保持良好的输出，如何分配这些资源为未来创造价值对你来讲就成了考验。可能在有些公司你不会直接操作这些资源，但并不表示与你无关，你给团队成员打的绩效、与上级做团队人才盘点等环节，都是在无形中影响了资源的分配。\n\n> 最近几年随着团队规模的扩大，我在每年做调薪和年终奖分配时都尤为痛苦，但是资源总是有限的，团队越大你会觉得资源不够。你总是幻想着希望所有人都满意，做出功劳的、苦劳的、跟着做的、陪着做的，你希望他们一年下来都能有不错的收获。\n\n薪酬分配可操作空间很大，但你会更纠结，比如要考虑历史问题，有人入职时薪资低，即使涨幅后也不算理想，那这次调整后如果达不到预期他是不是会流失？或者有的同学这一年非常辛苦，但是由于一些客观因素最终项目的结果没有得到认可，年终奖要按什么标准来？\n\n在这个过程中，你的主观因素就会作祟，会出现人性与现实的博弈，我也很难有完整的解法，只提供给你三个基本原则：\n\n 1. 问自己是否敢将资源分配的逻辑与规则在阳光之下讲出来。一个逻辑越是黑盒，问题与矛盾就会越多，可能不需要你真的公布出来，但是你具备可以正面讲出来的能力。\n\n 2. 不要撒胡椒面，也别做大锅饭，让好的结果超出预期。在资源分配时，最忌讳的就是想“不患寡而患不均”，你想让每个人都满意的结果就是所有人都不满意，甚至让真正绩优的人心生不满，这就与奖优罚劣的初衷相违背。对于非常绩优的同学，参照8/2原则，你甚至可以更极端地做出策略，他预期100就给他120，让他超出预期。\n\n 3. 面向未来而非现在去做考虑。资源的有限性就决定了必须有取舍，当下是要苟且还是要断臂求生，这个决策一定是要　Leader　来做的，你应该面向未来去权衡。\n\n牢记资源总是有限的，资源分配本身是博弈，有人多就要有人少。这种情况下，平均分配的结果不是普天同庆，而是所有人都不满意，每个人都觉得少。与其如此，不如把资源倾斜到那些你团队最优秀、绩效最好的同学身上，让他们得到预期的收益甚至超出预期。\n\n\n总结\n\n今天这节课，我从自己的经历出发，分享了与奖优罚劣有关的话题，这个管理动作听起来很简单，但是往往做起来并不容易，因为我们很容易先入为主，受到主观情绪的影响。虽然绩效考核、绩效面谈和薪酬激励是“奖优罚劣”的三个常规动作，但这并不是全部的，你也要考虑日常的、非物质的精神激励，比如对优秀行为的认可与推广、为优秀的同学在更大范围内制造影响力、不断树立榜样去影响这个团队。\n\n总的来说，你在做“奖优罚劣”时，心里一定要有个度，也就是你的团队在“奖优罚劣”上要认真到什么程度，它是拿结果的一个闭环，会影响的不单单是你今年的事情，还会影响你团队明年的发展，所以要认真对待。\n\n\n\n留个作业：你所在的公司或部门是如何进行奖优罚劣的，你觉得有哪些做得好的、哪些不好？\n\n----------------------------------------\n\n\n# 精选评论\n\n# *鹏：\n\n> 您好，请问一下绩效面谈一对一的谈比较好呢还是leader，hr都在的情况下谈好？为什么？\n\n#     讲师回复：\n\n>     我建议一定要有1v1，在没人第三者在场的情况下，更容易把真实的想法表达出来\n\n# **士：\n\n> 绩效面谈是每个技术leader都需要但往往会比较欠缺的管理动作，本讲不错，课件还可以更新发出吗，之前的课件只更新到第9讲就没有了\n\n# **飞：\n\n> 我们公司的研发团队，开发任务变动很随意，临时任务太多，导致之前制定好的计划都没法完成，请问这种情况下，应该如何进行绩效评定呢？怎么改善才好呢？\n\n#     讲师回复：\n\n>     类似的状况很常见，我觉得关键在于做决定的Leader，如果他就是混乱的，整个团队都是乱的，没有章法。可以大家坐下来，好好盘一下过去付出的辛苦和创造的价值是否match，是否不是需要更有策略和优先级才行。\n\n# **叔叔：\n\n> 绩效面谈，这个很不错，值得推荐\n\n#     讲师回复：\n\n>     谢谢",normalizedContent:"前面我讲了定目标和追过程的关键动作，今天我们来聊一聊拿结果的闭环动作“奖优罚劣”。\n\n如果把拿结果比作种菜，那么定目标就是在筛选种子，确定最终要种什么；追过程就是照看种子生长发芽、浇水灌溉，对过程进行持续管控和追踪；而奖优罚劣就是通过给种子施肥（优），洒农药（劣），保证这一次种得好之外，也让这片土壤（团队）在未来还能继续播种、结果，进入良性循环。\n\n所以“奖优罚劣”之所以重要，是因为它能让团队形成可持续发展的氛围，是拿结果的闭环。而我们在这个过程中要注意的就是：引导人性而非对抗人性。\n\n趋利避害是本能，任何人都希望付出和回报成正比，这是人性所驱。如果你在“奖优罚劣”时，团队中的优等生和差生得到的回报（收益）一样，就是在对抗人性，高绩效的同学缺少奖励，低绩效的同学缺少鞭策，势必会引起不满，影响团队发展。那具体要怎么做呢？\n\n\n什么是奖优、罚劣\n\n你首先要对“奖优罚劣”有个清晰的认知。在我看来，奖优是通过一些具体的动作（调薪/晋升）告诉大家团队选择什么样的人，鼓励什么行为，罚劣表明团队不需要什么样的人，不能容忍什么行为……它的本质是传递团队要什么和不要什么。你也可以理解成论功行赏，按结果问责。\n\n奖优最终会落到物质和精神上：\n\n * 物质上的奖优作用大，但是频次较低，比如以半年/年为单位的晋升、调薪，它能够打开成员的天花板，比如拿了a绩效的同学，第二年他依然希望是a而不是b，从而提高对自己的要求与期望，更容易取得好的成绩。\n\n * 精神上的奖优体现在日常行为上，频次较高，比如你关注和肯定某位成员的行为，在团队内通过邮件、钉钉等方式简单鼓励推广他的行为。\n\n罚劣也会落到物质和精神上，但它是动作而非目的，你要通过罚劣来传递团队不能容忍什么样的行为，以此提醒、鞭策大家。奖优和罚劣是相互依赖的。\n\n当然，一些同学在“奖优罚劣”上会存在一些误区：\n\n * 没有意识到奖优罚劣的示范作用。 你要把“奖优罚劣”当作宣传动作，把结果辐散出去，比如玛丽拿了 a ，那你要让别人看到，玛丽是因为怎样的表现，拿到了怎样的结果，要让成员产生想要学习和模仿的热情，发挥玛丽的示范作用，引导团队风向。\n\n * 注重罚劣，忽略奖优。 这一点与你获得的权利息息相关（我有权利去让你做不喜欢的事儿）甚至有的 leader 喜欢用罚钱的方式（开会迟到、报告不合规等）来做日常的“罚劣”。可当你只能用惩罚来驱动一件事儿时，你未来也只有惩罚这一条路了，惩罚带来的是负面的能量和情绪，对成员的影响也是负面的。\n\n * 奖惩动作过于儿戏，容易被滥用：“奖惩动作”要建立在尊重的基础上，让成员有收获和反思。比如当系统出现故障，如果你换一种方式，比如直接责任人组织内部复盘，跟进后续的改进动作，那他会在今后的工作中避免这件事。要注意，“奖惩”不是宣泄情绪与不满的动作，而是带有目的性，先想明白你的目的是什么。\n\n\n奖优罚劣的关键动作\n\n绩效考核\n\n一般而言，绩效考核是对 kpi 达成的 review，是从结果的维度给成员做分类的动作，比如哪一部分同学是a，哪一部分同学是b。我们在刚开始设计目标设计时，就要明确结果是如何考核并度量的，将其形成具体的 kpi ，作为结果的指向灯。要通过绩效考核清晰地将我们“要什么，不要什么”明确、公开且坚定地传达给所有人。\n\n一般互联网公司的考核是以全员为基数，按照 361 或者 271 的比例划分出绩效等级（a、b、c）我总结了几个最容易踏入的陷阱。\n\n * 新人和老人之分： 往往新入职的同学都默认给了 b ，甚至有人被强制分配了 c ，不是试用期间干得有多差，仅仅是因为他入职时间最短，绩效结果在当前那一秒对他的影响最小。\n\n * 高 p 和低 p 之分： 越是高 p 的同学低绩效就越少，大部分 b、b-、c 的绩效都被安放在了低 p 的同学上。\n\n * leader 和成员之分： 作为老板的直接下级，管理岗位的人绩效都不错，一个团队即使整体结果不理想、成绩很差劲，负责人往往最低拿个 b，但是组内可能就要有更多同学拿 c。\n\n * 离职和在职之分： 考核前离职的同学，不管他之前有没有出色的成绩，绩效 c 他是背定了，leader 不用纠结 c 指标的人选，这也算是常规操作。\n\n其实绩效考核对于技术 leader 而言是一个给团队做体检、给自己照镜子的过程。其中你会发现积累了很多的问题，问题多不可怕，不知道问题、看不出问题、对问题视而不见才真正可怕。\n\n上面这些问题没有绝对意义上的对错，在事后的证伪我认为也意义不大，我建议你首先要认识到团队是否存在类似的问题，不同问题所造成的影响是什么，然后再结合团队当前与未来的情况考虑是否要忍痛解决。你可以参考两个关键点：如果做了严格的调整，团队是否能更加健康地发展下去？以及如果不解决这些矛盾，下一次的团队考核问题是否更加严峻？如果你的答案是“yes”，那我建议你早点儿把解决该问题提上日程，毕竟管理是面向未来的。\n\n总的来说，我们要从一开始被主观因素影响，逐渐认识到客观的环境与现实，最终在理性与人性中寻找一个平衡，让大家看到付出和能做出好成绩的同学，回报是远远高于其他人的，对于拖整体后退、持续不能改善的同学，团队是不欢迎的。\n\n绩效面谈\n\n绩效考核结束之后，你会有一个对齐结果的动作：绩效面谈。不要小瞧这个过程，从我过往的经验来看，真正改变团队未来的未必是绩效系统上显示的 a 或 b ，而是绩效面谈的效果。\n\n绩效面谈的核心出发点是通过这次绩效的结果改变某些行为与认识，让团队在未来取得更好的成绩，并不是单纯地通知结果。比如“李明你今天的绩效是 a，玛丽你今年的绩效是 c”，如果是这样谈还不如邮件通知更加省力。重点是讲明白为什么是 a 和 c，你的考核与成员自评间的分歧在哪儿，同学以后要怎么提高或改进，你们最终的共识是什么。\n\n所以每年考核季的时候，其实我花在绩效面谈的时间要远超出打考核本身，投入了相当多的精力，我老板（原饿了么 cto）经常说，绩效这件事儿的重要程度仅次于线上宕机。\n\n当然了，沟通的形式没必要固化，但由于沟通的内容对成员未来的收益和发展影响很大，所以应该有相对正式的感觉，最好还是有一些仪式感。绩效面谈由主管、员工、hr、主管的主管（可选）一起参加，可以参考的绩效面谈流程如下。\n\n * 开场定基调：讲清楚你们接下来要谈什么、怎么谈、过程是怎样的，让成员明确这是一个可以平和而坦诚的场合，沟通是为了彼此更好地发展与未来。\n\n * 员工自评：听员工讲自己对绩效的理解，以倾听为主，这一点是最重要的（我不建议你讲的比员工还要多，真诚且认真的倾听会给你带来更多的收获，比如从对话中寻找并认识自己的不足）不要随意打断对方，不清楚的地方可以问但要让员工完整表达出自己的理解和认识，从中可以看到员工自己的感受，也侧面反映出对组织、对管理和对你是怎样的态度。\n\n * 主管评价：结合绩效考核的结果，以及刚才员工自评的内容，逐条说出你打分的 why，要给出你的观察、你的思考。\n\n * 对焦共识：往往员工自评与主管评价会有落差，这个落差往往是双方所处角度和所思考问题的方式不同造成的。这些分歧要掰碎了、揉开了，一条一条地聊透。\n\n * 面谈总结 & 后续跟进：这几讲中我一直强调**管理动作一定要形成闭环并且可持续。**换句话说，面谈结束后你一定要有所行动，面谈时热火朝天，聊完之后没有任何动作上的变化，光说不做不仅会让大家丧失对你的信任，同时也错过了改变团队最好的时机，这一点是大忌。\n\n除此之外，在整个绩效面谈环节，不排除有同学情绪会比较激动。作为 leader 要保持清醒，不要陷入情绪化的对抗中。本质上你们是同事而非家人，可以体谅但不能对结果妥协，不能用情感和主观去驱动你的逻辑，带有同理心地从理性的角度探讨并陈述事实，讲明原因和背后的思考才是你最正确的选择。\n\n薪酬激励\n\n绩效的考核与面谈结束后，接下来就是薪酬激励。一般来讲，互联网公司中研发薪酬主要由三部分组成：月薪 + 年终奖 + 期权，当然有时大家也会将晋升、职能调整看作是激励的一部分，这里还是围绕薪酬激励为主，不管绩效考评和面谈部分做得多么到位，如果薪酬激励没有处理好，很可能出现与预期截然相反的情况。\n\n薪酬是对绩效和结果的激励，绩优的同学会得到些资源的加码，并且促使大家在未来可以持续保持良好的输出，如何分配这些资源为未来创造价值对你来讲就成了考验。可能在有些公司你不会直接操作这些资源，但并不表示与你无关，你给团队成员打的绩效、与上级做团队人才盘点等环节，都是在无形中影响了资源的分配。\n\n> 最近几年随着团队规模的扩大，我在每年做调薪和年终奖分配时都尤为痛苦，但是资源总是有限的，团队越大你会觉得资源不够。你总是幻想着希望所有人都满意，做出功劳的、苦劳的、跟着做的、陪着做的，你希望他们一年下来都能有不错的收获。\n\n薪酬分配可操作空间很大，但你会更纠结，比如要考虑历史问题，有人入职时薪资低，即使涨幅后也不算理想，那这次调整后如果达不到预期他是不是会流失？或者有的同学这一年非常辛苦，但是由于一些客观因素最终项目的结果没有得到认可，年终奖要按什么标准来？\n\n在这个过程中，你的主观因素就会作祟，会出现人性与现实的博弈，我也很难有完整的解法，只提供给你三个基本原则：\n\n 1. 问自己是否敢将资源分配的逻辑与规则在阳光之下讲出来。一个逻辑越是黑盒，问题与矛盾就会越多，可能不需要你真的公布出来，但是你具备可以正面讲出来的能力。\n\n 2. 不要撒胡椒面，也别做大锅饭，让好的结果超出预期。在资源分配时，最忌讳的就是想“不患寡而患不均”，你想让每个人都满意的结果就是所有人都不满意，甚至让真正绩优的人心生不满，这就与奖优罚劣的初衷相违背。对于非常绩优的同学，参照8/2原则，你甚至可以更极端地做出策略，他预期100就给他120，让他超出预期。\n\n 3. 面向未来而非现在去做考虑。资源的有限性就决定了必须有取舍，当下是要苟且还是要断臂求生，这个决策一定是要　leader　来做的，你应该面向未来去权衡。\n\n牢记资源总是有限的，资源分配本身是博弈，有人多就要有人少。这种情况下，平均分配的结果不是普天同庆，而是所有人都不满意，每个人都觉得少。与其如此，不如把资源倾斜到那些你团队最优秀、绩效最好的同学身上，让他们得到预期的收益甚至超出预期。\n\n\n总结\n\n今天这节课，我从自己的经历出发，分享了与奖优罚劣有关的话题，这个管理动作听起来很简单，但是往往做起来并不容易，因为我们很容易先入为主，受到主观情绪的影响。虽然绩效考核、绩效面谈和薪酬激励是“奖优罚劣”的三个常规动作，但这并不是全部的，你也要考虑日常的、非物质的精神激励，比如对优秀行为的认可与推广、为优秀的同学在更大范围内制造影响力、不断树立榜样去影响这个团队。\n\n总的来说，你在做“奖优罚劣”时，心里一定要有个度，也就是你的团队在“奖优罚劣”上要认真到什么程度，它是拿结果的一个闭环，会影响的不单单是你今年的事情，还会影响你团队明年的发展，所以要认真对待。\n\n\n\n留个作业：你所在的公司或部门是如何进行奖优罚劣的，你觉得有哪些做得好的、哪些不好？\n\n----------------------------------------\n\n\n# 精选评论\n\n# *鹏：\n\n> 您好，请问一下绩效面谈一对一的谈比较好呢还是leader，hr都在的情况下谈好？为什么？\n\n#     讲师回复：\n\n>     我建议一定要有1v1，在没人第三者在场的情况下，更容易把真实的想法表达出来\n\n# **士：\n\n> 绩效面谈是每个技术leader都需要但往往会比较欠缺的管理动作，本讲不错，课件还可以更新发出吗，之前的课件只更新到第9讲就没有了\n\n# **飞：\n\n> 我们公司的研发团队，开发任务变动很随意，临时任务太多，导致之前制定好的计划都没法完成，请问这种情况下，应该如何进行绩效评定呢？怎么改善才好呢？\n\n#     讲师回复：\n\n>     类似的状况很常见，我觉得关键在于做决定的leader，如果他就是混乱的，整个团队都是乱的，没有章法。可以大家坐下来，好好盘一下过去付出的辛苦和创造的价值是否match，是否不是需要更有策略和优先级才行。\n\n# **叔叔：\n\n> 绩效面谈，这个很不错，值得推荐\n\n#     讲师回复：\n\n>     谢谢",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"勤沟通：在信任的基础上，让沟通简单且纯粹",frontmatter:{title:"勤沟通：在信任的基础上，让沟通简单且纯粹",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/cea021/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/12.%20%20%E5%8B%A4%E6%B2%9F%E9%80%9A%EF%BC%9A%E5%9C%A8%E4%BF%A1%E4%BB%BB%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%8C%E8%AE%A9%E6%B2%9F%E9%80%9A%E7%AE%80%E5%8D%95%E4%B8%94%E7%BA%AF%E7%B2%B9.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/12.  勤沟通：在信任的基础上，让沟通简单且纯粹.md",key:"v-afcdc2ac",path:"/pages/cea021/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4681}],headersStr:"精选评论",content:"我用三讲的时间带你了解了“管理三板斧”的第一板斧——拿结果。总的来说，拿结果的三个动作“定目标”“追过程”“奖优罚劣”围绕的是事情，怎么把事情做得更好。而第二板斧——建团队，是围绕团队建设展开的，团队建设不仅是把人聚到一起，还要凝聚大家的心力，思考如何让团队有效运转。今天这一讲，我先带你了解建团队的第一个动作——勤沟通。\n\n对技术 Leader 来讲，沟通是每天要做的事儿，不限形式、场合。虽然大部分人认为沟通既必要又重要，但如果你问他到底多重要，沟通时要注意什么，怎么达到沟通目的，可能他就未必很清楚了。\n\n其实，沟通是一件说起来容易，做起来又难又累的事情（与个人性格、习惯有关），很多时候我们在沟通时容易被主观情绪影响，凭感觉沟通缺少技巧，也忽略去学习与提高这部分能力。\n\n要知道，沟通是有目的的，既然沟通的对象是人，我们还希望通过沟通去达到一定的结果（效果），那么就要懂得一定的道理与技巧。接下来，我就从沟通的核心原则、不同维度、不同场景三个方面和你分享适合技术人的沟通技巧。\n\n\n沟通的核心原则\n\n我认为，沟通是内心想法和思考逻辑的外延，如果你有良好的沟通能力，可以在整个团队中营造公开透明的信任氛围，让信息透明的同时，也让团队成员愿意发出自己的声音。\n\n但实际情况中，很多人会有意或者无意地过滤信息，让团队内存在信息差（Leader 知道团队成员不知道的事情），进而主导一些决策和工作安排，从而让团队成员因为缺少关键信息，难以彻底发挥自己的价值和创造力。\n\n这种做法明显是错误的，因为从工作的角度出发，沟通就是在保障团队内部的信息流通，让团队成员能根据信息做出利于工作的决定。而从团队和人的角度出发，沟通是在建立信任，便于团队成员在信任的基础上达成共识，实现未来的良性发展。\n\n所以我对沟通核心原则的定义是：在相信对方的基础上，让沟通氛围变得“简单且纯粹”。 很多人在沟通时，并没有把自己与对方摆在同一个维度上，往往带着试探和博弈，这样的沟通注定失败。所以我认为，想让对方信任你的前提是你也相信对方，这才是最有效的沟通方式。\n\n\n不同维度的沟通\n\n在实际工作中，我们会和不同角色进行沟通，比如技术、产品、业务；也会有不同维度上的沟通，比如向上、向下和水平的沟通。沟通的维度源于阿里的一句土话：向上沟通有胆量、平行沟通有肺腑、向下沟通有心肝。\n\n可能对于很多同学而言，最难的是向上沟通，因为你与沟通对象之间有汇报和管理关系，所以被制约感很强，但是向上沟通在日常工作中无处不在。\n\n比如 618 大促项目会上，你所在的团队要针对营销新玩法做对应的实现，当你和团队成员已经提出一套方案后，老板也给出了另一套方案，并且认为新方案的实现成本更低。可是以你对系统的了解，虽然新方案实现成本低，在现阶段也不会出现硬伤，但其中存在很多隐蔽的细节，后续迭代会很痛（比如新增的津贴玩法看起来可能与红包类似，但如果用红包系统做津贴的底层实现，两个业务在系统上就被耦合了，当未来业务有变化时还是要拆分，并且在这个过程中增加很多不必要的风险）。那么这时你是在会上直接指出他的问题？还是在会后单独找他对焦呢？\n\n这种情况比较常见，十分考验你的沟通能力，不过这种场景里没有 100% 正确的答案，所以我只和你分享下我自己的做法和建议。\n\n如果你确定方案本身存在很严重的问题，我建议你在会上提出。虽然我们重视人与人之间的沟通，但项目以及沟通的目的是事情本身，事情要搞砸了，再顺畅的沟通都没有意义。而你需要注意的是沟通方式、技巧、口吻、语气，比如你可以肯定和老板方案之间共性的部分，对于差异点应该说明自己的判断和思考，并且尽量用事实和更好的方案来佐证，而非“你觉得”。\n\n另外，类似项目会上的分歧，在会后沟通效果极差，因为开会的目的就是为了让大家达成一致，项目成员有一个统一认识，如果在会后立刻推翻其实会对项目本身的节奏有所伤害，很容易造成信息混乱，认识不一致。所以这里我的建议是向上沟通要有技巧、有原则，认清沟通的目标与目的，不轻易妥协导致更严重的后果。\n\n关于平行沟通有肺腑是指你要真诚沟通，不要油滑套路。 之前我们每个月有产品会，CEO 以及各部门负责人会在此确定业务需求的优先级。然而有时确定优先级之后，业务方可能会私下找你表示目前有一个业务需求很重要，希望技术团队能帮帮忙，甚至加班想办法支持下。\n\n面对这样的情况，你要怎么沟通呢？很多人会套路地回复，比如“技术资源有限”“老板已经确定了优先级，自己无法做主”“会找产品看一下，过几天给你回复”……虽然类似的回复会将问题与矛盾转移，但本质上没有解决问题，同时次数多了，业务方也会认为你没有担当，甩锅，这就是很差的沟通体感。\n\n但如果你把业务方当作合作伙伴，甚至是你的客户（为他服务），就应该抱着解决问题的态度与其沟通，尝试着重新梳理资源或在你的职权范围内微调项目优先级，或者进行需求的合并，又或者借助其他团队的力量完成这件事儿，如果实在解决不了，再跟业务方共同努力寻求一个最佳方案。总之，你能不能解决是一回事，但你是不是真的想帮他解决问题又是另外一回事儿，我相信对方是能感知到这两者的区别的。\n\n另外，你可能会觉得平行沟通有肺腑意味着“直言不讳”，行就是行，不行就是不行。其实在我看来，“直言有讳”才是真的懂得沟通，也意味着你真的站在对方的角度去考虑问题。\n\n向下沟通有心肝是指有同理心，有尊重的同时要感同身受。 比如，新同学入职 3 个月，在一次需求发布上线后，变更出现 Bug 导致系统宕机，连带你受到了上级的批评。这时你要用怎样的态度和方式与新同学沟通？是把他也狠狠地批评一顿，顺带把自己的情绪转移出去，还是看他已经很难过了，于心不忍，反而安抚他一下？这两种方式都有问题：\n\n * 第一种是情绪宣泄，没有任何意义，只会造成团队内的信任错位；\n\n * 第二种无法让犯错误的同学认识到这件事的严重性，沟通对未来没有改变。\n\n这种情况下我认为好的方式是严肃但是不情绪化地做沟通，围绕事情本身来沟通，客观地表现出自己的态度，并告诉犯错方事情的严重性。\n\n以上就是沟通的核心原则与三个不同的维度，在掌握这些内容之后，你要怎么结合具体场景具体沟通呢？接下来，我就分享两个你常见的场景，One One 沟通与团队沟通，希望你能把握其中的关键点，提升沟通效率与质量。\n\n\n两个具体的沟通场景\n\nOne One 沟通\n\n在我看来，One One 的沟通不应该有特定的时间和场合，实际上，它应该无时无刻、无处不在。我非常喜欢 One One，首先沟通成本低，你不需要找场地、不需要约时间，5~10分钟就可以做一次简单的沟通。其次，你容易调整沟通的深浅，既可以针对某一方面深刻地聊，也可以针对近况做一些简单梳理。那么对于如何有效地做好One One，我认为你只要掌握好 3 点就够了。\n\n * 接地气，说人话\n\n有的人在沟通时会把整个话题事情拔高，从公司战略层、价值观、公司文化等角度出发，讲官话，讲意义，但大部分时候一线研发人员根本不 Care ，虽然这些内容对他有信息上的补充，但并不会产生共鸣，往往是左耳朵进，右耳朵出。所以你没必要畅谈对方根本不在意、不在乎、没有关联的事。\n\n沟通的内容最好是团队成员容易理解的，关心的。所以，把话讲清楚，讲明白才是最重要的，而不是用词多么高深，立意多么深远。 比如很多人经常提“赋能”“提效”，到底团队成员对赋能和提效理解多少呢？如果只有自己理解但是其他人根本不清楚是要怎么做，那又有什么用处？\n\n * 视人为人\n\n不知道你有没有过这样的经历：沟通刚刚开始几分钟后，你就迫不及待地想结束。因为交谈让你感到非常的不舒服，对方一直在用命令的语气或居高临下的态度“审判”你，而你只想躲避，或者更激烈的回应。不管哪种情况，彼此都不会有收获，因为双方并没有站在平等的角度，而是在做单方面的观点乃至情绪的输出，让人感觉对方想将自己的观点强加过来。\n\n如果你带着非常主观和情绪化的认知去沟通，会发现在沟通时存在明显的攻击性，对方也会反感、排斥、并与你持相反观点。要尊重并考虑对方的感受，注意“人性的傲慢与偏见”，曾经我刚接手一个新团队时，认为新团队某些项目做得很差（系统乱且事故频发），所以在沟通时，潜意识地带着一种“你们之前做得不对，我来教你们怎么做”的傲慢态度。而当我刚表达完自己的想法后，有同学直接跟我说：“佳宁，你是不是觉得我们做的什么都不行？你有真的进来看过吗？”这句话直接让我认识到了自己的问题：带着傲慢与偏见。\n\n总之，用居高临下的态度去责问与命令，只会把自己与团队割裂开，相当于你也没有把自己当作团队的一员，希望你以此为戒，先去认真分析整件事情存在什么问题，不要带着“有色眼睛”而是就事论事地以平等为前提进行沟通。\n\n * 沟通要“勤”\n\n这里的“勤”并不是单纯指时间和频率，而是说，你要一直对团队成员以及大家主要做的事儿保持关注，当发现一个合适的契机后就主动发起沟通。\n\n合适的契机要靠你观察与把握，比如有同学最近状态不好，经常迟到早退，那可能是家里出了问题，此时一个简单的沟通既可以给对方提供一些帮助，也可以更稳妥地安排手里的工作。再比如有同学因为一个项目协作和其他团队发生了一些不愉快，此时你去找他聊如何对外沟通、如何推进项目、如何搞定分歧，他肯定更加感受深受，并且立刻就有实战的机会。\n\n类似的情景有很多，如果你善于把握时机，以事情作为切入点，就事论事地进行沟通，会对团队同学有很多的提高和成长。所以很多时候，勤沟通不是一个技能，而是一种习惯，你要习惯通过观察和沟通来在问题恶化前着手解决问题。总的来讲，你要通过 One One 的沟通，与团队成员达成共识，让团队成员的行为向好的方向发展，进而产生更好的结果。\n\n团队沟通\n\n与One One沟通不同的是，团队沟通受人数的限制，是一对多的沟通，所以除了参考OneOne沟通的核心点外，你最关键的应该是搭场子，发起团队沟通。类似新组建团队、新人加入、年度考核、事故复盘等重要场景，对团队现状和后续发展会出现很大的变化时，我都建议你组织团队整体的沟通。一方面将信息传达到位，另一方面大家可以增强彼此的熟悉度和联系。\n\n团队沟通目的性更强，频次不高，考验你的控场能力。以破冰行为为例，在饿了么和阿里，当团队有新人加入的时候，大家会一起吃个饭，一起定个计划，整个团队做一次沟通。我刚组建中台研发团队时，就把团队中直接汇报给我的成员，拉到一起，找个地方，大家吃个饭，然后从下午聊到深夜。每个人都谈谈自己的经历、谈谈目前的团队和业务的现状、谈谈那些想吐槽、想改变的，也集思广益地凑一凑我们一起接下来要做什么、怎么做。那次沟通已经过去2年了，但是我依然印象深刻。\n\n\n总结\n\n沟通不外乎是一边说、一边听，通过说来表达自己的想法，通过听来明确对方的想法，最终在不断来回的过程中达成共识。所以好的沟通既要有自己的观点，又要认真听，根据对方的反馈来把控整个沟通节奏，引导对话往你希望的方向走。\n\n总的来说，这节课我提到了接地气、讲人话、视人为人、不偏见、不傲慢，真诚地去建立信任和联系，而这就是我认为的沟通技巧，简单但是有效，希望对你也有所帮助。\n\n最后留一个作业：让你印象最深刻的一次沟通是什么，为什么你至今念念不忘？欢迎在留言区分享你的想法，我们下一讲见。\n\n\n\n----------------------------------------\n\n\n# 精选评论\n\n# **来嗟：\n\n> 这种沟通是理想状态，首先领导要有空，公司制度支持；其次，现在00后90后有个性，不愿意与你分享太多，做好手头上的事就不想太多了，下班各自各精彩，还什么聊到天黑；有些人则认为，分配给我的工作我尽力做好，其余的别管太多，早下班，下班不要微信我，就是最好的关怀。所以，沟通模式还是很多的。\n\n#     讲师回复：\n\n>     如果遇到这类问题，我建议在招聘的时候就明确好，找的是同路人。其次不管是90后还是00后，工作总是一个付出与收获的过程，他肯定也有自己想要的得到的，围绕他关注的点来沟通。\n\n# **慈：\n\n> 谢谢",normalizedContent:"我用三讲的时间带你了解了“管理三板斧”的第一板斧——拿结果。总的来说，拿结果的三个动作“定目标”“追过程”“奖优罚劣”围绕的是事情，怎么把事情做得更好。而第二板斧——建团队，是围绕团队建设展开的，团队建设不仅是把人聚到一起，还要凝聚大家的心力，思考如何让团队有效运转。今天这一讲，我先带你了解建团队的第一个动作——勤沟通。\n\n对技术 leader 来讲，沟通是每天要做的事儿，不限形式、场合。虽然大部分人认为沟通既必要又重要，但如果你问他到底多重要，沟通时要注意什么，怎么达到沟通目的，可能他就未必很清楚了。\n\n其实，沟通是一件说起来容易，做起来又难又累的事情（与个人性格、习惯有关），很多时候我们在沟通时容易被主观情绪影响，凭感觉沟通缺少技巧，也忽略去学习与提高这部分能力。\n\n要知道，沟通是有目的的，既然沟通的对象是人，我们还希望通过沟通去达到一定的结果（效果），那么就要懂得一定的道理与技巧。接下来，我就从沟通的核心原则、不同维度、不同场景三个方面和你分享适合技术人的沟通技巧。\n\n\n沟通的核心原则\n\n我认为，沟通是内心想法和思考逻辑的外延，如果你有良好的沟通能力，可以在整个团队中营造公开透明的信任氛围，让信息透明的同时，也让团队成员愿意发出自己的声音。\n\n但实际情况中，很多人会有意或者无意地过滤信息，让团队内存在信息差（leader 知道团队成员不知道的事情），进而主导一些决策和工作安排，从而让团队成员因为缺少关键信息，难以彻底发挥自己的价值和创造力。\n\n这种做法明显是错误的，因为从工作的角度出发，沟通就是在保障团队内部的信息流通，让团队成员能根据信息做出利于工作的决定。而从团队和人的角度出发，沟通是在建立信任，便于团队成员在信任的基础上达成共识，实现未来的良性发展。\n\n所以我对沟通核心原则的定义是：在相信对方的基础上，让沟通氛围变得“简单且纯粹”。 很多人在沟通时，并没有把自己与对方摆在同一个维度上，往往带着试探和博弈，这样的沟通注定失败。所以我认为，想让对方信任你的前提是你也相信对方，这才是最有效的沟通方式。\n\n\n不同维度的沟通\n\n在实际工作中，我们会和不同角色进行沟通，比如技术、产品、业务；也会有不同维度上的沟通，比如向上、向下和水平的沟通。沟通的维度源于阿里的一句土话：向上沟通有胆量、平行沟通有肺腑、向下沟通有心肝。\n\n可能对于很多同学而言，最难的是向上沟通，因为你与沟通对象之间有汇报和管理关系，所以被制约感很强，但是向上沟通在日常工作中无处不在。\n\n比如 618 大促项目会上，你所在的团队要针对营销新玩法做对应的实现，当你和团队成员已经提出一套方案后，老板也给出了另一套方案，并且认为新方案的实现成本更低。可是以你对系统的了解，虽然新方案实现成本低，在现阶段也不会出现硬伤，但其中存在很多隐蔽的细节，后续迭代会很痛（比如新增的津贴玩法看起来可能与红包类似，但如果用红包系统做津贴的底层实现，两个业务在系统上就被耦合了，当未来业务有变化时还是要拆分，并且在这个过程中增加很多不必要的风险）。那么这时你是在会上直接指出他的问题？还是在会后单独找他对焦呢？\n\n这种情况比较常见，十分考验你的沟通能力，不过这种场景里没有 100% 正确的答案，所以我只和你分享下我自己的做法和建议。\n\n如果你确定方案本身存在很严重的问题，我建议你在会上提出。虽然我们重视人与人之间的沟通，但项目以及沟通的目的是事情本身，事情要搞砸了，再顺畅的沟通都没有意义。而你需要注意的是沟通方式、技巧、口吻、语气，比如你可以肯定和老板方案之间共性的部分，对于差异点应该说明自己的判断和思考，并且尽量用事实和更好的方案来佐证，而非“你觉得”。\n\n另外，类似项目会上的分歧，在会后沟通效果极差，因为开会的目的就是为了让大家达成一致，项目成员有一个统一认识，如果在会后立刻推翻其实会对项目本身的节奏有所伤害，很容易造成信息混乱，认识不一致。所以这里我的建议是向上沟通要有技巧、有原则，认清沟通的目标与目的，不轻易妥协导致更严重的后果。\n\n关于平行沟通有肺腑是指你要真诚沟通，不要油滑套路。 之前我们每个月有产品会，ceo 以及各部门负责人会在此确定业务需求的优先级。然而有时确定优先级之后，业务方可能会私下找你表示目前有一个业务需求很重要，希望技术团队能帮帮忙，甚至加班想办法支持下。\n\n面对这样的情况，你要怎么沟通呢？很多人会套路地回复，比如“技术资源有限”“老板已经确定了优先级，自己无法做主”“会找产品看一下，过几天给你回复”……虽然类似的回复会将问题与矛盾转移，但本质上没有解决问题，同时次数多了，业务方也会认为你没有担当，甩锅，这就是很差的沟通体感。\n\n但如果你把业务方当作合作伙伴，甚至是你的客户（为他服务），就应该抱着解决问题的态度与其沟通，尝试着重新梳理资源或在你的职权范围内微调项目优先级，或者进行需求的合并，又或者借助其他团队的力量完成这件事儿，如果实在解决不了，再跟业务方共同努力寻求一个最佳方案。总之，你能不能解决是一回事，但你是不是真的想帮他解决问题又是另外一回事儿，我相信对方是能感知到这两者的区别的。\n\n另外，你可能会觉得平行沟通有肺腑意味着“直言不讳”，行就是行，不行就是不行。其实在我看来，“直言有讳”才是真的懂得沟通，也意味着你真的站在对方的角度去考虑问题。\n\n向下沟通有心肝是指有同理心，有尊重的同时要感同身受。 比如，新同学入职 3 个月，在一次需求发布上线后，变更出现 bug 导致系统宕机，连带你受到了上级的批评。这时你要用怎样的态度和方式与新同学沟通？是把他也狠狠地批评一顿，顺带把自己的情绪转移出去，还是看他已经很难过了，于心不忍，反而安抚他一下？这两种方式都有问题：\n\n * 第一种是情绪宣泄，没有任何意义，只会造成团队内的信任错位；\n\n * 第二种无法让犯错误的同学认识到这件事的严重性，沟通对未来没有改变。\n\n这种情况下我认为好的方式是严肃但是不情绪化地做沟通，围绕事情本身来沟通，客观地表现出自己的态度，并告诉犯错方事情的严重性。\n\n以上就是沟通的核心原则与三个不同的维度，在掌握这些内容之后，你要怎么结合具体场景具体沟通呢？接下来，我就分享两个你常见的场景，one one 沟通与团队沟通，希望你能把握其中的关键点，提升沟通效率与质量。\n\n\n两个具体的沟通场景\n\none one 沟通\n\n在我看来，one one 的沟通不应该有特定的时间和场合，实际上，它应该无时无刻、无处不在。我非常喜欢 one one，首先沟通成本低，你不需要找场地、不需要约时间，5~10分钟就可以做一次简单的沟通。其次，你容易调整沟通的深浅，既可以针对某一方面深刻地聊，也可以针对近况做一些简单梳理。那么对于如何有效地做好one one，我认为你只要掌握好 3 点就够了。\n\n * 接地气，说人话\n\n有的人在沟通时会把整个话题事情拔高，从公司战略层、价值观、公司文化等角度出发，讲官话，讲意义，但大部分时候一线研发人员根本不 care ，虽然这些内容对他有信息上的补充，但并不会产生共鸣，往往是左耳朵进，右耳朵出。所以你没必要畅谈对方根本不在意、不在乎、没有关联的事。\n\n沟通的内容最好是团队成员容易理解的，关心的。所以，把话讲清楚，讲明白才是最重要的，而不是用词多么高深，立意多么深远。 比如很多人经常提“赋能”“提效”，到底团队成员对赋能和提效理解多少呢？如果只有自己理解但是其他人根本不清楚是要怎么做，那又有什么用处？\n\n * 视人为人\n\n不知道你有没有过这样的经历：沟通刚刚开始几分钟后，你就迫不及待地想结束。因为交谈让你感到非常的不舒服，对方一直在用命令的语气或居高临下的态度“审判”你，而你只想躲避，或者更激烈的回应。不管哪种情况，彼此都不会有收获，因为双方并没有站在平等的角度，而是在做单方面的观点乃至情绪的输出，让人感觉对方想将自己的观点强加过来。\n\n如果你带着非常主观和情绪化的认知去沟通，会发现在沟通时存在明显的攻击性，对方也会反感、排斥、并与你持相反观点。要尊重并考虑对方的感受，注意“人性的傲慢与偏见”，曾经我刚接手一个新团队时，认为新团队某些项目做得很差（系统乱且事故频发），所以在沟通时，潜意识地带着一种“你们之前做得不对，我来教你们怎么做”的傲慢态度。而当我刚表达完自己的想法后，有同学直接跟我说：“佳宁，你是不是觉得我们做的什么都不行？你有真的进来看过吗？”这句话直接让我认识到了自己的问题：带着傲慢与偏见。\n\n总之，用居高临下的态度去责问与命令，只会把自己与团队割裂开，相当于你也没有把自己当作团队的一员，希望你以此为戒，先去认真分析整件事情存在什么问题，不要带着“有色眼睛”而是就事论事地以平等为前提进行沟通。\n\n * 沟通要“勤”\n\n这里的“勤”并不是单纯指时间和频率，而是说，你要一直对团队成员以及大家主要做的事儿保持关注，当发现一个合适的契机后就主动发起沟通。\n\n合适的契机要靠你观察与把握，比如有同学最近状态不好，经常迟到早退，那可能是家里出了问题，此时一个简单的沟通既可以给对方提供一些帮助，也可以更稳妥地安排手里的工作。再比如有同学因为一个项目协作和其他团队发生了一些不愉快，此时你去找他聊如何对外沟通、如何推进项目、如何搞定分歧，他肯定更加感受深受，并且立刻就有实战的机会。\n\n类似的情景有很多，如果你善于把握时机，以事情作为切入点，就事论事地进行沟通，会对团队同学有很多的提高和成长。所以很多时候，勤沟通不是一个技能，而是一种习惯，你要习惯通过观察和沟通来在问题恶化前着手解决问题。总的来讲，你要通过 one one 的沟通，与团队成员达成共识，让团队成员的行为向好的方向发展，进而产生更好的结果。\n\n团队沟通\n\n与one one沟通不同的是，团队沟通受人数的限制，是一对多的沟通，所以除了参考oneone沟通的核心点外，你最关键的应该是搭场子，发起团队沟通。类似新组建团队、新人加入、年度考核、事故复盘等重要场景，对团队现状和后续发展会出现很大的变化时，我都建议你组织团队整体的沟通。一方面将信息传达到位，另一方面大家可以增强彼此的熟悉度和联系。\n\n团队沟通目的性更强，频次不高，考验你的控场能力。以破冰行为为例，在饿了么和阿里，当团队有新人加入的时候，大家会一起吃个饭，一起定个计划，整个团队做一次沟通。我刚组建中台研发团队时，就把团队中直接汇报给我的成员，拉到一起，找个地方，大家吃个饭，然后从下午聊到深夜。每个人都谈谈自己的经历、谈谈目前的团队和业务的现状、谈谈那些想吐槽、想改变的，也集思广益地凑一凑我们一起接下来要做什么、怎么做。那次沟通已经过去2年了，但是我依然印象深刻。\n\n\n总结\n\n沟通不外乎是一边说、一边听，通过说来表达自己的想法，通过听来明确对方的想法，最终在不断来回的过程中达成共识。所以好的沟通既要有自己的观点，又要认真听，根据对方的反馈来把控整个沟通节奏，引导对话往你希望的方向走。\n\n总的来说，这节课我提到了接地气、讲人话、视人为人、不偏见、不傲慢，真诚地去建立信任和联系，而这就是我认为的沟通技巧，简单但是有效，希望对你也有所帮助。\n\n最后留一个作业：让你印象最深刻的一次沟通是什么，为什么你至今念念不忘？欢迎在留言区分享你的想法，我们下一讲见。\n\n\n\n----------------------------------------\n\n\n# 精选评论\n\n# **来嗟：\n\n> 这种沟通是理想状态，首先领导要有空，公司制度支持；其次，现在00后90后有个性，不愿意与你分享太多，做好手头上的事就不想太多了，下班各自各精彩，还什么聊到天黑；有些人则认为，分配给我的工作我尽力做好，其余的别管太多，早下班，下班不要微信我，就是最好的关怀。所以，沟通模式还是很多的。\n\n#     讲师回复：\n\n>     如果遇到这类问题，我建议在招聘的时候就明确好，找的是同路人。其次不管是90后还是00后，工作总是一个付出与收获的过程，他肯定也有自己想要的得到的，围绕他关注的点来沟通。\n\n# **慈：\n\n> 谢谢",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"建机制：规则流程越建越多，为何效果却越来越差？",frontmatter:{title:"建机制：规则流程越建越多，为何效果却越来越差？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/f74aaf/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/13.%20%20%E5%BB%BA%E6%9C%BA%E5%88%B6%EF%BC%9A%E8%A7%84%E5%88%99%E6%B5%81%E7%A8%8B%E8%B6%8A%E5%BB%BA%E8%B6%8A%E5%A4%9A%EF%BC%8C%E4%B8%BA%E4%BD%95%E6%95%88%E6%9E%9C%E5%8D%B4%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%B7%AE%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/13.  建机制：规则流程越建越多，为何效果却越来越差？.md",key:"v-559e6528",path:"/pages/f74aaf/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:3518}],headersStr:"精选评论",content:"上一讲我带你围绕沟通的不同维度、场景，提出“在信任的基础上，让沟通简单且纯粹”的观点，今天这一讲，我们来聊一聊在团队中怎么建立与落地机制。\n\n你有没有发现，在日常工作中，大到公司的 KPI 考核、战略目标设定，小到项目例会、事故应急处理、需求优先级调整，这些事情如何处理，谁来处理都是被提前定义好的。\n\n从我的视角来看的话，这些规则和流程都是某种机制的具现化，通常我们为了解决某些问题、达成某些效果会定义一些规则，希望人和事物发展在规则内进行和处理，这就是一个建立机制的过程，而机制的落地的方式则是很多事物的组合（人、流程、工具、信息……）。\n\n当我们简单地找到“机制是什么”的感觉之后，接下来就从三个方面展开“建机制”这件事儿（在这个过程中，我也会结合一些过往的小案例）：\n\n * 机制发挥什么作用？达到什么效果？\n\n * 如何考虑和设计机制？\n\n * 机制在团队中如何落地？\n\n\n机制发挥什么作用？\n\n一般而言，我们为了长期、持续、一致地拿到某个结果或者处理某些问题，就会设计对应的机制和流程。平时，你最容易接触到两类机制。\n\n * 与管理相关： 比如为了信息互通，约定每周固定时间通过邮件、会议、IM 等方式，将提前定义好的信息做一个汇总交互（表现为周报、周会等），这就是机制的一种具现。\n\n * 与技术相关： 比如为了多人协同，制定开发流程、Bug 处理、发布上线流程，甚至在日常实际开发的工作中，往往也先定义 API 契约，然后在联调测试时再真正实现验证，这些约定、契约、流程都是对应机制在落地时的具体表现。\n\n所以通俗来讲，“建机制”就是当你要长期持续地处理一些问题时，需要跟解决该问题的相关人针对怎么处理问题达成一致，然后按照约定的方式去执行（回想一下前面学过的内容，其实前几讲就与机制相关，不管是稳定性中的应急机制、发布机制，还是技术债务中债务 CheckList，其实都是在设计处理问题的机制）。\n\n站在团队的角度，建机制尤为重要，你要通过机制让团队有统一的行为与规则，让组织像人一样，言行举止有规律可循。\n\n听起来很容易，可要设计一个有效、持续发挥作用的机制并不简单。你不但清晰地认识到所处的环境和要解决的问题，还要让团队成员认可并实践，毕竟大部分机制的执行还是依赖于个人。\n\n那你要怎么建立机制呢？\n\n\n如何设计一个好的机制？\n\n我们不能否认，每个团队都会存在一些“特别不合理”的机制，比如因为问题和环境已经发生变化，但是原有机制没有随之更新，显得格格不入，不合常理；又比如为了解决 1 个问题所建立的机制又源源不断地制造了新的问题。\n\n这时，你不要着急着推翻重来，而是要置身其中，明确“解决什么问题，想要得到什么结果”，先了解问题、梳理思路然后再想办法调整和优化。另外，既然建机制是管理动作的一种，那么就要遵循我一直强调的“简单、容易理解、便于操作和完整闭环”。在这里我围绕建立机制总结了三个关键点。\n\n * 规则统一，不自相矛盾\n\n一些机制是通过技术自动化实现的，比如系统出现异常自动告警，但管理工作中大部分机制是靠“共识契约”运行的，所以机制定义明确、清晰、统一尤为重要。比如定义“每周任务安排”的机制，规定：每周一下午2:30，团队成员以先认领再分配的方式确认本周内容，并商定交付时间、标准，在会后将结论统一记录并公布（通过 PM 工具或者邮件、文档等方式）。\n\n反之，如果该机制的运行时间、参与者、结论非明确或不固定（比如有时周一、有时周三，有时 3 个人、有时 5 个人，那么该机制就没有任何实操的价值了）。所以，机制内容要尽量统一和固化，让成员有清晰且一致的认识。\n\n * 简单有效，便于增删\n\n不要设计需要成员用 10min 理解的机制，机制的设计一定要围绕某一个要解决的问题，否则 Cover 的场景越多、条件越复杂，用的时候就会面临很多困难，机制本身也很难真实地发挥作用。比如一个处理慢 SQL 的机制，在如何定义慢 SQL 时，如果有 N 种满足条件需要人为处理，那么执行起来就会很困难。所以，你可以先定义 2~3 个条件，比如时长超过 xxx 毫秒，调用次数超过 xxx 次，先让机制跑起来可以处理问题，再慢慢优化。\n\n * 紧盯整体结果，机制的 ROI 要足够高\n\n有些机制看起来能解决某类问题，但当你放大到一个团队或部门之后，为了解决该问题所付出的代价甚至超出了问题本身带来的影响，那么就得不偿失了。另外，日常工作中“捡芝麻丢西瓜”的情况并不少见，有的 Leader 为了最大程序掌握团队的开发工作，要求每人每天按照一定的格式书写日报，然后由他进行汇总。\n\n也许这个机制确实会帮团队发现一些问题，但也会增加低价值工作量，成员大量的时间在做计划和总结却没有精细化执行，很多时候为了解决 A 问题却产生了 B、C、D 等问题。\n\n所以，机制的设立一定要站在整体和长期的视角去看，去看它对每一个人和团队的影响。\n\n在现实工作中，树立机制的维度你可以围绕 4 点：奖罚（你可以参考 10 讲的内容）、反馈（线上问题的处理很典型，当发现线上出现异常时，怎么把相关信息反馈到对应的负责人）、沟通（形式非常多，比如会议、周报、OneOne）、决策（需要很多人针对某一个问题给出具体的答案，比如决定某一个技术方案）。\n\n\n机制要怎么落地？\n\n当你设计好一个机制想要它发挥作用时，需要所有相关人形成统一的共识，通常可以将团队成员拉到一起开会讨论，会上主要聊 3点内容。\n\n * 先说 why： 即机制的内容是什么？为了解决什么问题？你在设计机制时是如何思考的？\n\n * 共识的要与不要： 和大家讨论我们要不要这样做？看看大家是怎么想的，通过对话和引导形成一定的结论，有些内容需要保留，有些不合理需要剔除，促成结论最为重要。\n\n * 承诺行为举止： 确认机制之后，需要让结论形成对各自行为的约束。比如不同的成员认领不同的角色和任务，或者在 IM 中一起公告规则，总之每个成员要与机制的参与感。\n\n\n案例详解\n\n以上就是“建机制”主要的理论内容，接下来我以信息互通的会议设计和开发流程中的CodeReview 为例，和你进一步看一下机制的具现应该是怎样的。\n\n会议是往往是重要信息沟通、讨论、同步的首选方式，很多重要机制的落地都会涉及会议的方式，这里我单独把技术涉及的周期性会议罗列出来。\n\n你可以看到基于不同的目的所举行的会议在时间、参与人、内容上都有所差别。作为技术Leader 要先掌握怎么开会，以及开什么样的会，合理的会议安排不仅让事情更加有条理，也便于团队成员参与。\n\n\n\n各类会议的设计\n\n看完会议之后，我们再看一个更完整的案例，如何做 CodeReview ？ 如果我们站在想推行CodeReview 的思路去看，就需要设计一个机制让大家能把 CodeReview 做下去。\n\n先考虑目的， CodeReview 主要是解决两方面的问题：提高代码质量；帮助开发同学认识到如何写出更好的代码。不同的侧重点设计出来的机制也有所不同，按照我的理解，CodeReview 的主要作用还是帮助大家成长，打造团队内的技术提升氛围，次要才是促进产品质量的提升。\n\n确定了核心想要达成的效果，接下来就可以着手确定机制的内容，这里面要考虑几个方面的内容：可能会遇到的问题（阻力）、机制实施的成本、机制运行的时机和周期、站在一个机制参与者的角度考虑他要做什么。\n\n具体 CodeReview 的机制方案可以参考下图：\n\n\n\n当然，再好的机制也不是万能的，CodeReview 并不适合所有的团队，比如：团队成员对其产生很大的分歧，产生极大的内耗；需求和业务已经应接不暇，生存很困难；团队处于创新和尝试的阶段，并不稳定。我想强调，任何一个机制都不会存在永久化收益，不是说在 A 团队的机制，放到 B 团队就一定会好。\n\n\n总结\n\n希望团队内所有成员都按照统一的方式去合力解决一个问题非常困难，而建机制在某种程度上就是为了解决“群策而不群力”的问题。另外，每一个机制的创建都存在成本，如果一个组织内名存实亡的机制过多，那么大家对机制的认识和执行都会越来越差，最终团队会一盘散沙、毫无凝聚力。反之，设计良好的机制会让团队整体的执行力提升，并且最大程序的将每个人的能力与特长整合起来。\n\n\n\n留个作业：你所处的团队有没有哪些机制是你认为很糟糕的，为什么？你觉得应该如何改进？欢迎在留言区分享你的看法，感谢你的阅读，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **用户7996：\n\n> 定了按流程执行需求--》开发，结果每次都是需求需要开发自己完善，最后开发干了产品一大半工作，完全没有效率\n\n#     讲师回复：\n\n>     不work的流程和机制没有任何意义，流程本质上是一种行为共识",normalizedContent:"上一讲我带你围绕沟通的不同维度、场景，提出“在信任的基础上，让沟通简单且纯粹”的观点，今天这一讲，我们来聊一聊在团队中怎么建立与落地机制。\n\n你有没有发现，在日常工作中，大到公司的 kpi 考核、战略目标设定，小到项目例会、事故应急处理、需求优先级调整，这些事情如何处理，谁来处理都是被提前定义好的。\n\n从我的视角来看的话，这些规则和流程都是某种机制的具现化，通常我们为了解决某些问题、达成某些效果会定义一些规则，希望人和事物发展在规则内进行和处理，这就是一个建立机制的过程，而机制的落地的方式则是很多事物的组合（人、流程、工具、信息……）。\n\n当我们简单地找到“机制是什么”的感觉之后，接下来就从三个方面展开“建机制”这件事儿（在这个过程中，我也会结合一些过往的小案例）：\n\n * 机制发挥什么作用？达到什么效果？\n\n * 如何考虑和设计机制？\n\n * 机制在团队中如何落地？\n\n\n机制发挥什么作用？\n\n一般而言，我们为了长期、持续、一致地拿到某个结果或者处理某些问题，就会设计对应的机制和流程。平时，你最容易接触到两类机制。\n\n * 与管理相关： 比如为了信息互通，约定每周固定时间通过邮件、会议、im 等方式，将提前定义好的信息做一个汇总交互（表现为周报、周会等），这就是机制的一种具现。\n\n * 与技术相关： 比如为了多人协同，制定开发流程、bug 处理、发布上线流程，甚至在日常实际开发的工作中，往往也先定义 api 契约，然后在联调测试时再真正实现验证，这些约定、契约、流程都是对应机制在落地时的具体表现。\n\n所以通俗来讲，“建机制”就是当你要长期持续地处理一些问题时，需要跟解决该问题的相关人针对怎么处理问题达成一致，然后按照约定的方式去执行（回想一下前面学过的内容，其实前几讲就与机制相关，不管是稳定性中的应急机制、发布机制，还是技术债务中债务 checklist，其实都是在设计处理问题的机制）。\n\n站在团队的角度，建机制尤为重要，你要通过机制让团队有统一的行为与规则，让组织像人一样，言行举止有规律可循。\n\n听起来很容易，可要设计一个有效、持续发挥作用的机制并不简单。你不但清晰地认识到所处的环境和要解决的问题，还要让团队成员认可并实践，毕竟大部分机制的执行还是依赖于个人。\n\n那你要怎么建立机制呢？\n\n\n如何设计一个好的机制？\n\n我们不能否认，每个团队都会存在一些“特别不合理”的机制，比如因为问题和环境已经发生变化，但是原有机制没有随之更新，显得格格不入，不合常理；又比如为了解决 1 个问题所建立的机制又源源不断地制造了新的问题。\n\n这时，你不要着急着推翻重来，而是要置身其中，明确“解决什么问题，想要得到什么结果”，先了解问题、梳理思路然后再想办法调整和优化。另外，既然建机制是管理动作的一种，那么就要遵循我一直强调的“简单、容易理解、便于操作和完整闭环”。在这里我围绕建立机制总结了三个关键点。\n\n * 规则统一，不自相矛盾\n\n一些机制是通过技术自动化实现的，比如系统出现异常自动告警，但管理工作中大部分机制是靠“共识契约”运行的，所以机制定义明确、清晰、统一尤为重要。比如定义“每周任务安排”的机制，规定：每周一下午2:30，团队成员以先认领再分配的方式确认本周内容，并商定交付时间、标准，在会后将结论统一记录并公布（通过 pm 工具或者邮件、文档等方式）。\n\n反之，如果该机制的运行时间、参与者、结论非明确或不固定（比如有时周一、有时周三，有时 3 个人、有时 5 个人，那么该机制就没有任何实操的价值了）。所以，机制内容要尽量统一和固化，让成员有清晰且一致的认识。\n\n * 简单有效，便于增删\n\n不要设计需要成员用 10min 理解的机制，机制的设计一定要围绕某一个要解决的问题，否则 cover 的场景越多、条件越复杂，用的时候就会面临很多困难，机制本身也很难真实地发挥作用。比如一个处理慢 sql 的机制，在如何定义慢 sql 时，如果有 n 种满足条件需要人为处理，那么执行起来就会很困难。所以，你可以先定义 2~3 个条件，比如时长超过 xxx 毫秒，调用次数超过 xxx 次，先让机制跑起来可以处理问题，再慢慢优化。\n\n * 紧盯整体结果，机制的 roi 要足够高\n\n有些机制看起来能解决某类问题，但当你放大到一个团队或部门之后，为了解决该问题所付出的代价甚至超出了问题本身带来的影响，那么就得不偿失了。另外，日常工作中“捡芝麻丢西瓜”的情况并不少见，有的 leader 为了最大程序掌握团队的开发工作，要求每人每天按照一定的格式书写日报，然后由他进行汇总。\n\n也许这个机制确实会帮团队发现一些问题，但也会增加低价值工作量，成员大量的时间在做计划和总结却没有精细化执行，很多时候为了解决 a 问题却产生了 b、c、d 等问题。\n\n所以，机制的设立一定要站在整体和长期的视角去看，去看它对每一个人和团队的影响。\n\n在现实工作中，树立机制的维度你可以围绕 4 点：奖罚（你可以参考 10 讲的内容）、反馈（线上问题的处理很典型，当发现线上出现异常时，怎么把相关信息反馈到对应的负责人）、沟通（形式非常多，比如会议、周报、oneone）、决策（需要很多人针对某一个问题给出具体的答案，比如决定某一个技术方案）。\n\n\n机制要怎么落地？\n\n当你设计好一个机制想要它发挥作用时，需要所有相关人形成统一的共识，通常可以将团队成员拉到一起开会讨论，会上主要聊 3点内容。\n\n * 先说 why： 即机制的内容是什么？为了解决什么问题？你在设计机制时是如何思考的？\n\n * 共识的要与不要： 和大家讨论我们要不要这样做？看看大家是怎么想的，通过对话和引导形成一定的结论，有些内容需要保留，有些不合理需要剔除，促成结论最为重要。\n\n * 承诺行为举止： 确认机制之后，需要让结论形成对各自行为的约束。比如不同的成员认领不同的角色和任务，或者在 im 中一起公告规则，总之每个成员要与机制的参与感。\n\n\n案例详解\n\n以上就是“建机制”主要的理论内容，接下来我以信息互通的会议设计和开发流程中的codereview 为例，和你进一步看一下机制的具现应该是怎样的。\n\n会议是往往是重要信息沟通、讨论、同步的首选方式，很多重要机制的落地都会涉及会议的方式，这里我单独把技术涉及的周期性会议罗列出来。\n\n你可以看到基于不同的目的所举行的会议在时间、参与人、内容上都有所差别。作为技术leader 要先掌握怎么开会，以及开什么样的会，合理的会议安排不仅让事情更加有条理，也便于团队成员参与。\n\n\n\n各类会议的设计\n\n看完会议之后，我们再看一个更完整的案例，如何做 codereview ？ 如果我们站在想推行codereview 的思路去看，就需要设计一个机制让大家能把 codereview 做下去。\n\n先考虑目的， codereview 主要是解决两方面的问题：提高代码质量；帮助开发同学认识到如何写出更好的代码。不同的侧重点设计出来的机制也有所不同，按照我的理解，codereview 的主要作用还是帮助大家成长，打造团队内的技术提升氛围，次要才是促进产品质量的提升。\n\n确定了核心想要达成的效果，接下来就可以着手确定机制的内容，这里面要考虑几个方面的内容：可能会遇到的问题（阻力）、机制实施的成本、机制运行的时机和周期、站在一个机制参与者的角度考虑他要做什么。\n\n具体 codereview 的机制方案可以参考下图：\n\n\n\n当然，再好的机制也不是万能的，codereview 并不适合所有的团队，比如：团队成员对其产生很大的分歧，产生极大的内耗；需求和业务已经应接不暇，生存很困难；团队处于创新和尝试的阶段，并不稳定。我想强调，任何一个机制都不会存在永久化收益，不是说在 a 团队的机制，放到 b 团队就一定会好。\n\n\n总结\n\n希望团队内所有成员都按照统一的方式去合力解决一个问题非常困难，而建机制在某种程度上就是为了解决“群策而不群力”的问题。另外，每一个机制的创建都存在成本，如果一个组织内名存实亡的机制过多，那么大家对机制的认识和执行都会越来越差，最终团队会一盘散沙、毫无凝聚力。反之，设计良好的机制会让团队整体的执行力提升，并且最大程序的将每个人的能力与特长整合起来。\n\n\n\n留个作业：你所处的团队有没有哪些机制是你认为很糟糕的，为什么？你觉得应该如何改进？欢迎在留言区分享你的看法，感谢你的阅读，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **用户7996：\n\n> 定了按流程执行需求--》开发，结果每次都是需求需要开发自己完善，最后开发干了产品一大半工作，完全没有效率\n\n#     讲师回复：\n\n>     不work的流程和机制没有任何意义，流程本质上是一种行为共识",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"找到人：招聘是 Leader 的责任，不是 HR 的",frontmatter:{title:"找到人：招聘是 Leader 的责任，不是 HR 的",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/34fb11/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/15.%20%20%E6%89%BE%E5%88%B0%E4%BA%BA%EF%BC%9A%E6%8B%9B%E8%81%98%E6%98%AF%20Leader%20%E7%9A%84%E8%B4%A3%E4%BB%BB%EF%BC%8C%E4%B8%8D%E6%98%AF%20HR%20%E7%9A%84.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/15.  找到人：招聘是 Leader 的责任，不是 HR 的.md",key:"v-45ad0624",path:"/pages/34fb11/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:5900}],headersStr:"精选评论",content:"从今天开始，我会用三讲的时间和你聊一聊管理的最后一板斧：招聘与解聘。在招聘与解聘中，总共有三个动作：找到人、能落地和升级汰换，今天咱们就先来学习怎么才能找到人。\n\n过去几年，招聘一直在我的工作中占据很大的比重，在这个过程中，我发现这样一个现象：很多 Leader 认为招聘是 HR 的责任，HR 把控着筛选简历、找候选人、安排面试、谈薪以及 Offer 发放的整个环节，自己只做技术面试，通过专业能力“判断”候选人是否符合团队需要，不会参与其余环节。\n\n这种想法在公司初期扩张阶段并没造成什么不好的问题，不过在 2017、2018 年还是有了比较大的改变。17、18年，越来越多的公司和平台开始了“抢人大战”，业务竞争的加剧让团队人员缺口变大，Leader 逐渐意识到不能坐等 HR 搞定一切，不然还没等找到新同学，自己负责的业务和团队就扛不住了。这时，“人才要自己去找、去抢”的观念得到了认可。\n\n从团队的角度出发，Leader“主动出击、寻找合适人选”的观念符合逻辑，你既然是团队的一号位，自然最应该了解团队现状，以及团队需要的人选。与此同时，找到合适的人对你的影响最大而非 HR，因为你才是对团队“生老病死”、进人和离人最直接的决策者和结果的影响者，你既要为招来的人负责，也要靠其去优化并改变团队的现状。另外，通常 HR 服务于多个团队，未必是 1v1 针对你团队的，如果单纯依赖 HR 找人，最终的结果可能不会符合你的期望。\n\n出于这几点原因，我认为招聘是技术 Leader 的责任而不是 HR 的。并且你要清楚招人和找人的区别：找人是一个主动寻找的动作，招人是一个被动等待的状态。\n\n既然已经明确了责任的主体，接下来的重点就是怎么找到人，我结合自己的经验，总结了三个步骤：定需求找人选、面试甄别、做决定。\n\n\n招人不等于盲目加人\n\n业务快速发展必然会让系统日渐庞大，需求不断增加，研发的压力也会随之加大，在这种情况下，为了缓解压力我们自然而然地会选择最容易的解决方案：“业务需求增多 + 人手太少 = 招人”。\n\n看起来，招人似乎能解决研发领域的一切问题，如果不能就再多招点儿。这背后反映出一个问题：很多时候我们并不知道自己要解决什么问题，也不知道真正要找什么样的人，只是感觉加人就能解决问题。\n\n而这就衍生出一个辩证的问题：加人能不能解决问题？\n\n在 07 讲中，我也提到了这一点，在我看来，如果从系统开发层面出发，单纯加人未必能解决实际问题，系统开发这项工作并不是标准化生产的流水线作业，一味地加人并不能提升整体效率。\n\n如果一个系统在最初设计时没有进行很好的规划，导致实现的复杂度过高、模块间结构模糊，“高耦合低内聚”，之后是很难通过清晰的分工调整让生产力最大化的，即使后期发现进度不理想，想加人也未必能发挥效果，原因有这样几点。\n\n 1. 时间上赶不及： 新加入的成员需要花费大量时间理解业务和系统，并不是人员到位之后就会立刻发挥作用，这个周期可能是几天也可能是一两周。\n\n 2. 拖慢整体进度： 新成员加入势必要老人花费时间与精力帮助他们熟悉系统，老人反而增加了任务，影响整体进度。\n\n 3. 质量上有风险： 新加入的成员在短时间了解业务和系统基本情况后，为了赶进度就会尽快上手，但是因为系统复杂度很高，会有更大概率交付Bug，后期要么是风险增加，要么为了覆盖这些风险要额外多做很多事，最终看进展可能和不加人时所差无几。\n\n那加人一定是错的吗？并不是，我反对的不是加人，而是无目的、无脑、下意识地加人。大部分管理者都希望自己的团队规模越大越好，能管理更多的人，能 hold 住更多的事情，从而证明自己的价值。那选择加人是很常见的选择，不过你要做的是加对人，具体可以参考这几个步骤：\n\n * 明确业务目标；\n\n * 盘点团队需求；\n\n * 做出岗位设计；\n\n * 提炼岗位要求。\n\n总而言之一句话： 找人并不等于盲目加人（招人），先明确“找人”动作背后的 WHY，也就是为什么要加人？加人要解决什么问题，以及你加的人是不是能解决这个问题？\n\n为了明确这一点，你需要先梳理业务目标与现状，在此基础上盘点团队的情况与需求。\n\n举个例子，假如我负责订单系统年底业务上的目标是订单量实现翻倍，而业务上为了达到翻倍的目标会开拓很多新业务，比如增加商品的种类、丰富营销的玩法，那么这些新业务就会对系统有新的业务需求，同时也会对系统稳定性有要求。\n\n明确了业务目标与现状趋势后，你要梳理并思考当前团队的人员情况是否够支持接下来的发展需要。\n\n假设目前的团队能 hold 住业务上功能的需求，但是对高并发的场景没有太大把握，你怕在遇到“618”或者“双十一”等大促活动时，系统出现棘手乃至无法解决的问题。那么此时你就需要有过相关经验的同学，专门解决数据存储、性能、高并发等痛点问题，此时你就可以根据业务目标和梳理出的团队现状做出岗位设计，然后再与 HR一起形成岗位 JD。\n\n强调一点：在形成岗位 JD 时，你要做好假设（脑海里要有画面感），假设已经有人符合 JD 的要求，那么他加入团队之后，大家是怎么配合的？他如何展开工作？团队的运转是否能严丝合缝？这些都可以提前考虑下，这也涉及面试甄别的内容（比如需要他有较强的沟通能力，我后面会讲）。\n\n做好上述准备工作后，你要和 HR 确定招聘的渠道：内推、猎头、招聘网站。从过往的经验和普遍认知来看，内推肯定是最优的选择。为了调动同学们内推的热情，你可以采取一些措施，比如组织团队内部的“内推大赛”，在某一个季度发动同学们内推，内推人数排名前三的人选获得一定的内部激励，内推成功后公司一般也会有奖励（我记得在 2019 年，饿了么技术团队内推冠军的奖励就是除了内推奖金外，两张全国任意飞的机票） 。\n\n\n闻味道、问事实、看能力\n\n当你通过简历筛选到心仪的候选人后，就会进入“面试甄别”环节。各个公司的面试环节往往大同小异，只不过常规现象是：公司越大，面试轮次会越多、周期越长。那么怎么做好面试甄别呢？我的推荐是“面试习惯”与“面试技巧”二者缺一不可，先有好习惯再有技巧。\n\n在我看来，好的面试习惯主要有这样几点。\n\n * 面试前看简历：有的面试官在面试开始后，先用几分钟浏览简历，然后就开始各种提问。这其实缺少了深入思考的环节，只是在根据简历问问题，而没有结合岗位需要问问题。不管是出于对职位的重视，还是更彻底的人员考察，我都建议你在面试开始前花 10 分钟“细看简历”，思考其中你感兴趣的内容，结合岗位的需要，简单设计下面试题。\n\n * 面试中更多倾听：不管是处于目的性还是基本的尊重，不要随意打断候选人的发言和思路，学会倾听 > 不断提问，只有他说的多你才能考察到更多。\n\n * 面试后速写评价：我经常在面试完要去参加其他的会议，当第二天 HR 问我的面试评价时，当时的感受已经忘得差不多了。所以你在面试完候选人时，要立刻记录下面试评价（这时，你的主观意识会更强，感受更强烈），同时也加快面试反馈的时间。\n\n面试技巧主要有：闻味道、问事实、看能力。三者没有孰轻孰重、先后顺序，往往是融合在一起的。不过按照我的习惯，侧重点在于“问事实——看能力——闻味道”。\n\n * 问事实\n\n问事实其实有一套拿来即用的框架 STAR：情境（Situation）、任务（Task）、行动（Action）、结果（Result）。也就是：在什么样的情境下？候选人的任务是什么？采取的行动是怎样的？结果如何？其中的侧重点在于 A ，考察候选人具体的行动，以及为什么这么做。\n\n通常你可以顺着候选人的一些表述来追问，比如：\n\n * 候选人“在某个项目中，我做了高并发的设计。”\n\n * 我“什么样高并发的设计，是什么场景？”\n\n * 候选人“在XX场景下，有短时间超过1K QPS的请求，我通过缓存和消息队列来处理。”\n\n * 我“缓存或者消息队列如果出故障了怎么办？会将系统整体拖垮吗？”\n\n * 候选人“缓存出故障了可能会，消息队列没关系，业务上能接受一定延迟，系统整体应该不会垮”\n\n * 我“缓存出问题了，数据库不会被击穿吗？为什么整体不会垮？”\n\n * 候选人“有并发限制，数据库可能会 Hang 住，这个场景与其他场景是隔离的，整体系统不会一起雪崩。”\n\n * 我“缓存在这里变成了强依赖，这样实现的好坏和解决方案你是怎么考虑的？”\n\n * ……\n\n你可以结合候选人的回答，不断从对话中深挖一些内容，从而进一步判断候选人的实际经历。\n\n“问事实”并不会侧重考察业务或者技术，也并不是完全对能力的深挖，更重要的是：看候选人所说的内容他是否真正做过，以及他的思考过程。\n\n有候选人为了突出亮点，只负责了某一模块却说负责了整个项目，那么在问事实中，一旦你深挖候选人的落地思路，很容易证明哪些项目是他真正做过，哪些是他根本没做。\n\n * 看能力\n\n看能力主要是看候选人的技术能力（比如编程语言、高并发、高可用等）与业务能力（比如候选人做过电商，那就看他对电商领域的理解深度与广度），你可以把看能力与问事实相结合。\n\n类似 “redis 怎么实现接口缓存？” 并不是一个好问题，候选人在面试前可能都会做足准备，应对一些纯粹的技术问题，所以这样的问题可能是“背出来”的，并不代表他有解决这类问题的能力。要把纯技术问题与业务场景相结合起来问题，比如“你之前做个那个XX系统，如果用户量增加 10 倍会有什么问题，怎么解决，如果增加 100 倍呢？”。以具体的业务场景，考察候选人对这个问题的理解程度。\n\n * 闻味道\n\n不管是饿了么还是阿里，经常说“面试候选人一定要闻闻他的味道”。直白点儿说，就是看候选人与你、与你们团队是否合得来，你们是不是同路人，是否可以一起共事，会不会为团队发展一起努力？如果味道不同，很可能对团队造成不好的影响，拿不到好的结果。\n\n那怎么闻呢？交流中的感觉占据很大比重，其次是一些回答的倾向，比如有些候选人不管你问什么都会先反驳下你说的可能，那么有可能你会觉得他比较傲或者沟通困难，但是在他看来自己并没有什么问题，所以闻味道是一个比较主观的事儿，和找女朋友类似，并不存在客观标准。\n\n对不同的 Leader 来说，倾向的味道也会不同，就我自己而言，我更喜欢“皮实”“自省”“乐观”这样几个关键词：候选人是否玻璃心？是否足够自省和乐观？你要清楚自己倾向的“味道”是什么。\n\n\n宁缺毋滥，守住底线\n\n在多轮面试中，你的面试只是其中的一环，在面试结束之后，还要综合候选人的表现，做出决定（是否发放 Offer 以及发怎样的 Offer）。\n\n这一步往往是最纠结的环节，如果候选人足够优秀，你可以不用考虑直接通过，反之，如果候选人明显不符合要求，你也很容易 Pass 掉，但大多数情况下，你遇到的总是模棱两可的情景，一边觉得候选人不太合适但是也不是不能用，一边业务压力大非常需要人，那么这时你要考虑什么呢？有两个关键点可供你思考：\n\n * 关注未来；\n\n * 宁缺毋滥。\n\n先明确招聘是为了未来的，远水解不了近渴，你重点关注的应该是候选人来了之后团队会有何改变，是不是对未来的团队有更好的作用？可以问自己这样 4 个问题。\n\n 1. 他是否有能力的同时还有潜力？比如很强的发展欲望或学习能力？\n\n 2. 他身上是否有特质足够吸引你？比如让你觉得当他未来会比你更优秀？\n\n 3. 你是希望与他这样的人一起共事的？\n\n 4. 当他加入团队后，能否将团队氛围激活，形成鲶鱼效应？\n\n除了关注未来，还要宁缺毋滥，守住底线，你同样需要考虑这样 2 点。\n\n 1. 能力水平超过团队 50% 的人以上：确保团队越来越强，而不是越来越弱，有的 Leader会觉得候选人比团队最差的两个人好就可以了，但这样一来，随着时间拉长，你的团队会越来越差。\n\n 2. 内心是否非常犹豫？犹豫往往意味着“不想要 > 想要”，如果是迫于业务压力不得不加人，我建议你还是不要勉强，因为有可能本来解决业务压力就可以的问题演变成还要额外解决不适合的新员工的问题。\n\n讲到这儿，与“找到人”有关的理论知识就全部讲完了，接下来，让我们简单模拟一个场景：假设你现在需要为团队招聘一个技术专家，解决下半年业务发展中高并发、高可用的技术问题，现在有几个候选人，你会把 offer 给谁？\n\n * 张三： 加入公司意愿很强烈，人很踏实，虽然技术深度不够（受限于过往经历），但是跟业务匹配度很高，来了就能上手干活发挥作用。\n\n * 李四： 技术过硬，面试时也一直在追求技术的深度，人也比较踏实，但在沟通中他表示希望做的内容有足够高的技术挑战，而你团队现阶段的业务对他来说没有太大的技术难度。\n\n * 王五： 在技术和业务上契合团队现状，但在沟通中你发现，他过于自信，不够自谦。\n\n * 陈六： 跟业务很匹配，也很有冲劲，离职原因在于公司架构调整，认为在原公司缺少发展空间。\n\n * 孙七： 以寻找机会为主，货比三家。\n\n分析：我会把 offer 发给李四，技术挑战是一个追求，可以与团队现状动态平衡 。张三只解决现状，没有未来；王五 不符合自谦的味道，太过自信不仅未来成长容易受限，团队协作也可能有问题；陈六很常规，如果没有李四，陈六也可以考虑，但陈六存在一个问题：因为公司组织架构调整而离开，那他能否适应新公司的组织结构调整？孙七很明显不用考虑，因为如果孙七 单纯货比三家的话，你很难在团队未来发展上与其达成共识。\n\n\n小结\n\n以上就是这一讲的全部内容了。这一讲，我围绕“找到人”分享了一些经验，对 Leader 而言，比找人还重要的事非常少，很多时候缺人不会立刻死，但是找错人会让你和团队万劫不复，一个不正确的人对团队的杀伤力要远大于因为缺人大家要多加班造成的影响。\n\n而且，我们不是要“招”更多的人，而是人海中“找”到对的人，和找伴侣有点儿类似，未必是最有钱、最优秀的那个，但一定是最适合、最舒服的那个。你要相信一个足够出色的同学，对团队和未来的影响是一般同学的 10 倍甚至 100 倍，有追求和没追求的人在同一件事上会交付两个完全不同的答案，正所谓兵贵胜不贵久。\n\n最后留一个作业给你：分享一下你找人的心得，哪些问题是你一定会问的，哪些人即使能力再优秀你都不会要，为什么？感谢你的阅读，我们下一讲见。\n\n\n\n----------------------------------------\n\n\n# 精选评论\n\n# **春：\n\n> 招人难，业务交付压力大，在跳槽冷季主要就是看候选人的态度，技术是其次，结果发现对团队的影响太大了，真的要招靠谱的，气味相投的人，只能慢慢用考核来干掉这些差生\n\n#     讲师回复：\n\n>     很多问题其实没必要解决，解决掉制造问题的人就行了\n\n# **泉：\n\n> 受益匪浅",normalizedContent:"从今天开始，我会用三讲的时间和你聊一聊管理的最后一板斧：招聘与解聘。在招聘与解聘中，总共有三个动作：找到人、能落地和升级汰换，今天咱们就先来学习怎么才能找到人。\n\n过去几年，招聘一直在我的工作中占据很大的比重，在这个过程中，我发现这样一个现象：很多 leader 认为招聘是 hr 的责任，hr 把控着筛选简历、找候选人、安排面试、谈薪以及 offer 发放的整个环节，自己只做技术面试，通过专业能力“判断”候选人是否符合团队需要，不会参与其余环节。\n\n这种想法在公司初期扩张阶段并没造成什么不好的问题，不过在 2017、2018 年还是有了比较大的改变。17、18年，越来越多的公司和平台开始了“抢人大战”，业务竞争的加剧让团队人员缺口变大，leader 逐渐意识到不能坐等 hr 搞定一切，不然还没等找到新同学，自己负责的业务和团队就扛不住了。这时，“人才要自己去找、去抢”的观念得到了认可。\n\n从团队的角度出发，leader“主动出击、寻找合适人选”的观念符合逻辑，你既然是团队的一号位，自然最应该了解团队现状，以及团队需要的人选。与此同时，找到合适的人对你的影响最大而非 hr，因为你才是对团队“生老病死”、进人和离人最直接的决策者和结果的影响者，你既要为招来的人负责，也要靠其去优化并改变团队的现状。另外，通常 hr 服务于多个团队，未必是 1v1 针对你团队的，如果单纯依赖 hr 找人，最终的结果可能不会符合你的期望。\n\n出于这几点原因，我认为招聘是技术 leader 的责任而不是 hr 的。并且你要清楚招人和找人的区别：找人是一个主动寻找的动作，招人是一个被动等待的状态。\n\n既然已经明确了责任的主体，接下来的重点就是怎么找到人，我结合自己的经验，总结了三个步骤：定需求找人选、面试甄别、做决定。\n\n\n招人不等于盲目加人\n\n业务快速发展必然会让系统日渐庞大，需求不断增加，研发的压力也会随之加大，在这种情况下，为了缓解压力我们自然而然地会选择最容易的解决方案：“业务需求增多 + 人手太少 = 招人”。\n\n看起来，招人似乎能解决研发领域的一切问题，如果不能就再多招点儿。这背后反映出一个问题：很多时候我们并不知道自己要解决什么问题，也不知道真正要找什么样的人，只是感觉加人就能解决问题。\n\n而这就衍生出一个辩证的问题：加人能不能解决问题？\n\n在 07 讲中，我也提到了这一点，在我看来，如果从系统开发层面出发，单纯加人未必能解决实际问题，系统开发这项工作并不是标准化生产的流水线作业，一味地加人并不能提升整体效率。\n\n如果一个系统在最初设计时没有进行很好的规划，导致实现的复杂度过高、模块间结构模糊，“高耦合低内聚”，之后是很难通过清晰的分工调整让生产力最大化的，即使后期发现进度不理想，想加人也未必能发挥效果，原因有这样几点。\n\n 1. 时间上赶不及： 新加入的成员需要花费大量时间理解业务和系统，并不是人员到位之后就会立刻发挥作用，这个周期可能是几天也可能是一两周。\n\n 2. 拖慢整体进度： 新成员加入势必要老人花费时间与精力帮助他们熟悉系统，老人反而增加了任务，影响整体进度。\n\n 3. 质量上有风险： 新加入的成员在短时间了解业务和系统基本情况后，为了赶进度就会尽快上手，但是因为系统复杂度很高，会有更大概率交付bug，后期要么是风险增加，要么为了覆盖这些风险要额外多做很多事，最终看进展可能和不加人时所差无几。\n\n那加人一定是错的吗？并不是，我反对的不是加人，而是无目的、无脑、下意识地加人。大部分管理者都希望自己的团队规模越大越好，能管理更多的人，能 hold 住更多的事情，从而证明自己的价值。那选择加人是很常见的选择，不过你要做的是加对人，具体可以参考这几个步骤：\n\n * 明确业务目标；\n\n * 盘点团队需求；\n\n * 做出岗位设计；\n\n * 提炼岗位要求。\n\n总而言之一句话： 找人并不等于盲目加人（招人），先明确“找人”动作背后的 why，也就是为什么要加人？加人要解决什么问题，以及你加的人是不是能解决这个问题？\n\n为了明确这一点，你需要先梳理业务目标与现状，在此基础上盘点团队的情况与需求。\n\n举个例子，假如我负责订单系统年底业务上的目标是订单量实现翻倍，而业务上为了达到翻倍的目标会开拓很多新业务，比如增加商品的种类、丰富营销的玩法，那么这些新业务就会对系统有新的业务需求，同时也会对系统稳定性有要求。\n\n明确了业务目标与现状趋势后，你要梳理并思考当前团队的人员情况是否够支持接下来的发展需要。\n\n假设目前的团队能 hold 住业务上功能的需求，但是对高并发的场景没有太大把握，你怕在遇到“618”或者“双十一”等大促活动时，系统出现棘手乃至无法解决的问题。那么此时你就需要有过相关经验的同学，专门解决数据存储、性能、高并发等痛点问题，此时你就可以根据业务目标和梳理出的团队现状做出岗位设计，然后再与 hr一起形成岗位 jd。\n\n强调一点：在形成岗位 jd 时，你要做好假设（脑海里要有画面感），假设已经有人符合 jd 的要求，那么他加入团队之后，大家是怎么配合的？他如何展开工作？团队的运转是否能严丝合缝？这些都可以提前考虑下，这也涉及面试甄别的内容（比如需要他有较强的沟通能力，我后面会讲）。\n\n做好上述准备工作后，你要和 hr 确定招聘的渠道：内推、猎头、招聘网站。从过往的经验和普遍认知来看，内推肯定是最优的选择。为了调动同学们内推的热情，你可以采取一些措施，比如组织团队内部的“内推大赛”，在某一个季度发动同学们内推，内推人数排名前三的人选获得一定的内部激励，内推成功后公司一般也会有奖励（我记得在 2019 年，饿了么技术团队内推冠军的奖励就是除了内推奖金外，两张全国任意飞的机票） 。\n\n\n闻味道、问事实、看能力\n\n当你通过简历筛选到心仪的候选人后，就会进入“面试甄别”环节。各个公司的面试环节往往大同小异，只不过常规现象是：公司越大，面试轮次会越多、周期越长。那么怎么做好面试甄别呢？我的推荐是“面试习惯”与“面试技巧”二者缺一不可，先有好习惯再有技巧。\n\n在我看来，好的面试习惯主要有这样几点。\n\n * 面试前看简历：有的面试官在面试开始后，先用几分钟浏览简历，然后就开始各种提问。这其实缺少了深入思考的环节，只是在根据简历问问题，而没有结合岗位需要问问题。不管是出于对职位的重视，还是更彻底的人员考察，我都建议你在面试开始前花 10 分钟“细看简历”，思考其中你感兴趣的内容，结合岗位的需要，简单设计下面试题。\n\n * 面试中更多倾听：不管是处于目的性还是基本的尊重，不要随意打断候选人的发言和思路，学会倾听 > 不断提问，只有他说的多你才能考察到更多。\n\n * 面试后速写评价：我经常在面试完要去参加其他的会议，当第二天 hr 问我的面试评价时，当时的感受已经忘得差不多了。所以你在面试完候选人时，要立刻记录下面试评价（这时，你的主观意识会更强，感受更强烈），同时也加快面试反馈的时间。\n\n面试技巧主要有：闻味道、问事实、看能力。三者没有孰轻孰重、先后顺序，往往是融合在一起的。不过按照我的习惯，侧重点在于“问事实——看能力——闻味道”。\n\n * 问事实\n\n问事实其实有一套拿来即用的框架 star：情境（situation）、任务（task）、行动（action）、结果（result）。也就是：在什么样的情境下？候选人的任务是什么？采取的行动是怎样的？结果如何？其中的侧重点在于 a ，考察候选人具体的行动，以及为什么这么做。\n\n通常你可以顺着候选人的一些表述来追问，比如：\n\n * 候选人“在某个项目中，我做了高并发的设计。”\n\n * 我“什么样高并发的设计，是什么场景？”\n\n * 候选人“在xx场景下，有短时间超过1k qps的请求，我通过缓存和消息队列来处理。”\n\n * 我“缓存或者消息队列如果出故障了怎么办？会将系统整体拖垮吗？”\n\n * 候选人“缓存出故障了可能会，消息队列没关系，业务上能接受一定延迟，系统整体应该不会垮”\n\n * 我“缓存出问题了，数据库不会被击穿吗？为什么整体不会垮？”\n\n * 候选人“有并发限制，数据库可能会 hang 住，这个场景与其他场景是隔离的，整体系统不会一起雪崩。”\n\n * 我“缓存在这里变成了强依赖，这样实现的好坏和解决方案你是怎么考虑的？”\n\n * ……\n\n你可以结合候选人的回答，不断从对话中深挖一些内容，从而进一步判断候选人的实际经历。\n\n“问事实”并不会侧重考察业务或者技术，也并不是完全对能力的深挖，更重要的是：看候选人所说的内容他是否真正做过，以及他的思考过程。\n\n有候选人为了突出亮点，只负责了某一模块却说负责了整个项目，那么在问事实中，一旦你深挖候选人的落地思路，很容易证明哪些项目是他真正做过，哪些是他根本没做。\n\n * 看能力\n\n看能力主要是看候选人的技术能力（比如编程语言、高并发、高可用等）与业务能力（比如候选人做过电商，那就看他对电商领域的理解深度与广度），你可以把看能力与问事实相结合。\n\n类似 “redis 怎么实现接口缓存？” 并不是一个好问题，候选人在面试前可能都会做足准备，应对一些纯粹的技术问题，所以这样的问题可能是“背出来”的，并不代表他有解决这类问题的能力。要把纯技术问题与业务场景相结合起来问题，比如“你之前做个那个xx系统，如果用户量增加 10 倍会有什么问题，怎么解决，如果增加 100 倍呢？”。以具体的业务场景，考察候选人对这个问题的理解程度。\n\n * 闻味道\n\n不管是饿了么还是阿里，经常说“面试候选人一定要闻闻他的味道”。直白点儿说，就是看候选人与你、与你们团队是否合得来，你们是不是同路人，是否可以一起共事，会不会为团队发展一起努力？如果味道不同，很可能对团队造成不好的影响，拿不到好的结果。\n\n那怎么闻呢？交流中的感觉占据很大比重，其次是一些回答的倾向，比如有些候选人不管你问什么都会先反驳下你说的可能，那么有可能你会觉得他比较傲或者沟通困难，但是在他看来自己并没有什么问题，所以闻味道是一个比较主观的事儿，和找女朋友类似，并不存在客观标准。\n\n对不同的 leader 来说，倾向的味道也会不同，就我自己而言，我更喜欢“皮实”“自省”“乐观”这样几个关键词：候选人是否玻璃心？是否足够自省和乐观？你要清楚自己倾向的“味道”是什么。\n\n\n宁缺毋滥，守住底线\n\n在多轮面试中，你的面试只是其中的一环，在面试结束之后，还要综合候选人的表现，做出决定（是否发放 offer 以及发怎样的 offer）。\n\n这一步往往是最纠结的环节，如果候选人足够优秀，你可以不用考虑直接通过，反之，如果候选人明显不符合要求，你也很容易 pass 掉，但大多数情况下，你遇到的总是模棱两可的情景，一边觉得候选人不太合适但是也不是不能用，一边业务压力大非常需要人，那么这时你要考虑什么呢？有两个关键点可供你思考：\n\n * 关注未来；\n\n * 宁缺毋滥。\n\n先明确招聘是为了未来的，远水解不了近渴，你重点关注的应该是候选人来了之后团队会有何改变，是不是对未来的团队有更好的作用？可以问自己这样 4 个问题。\n\n 1. 他是否有能力的同时还有潜力？比如很强的发展欲望或学习能力？\n\n 2. 他身上是否有特质足够吸引你？比如让你觉得当他未来会比你更优秀？\n\n 3. 你是希望与他这样的人一起共事的？\n\n 4. 当他加入团队后，能否将团队氛围激活，形成鲶鱼效应？\n\n除了关注未来，还要宁缺毋滥，守住底线，你同样需要考虑这样 2 点。\n\n 1. 能力水平超过团队 50% 的人以上：确保团队越来越强，而不是越来越弱，有的 leader会觉得候选人比团队最差的两个人好就可以了，但这样一来，随着时间拉长，你的团队会越来越差。\n\n 2. 内心是否非常犹豫？犹豫往往意味着“不想要 > 想要”，如果是迫于业务压力不得不加人，我建议你还是不要勉强，因为有可能本来解决业务压力就可以的问题演变成还要额外解决不适合的新员工的问题。\n\n讲到这儿，与“找到人”有关的理论知识就全部讲完了，接下来，让我们简单模拟一个场景：假设你现在需要为团队招聘一个技术专家，解决下半年业务发展中高并发、高可用的技术问题，现在有几个候选人，你会把 offer 给谁？\n\n * 张三： 加入公司意愿很强烈，人很踏实，虽然技术深度不够（受限于过往经历），但是跟业务匹配度很高，来了就能上手干活发挥作用。\n\n * 李四： 技术过硬，面试时也一直在追求技术的深度，人也比较踏实，但在沟通中他表示希望做的内容有足够高的技术挑战，而你团队现阶段的业务对他来说没有太大的技术难度。\n\n * 王五： 在技术和业务上契合团队现状，但在沟通中你发现，他过于自信，不够自谦。\n\n * 陈六： 跟业务很匹配，也很有冲劲，离职原因在于公司架构调整，认为在原公司缺少发展空间。\n\n * 孙七： 以寻找机会为主，货比三家。\n\n分析：我会把 offer 发给李四，技术挑战是一个追求，可以与团队现状动态平衡 。张三只解决现状，没有未来；王五 不符合自谦的味道，太过自信不仅未来成长容易受限，团队协作也可能有问题；陈六很常规，如果没有李四，陈六也可以考虑，但陈六存在一个问题：因为公司组织架构调整而离开，那他能否适应新公司的组织结构调整？孙七很明显不用考虑，因为如果孙七 单纯货比三家的话，你很难在团队未来发展上与其达成共识。\n\n\n小结\n\n以上就是这一讲的全部内容了。这一讲，我围绕“找到人”分享了一些经验，对 leader 而言，比找人还重要的事非常少，很多时候缺人不会立刻死，但是找错人会让你和团队万劫不复，一个不正确的人对团队的杀伤力要远大于因为缺人大家要多加班造成的影响。\n\n而且，我们不是要“招”更多的人，而是人海中“找”到对的人，和找伴侣有点儿类似，未必是最有钱、最优秀的那个，但一定是最适合、最舒服的那个。你要相信一个足够出色的同学，对团队和未来的影响是一般同学的 10 倍甚至 100 倍，有追求和没追求的人在同一件事上会交付两个完全不同的答案，正所谓兵贵胜不贵久。\n\n最后留一个作业给你：分享一下你找人的心得，哪些问题是你一定会问的，哪些人即使能力再优秀你都不会要，为什么？感谢你的阅读，我们下一讲见。\n\n\n\n----------------------------------------\n\n\n# 精选评论\n\n# **春：\n\n> 招人难，业务交付压力大，在跳槽冷季主要就是看候选人的态度，技术是其次，结果发现对团队的影响太大了，真的要招靠谱的，气味相投的人，只能慢慢用考核来干掉这些差生\n\n#     讲师回复：\n\n>     很多问题其实没必要解决，解决掉制造问题的人就行了\n\n# **泉：\n\n> 受益匪浅",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"能落地：90 天试用期，转正时我们要考察什么？",frontmatter:{title:"能落地：90 天试用期，转正时我们要考察什么？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/2c32ab/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/16.%20%20%E8%83%BD%E8%90%BD%E5%9C%B0%EF%BC%9A90%20%E5%A4%A9%E8%AF%95%E7%94%A8%E6%9C%9F%EF%BC%8C%E8%BD%AC%E6%AD%A3%E6%97%B6%E6%88%91%E4%BB%AC%E8%A6%81%E8%80%83%E5%AF%9F%E4%BB%80%E4%B9%88%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/16.  能落地：90 天试用期，转正时我们要考察什么？.md",key:"v-68f58b64",path:"/pages/2c32ab/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4287}],headersStr:"精选评论",content:"上一讲，我点出了“找人并不等于盲目加人”，你既要明确业务现状与团队需求，更要做好面试甄别，做出最优决定。那么当你找到人之后，是不是就可以高枕无忧了呢？并不是。\n\n因为最终目的并非招聘，而是通过招聘增加团队战斗力，这里至关重要的一步就是“新成员的落地”（帮助新同学顺利渡过试用期，尽快创造价值）。\n\n过去几年我发现一个有意思的现象：在大部分创业或未到一定规模的公司（团队）中，似乎默认忽略了“新同学落地”（即使没忽略的公司这一步做得都很差），好像招聘结束后，新同学会立刻发挥作用，原本人手不足的问题在 offer 发出后立刻得到了解决。\n\n从我实际的经历来看，不管是在饿了么还是阿里本地生活，新同学落地都是一个很考验技术 Leader 认识是否到位的动作。\n\n新同学加入团队，本身就是一个与环境相互熟悉、相互磨合甚至相互考察的过程。如果我们把招聘=新生儿出生，那么落地=养育，很多时候，养比生对未来的影响更大。你要让新同学更好地适应环境与团队，尽早发挥自己的势能。当然，如果在之前的面试中，出现失误（比如新同学虽然表现比较好，但实际无法胜任工作），那么落地阶段就是最后一个补救的环节。所以，让新同学“能落地”至关重要。\n\n今天这一讲，我们就聊一聊能落地要做哪些事儿？你的关注点在哪里？\n\n在我看来，真正做好“能落地”，有一定的方法或者套路：\n\n 1. 明确新同学落地的整体节奏；\n\n 2. 重点抓试用期考核以及工作习惯的养成；\n\n 3. 转正结束后依然保持跟进；\n\n这样一来，就形成整个能落地的闭环。当然，这些就是建立在“既要帮、也要严”的基础之上。\n\n\n既要帮，也要严\n\n“既要帮，也要严”是我定义的“能落地”的核心原则，“帮”与“严”是双向要求：帮是指帮助新同学融入团队（针对的是师兄和 Leader）；严是要让新同学在团队中提升自己，遵守团队的做事原则，发挥自己的能力与价值（针对新同学自己）。\n\n虽然你在招聘时根据要求和标准找到了心仪人选，但他能否按照预期在团队发挥价值，与团队成员良好合作？一切都是未知，需要你在试用期考察与落地。\n\n明白这一点之后，技术 Leader 就要对新人落地 Landing 建立清晰的认识：全力帮助新同学适应环境，避免优秀的同学因为“水土不服”流失；逐步落地团队乃至组织对个人的要求和标准，让新同学明确工作及格、优秀的程度，以及团队价值观，追求的目标，工作的态度与底线。\n\n只有经过试用期的考察后，新同学才能成为团队的一员，提升团队综合能力。所以就如我开篇提到的，“能落地”比“找到人”的影响更大，招聘只是开始，让新同学能落地、发挥价值才是最终目标。\n\n\n明确新同学落地的整体节奏\n\n当新同学到岗之后，Leader 要快速明确这样几件事（3 和 4 相对重要）：\n\n 1. 用迎新打破大家在情感上的壁垒；\n\n 2. 给新同学安排“师兄”；\n\n 3. 明确新同学的作业与目标（做出一些成绩达到转正）；\n\n 4. 明确告知转正应该怎么做（把转正做重、做实）。\n\n总的来说，这 4 点比较好操作但却容易被忽略，在这里我只强调一些注意事项。\n\n迎新的关键词为“舒服自然”，拒绝形式主义，比如新同学入职后，Leader 先带其简单熟悉办公环境、介绍团队成员，业务的基本情况，然后说明公司的运作机制。宏观的环境介绍与微观的工作内容相结合，让新同学尽早了解相关信息，避免不必要的信息偏差。\n\n如果你的团队有一些传统，比如聚餐、桑拿、打游戏等，可以“入团随俗”，或者简单的“欢迎会”。我想强调的是：新同学进入团队，一定要有迎新动作！这其实是双向的信息同步：对新同学而言，表示团队欢迎他的加入；同时也是在告诉团队成员，团队逐渐壮大，发展又往前迈了一步。\n\n除了迎新，安排“师兄”也极为重要。\n\n我建议你选择司龄较长、责任心较强的同学（这类同学更熟悉环境）、或新同学即将开发系统的搭档，再或者是你自己。“任职”时间大概为期 3~6个月，以新同学转正期为准。\n\n其中，第一个月最为关键，在入职 1 个月期间，新同学会有意识地主动迎合并适应环境，这时，师兄就是新同学最主要的学习与模仿对象，比如会学习师兄的言行举止，对团队运行机制、业务了解、工作习惯的认识。如果你作为师兄，要帮其在以下几部分加深印象：公司情况、开发任务、团队机制……\n\n安排好师兄后，你要和 HR 一起确定新同学的作业与目标。这里要注意，作业不等于目标，二者有明显的区别。\n\n作业指的是新同学的必要产出，产出与熟悉工作内容相映射。比如让新同学一周时间熟悉 A 系统，不如让他一周时间内自己整理一个 A 系统的架构图、数据结构图。如果他能够独立完成并交付这些文档，就能清楚 A 系统的数据怎么存储？代码怎么运行？系统如何发布？\n\n在我看来，你很难评测没有交付的任务的最终的效果，所以要尽量避免安排新同学去做一些“了解”“熟悉”类似无法度量的工作。\n\n这些产出会起到两个作用：\n\n * 作为新人落地工作的内容输出，同时在转正时可以作为产出物，佐证新同学的熟悉情况。\n\n * 作为团队内工作资料（方便其他新人落地），比如你开发的系统已经多轮迭代，这时，你可以让新同学梳理系统的架构数据、API 文档，在产出架构图、文档的过程中，新同学既可以熟悉这些内容，再有新人入职时，也可以直接看这份文档，快速地了解系统，形成正循环。\n\n当然，为了让你明确作业的重点，我准备了一个check list，方便你作为参照（这个表格是新员工入职后我为其确定的目标）。\n\n\n\n新人试用期 check list\n\n目标是指新同学需要一个阶段性目标：即转正时，要达到什么程度。比如胜任某些任务或者承担某些角色（可以是独立开发某个系统，或者分担你之前的部分职责，承担核心开发的角色……）\n\n这样一来，你既有一个清晰的作业和目标作为参照物让新同学参考，还可以凭借新同学在试用期内的工作表现和产出（作业以及目标的完成情况），判断其是否符合团队需要。当然，在这个过程中，你要和他深入沟通一次，明确在转正述职时你的要求是什么，会考核哪些内容，他需要做到什么程度。\n\n总的来说，新同学初步的落地动作周期会持续 2~3 个月，之后就迎来了转正述职。\n\n\n转正述职要考核什么\n\n很多公司（团队）尤其是技术团队，在执行“转正述职”时，并不严谨，似乎默认新同学入职后，只要不出大问题，都可以转正。虽然该现象很常见，但长此以往，转正述职就会变得形式主义，成为走流程中的一环，会对团队造成很大的伤害。\n\n在带团队初期，我也吃了很多“不重视转正述职”的亏，新人进来后，没有妥善安排试用期的工作，只要新同学代码写得正常，表现虽然不出色，但并没造成事故，我也就默认让他通过了。而这背后有两个极大的隐患。\n\n * 面试通过 = 转正就稳，没有把本不合格的同学在试用期淘汰掉，不仅对团队不负责，也为未来埋下了隐患。\n\n * 新同学入职初期，是他熟悉环境最重要的阶段，在该阶段没有让其建立合理的认识，没有建立团队的底线和标准。而且大家对工作标准的要求参差不齐的同时也减弱了团队凝聚力。\n\n我还是要重点强调，转正述职才是真正意义上的招聘结束！ 如果发现找的人在实际工作中并不符合团队标准，那么你完全可以在转正述职阶段将其 Pass 掉，及时止损。总的来说，技术 Leader 对转正述职的认识务必到位，这会决定你的团队能否长期发展。\n\n讲了这么多转正述职的重要性，具体你要考核 3 个方面。\n\n * 把控转正时间： 提前半个月跟 HR 或者“师兄”确定转正述职时间点。\n\n * 建立评委会： 由 Leader 主导，与其合作的伙伴（技术同学、产品或者运营）组成小的评委会（如果团队成员较少，也可以只有 Leader 和 HR）这里要注意，合作伙伴的反馈也许会比较主观，你在参考时要尽量保持客观。\n\n * 明确考核内容： 硬性要求+软性要求。\n\n硬性要求包括：对业务的了解程度（如果新同学在营销团队，那么在“天降红包”的场景下，业务上怎么操作？运营配置了什么……）稳定性的学习；软性要求包括：对业务的思考以及对技术的思考（比如在“天降红包”的场景中，如果以“天降红包”的形式发券，用户体验是否够好？）\n\n我自己比较关注稳定性、业务了解、业绩成果、业务与技术的思考。\n\n如果新同学硬性要求不过关，比如稳定性的认识和操作有问题，甚至无法独立去完成某个功能，可以判断为无法胜任当前的工作职责，试用期不通过。如果硬性过关，但软性能力上欠缺（比如无法和他人友好合作），你可以再给他一次机会，延长一段试用期（仅限一次）后再次进行转正述职。\n\n当新同学转正成功后，你要对其进行成长期的跟进（为期 6 个月~1 年）。\n\n\n成长期的跟进\n\n新同学刚入职时，往往因为有转正压力，也有师兄提供帮助，会严格要求自己。但转正通过时，不少新人潜意识觉得自己通过了最难的一关，会放松下来，出现纰漏。\n\n但事实是：转正成功后的一年，是新同学能否快速成长最关键的一年。\n\n新人在全新的环境中，既要结合过去的经验，又要解决新的问题，这时，他能否发挥自身优势，得到成长至关重要。\n\n所以，我建议你不要放松对新同学的关注，从慢慢叠加、主动跟进、树立信心出发，帮助其实现价值最大化。\n\n * 慢慢叠加： 试用期阶段，新同学主要做一些小需求、小任务，在成长期就要让他从负责小任务逐渐向负责大任务转变。\n\n * 主动跟进： Leader 要与新员工保持沟通，帮他分析问题，确定阶段性职业目标（比如定期沟通他哪里可以改进、为他设定榜样确定可以参照和模仿的对象……）\n\n * 树立信心： 转正述职阶段，大部分新人小心翼翼，成长阶段要帮他树立信心，让他有阶段性成果，敢于发表意见。\n\n\n总结\n\n总的来讲，招聘到落地其实是生与养的关系，大部分情况下，我们招聘是因为缺少对应的角色或者人力不足，可新同学想要转化为团队的战斗力并不等于简单到岗。这一过程也是一个漏斗，只有让新同学更快、更好的落地，真实发挥作用，在招聘时付出的精力和时间才有价值。\n\n与此同时，新同学能否与团队建立情感连接在这一阶段也很重要，好的落地Landing 不仅对新同学更有帮助，同时也会增加他对团队的认可，极大增加团队的凝聚力。\n\n\n\n最后，分享一下你作为新人落地时印象深刻，或者觉得最有用的动作都有哪些，为什么？欢迎在留言区分享你的看法，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **宁：\n\n> 大部分创业公司的技术leader是只要找到人就万事大吉，要么就是一言不合实习期开了。受益匪浅\n\n#     讲师回复：\n\n>     我目前也在创业，找人肯定比大公司困难很多，但还是要花心思的，事情是人做的。\n\n# Monster：\n\n> 在阿里太难了\n\n#     讲师回复：\n\n>     确实很锻炼人",normalizedContent:"上一讲，我点出了“找人并不等于盲目加人”，你既要明确业务现状与团队需求，更要做好面试甄别，做出最优决定。那么当你找到人之后，是不是就可以高枕无忧了呢？并不是。\n\n因为最终目的并非招聘，而是通过招聘增加团队战斗力，这里至关重要的一步就是“新成员的落地”（帮助新同学顺利渡过试用期，尽快创造价值）。\n\n过去几年我发现一个有意思的现象：在大部分创业或未到一定规模的公司（团队）中，似乎默认忽略了“新同学落地”（即使没忽略的公司这一步做得都很差），好像招聘结束后，新同学会立刻发挥作用，原本人手不足的问题在 offer 发出后立刻得到了解决。\n\n从我实际的经历来看，不管是在饿了么还是阿里本地生活，新同学落地都是一个很考验技术 leader 认识是否到位的动作。\n\n新同学加入团队，本身就是一个与环境相互熟悉、相互磨合甚至相互考察的过程。如果我们把招聘=新生儿出生，那么落地=养育，很多时候，养比生对未来的影响更大。你要让新同学更好地适应环境与团队，尽早发挥自己的势能。当然，如果在之前的面试中，出现失误（比如新同学虽然表现比较好，但实际无法胜任工作），那么落地阶段就是最后一个补救的环节。所以，让新同学“能落地”至关重要。\n\n今天这一讲，我们就聊一聊能落地要做哪些事儿？你的关注点在哪里？\n\n在我看来，真正做好“能落地”，有一定的方法或者套路：\n\n 1. 明确新同学落地的整体节奏；\n\n 2. 重点抓试用期考核以及工作习惯的养成；\n\n 3. 转正结束后依然保持跟进；\n\n这样一来，就形成整个能落地的闭环。当然，这些就是建立在“既要帮、也要严”的基础之上。\n\n\n既要帮，也要严\n\n“既要帮，也要严”是我定义的“能落地”的核心原则，“帮”与“严”是双向要求：帮是指帮助新同学融入团队（针对的是师兄和 leader）；严是要让新同学在团队中提升自己，遵守团队的做事原则，发挥自己的能力与价值（针对新同学自己）。\n\n虽然你在招聘时根据要求和标准找到了心仪人选，但他能否按照预期在团队发挥价值，与团队成员良好合作？一切都是未知，需要你在试用期考察与落地。\n\n明白这一点之后，技术 leader 就要对新人落地 landing 建立清晰的认识：全力帮助新同学适应环境，避免优秀的同学因为“水土不服”流失；逐步落地团队乃至组织对个人的要求和标准，让新同学明确工作及格、优秀的程度，以及团队价值观，追求的目标，工作的态度与底线。\n\n只有经过试用期的考察后，新同学才能成为团队的一员，提升团队综合能力。所以就如我开篇提到的，“能落地”比“找到人”的影响更大，招聘只是开始，让新同学能落地、发挥价值才是最终目标。\n\n\n明确新同学落地的整体节奏\n\n当新同学到岗之后，leader 要快速明确这样几件事（3 和 4 相对重要）：\n\n 1. 用迎新打破大家在情感上的壁垒；\n\n 2. 给新同学安排“师兄”；\n\n 3. 明确新同学的作业与目标（做出一些成绩达到转正）；\n\n 4. 明确告知转正应该怎么做（把转正做重、做实）。\n\n总的来说，这 4 点比较好操作但却容易被忽略，在这里我只强调一些注意事项。\n\n迎新的关键词为“舒服自然”，拒绝形式主义，比如新同学入职后，leader 先带其简单熟悉办公环境、介绍团队成员，业务的基本情况，然后说明公司的运作机制。宏观的环境介绍与微观的工作内容相结合，让新同学尽早了解相关信息，避免不必要的信息偏差。\n\n如果你的团队有一些传统，比如聚餐、桑拿、打游戏等，可以“入团随俗”，或者简单的“欢迎会”。我想强调的是：新同学进入团队，一定要有迎新动作！这其实是双向的信息同步：对新同学而言，表示团队欢迎他的加入；同时也是在告诉团队成员，团队逐渐壮大，发展又往前迈了一步。\n\n除了迎新，安排“师兄”也极为重要。\n\n我建议你选择司龄较长、责任心较强的同学（这类同学更熟悉环境）、或新同学即将开发系统的搭档，再或者是你自己。“任职”时间大概为期 3~6个月，以新同学转正期为准。\n\n其中，第一个月最为关键，在入职 1 个月期间，新同学会有意识地主动迎合并适应环境，这时，师兄就是新同学最主要的学习与模仿对象，比如会学习师兄的言行举止，对团队运行机制、业务了解、工作习惯的认识。如果你作为师兄，要帮其在以下几部分加深印象：公司情况、开发任务、团队机制……\n\n安排好师兄后，你要和 hr 一起确定新同学的作业与目标。这里要注意，作业不等于目标，二者有明显的区别。\n\n作业指的是新同学的必要产出，产出与熟悉工作内容相映射。比如让新同学一周时间熟悉 a 系统，不如让他一周时间内自己整理一个 a 系统的架构图、数据结构图。如果他能够独立完成并交付这些文档，就能清楚 a 系统的数据怎么存储？代码怎么运行？系统如何发布？\n\n在我看来，你很难评测没有交付的任务的最终的效果，所以要尽量避免安排新同学去做一些“了解”“熟悉”类似无法度量的工作。\n\n这些产出会起到两个作用：\n\n * 作为新人落地工作的内容输出，同时在转正时可以作为产出物，佐证新同学的熟悉情况。\n\n * 作为团队内工作资料（方便其他新人落地），比如你开发的系统已经多轮迭代，这时，你可以让新同学梳理系统的架构数据、api 文档，在产出架构图、文档的过程中，新同学既可以熟悉这些内容，再有新人入职时，也可以直接看这份文档，快速地了解系统，形成正循环。\n\n当然，为了让你明确作业的重点，我准备了一个check list，方便你作为参照（这个表格是新员工入职后我为其确定的目标）。\n\n\n\n新人试用期 check list\n\n目标是指新同学需要一个阶段性目标：即转正时，要达到什么程度。比如胜任某些任务或者承担某些角色（可以是独立开发某个系统，或者分担你之前的部分职责，承担核心开发的角色……）\n\n这样一来，你既有一个清晰的作业和目标作为参照物让新同学参考，还可以凭借新同学在试用期内的工作表现和产出（作业以及目标的完成情况），判断其是否符合团队需要。当然，在这个过程中，你要和他深入沟通一次，明确在转正述职时你的要求是什么，会考核哪些内容，他需要做到什么程度。\n\n总的来说，新同学初步的落地动作周期会持续 2~3 个月，之后就迎来了转正述职。\n\n\n转正述职要考核什么\n\n很多公司（团队）尤其是技术团队，在执行“转正述职”时，并不严谨，似乎默认新同学入职后，只要不出大问题，都可以转正。虽然该现象很常见，但长此以往，转正述职就会变得形式主义，成为走流程中的一环，会对团队造成很大的伤害。\n\n在带团队初期，我也吃了很多“不重视转正述职”的亏，新人进来后，没有妥善安排试用期的工作，只要新同学代码写得正常，表现虽然不出色，但并没造成事故，我也就默认让他通过了。而这背后有两个极大的隐患。\n\n * 面试通过 = 转正就稳，没有把本不合格的同学在试用期淘汰掉，不仅对团队不负责，也为未来埋下了隐患。\n\n * 新同学入职初期，是他熟悉环境最重要的阶段，在该阶段没有让其建立合理的认识，没有建立团队的底线和标准。而且大家对工作标准的要求参差不齐的同时也减弱了团队凝聚力。\n\n我还是要重点强调，转正述职才是真正意义上的招聘结束！ 如果发现找的人在实际工作中并不符合团队标准，那么你完全可以在转正述职阶段将其 pass 掉，及时止损。总的来说，技术 leader 对转正述职的认识务必到位，这会决定你的团队能否长期发展。\n\n讲了这么多转正述职的重要性，具体你要考核 3 个方面。\n\n * 把控转正时间： 提前半个月跟 hr 或者“师兄”确定转正述职时间点。\n\n * 建立评委会： 由 leader 主导，与其合作的伙伴（技术同学、产品或者运营）组成小的评委会（如果团队成员较少，也可以只有 leader 和 hr）这里要注意，合作伙伴的反馈也许会比较主观，你在参考时要尽量保持客观。\n\n * 明确考核内容： 硬性要求+软性要求。\n\n硬性要求包括：对业务的了解程度（如果新同学在营销团队，那么在“天降红包”的场景下，业务上怎么操作？运营配置了什么……）稳定性的学习；软性要求包括：对业务的思考以及对技术的思考（比如在“天降红包”的场景中，如果以“天降红包”的形式发券，用户体验是否够好？）\n\n我自己比较关注稳定性、业务了解、业绩成果、业务与技术的思考。\n\n如果新同学硬性要求不过关，比如稳定性的认识和操作有问题，甚至无法独立去完成某个功能，可以判断为无法胜任当前的工作职责，试用期不通过。如果硬性过关，但软性能力上欠缺（比如无法和他人友好合作），你可以再给他一次机会，延长一段试用期（仅限一次）后再次进行转正述职。\n\n当新同学转正成功后，你要对其进行成长期的跟进（为期 6 个月~1 年）。\n\n\n成长期的跟进\n\n新同学刚入职时，往往因为有转正压力，也有师兄提供帮助，会严格要求自己。但转正通过时，不少新人潜意识觉得自己通过了最难的一关，会放松下来，出现纰漏。\n\n但事实是：转正成功后的一年，是新同学能否快速成长最关键的一年。\n\n新人在全新的环境中，既要结合过去的经验，又要解决新的问题，这时，他能否发挥自身优势，得到成长至关重要。\n\n所以，我建议你不要放松对新同学的关注，从慢慢叠加、主动跟进、树立信心出发，帮助其实现价值最大化。\n\n * 慢慢叠加： 试用期阶段，新同学主要做一些小需求、小任务，在成长期就要让他从负责小任务逐渐向负责大任务转变。\n\n * 主动跟进： leader 要与新员工保持沟通，帮他分析问题，确定阶段性职业目标（比如定期沟通他哪里可以改进、为他设定榜样确定可以参照和模仿的对象……）\n\n * 树立信心： 转正述职阶段，大部分新人小心翼翼，成长阶段要帮他树立信心，让他有阶段性成果，敢于发表意见。\n\n\n总结\n\n总的来讲，招聘到落地其实是生与养的关系，大部分情况下，我们招聘是因为缺少对应的角色或者人力不足，可新同学想要转化为团队的战斗力并不等于简单到岗。这一过程也是一个漏斗，只有让新同学更快、更好的落地，真实发挥作用，在招聘时付出的精力和时间才有价值。\n\n与此同时，新同学能否与团队建立情感连接在这一阶段也很重要，好的落地landing 不仅对新同学更有帮助，同时也会增加他对团队的认可，极大增加团队的凝聚力。\n\n\n\n最后，分享一下你作为新人落地时印象深刻，或者觉得最有用的动作都有哪些，为什么？欢迎在留言区分享你的看法，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **宁：\n\n> 大部分创业公司的技术leader是只要找到人就万事大吉，要么就是一言不合实习期开了。受益匪浅\n\n#     讲师回复：\n\n>     我目前也在创业，找人肯定比大公司困难很多，但还是要花心思的，事情是人做的。\n\n# monster：\n\n> 在阿里太难了\n\n#     讲师回复：\n\n>     确实很锻炼人",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"晋升：是不是技术到位、项目做好就够了？",frontmatter:{title:"晋升：是不是技术到位、项目做好就够了？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/70eecd/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/18.%20%20%E6%99%8B%E5%8D%87%EF%BC%9A%E6%98%AF%E4%B8%8D%E6%98%AF%E6%8A%80%E6%9C%AF%E5%88%B0%E4%BD%8D%E3%80%81%E9%A1%B9%E7%9B%AE%E5%81%9A%E5%A5%BD%E5%B0%B1%E5%A4%9F%E4%BA%86%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/18.  晋升：是不是技术到位、项目做好就够了？.md",key:"v-46361b41",path:"/pages/70eecd/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4057}],headersStr:"精选评论",content:"到今天为止，我已经用前 9 讲帮你搭建起一个简单易用的管理框架，那么当你做好本职工作，掌握管理的基本框架和方法之后，怎么灵活运用呢？答案是结合工作中的常见痛点问题进行参照性的演练。那么从今天开始，我们进入最后一个模块“技术管理的常见痛点”。\n\n这个模块不再是纯技术内容和理论框架，更多的是一些实际场景，所以我会结合实际场景多讲一些亲身经历，以及观点、想法，希望给你启发。今天咱们先来看一下与晋升有关的场景。\n\n假设你已经开始带团队，需要给团队内同学做晋升，那么你的考察点是什么？怎么做安排？是不是同学们技术到位、项目做好就能够晋升了呢？（换位来看，如果是你自己想晋升，也是类似的考察点与流程）。\n\n\n经过多少“关”才能晋升？\n\n国内各大厂的晋升流程大同小异，而中小规模公司对晋升则有不同的方式和理解，以饿了么和阿里的常规流程为例，大概步骤如下：\n\n晋升启动——主管提名——部门提报——述职答辩——结果表决——公司复审——结果公布\n\n大部分情况下，团队成员要达到一定的绩效条件（比如 2020 年是 A / 3.75）下一年才有提名资格，才会有机会得到 Leader 的提名申报。这个流程中，部门预审、公司复审不在我们的讨论之列，我主要想讲四个关键环节：提名沟通、资料准备、晋升答辩、结果安排。\n\n提名沟通\n\n一个同学想要得到晋升，必须先获得提名的资格，现实中，你不太可能突然发现 A 最近的状态非常好、业绩优异，突然决定下个月就让 A 去晋升，而是要以半年甚至一年为期，为 A 准备合适的项目、角色、工作的内容，让他有足够的贮备与历练，加上亮眼的成绩去迎接下一年的晋升。\n\n在我看来，合适的项目与工作内容来源于团队现状，要让环境赋予 A 晋升机会。比如团队接手一个重要的系统，但其稳定性做得非常差，对公司的业务影响也很大，如果 A 具备稳定性建设和治理的能力，这对他就是一个可以做出成绩并且为团队创造极大价值的机会。\n\n总的来说，提名准备是双向的，你要注意准备期限，并为候选人安排合适的工作。\n\n除了提名准备，我还想强调 Leader 提名的初衷。很多人会把“提名”当作给予团队成员的奖励，这会让团队同学形成一种错觉：只要努力工作，就一定能晋升，甚至有种“今年排队也该轮到我晋升的感觉”。但大部分情况下苦劳不等于功劳，是否具备下一个角色所需要的条件才是晋升考核的侧重点。 不要为了奖励某个同学而让他去晋升，这不仅是对晋升这件事不负责，也是对这个同学和整个团队不负责。\n\n你可以在薪资、年终奖等激励上体现自己对苦劳同学的关注，而对于想要晋升的同学，应该更多给他能力培养的机会，因为对技术同学而言，技术是晋升的基础，战功与业绩也缺一不可，后者是为了证明自己的能力和担当足以承载更多职责。\n\n资料准备\n\n当你提名候选人，候选人要为此准备一些资料来迎接最终的晋升答辩，在这里会涉及 4 个关键词：资料素材来源、证明实力、PPT编写、赛前演练与心理辅导。\n\n素材来源于“过去财年总结 + 新财年的规划 + 汇报材料 + 分享材料 + 项目总结”，因为经过沉淀的资料才最有价值。有了一些素材资料后，就要把控准备阶段的核心：通过素材去证明你具备下一职级所需要的能力。我建议你围绕 5 个维度（架构能力、细节把控的能力、工程的能力、团队的能力、技术视野）去梳理和提炼关键信息，准备相关资料。\n\n这五个维度是纯粹的技术维度，其中因角色和职级不同，有些同学也许不需要考虑团队和视野，具体要看他晋升的岗位是什么。\n\n * 架构能力： 从业务或者现状复杂度以及你的改进切入，要有架构图做说明。\n\n * 细节把控： 从一些隐蔽的坑、风险、线上问题或者技术难点来切入。\n\n * 工程能力： 对规范、效能、质量做了哪些改进？有什么效果？\n\n * 团队能力： 如何带人？培养人？最好有数据说话。\n\n * 技术视野： 足够了解其他团队、其他BU、整个集团、甚至业界在这个业务领域的架构与技术，并对比出优劣，可以想到哪些能力在未来可以沉淀输出，并表达出一定的技术前瞻性。\n\n在明确你要通过上述 5 个维度证明自己有能力晋升之后，接下来就是编写 PPT 将证明你能力的框架可视化，我强调这样 5 点。\n\n * 突出重点： 不要广而全，十几页看不完，也不要一页走天下，答辩全靠讲（这是我在做评委时遇到的两个极端情况）；详略得当，突出重点，评委才能针对性地对你建立认识，区分出该问的问题。\n\n * 内容翔实： 你呈现的内容一定是你亲自做过，并有所思考的，假设 B 项目很成功，而你只负责其中的数据监控，但你却夸大其词地突出了整个项目，这很容易给自己挖坑，评委问的问题你答不上来，不但会怀疑能力，还会质疑你的人品。\n\n * 数据说话： 技术要习惯用数据说话，比如你优化了 B 系统，运行时间由 1分钟提升至10秒，为团队节省了500万，总而言之，用数据替换掉“很好”“突出”“巨大”等形容词。\n\n * 功劳大于苦劳： 晋升看中的是能力，有挑战的功劳可以细说，如果你说自己为了完成 B 项目，一直在加班，那么这种堆砌时间和体力的表述没人在乎。\n\n * 突出自我： 如果你提到某个产品或系统，那么评委关注的是你在这个系统中起到了哪些关键作用，你的思考、判断、决策、行动和结果。\n\n当候选人素材准备得当，PPT 编写完毕之后，Leader 要做的工作是：为员工进行“赛前演练+心理辅导”。\n\n在团队内部让有提名的同学预演一遍自己准备的内容，其余同学从中指出存在的问题（是否紧张、是否突出亮点……）争取让他脱稿，逻辑严谨，减少紧张感；一些同学会格外在意晋升这件事，患得患失，所以 Leader 要帮他平缓心态，帮助其建立正确的认知：把晋升当作一次分享和总结，就当是对过去一段时间的回顾，不管结果如何，总有所收获。\n\n晋升答辩\n\n在正式答辩环节，评委其实核心就是要考察一件事：候选人牛在哪里？他如何思考某一个具体问题？之后如何行动？效果怎么样？未来还要怎么做？直白点儿说，就是：找问题、定义问题、分析问题、解决问题、看未来的能力。\n\n另外，除了关注你技术上 5 个维度的能力之外，评委还会考察你“拿结果的能力”与“业务理解能力”。\n\n * 拿结果的能力： 清晰的客户价值产出，有思考沉淀和可复制的方法论；\n\n * 业务理解能力： 客户视角、前瞻性思考与判断、可以持续提升客户价值。\n\n又因为现场晋升答辩会涉及 QA 的形式，很多情况下，评委会根据你的讲述以及 PPT 准备的内容进行提问，并不是对你某个项目，或者说法产生怀疑，并质问你。所以，回答问题一定要言简意赅，不要随意发散，更不要产生情绪，不停地反驳评委（我做评委时，就遇到过类似的情况，导致整场体验很差）。\n\n另外，有的评委会问到“你是否有项目失败的情况”，如果存在，那么你没必要抵赖，直接真实地说出经历，并表达自己过后的复盘与反思。在评委提问时，也会很大程度上考验你的临场发挥，如果平时没有足够的积累和思考，这时很容易翻车。\n\n结果安排\n\n晋升答辩之后，无外乎两个结果：晋升成功、失败。作为 Leader，你需要让候选人认识到这两种结果，并告知尽最大的努力，考虑最坏的结果，避免形成落差，候选人离职；如果候选人晋升成功，简单庆祝过后，还需要为其新角色明确新的要求和职责，让他有更明确的努力方向，在团队内发挥更大的作用，不要把晋升当作终点，而是后面工作的起点。\n\n\n过去做晋升的一些感受\n\n在之前的工作经历中，我曾经做过很多次技术晋升的评委，也为自己的团队成员做过晋升的准备演练。我印象最深刻的一点就是明确晋升是件什么事？对一些同学而言，可能意味着“升职加薪”，对公司而言可能意味着“组织建设”，不管你从哪个角度去理解，都应该清楚：晋升不是奖励，是责任与担当，是为未来做的事。 我们希望一个同学晋升，是因为他有明确的战功、决策背后充分的思考、业务以及技术上深厚的沉淀，同时还具备未来发展潜力。\n\n与此同时，什么人晋升也是在对这个团体的其他人传递一个信号、一个风向标，它告诉所有人：\n\n * 我们要什么？不要什么？\n\n * 推崇哪些人，认可什么结果？\n\n * “榜样”应该什么样？\n\n所以，一次晋升对于被晋升的同学和他的 Leader 都是一次照镜子，重新认识自己的过程。\n\n而且，技术人的成长和环境是相互作用的，很多时候容易被环境驱动，而往往想要获得能力上的提高就要克服一些环境的惯性。比如早期饿了么侧重于技术，随着业务体量增长，技术的话语权、决策力在减弱。本质上是技术驱动力跟不上业务体量的发展速度，类似“这个功能对业务的价值是什么？有什么贡献？”的言论日益增多，最终我们没有走向技术深度驱动业务，而是想办法最大程度满足业务、提高交付。\n\n所以很容易出现一种情况，一位同学可能做着公司最核心、并发最高、风险最大、业务需求最多的系统，过去一年也搞定了很多需求和项目，但是都在做事，并没有思考怎么更好地做事，或者说为什么用这种方式做事。另外，高强度的交付一定程度上也扼杀了创造力，导致一个创意工作变成体力劳动，最后还要在脑力环节（晋升场）证明自己，大部分人会在主观上轻视了技术沉淀的价值，这需要所有人，尤其是技术 Leader 反思。\n\n\n总结\n\n回到我们这一讲的核心问题“晋升：是不是技术到位、项目做得好就够了？”在我看来并不是的，晋升与其说是一个机会或者一件事，不如说是一套完整的人才梯队建设体系，从业绩到能力和潜力，缺一不可。\n\n好的晋升机制可以让团队越来越强，优秀的人承担更多的职责，发挥更大的作用；反之，糟糕的晋升体系会让好的人才流失，糟糕的人“留下”，最终团队肯定是越来越弱的。\n\n本节课内容的脑图如下：\n\n\n\n留个作业吧：你上次晋升是一个什么情形，对你有哪些触动？欢迎在留言区分享你的看法，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **林：\n\n> 正在准备晋升ppt，感觉很慌\n\n# *扬：\n\n> 正好今年刚刚晋升，不过是保送的，没有参加答辩。未确认是否需要答辩之前，在大脑里也反复模拟了现场的问答场景，感觉如果真的参加答辩，也说不准是否可以通过了。很感谢老师的分享，很受用。\n\n#     讲师回复：\n\n>     晋升也是一个自己照镜子的过程，复盘一下自己对后面的路走的也清晰一些",normalizedContent:"到今天为止，我已经用前 9 讲帮你搭建起一个简单易用的管理框架，那么当你做好本职工作，掌握管理的基本框架和方法之后，怎么灵活运用呢？答案是结合工作中的常见痛点问题进行参照性的演练。那么从今天开始，我们进入最后一个模块“技术管理的常见痛点”。\n\n这个模块不再是纯技术内容和理论框架，更多的是一些实际场景，所以我会结合实际场景多讲一些亲身经历，以及观点、想法，希望给你启发。今天咱们先来看一下与晋升有关的场景。\n\n假设你已经开始带团队，需要给团队内同学做晋升，那么你的考察点是什么？怎么做安排？是不是同学们技术到位、项目做好就能够晋升了呢？（换位来看，如果是你自己想晋升，也是类似的考察点与流程）。\n\n\n经过多少“关”才能晋升？\n\n国内各大厂的晋升流程大同小异，而中小规模公司对晋升则有不同的方式和理解，以饿了么和阿里的常规流程为例，大概步骤如下：\n\n晋升启动——主管提名——部门提报——述职答辩——结果表决——公司复审——结果公布\n\n大部分情况下，团队成员要达到一定的绩效条件（比如 2020 年是 a / 3.75）下一年才有提名资格，才会有机会得到 leader 的提名申报。这个流程中，部门预审、公司复审不在我们的讨论之列，我主要想讲四个关键环节：提名沟通、资料准备、晋升答辩、结果安排。\n\n提名沟通\n\n一个同学想要得到晋升，必须先获得提名的资格，现实中，你不太可能突然发现 a 最近的状态非常好、业绩优异，突然决定下个月就让 a 去晋升，而是要以半年甚至一年为期，为 a 准备合适的项目、角色、工作的内容，让他有足够的贮备与历练，加上亮眼的成绩去迎接下一年的晋升。\n\n在我看来，合适的项目与工作内容来源于团队现状，要让环境赋予 a 晋升机会。比如团队接手一个重要的系统，但其稳定性做得非常差，对公司的业务影响也很大，如果 a 具备稳定性建设和治理的能力，这对他就是一个可以做出成绩并且为团队创造极大价值的机会。\n\n总的来说，提名准备是双向的，你要注意准备期限，并为候选人安排合适的工作。\n\n除了提名准备，我还想强调 leader 提名的初衷。很多人会把“提名”当作给予团队成员的奖励，这会让团队同学形成一种错觉：只要努力工作，就一定能晋升，甚至有种“今年排队也该轮到我晋升的感觉”。但大部分情况下苦劳不等于功劳，是否具备下一个角色所需要的条件才是晋升考核的侧重点。 不要为了奖励某个同学而让他去晋升，这不仅是对晋升这件事不负责，也是对这个同学和整个团队不负责。\n\n你可以在薪资、年终奖等激励上体现自己对苦劳同学的关注，而对于想要晋升的同学，应该更多给他能力培养的机会，因为对技术同学而言，技术是晋升的基础，战功与业绩也缺一不可，后者是为了证明自己的能力和担当足以承载更多职责。\n\n资料准备\n\n当你提名候选人，候选人要为此准备一些资料来迎接最终的晋升答辩，在这里会涉及 4 个关键词：资料素材来源、证明实力、ppt编写、赛前演练与心理辅导。\n\n素材来源于“过去财年总结 + 新财年的规划 + 汇报材料 + 分享材料 + 项目总结”，因为经过沉淀的资料才最有价值。有了一些素材资料后，就要把控准备阶段的核心：通过素材去证明你具备下一职级所需要的能力。我建议你围绕 5 个维度（架构能力、细节把控的能力、工程的能力、团队的能力、技术视野）去梳理和提炼关键信息，准备相关资料。\n\n这五个维度是纯粹的技术维度，其中因角色和职级不同，有些同学也许不需要考虑团队和视野，具体要看他晋升的岗位是什么。\n\n * 架构能力： 从业务或者现状复杂度以及你的改进切入，要有架构图做说明。\n\n * 细节把控： 从一些隐蔽的坑、风险、线上问题或者技术难点来切入。\n\n * 工程能力： 对规范、效能、质量做了哪些改进？有什么效果？\n\n * 团队能力： 如何带人？培养人？最好有数据说话。\n\n * 技术视野： 足够了解其他团队、其他bu、整个集团、甚至业界在这个业务领域的架构与技术，并对比出优劣，可以想到哪些能力在未来可以沉淀输出，并表达出一定的技术前瞻性。\n\n在明确你要通过上述 5 个维度证明自己有能力晋升之后，接下来就是编写 ppt 将证明你能力的框架可视化，我强调这样 5 点。\n\n * 突出重点： 不要广而全，十几页看不完，也不要一页走天下，答辩全靠讲（这是我在做评委时遇到的两个极端情况）；详略得当，突出重点，评委才能针对性地对你建立认识，区分出该问的问题。\n\n * 内容翔实： 你呈现的内容一定是你亲自做过，并有所思考的，假设 b 项目很成功，而你只负责其中的数据监控，但你却夸大其词地突出了整个项目，这很容易给自己挖坑，评委问的问题你答不上来，不但会怀疑能力，还会质疑你的人品。\n\n * 数据说话： 技术要习惯用数据说话，比如你优化了 b 系统，运行时间由 1分钟提升至10秒，为团队节省了500万，总而言之，用数据替换掉“很好”“突出”“巨大”等形容词。\n\n * 功劳大于苦劳： 晋升看中的是能力，有挑战的功劳可以细说，如果你说自己为了完成 b 项目，一直在加班，那么这种堆砌时间和体力的表述没人在乎。\n\n * 突出自我： 如果你提到某个产品或系统，那么评委关注的是你在这个系统中起到了哪些关键作用，你的思考、判断、决策、行动和结果。\n\n当候选人素材准备得当，ppt 编写完毕之后，leader 要做的工作是：为员工进行“赛前演练+心理辅导”。\n\n在团队内部让有提名的同学预演一遍自己准备的内容，其余同学从中指出存在的问题（是否紧张、是否突出亮点……）争取让他脱稿，逻辑严谨，减少紧张感；一些同学会格外在意晋升这件事，患得患失，所以 leader 要帮他平缓心态，帮助其建立正确的认知：把晋升当作一次分享和总结，就当是对过去一段时间的回顾，不管结果如何，总有所收获。\n\n晋升答辩\n\n在正式答辩环节，评委其实核心就是要考察一件事：候选人牛在哪里？他如何思考某一个具体问题？之后如何行动？效果怎么样？未来还要怎么做？直白点儿说，就是：找问题、定义问题、分析问题、解决问题、看未来的能力。\n\n另外，除了关注你技术上 5 个维度的能力之外，评委还会考察你“拿结果的能力”与“业务理解能力”。\n\n * 拿结果的能力： 清晰的客户价值产出，有思考沉淀和可复制的方法论；\n\n * 业务理解能力： 客户视角、前瞻性思考与判断、可以持续提升客户价值。\n\n又因为现场晋升答辩会涉及 qa 的形式，很多情况下，评委会根据你的讲述以及 ppt 准备的内容进行提问，并不是对你某个项目，或者说法产生怀疑，并质问你。所以，回答问题一定要言简意赅，不要随意发散，更不要产生情绪，不停地反驳评委（我做评委时，就遇到过类似的情况，导致整场体验很差）。\n\n另外，有的评委会问到“你是否有项目失败的情况”，如果存在，那么你没必要抵赖，直接真实地说出经历，并表达自己过后的复盘与反思。在评委提问时，也会很大程度上考验你的临场发挥，如果平时没有足够的积累和思考，这时很容易翻车。\n\n结果安排\n\n晋升答辩之后，无外乎两个结果：晋升成功、失败。作为 leader，你需要让候选人认识到这两种结果，并告知尽最大的努力，考虑最坏的结果，避免形成落差，候选人离职；如果候选人晋升成功，简单庆祝过后，还需要为其新角色明确新的要求和职责，让他有更明确的努力方向，在团队内发挥更大的作用，不要把晋升当作终点，而是后面工作的起点。\n\n\n过去做晋升的一些感受\n\n在之前的工作经历中，我曾经做过很多次技术晋升的评委，也为自己的团队成员做过晋升的准备演练。我印象最深刻的一点就是明确晋升是件什么事？对一些同学而言，可能意味着“升职加薪”，对公司而言可能意味着“组织建设”，不管你从哪个角度去理解，都应该清楚：晋升不是奖励，是责任与担当，是为未来做的事。 我们希望一个同学晋升，是因为他有明确的战功、决策背后充分的思考、业务以及技术上深厚的沉淀，同时还具备未来发展潜力。\n\n与此同时，什么人晋升也是在对这个团体的其他人传递一个信号、一个风向标，它告诉所有人：\n\n * 我们要什么？不要什么？\n\n * 推崇哪些人，认可什么结果？\n\n * “榜样”应该什么样？\n\n所以，一次晋升对于被晋升的同学和他的 leader 都是一次照镜子，重新认识自己的过程。\n\n而且，技术人的成长和环境是相互作用的，很多时候容易被环境驱动，而往往想要获得能力上的提高就要克服一些环境的惯性。比如早期饿了么侧重于技术，随着业务体量增长，技术的话语权、决策力在减弱。本质上是技术驱动力跟不上业务体量的发展速度，类似“这个功能对业务的价值是什么？有什么贡献？”的言论日益增多，最终我们没有走向技术深度驱动业务，而是想办法最大程度满足业务、提高交付。\n\n所以很容易出现一种情况，一位同学可能做着公司最核心、并发最高、风险最大、业务需求最多的系统，过去一年也搞定了很多需求和项目，但是都在做事，并没有思考怎么更好地做事，或者说为什么用这种方式做事。另外，高强度的交付一定程度上也扼杀了创造力，导致一个创意工作变成体力劳动，最后还要在脑力环节（晋升场）证明自己，大部分人会在主观上轻视了技术沉淀的价值，这需要所有人，尤其是技术 leader 反思。\n\n\n总结\n\n回到我们这一讲的核心问题“晋升：是不是技术到位、项目做得好就够了？”在我看来并不是的，晋升与其说是一个机会或者一件事，不如说是一套完整的人才梯队建设体系，从业绩到能力和潜力，缺一不可。\n\n好的晋升机制可以让团队越来越强，优秀的人承担更多的职责，发挥更大的作用；反之，糟糕的晋升体系会让好的人才流失，糟糕的人“留下”，最终团队肯定是越来越弱的。\n\n本节课内容的脑图如下：\n\n\n\n留个作业吧：你上次晋升是一个什么情形，对你有哪些触动？欢迎在留言区分享你的看法，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **林：\n\n> 正在准备晋升ppt，感觉很慌\n\n# *扬：\n\n> 正好今年刚刚晋升，不过是保送的，没有参加答辩。未确认是否需要答辩之前，在大脑里也反复模拟了现场的问答场景，感觉如果真的参加答辩，也说不准是否可以通过了。很感谢老师的分享，很受用。\n\n#     讲师回复：\n\n>     晋升也是一个自己照镜子的过程，复盘一下自己对后面的路走的也清晰一些",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"跨团队：没有汇报线的人和事就是推不动？",frontmatter:{title:"跨团队：没有汇报线的人和事就是推不动？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/cfd14b/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/19.%20%20%E8%B7%A8%E5%9B%A2%E9%98%9F%EF%BC%9A%E6%B2%A1%E6%9C%89%E6%B1%87%E6%8A%A5%E7%BA%BF%E7%9A%84%E4%BA%BA%E5%92%8C%E4%BA%8B%E5%B0%B1%E6%98%AF%E6%8E%A8%E4%B8%8D%E5%8A%A8%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/19.  跨团队：没有汇报线的人和事就是推不动？.md",key:"v-ae82e742",path:"/pages/cfd14b/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:3270}],headersStr:"精选评论",content:"在“05 | 大项目：把握关键点，谋定而后动”和“11 | 勤沟通：在信任的基础上，让沟通简单”两讲中，我提过“跨团队”这件事，很多同学带团队之后，无法回避的一个问题就是“跨团队协作”，对于技术 Leader 这是一件日常工作：在指定的时间与约束规范内，不同部门之间（产品、运营、技术、业务……）或者与外部团队的个人之间，通过配合完成一项明确目标的独立的任务。\n\n在这个过程中，很容易因为团队界限、汇报关系、信息不透明等原因，出现“协作效率低”“任务沟通困难”“一直无法达成一致”等问题，拿不到好的结果，谈“跨团队”色变。一些同学在留言中也提到“跨团队协作很容易吃力不讨好，出现很多矛盾不说，拿结果的过程也很艰难。”“明明团队内合作起来很顺利，为什么一要跨部门推进事情就难如登天？”所以，我认为有必要用一讲的时间来聊一聊要怎么认识“跨团队事务推进”，为什么觉得有些事情只有老板推得动？自己又该怎么跨团队落地工作，这是你必须要具备的横向领导力。\n\n\n跨团队事务推进的难点\n\n假设这样一种场景：公司要为即将迎来的“618”开启“电商购物狂欢节”活动，而你的技术团队需要担起“做好服务保障”“用新技术实现并提高用户购物体验”的重任，这次活动牵涉的兄弟部门较多，产品团队、业务团队、运营团队等。\n\n围绕“做好服务保障”你需要和其他技术团队一起确定现有的保障措施、梳理可能发生的情况、按照当前的职责准备应急的预案等；围绕“用新技术实现并提高用户购物体验”则可能需要与运营和业务团队针对新的活动玩法逐一敲定方案，从用户体验到运营方案和技术实现，很多内容需要多个团队和角色一同确定并推进，既需要你配合其他人，也需要其他人配合你。\n\n在这个过程中会有很多技术之外的情况发生，大部分技术 Leader 都会面临的 4 个难点。\n\n * 方案无法达成一致： 你提出的 A 方案与运营团队提出的 B 方案，在实现成本、方式、资源等方面存在很明显差异，陷入僵局。\n\n * 时间无法达成一致： 协作方赞同 A 方案，但对“一周上线项目”的时间节点有意见，认为至少需要 20 天，这会从“时间无法达成一致”回滚到“方案无法达成一致”，陷入新一轮僵局。\n\n * 优先级无法达成一致： 协作方赞同 A 方案，对项目用时一周也无异议，但该项目优先级在他那儿没有提到很高，一直有优先级更高的项目插队，导致交付时间一变再变、一拖再拖。\n\n * 阶段性交付结果不一致： 因为某些原因（线上突发状况、同学请假、人员能力较差……），与你协作团队在配合时交付你的结果质量无法满足你的需求，比如运营给的方案有很大漏洞、技术给的接口 Bug 比功能点还多，你又无法直接管理对方团队的成员，最终即使更正了也可能浪费了额外的时间。\n\n同理，其他兄弟部门在需要你配合时，也会出现类似的问题，我认为有这样几点原因：\n\n * 协作方不清楚项目原因和意义，会优先考虑自身利益，根据利益高低推进难度由易到难；\n\n * 协作方有自己当前的工作内容和优先级，突然配合进行其他事务，引入的风险往往较高；\n\n * 各部门对彼此之间的工作方式、团队经验以及当前现状往往不了解；\n\n * 任务细化，跨团队合作受时间、空间等因素影响沟通成本较高，有些问题不知道该找谁。\n\n而不管是你推动别人没结果，还是别人推动你没有结果，你首先要做的，是树立正确的认识，然后再思考怎么解决。要知道，本质上，“跨团队事务推进”是为了一起拿到更好的结果。\n\n\n跨团队事务推进的基本态度\n\n想把一件事儿做正确，先要正确地认识这件事，跨团队的协同因为彼此没有直接的管理关系并且信息并不对等，会导致上面这些糟糕的情况层出不穷，这个时候是不是就要消极对待或者认为完全是对方不配合工作呢？我认为先要摆正自己的态度，不然很难做好这件事。\n\n * 不要做情绪的奴隶，先找自己的问题： 一旦“跨团队合作”受阻，不少同学会下意识地认为“环境有问题”“对方不配合”“公司文化糟糕”，很少会主动寻找自己的问题。在我的认识里，抱怨解决不了任何问题，想拿到一个好结果就要有付出更多辛苦。尝试换位思考，为什么无法与对方达成一致？对方在意或则纠结的是什么？你觉得自然而然的事儿在对方看来会不会是“飞来横祸”？梳理自己的方案和想法，审视自己有没有把事情想明白、讲清楚，该传达的信息是不是到位了。\n\n * 快刀斩乱麻，避免因复杂的问题陷入沼泽： 假设在推进某类复杂业务时，产生了 A 问题，而你在解决 A 问题时，又会延伸出 B、C、D等问题，而你将所有的精力都用来解决一个个小的问题（甚至你根本不擅长的 B 问题），事倍功半；找到最关键的问题，并找到能解决这些问题的人，不要让自己陷入链式的解决问题中。越是复杂的问题越要致力于寻找能破局的关键点，盯着最核心的要点。\n\n * 慢思考，快执行： 当事情受阻时，不要第一时间做应激反应，推不动和无法达成一致都是正常的。凡事三思后行，在脑海中梳理整件事情，有了脉络和眉目之后，再快速调动所有资源去执行（该借力就借力，该凭职级就凭职级，该找老板就找老板）。\n\n\n跨团队事务推进的原则方法\n\n解决“跨团队事务推进不畅”，比较直观的三种维度是：解决问题本身；解决产生问题的人；换能解决问题的人来。直白点说，要么把问题解决掉，要么搞定制造问题的人，要么换能解决这个问题的人来解决。总结成一句话：换位思考、摆事实、讲道理、凭职级、借势而行、想尽办法达成目标。 在此基础上，我从经验出发，提几点建议。\n\n * 合作前（明确目标，确保信息完整）\n\n一些同学在沟通时，很容易直接说“接下来要改造 A 系统，希望你配合我做……”忽略了合作前的信息互通。我建议你先梳理项目目标，搞清楚为什么要“改造 A 系统”？这个项目对产品、运营、业务三个团队的重要性是怎样的？它们能通过“改造 A 系统”获得哪些价值？它们需要配合的程度？做成会有什么结果，做不成又有什么结果……总之，你要把所有已知的信息给到对方，并换位思考，寻求平衡。\n\n因为团队毕竟不同，不同团队的诉求也不同，尽量秉持友好与中立的沟通态度，多换位思考、去了解对方的诉求与困难，不要总想着让对方帮你什么，也同步想一下你能帮对方什么，充分的信息互通，把做事的逻辑讲明白来赢得各方的信任，制造良好的协作氛围。\n\n * 合作中（定位问题，借势而为）\n\n事务的推进和处理中，出现问题在所难免，保持冷静的态度去分析和处理，找到问题的核心点避免陷入无休止的陷阱。同时掌握适当的技巧，比如某件事儿你做完了，需要 B 团队继续，B 团队遇到困难或者犹豫不决，或者有些问题你无法解决时，要借助这件事情的势能。找你的老板、找对方的老板是一种，形成压力也是一种方式，比如 C 团队还在等 B 处理完的结果，那么 B 夹在你和 C 团队之间，自然会有一种紧迫感。\n\n * 合作后（承担责任，公开肯定）\n\n一个协同项目如果最终结果还不错，不要忘记合作伙伴的支持与帮助，在IM、邮件或者会议上应该公开给予肯定，为下次更愉快地合作留下基础。如果结果不理想，也要敢于承担责任，不要第一反应都是甩锅，毕竟谁也不想未来和遇到问题就甩锅的人合作，这样之后让以后的事情越来越难做。\n\n\n小结\n\n“跨团队合作”这件事无法避免，项目推进也十分复杂，过程中处处是坑，永远不要以为别人配合你是天经地义的事情，时刻保持一个比较高的风险意识，把事情想明白、在脑海中推演所有的可能、针对不同的问题寻找他们的关联，并且探寻最关键的破局点是什么。\n\n虽然跨团队的事务推进很难，但也最锻炼人，能把这些事做好意味着你能解决职场工作中的大部分场景和问题，对未来职业生涯的帮助非常大。让被你管理的人配合你很正常，让大家都能配合你，你就很了不起了。\n\n\n\n留个作业：最让你痛苦的一次跨团队合作经历是怎样的？为什么觉得无法忍受？欢迎在留言区分享你的经验，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论",normalizedContent:"在“05 | 大项目：把握关键点，谋定而后动”和“11 | 勤沟通：在信任的基础上，让沟通简单”两讲中，我提过“跨团队”这件事，很多同学带团队之后，无法回避的一个问题就是“跨团队协作”，对于技术 leader 这是一件日常工作：在指定的时间与约束规范内，不同部门之间（产品、运营、技术、业务……）或者与外部团队的个人之间，通过配合完成一项明确目标的独立的任务。\n\n在这个过程中，很容易因为团队界限、汇报关系、信息不透明等原因，出现“协作效率低”“任务沟通困难”“一直无法达成一致”等问题，拿不到好的结果，谈“跨团队”色变。一些同学在留言中也提到“跨团队协作很容易吃力不讨好，出现很多矛盾不说，拿结果的过程也很艰难。”“明明团队内合作起来很顺利，为什么一要跨部门推进事情就难如登天？”所以，我认为有必要用一讲的时间来聊一聊要怎么认识“跨团队事务推进”，为什么觉得有些事情只有老板推得动？自己又该怎么跨团队落地工作，这是你必须要具备的横向领导力。\n\n\n跨团队事务推进的难点\n\n假设这样一种场景：公司要为即将迎来的“618”开启“电商购物狂欢节”活动，而你的技术团队需要担起“做好服务保障”“用新技术实现并提高用户购物体验”的重任，这次活动牵涉的兄弟部门较多，产品团队、业务团队、运营团队等。\n\n围绕“做好服务保障”你需要和其他技术团队一起确定现有的保障措施、梳理可能发生的情况、按照当前的职责准备应急的预案等；围绕“用新技术实现并提高用户购物体验”则可能需要与运营和业务团队针对新的活动玩法逐一敲定方案，从用户体验到运营方案和技术实现，很多内容需要多个团队和角色一同确定并推进，既需要你配合其他人，也需要其他人配合你。\n\n在这个过程中会有很多技术之外的情况发生，大部分技术 leader 都会面临的 4 个难点。\n\n * 方案无法达成一致： 你提出的 a 方案与运营团队提出的 b 方案，在实现成本、方式、资源等方面存在很明显差异，陷入僵局。\n\n * 时间无法达成一致： 协作方赞同 a 方案，但对“一周上线项目”的时间节点有意见，认为至少需要 20 天，这会从“时间无法达成一致”回滚到“方案无法达成一致”，陷入新一轮僵局。\n\n * 优先级无法达成一致： 协作方赞同 a 方案，对项目用时一周也无异议，但该项目优先级在他那儿没有提到很高，一直有优先级更高的项目插队，导致交付时间一变再变、一拖再拖。\n\n * 阶段性交付结果不一致： 因为某些原因（线上突发状况、同学请假、人员能力较差……），与你协作团队在配合时交付你的结果质量无法满足你的需求，比如运营给的方案有很大漏洞、技术给的接口 bug 比功能点还多，你又无法直接管理对方团队的成员，最终即使更正了也可能浪费了额外的时间。\n\n同理，其他兄弟部门在需要你配合时，也会出现类似的问题，我认为有这样几点原因：\n\n * 协作方不清楚项目原因和意义，会优先考虑自身利益，根据利益高低推进难度由易到难；\n\n * 协作方有自己当前的工作内容和优先级，突然配合进行其他事务，引入的风险往往较高；\n\n * 各部门对彼此之间的工作方式、团队经验以及当前现状往往不了解；\n\n * 任务细化，跨团队合作受时间、空间等因素影响沟通成本较高，有些问题不知道该找谁。\n\n而不管是你推动别人没结果，还是别人推动你没有结果，你首先要做的，是树立正确的认识，然后再思考怎么解决。要知道，本质上，“跨团队事务推进”是为了一起拿到更好的结果。\n\n\n跨团队事务推进的基本态度\n\n想把一件事儿做正确，先要正确地认识这件事，跨团队的协同因为彼此没有直接的管理关系并且信息并不对等，会导致上面这些糟糕的情况层出不穷，这个时候是不是就要消极对待或者认为完全是对方不配合工作呢？我认为先要摆正自己的态度，不然很难做好这件事。\n\n * 不要做情绪的奴隶，先找自己的问题： 一旦“跨团队合作”受阻，不少同学会下意识地认为“环境有问题”“对方不配合”“公司文化糟糕”，很少会主动寻找自己的问题。在我的认识里，抱怨解决不了任何问题，想拿到一个好结果就要有付出更多辛苦。尝试换位思考，为什么无法与对方达成一致？对方在意或则纠结的是什么？你觉得自然而然的事儿在对方看来会不会是“飞来横祸”？梳理自己的方案和想法，审视自己有没有把事情想明白、讲清楚，该传达的信息是不是到位了。\n\n * 快刀斩乱麻，避免因复杂的问题陷入沼泽： 假设在推进某类复杂业务时，产生了 a 问题，而你在解决 a 问题时，又会延伸出 b、c、d等问题，而你将所有的精力都用来解决一个个小的问题（甚至你根本不擅长的 b 问题），事倍功半；找到最关键的问题，并找到能解决这些问题的人，不要让自己陷入链式的解决问题中。越是复杂的问题越要致力于寻找能破局的关键点，盯着最核心的要点。\n\n * 慢思考，快执行： 当事情受阻时，不要第一时间做应激反应，推不动和无法达成一致都是正常的。凡事三思后行，在脑海中梳理整件事情，有了脉络和眉目之后，再快速调动所有资源去执行（该借力就借力，该凭职级就凭职级，该找老板就找老板）。\n\n\n跨团队事务推进的原则方法\n\n解决“跨团队事务推进不畅”，比较直观的三种维度是：解决问题本身；解决产生问题的人；换能解决问题的人来。直白点说，要么把问题解决掉，要么搞定制造问题的人，要么换能解决这个问题的人来解决。总结成一句话：换位思考、摆事实、讲道理、凭职级、借势而行、想尽办法达成目标。 在此基础上，我从经验出发，提几点建议。\n\n * 合作前（明确目标，确保信息完整）\n\n一些同学在沟通时，很容易直接说“接下来要改造 a 系统，希望你配合我做……”忽略了合作前的信息互通。我建议你先梳理项目目标，搞清楚为什么要“改造 a 系统”？这个项目对产品、运营、业务三个团队的重要性是怎样的？它们能通过“改造 a 系统”获得哪些价值？它们需要配合的程度？做成会有什么结果，做不成又有什么结果……总之，你要把所有已知的信息给到对方，并换位思考，寻求平衡。\n\n因为团队毕竟不同，不同团队的诉求也不同，尽量秉持友好与中立的沟通态度，多换位思考、去了解对方的诉求与困难，不要总想着让对方帮你什么，也同步想一下你能帮对方什么，充分的信息互通，把做事的逻辑讲明白来赢得各方的信任，制造良好的协作氛围。\n\n * 合作中（定位问题，借势而为）\n\n事务的推进和处理中，出现问题在所难免，保持冷静的态度去分析和处理，找到问题的核心点避免陷入无休止的陷阱。同时掌握适当的技巧，比如某件事儿你做完了，需要 b 团队继续，b 团队遇到困难或者犹豫不决，或者有些问题你无法解决时，要借助这件事情的势能。找你的老板、找对方的老板是一种，形成压力也是一种方式，比如 c 团队还在等 b 处理完的结果，那么 b 夹在你和 c 团队之间，自然会有一种紧迫感。\n\n * 合作后（承担责任，公开肯定）\n\n一个协同项目如果最终结果还不错，不要忘记合作伙伴的支持与帮助，在im、邮件或者会议上应该公开给予肯定，为下次更愉快地合作留下基础。如果结果不理想，也要敢于承担责任，不要第一反应都是甩锅，毕竟谁也不想未来和遇到问题就甩锅的人合作，这样之后让以后的事情越来越难做。\n\n\n小结\n\n“跨团队合作”这件事无法避免，项目推进也十分复杂，过程中处处是坑，永远不要以为别人配合你是天经地义的事情，时刻保持一个比较高的风险意识，把事情想明白、在脑海中推演所有的可能、针对不同的问题寻找他们的关联，并且探寻最关键的破局点是什么。\n\n虽然跨团队的事务推进很难，但也最锻炼人，能把这些事做好意味着你能解决职场工作中的大部分场景和问题，对未来职业生涯的帮助非常大。让被你管理的人配合你很正常，让大家都能配合你，你就很了不起了。\n\n\n\n留个作业：最让你痛苦的一次跨团队合作经历是怎样的？为什么觉得无法忍受？欢迎在留言区分享你的经验，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:22:14.000Z",permalink:"/pages/366b2d/"},regularPath:"/70.%E5%BC%80%E6%BA%90%E4%BA%A7%E5%93%81/10.%E6%A6%82%E8%A6%81.html",relativePath:"70.开源产品/10.概要.md",key:"v-21b382ce",path:"/pages/366b2d/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"接手新团队：士气低、交付迟、事故多发，如何下手解决？",frontmatter:{title:"接手新团队：士气低、交付迟、事故多发，如何下手解决？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/38ba4d/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/21.%20%20%E6%8E%A5%E6%89%8B%E6%96%B0%E5%9B%A2%E9%98%9F%EF%BC%9A%E5%A3%AB%E6%B0%94%E4%BD%8E%E3%80%81%E4%BA%A4%E4%BB%98%E8%BF%9F%E3%80%81%E4%BA%8B%E6%95%85%E5%A4%9A%E5%8F%91%EF%BC%8C%E5%A6%82%E4%BD%95%E4%B8%8B%E6%89%8B%E8%A7%A3%E5%86%B3%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/21.  接手新团队：士气低、交付迟、事故多发，如何下手解决？.md",key:"v-5e4f50f7",path:"/pages/38ba4d/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:3071}],headersStr:"精选评论",content:"“接手新团队”是比较综合且棘手的场景之一，离开自己熟悉的团队甚至业务，去接手一个全新的团队，并且这个团队在过去一段时间的情况非常糟糕，问题也很多，这对 Leader 来说很痛苦。\n\n而且据我观察，往往在团队管理上有出色的表现的同学，越容易遇到这种情况，因为你老板遇到类似的问题肯定优先想到你（我在工作中也经历过多次职位调整，没少踩坑也没少走弯路）。\n\n这一讲我不侧重在理论框架上，只简单讲一下挑战和困难，以及如何分析问题和行动。因为很多时候是要看现实的情况来做具体的判断，所以我讲的更多是经验与思路，你参考一下即可。\n\n\n困难挑战\n\nLeader 接手的团队一般是在一段时间内一直出现各种问题，而且原来的负责人无法很好地解决团队出现的问题，并且一些问题已经造成了严重的影响，比如系统经常出问题影响用户和业务、工作任务完成不了或者交付质量极低、团队成员分崩离析等。当然，也有比较幸运的情况，比如原来的负责人做了调整，所以重新安排你去接手（这种幸运的情况你也可以参照下面的思路，只是有些问题会简单许多）。而一个问题团队的接手，对你的挑战也主要体现在这几个方面。\n\n * 团队内涣散的士气与人心\n\n随着团队情况恶化的时间变长，团队成员也会越来越沮丧、工作状态逐渐变得糟糕甚至没有信心。这一过程中，一些非常优秀的同学也会因为这个糟糕的环境而选择离开，同时为了解决这个团队状态，可能已经做了很多人员调整，每个调整都增加了人员的不确定性。同时，更令人头疼的是，因为之前糟糕的结果和团队状态，团队成员彼此之间和其他团队的信任感非常弱，协作变得十分困难。\n\n * 糟糕的业务现状\n\n一个糟糕团队最基本的表现就是无法完成对应职责的工作，在研发领域比较明显的就是需求无法交付以及系统稳定性无法保证。而一旦这样的情况持续一段时间，就会进入一个恶性循环，本来糟糕的系统为了应付业务压力所以做得更糟糕，等你来接手时，可能会发现系统的很多实现与功能已经一塌糊涂，难以在未来进行迭代和维护，甚至现在是不是有严重的问题一直存在而没被发现也不确定。更糟糕的是对口的业务也一直受技术团队拖累，而此时上级和业务部门都会对你有比较高的解决问题的期望（也是压力）。\n\n * 自身的适应与改变\n\n接触一个新团队和进入一个新环境有很多类似，往往我们可以依赖的就是过去的经验，但是很多时候影响我们判断的也是过去的经验。要明白，并不是过去所有的经验放在当前的场景里都是对的，真正有效的经验是活的，不是死的，要随着场景变化而变化。\n\n\n行动措施\n\n明确了环境和这件事有多么棘手之后，我们就要开始着手解决，这里我比较推荐的是一边盘点一遍想办法，尽早行动得到反馈。大部分情况下，可以从人员盘点和事务盘点两个方面切入去分析和思考。\n\n盘人\n\n之前几讲中如果要面对一个问题或情况，我都会优先侧重于梳理事务，但是这个场景里是优先盘人，为什么呢？因为这是一个你并不熟悉乃至了解的团队，要知道事情都是人做的，磨刀不误砍柴工，不把团队的人员梳理干净，你连人员的基本信息和特征都不清楚，如何分配任务？不借助现有成员对现状和业务的理解，完全靠你自己主观判断，目前的情况怎么做好判断？\n\n人员的盘点，最关键的围绕能做事和想做事两方面去看团队人员目前的情况，这样就基本可以把目前的同学分成4个象限。\n\n重点是找出两类人：能做事并且想做事的，不能做事并且不想做事的。前者是我们最需要的，也是接下来能否扭转局面的关键，后者则是需要尽早清理出团队的，不能给他再作妖的机会。说着容易，但是具体如何识别呢？可以结合几个方面来看，最具备说服力的就是每个人对应职责的业务结果，其次可以通过其他人的反馈和当事人OneOne的感觉来判断。\n\n比如张三在团队中负责 A 系统的开发，A系统线上问题频发，需求完成的质量非常糟糕，那么其他人再怎么为他点赞，与你沟通得再顺畅，你都要多思考一下，为什么说得这么好但是结果完全不一样？OneOne 的时候不仅要听他讲干了什么，也要听他讲为什么做得不够好。是能从自己身上找原因，还是大部分点都认为是其他人乃至环境的问题，这对你判断一个人是否“靠谱”很有帮助。并且很多时候如果真的是受环境或者其他情况影响导致事情的结果不理想，那么自身也会有足够的思考，而不是甩锅似的一点想法都没有。\n\n如果确实是有意愿做事，但是在糟糕的环境下能力无法发挥，这样的人要给予包容，想办法帮助并激励他，给他权限为他创造机会。而那些明显结果不行，一直推卸责任甚至态度也非常差不愿意配合工作的人，就是典型的既没能力也没意愿。这样的人多留在团队一分钟都是一种伤害，应该尽快清理出团队，避免继续创造负向价值。\n\n这里面还有一个需要注意的点，与现团队的同学沟通时一定也同步摆正自己的心态，并不是说你过去的经验都是对的，他们做的全是错的，然后你带着正确答案来拯救他们了。如果你是这种居高临下的自傲心态，大概率最后要做砸，并且也没人愿意和你一起做。真实情况是，在原来的环境中即使是你负责可能也会出现一样的问题与状况，保持空杯心态，去探究过去为什么没做，未来应该怎么做，才是真的有用。团队成员也会感受到你到底是他们的一分子，还是来指责、批评、教育他们的。\n\n盘事\n\n\n\n相较于人员的盘点和安排处理，盘事相对思路会更清晰，并且在前面几讲我也有提到过相关的内容。这里面最终要的两个方面是就是找出最重要的几件事去做以及在做的过程中争取到一些支持。\n\n往往我们梳理好人员、了解清楚业务后会发现，历史包袱非常重，很多事情都没有做到位，留下了很多麻烦。然而此时也不可能把每一个点都修正，所以没必要纠结于过去哪些事情没有做好，而是着眼于未来去给现在的团队找价值和定位。比如你看到很多过去的需求实现的方案都是有问题或者有缺陷的，那有没有一一更正吗？大概率是没有必要的，除非这个问题发生的概率以及可能造成的影响都足够巨大，否则不如先不动，而是把最重要的几件事梳理并确定下来，团队先去把这些按照新的标准和要求做好，一步步来重新形成团队状态。\n\n这就非常考验 Leader 在局部和全局之间做判断的能力，往往我们总想把眼前的问题解决掉，而忽视这个问题在整体中重要性的占比以及 ROI 的高低。同时如果现实情况非常复杂，难以梳理出一个清晰的脉络和头绪，我认为最好的方法是画图，在白板上把所有的事情一一画下来，然后通过连线的方式把不同事情之间的依赖或关联关系也表明出来。此时再结合之前从其他同学、你老板、合作伙伴等各方面得到的信息，做出一个判断或者说决策，即这个团队下一步做什么，有时候哪怕不是最好的选择，也比一直不选择要强得多。\n\n同时，因为你是接手了一个问题团队，所以要适当地争取上级和其他团队的支持，会哭的孩子有奶喝是真的。比如一段时间内业务需求实现的放缓、对线上系统稳定性问题的一定容错、其他团队技术高手的支持等等，结合你的实际情况去寻找这些支持，只要能让团队的情况有所改善，都值得一试。\n\n\n小结\n\n虽然接手一个问题团队很难，要处理很多问题并且非常辛苦，但是对一个 Leader 的锻炼也是无与伦比的，我见过几乎所有优秀的技术 Leader 都是一次次这样磨炼出来的。毕竟技术管理能力很重要的一个落地场景就是这种情况，也是最能发挥技术 Leader 管理能力价值的场景之一。\n\n\n\n留个作业吧：如果现在要你接手一个新团队，不管是不是问题团队，你觉得最难的是什么？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **军：\n\n> 课堂作业：1. 团队目标和共识的确立；2. 如何让团队成员之间产生信任感；3. 团队成员及时的正向反馈；请老师指教\n\n#     讲师回复：\n\n>     共同目标的确定可以从两个纬度去考虑，一个是过去大家的痛点（非常痛的那种），另外一个就是能拿到业绩的战功；很多时候信任感其实是最难建立的，大家不会看你说什么，而是看你做什么、怎么做、跟谁做。\n\n# **泉：\n\n> 很受益",normalizedContent:"“接手新团队”是比较综合且棘手的场景之一，离开自己熟悉的团队甚至业务，去接手一个全新的团队，并且这个团队在过去一段时间的情况非常糟糕，问题也很多，这对 leader 来说很痛苦。\n\n而且据我观察，往往在团队管理上有出色的表现的同学，越容易遇到这种情况，因为你老板遇到类似的问题肯定优先想到你（我在工作中也经历过多次职位调整，没少踩坑也没少走弯路）。\n\n这一讲我不侧重在理论框架上，只简单讲一下挑战和困难，以及如何分析问题和行动。因为很多时候是要看现实的情况来做具体的判断，所以我讲的更多是经验与思路，你参考一下即可。\n\n\n困难挑战\n\nleader 接手的团队一般是在一段时间内一直出现各种问题，而且原来的负责人无法很好地解决团队出现的问题，并且一些问题已经造成了严重的影响，比如系统经常出问题影响用户和业务、工作任务完成不了或者交付质量极低、团队成员分崩离析等。当然，也有比较幸运的情况，比如原来的负责人做了调整，所以重新安排你去接手（这种幸运的情况你也可以参照下面的思路，只是有些问题会简单许多）。而一个问题团队的接手，对你的挑战也主要体现在这几个方面。\n\n * 团队内涣散的士气与人心\n\n随着团队情况恶化的时间变长，团队成员也会越来越沮丧、工作状态逐渐变得糟糕甚至没有信心。这一过程中，一些非常优秀的同学也会因为这个糟糕的环境而选择离开，同时为了解决这个团队状态，可能已经做了很多人员调整，每个调整都增加了人员的不确定性。同时，更令人头疼的是，因为之前糟糕的结果和团队状态，团队成员彼此之间和其他团队的信任感非常弱，协作变得十分困难。\n\n * 糟糕的业务现状\n\n一个糟糕团队最基本的表现就是无法完成对应职责的工作，在研发领域比较明显的就是需求无法交付以及系统稳定性无法保证。而一旦这样的情况持续一段时间，就会进入一个恶性循环，本来糟糕的系统为了应付业务压力所以做得更糟糕，等你来接手时，可能会发现系统的很多实现与功能已经一塌糊涂，难以在未来进行迭代和维护，甚至现在是不是有严重的问题一直存在而没被发现也不确定。更糟糕的是对口的业务也一直受技术团队拖累，而此时上级和业务部门都会对你有比较高的解决问题的期望（也是压力）。\n\n * 自身的适应与改变\n\n接触一个新团队和进入一个新环境有很多类似，往往我们可以依赖的就是过去的经验，但是很多时候影响我们判断的也是过去的经验。要明白，并不是过去所有的经验放在当前的场景里都是对的，真正有效的经验是活的，不是死的，要随着场景变化而变化。\n\n\n行动措施\n\n明确了环境和这件事有多么棘手之后，我们就要开始着手解决，这里我比较推荐的是一边盘点一遍想办法，尽早行动得到反馈。大部分情况下，可以从人员盘点和事务盘点两个方面切入去分析和思考。\n\n盘人\n\n之前几讲中如果要面对一个问题或情况，我都会优先侧重于梳理事务，但是这个场景里是优先盘人，为什么呢？因为这是一个你并不熟悉乃至了解的团队，要知道事情都是人做的，磨刀不误砍柴工，不把团队的人员梳理干净，你连人员的基本信息和特征都不清楚，如何分配任务？不借助现有成员对现状和业务的理解，完全靠你自己主观判断，目前的情况怎么做好判断？\n\n人员的盘点，最关键的围绕能做事和想做事两方面去看团队人员目前的情况，这样就基本可以把目前的同学分成4个象限。\n\n重点是找出两类人：能做事并且想做事的，不能做事并且不想做事的。前者是我们最需要的，也是接下来能否扭转局面的关键，后者则是需要尽早清理出团队的，不能给他再作妖的机会。说着容易，但是具体如何识别呢？可以结合几个方面来看，最具备说服力的就是每个人对应职责的业务结果，其次可以通过其他人的反馈和当事人oneone的感觉来判断。\n\n比如张三在团队中负责 a 系统的开发，a系统线上问题频发，需求完成的质量非常糟糕，那么其他人再怎么为他点赞，与你沟通得再顺畅，你都要多思考一下，为什么说得这么好但是结果完全不一样？oneone 的时候不仅要听他讲干了什么，也要听他讲为什么做得不够好。是能从自己身上找原因，还是大部分点都认为是其他人乃至环境的问题，这对你判断一个人是否“靠谱”很有帮助。并且很多时候如果真的是受环境或者其他情况影响导致事情的结果不理想，那么自身也会有足够的思考，而不是甩锅似的一点想法都没有。\n\n如果确实是有意愿做事，但是在糟糕的环境下能力无法发挥，这样的人要给予包容，想办法帮助并激励他，给他权限为他创造机会。而那些明显结果不行，一直推卸责任甚至态度也非常差不愿意配合工作的人，就是典型的既没能力也没意愿。这样的人多留在团队一分钟都是一种伤害，应该尽快清理出团队，避免继续创造负向价值。\n\n这里面还有一个需要注意的点，与现团队的同学沟通时一定也同步摆正自己的心态，并不是说你过去的经验都是对的，他们做的全是错的，然后你带着正确答案来拯救他们了。如果你是这种居高临下的自傲心态，大概率最后要做砸，并且也没人愿意和你一起做。真实情况是，在原来的环境中即使是你负责可能也会出现一样的问题与状况，保持空杯心态，去探究过去为什么没做，未来应该怎么做，才是真的有用。团队成员也会感受到你到底是他们的一分子，还是来指责、批评、教育他们的。\n\n盘事\n\n\n\n相较于人员的盘点和安排处理，盘事相对思路会更清晰，并且在前面几讲我也有提到过相关的内容。这里面最终要的两个方面是就是找出最重要的几件事去做以及在做的过程中争取到一些支持。\n\n往往我们梳理好人员、了解清楚业务后会发现，历史包袱非常重，很多事情都没有做到位，留下了很多麻烦。然而此时也不可能把每一个点都修正，所以没必要纠结于过去哪些事情没有做好，而是着眼于未来去给现在的团队找价值和定位。比如你看到很多过去的需求实现的方案都是有问题或者有缺陷的，那有没有一一更正吗？大概率是没有必要的，除非这个问题发生的概率以及可能造成的影响都足够巨大，否则不如先不动，而是把最重要的几件事梳理并确定下来，团队先去把这些按照新的标准和要求做好，一步步来重新形成团队状态。\n\n这就非常考验 leader 在局部和全局之间做判断的能力，往往我们总想把眼前的问题解决掉，而忽视这个问题在整体中重要性的占比以及 roi 的高低。同时如果现实情况非常复杂，难以梳理出一个清晰的脉络和头绪，我认为最好的方法是画图，在白板上把所有的事情一一画下来，然后通过连线的方式把不同事情之间的依赖或关联关系也表明出来。此时再结合之前从其他同学、你老板、合作伙伴等各方面得到的信息，做出一个判断或者说决策，即这个团队下一步做什么，有时候哪怕不是最好的选择，也比一直不选择要强得多。\n\n同时，因为你是接手了一个问题团队，所以要适当地争取上级和其他团队的支持，会哭的孩子有奶喝是真的。比如一段时间内业务需求实现的放缓、对线上系统稳定性问题的一定容错、其他团队技术高手的支持等等，结合你的实际情况去寻找这些支持，只要能让团队的情况有所改善，都值得一试。\n\n\n小结\n\n虽然接手一个问题团队很难，要处理很多问题并且非常辛苦，但是对一个 leader 的锻炼也是无与伦比的，我见过几乎所有优秀的技术 leader 都是一次次这样磨炼出来的。毕竟技术管理能力很重要的一个落地场景就是这种情况，也是最能发挥技术 leader 管理能力价值的场景之一。\n\n\n\n留个作业吧：如果现在要你接手一个新团队，不管是不是问题团队，你觉得最难的是什么？\n\n----------------------------------------\n\n\n# 精选评论\n\n# **军：\n\n> 课堂作业：1. 团队目标和共识的确立；2. 如何让团队成员之间产生信任感；3. 团队成员及时的正向反馈；请老师指教\n\n#     讲师回复：\n\n>     共同目标的确定可以从两个纬度去考虑，一个是过去大家的痛点（非常痛的那种），另外一个就是能拿到业绩的战功；很多时候信任感其实是最难建立的，大家不会看你说什么，而是看你做什么、怎么做、跟谁做。\n\n# **泉：\n\n> 很受益",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"结束语  岁月静好，技术人依然要负重前行",frontmatter:{title:"结束语  岁月静好，技术人依然要负重前行",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/0dcb21/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/22.%20%E7%BB%93%E6%9D%9F%E8%AF%AD%20%20%E5%B2%81%E6%9C%88%E9%9D%99%E5%A5%BD%EF%BC%8C%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%BE%9D%E7%84%B6%E8%A6%81%E8%B4%9F%E9%87%8D%E5%89%8D%E8%A1%8C.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/22. 结束语  岁月静好，技术人依然要负重前行.md",key:"v-03fd5b0f",path:"/pages/0dcb21/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:1361}],headersStr:"精选评论",content:"一晃两个多月的时间过去了，坦白说这几个月的写课经历比我预想得要困难许多，因为需要不断打磨稿件，思考怎么写才最能让你有所收获，再加上我最近在创业，写稿时间都是一点点挤出来的，熬心又熬力。不过我要感谢这段经历，因为这是我第一次以课程的方式分享自己的经验，并在留言区遇到了很多给予我肯定的同学，十分难得。\n\n最开始思考课程定位时，我并没有把它完全定位成“管理课程”，所以在最初几讲，和你聊了一些我认为技术 Leader 必须做好的事情，比如稳定性，而不是所谓的管理方法论，因为再好的方法论只有结合实际的场景发挥作用之后你才会觉得有价值，不然就仅仅是无意义的说教了。\n\n今天是咱们的“最后一堂课”，我不再讲与技术或者管理有关的话题，而是唠点儿知心话，讲一讲我最后想告诉你的一件事儿：岁月静好，作为技术人的我们依然要负重前行。\n\n我认为，每一位技术人都应该感谢这个时代，因为科技和技术的进步大大提高了我们生活的便利性，支付、用餐、旅游、交通都处于不断迭代与变化中。技术大幅度降低了边际成本并且提供了另外一种可能，技术人员的价值也被充分放大，“研发等于修电脑”的梗一去不复返，“996、高薪资”成了大家经常谈论的话题。当然，这个时代给了技术人很大的红利，但随之而来的也有非常多的挑战和困难。\n\n我没离开阿里本地生活之前，也时不时地跟同事开玩笑说做技术好难，尤其是带团队的技术。因为你会发现“带团队”之后，这个职责对你的要求几乎是无止境的。你不仅要技术好、善于沟通、还要能处理复杂的事务性问题；技术相关的问题你要专业、业务和产品相关的话题你要有想法、有感觉。如果你在公司开会时，说错一个业务问题，大部分情况下，大家会觉得你缺少业务 sense、不理解用户、对业务了解不深入，但一个产品或业务人员不懂技术问题好像就很正常。\n\n除此之外，时代在给予技术人红利时，也在暗中标好了馈赠的价格（要求）。大部分情况下，技术要能创造商业价值才能体现自己的价值，技术与商业的耦合越来越紧密，单纯的技术或业务都显得单薄。这就对 Leader 在技术、业务、团队的平衡与深度提出了更高的要求，三者要能互相结合才能游刃有余地面对未来的发展与变化。\n\n到了 30 几岁，不管你再怎么保持年轻的心态，都清楚自己不再是那个连续加班肝代码第二天还能一切正常的精神小伙，所以在这样一个高速发展并变化的行业领域中，如果你稍微松懈一点儿就会落后于人，自驱动地学习、思考，持续调整自己是必然的要求，一旦你无法保持这样的状态，也就意味着你与行业开始脱节，某种程度上来说也很残酷，不过这种环境，也可以促使我们保持一种“持续学习”的状态，从而形成一种习惯，这种习惯才是最有价值并且受益终生的。\n\n所以如果你现在对技术、管理或者业务思考，感到疲惫、沮丧或者无力，一定要放松心态，在某一个阶段内，技术能力不足以应对现在的需求是很正常的，调整心态，持续地提高自己，只要你愿意付出并改变自己，很多事情的结果会比你预期的更好、更早的到来，与诸君共勉，祝好。\n\n最后，我希望你能花 2 分钟的时间填一下这份结课问卷，以便我及时优化课程内容，感谢你的聆听，我们有缘再见。\n\n点击链接，即可参与课程评价\n\n----------------------------------------\n\n\n# 精选评论\n\n# **5229：\n\n> 很棒，不知道公司给不给技术主管相关的培训，不是所有的人坐的这个职位上，但是有这个能力\n\n# *春：\n\n> 佳宁老师讲的非常到位，技术管理的确不是个简单的事，不是单纯技术的攻坚\n\n# *刚：\n\n> 好棒好棒\n\n# **8621：\n\n> 共勉！",normalizedContent:"一晃两个多月的时间过去了，坦白说这几个月的写课经历比我预想得要困难许多，因为需要不断打磨稿件，思考怎么写才最能让你有所收获，再加上我最近在创业，写稿时间都是一点点挤出来的，熬心又熬力。不过我要感谢这段经历，因为这是我第一次以课程的方式分享自己的经验，并在留言区遇到了很多给予我肯定的同学，十分难得。\n\n最开始思考课程定位时，我并没有把它完全定位成“管理课程”，所以在最初几讲，和你聊了一些我认为技术 leader 必须做好的事情，比如稳定性，而不是所谓的管理方法论，因为再好的方法论只有结合实际的场景发挥作用之后你才会觉得有价值，不然就仅仅是无意义的说教了。\n\n今天是咱们的“最后一堂课”，我不再讲与技术或者管理有关的话题，而是唠点儿知心话，讲一讲我最后想告诉你的一件事儿：岁月静好，作为技术人的我们依然要负重前行。\n\n我认为，每一位技术人都应该感谢这个时代，因为科技和技术的进步大大提高了我们生活的便利性，支付、用餐、旅游、交通都处于不断迭代与变化中。技术大幅度降低了边际成本并且提供了另外一种可能，技术人员的价值也被充分放大，“研发等于修电脑”的梗一去不复返，“996、高薪资”成了大家经常谈论的话题。当然，这个时代给了技术人很大的红利，但随之而来的也有非常多的挑战和困难。\n\n我没离开阿里本地生活之前，也时不时地跟同事开玩笑说做技术好难，尤其是带团队的技术。因为你会发现“带团队”之后，这个职责对你的要求几乎是无止境的。你不仅要技术好、善于沟通、还要能处理复杂的事务性问题；技术相关的问题你要专业、业务和产品相关的话题你要有想法、有感觉。如果你在公司开会时，说错一个业务问题，大部分情况下，大家会觉得你缺少业务 sense、不理解用户、对业务了解不深入，但一个产品或业务人员不懂技术问题好像就很正常。\n\n除此之外，时代在给予技术人红利时，也在暗中标好了馈赠的价格（要求）。大部分情况下，技术要能创造商业价值才能体现自己的价值，技术与商业的耦合越来越紧密，单纯的技术或业务都显得单薄。这就对 leader 在技术、业务、团队的平衡与深度提出了更高的要求，三者要能互相结合才能游刃有余地面对未来的发展与变化。\n\n到了 30 几岁，不管你再怎么保持年轻的心态，都清楚自己不再是那个连续加班肝代码第二天还能一切正常的精神小伙，所以在这样一个高速发展并变化的行业领域中，如果你稍微松懈一点儿就会落后于人，自驱动地学习、思考，持续调整自己是必然的要求，一旦你无法保持这样的状态，也就意味着你与行业开始脱节，某种程度上来说也很残酷，不过这种环境，也可以促使我们保持一种“持续学习”的状态，从而形成一种习惯，这种习惯才是最有价值并且受益终生的。\n\n所以如果你现在对技术、管理或者业务思考，感到疲惫、沮丧或者无力，一定要放松心态，在某一个阶段内，技术能力不足以应对现在的需求是很正常的，调整心态，持续地提高自己，只要你愿意付出并改变自己，很多事情的结果会比你预期的更好、更早的到来，与诸君共勉，祝好。\n\n最后，我希望你能花 2 分钟的时间填一下这份结课问卷，以便我及时优化课程内容，感谢你的聆听，我们有缘再见。\n\n点击链接，即可参与课程评价\n\n----------------------------------------\n\n\n# 精选评论\n\n# **5229：\n\n> 很棒，不知道公司给不给技术主管相关的培训，不是所有的人坐的这个职位上，但是有这个能力\n\n# *春：\n\n> 佳宁老师讲的非常到位，技术管理的确不是个简单的事，不是单纯技术的攻坚\n\n# *刚：\n\n> 好棒好棒\n\n# **8621：\n\n> 共勉！",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"做规划：除了交付和稳定性，还要规划什么？",frontmatter:{title:"做规划：除了交付和稳定性，还要规划什么？",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/4c68c8/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/20.%20%20%E5%81%9A%E8%A7%84%E5%88%92%EF%BC%9A%E9%99%A4%E4%BA%86%E4%BA%A4%E4%BB%98%E5%92%8C%E7%A8%B3%E5%AE%9A%E6%80%A7%EF%BC%8C%E8%BF%98%E8%A6%81%E8%A7%84%E5%88%92%E4%BB%80%E4%B9%88%EF%BC%9F.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/20.  做规划：除了交付和稳定性，还要规划什么？.md",key:"v-7eda0003",path:"/pages/4c68c8/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:4242}],headersStr:"精选评论",content:"在大部分公司中，技术团队的规划存在两种情况：公司制度需要做规划上报，Leader 主动做团队规划。如果公司本身就会制定季度规划/半年规划，并要求每个部门和团队都要做，在这种情况下，所得出的规划有一定作用，但是大部分是为了与上一级目标保持一致；反之，如果公司并没有硬性要求，但技术团队负责人主动去做，说明愿意长期去完成一些事情，是好的习惯。\n\n而有意识地做团队规划价值很高，你可以通过做规划，严肃、完整地重新审视团队的情况和问题；另一方面，随着业务发展和系统迭代，你会发现业务与技术需求都呈几何倍增，但时间、资源、人力、物力却是有限的，这时候该做什么、不该做什么、哪些事儿要加大投入，很大程度上，“团队规划”所确定的内容会作为原则或判断标准。\n\n所以我认为团队规划解决的核心问题是：让你在有限的时间和资源内，明确怎么去创造最大的技术价值（ROI）。而且在做团队规划的过程中，其实是一个深入思考、梳理的过程，你可以复盘过去、梳理当下、展望未来，少走弯路。\n\n总之，做团队规划需要一些思考、流程和章法，当然，技术团队的规划流程大同小异，比如从公司、上级部门、业务团队得到一些规划线索，结合团队现状（问题 + 痛点）一起敲定规划范围，从价值优先级的角度不停排序打磨，形成规划初稿分析难点和可执行计划，形成共识并在接下来一段时间内严格执行，阶段性带领相关人员进行复盘。\n\n今天我这一讲，我会结合经验强调其中三个比较重要的环节，希望你能有所收获。\n\n\n做规划要考虑团队现状\n\n团队规划不是无中生有，需要思考一定的问题，有一定的依据（比如团队现阶段承担的具体职责是什么？今后的发展目标是什么？分哪几个阶段实现……）先定义清晰自己团队的现状再做规划，现状不同、发展目标不同，在规划的选择上就会截然不同。\n\n针对团队现状的梳理，可以从这几方面切入。\n\n * 明确定位与职责： 你的职责以及团队的定位是什么？公司对你们的期望是怎样的？你与上一级目标的关联点在哪？\n\n * 人员情况： 成员能力、团队结构、团队规模以及当前团队负载；\n\n * 业务情况： 业务当前的侧重点是什么？阶段性目标如何？业务的执行计划是怎样？技术能解决的痛点在哪？\n\n梳理团队现状之后，你会发现大量的 TODO，并且痛点和问题特别多。这些问题随着时间和业务的发展一直存在，只不过突然把问题放到一起，你会觉得想做的很多，能做的很少。这就很考验 Leader 的决断了，比如什么内容是要列入规划，什么事务并不是重点问题？\n\n一个可以参考的思路是： 盯着业务目标去延展人员和业务，从而判断哪些是依赖项，哪些是前置项？在大部分公司中，技术很难直接创造商业价值，往往还是要依赖于业务，所以把业务作为第一目标，为了达成某个业务结果，需要调整人员结构，招聘一些更厉害的人汰换一些不行的人，研究并实现一些新技术，这是比较自然的。当然，并不是所有团队都适用这一点，可能有些非常棒的团队已经走在技术驱动业务的道路上了。\n\n总之规划在开始之初，就应该对优先级（轻重缓急）有一个考量的原则，这样才能在有限的时间内创造更多的价值。这一过程的思考路径和我 “08 | 定目标：让你的方向与公司的方向保持一致”中提到的一些方法大同小异，比如和上级沟通、确定公司方向、探寻周边合作、倾听团队成员反馈等。\n\n总的来说，深入了解自己的团队，才能针对性地去明确规划核心、丰富规划内容，更容易落地。\n\n\n你的规划中包含了什么？\n\n不同的技术团队，在规划时所拟定的内容都是不同的，但你其实都可以提炼成共性的3 部分。\n\n * 业务结果： 直白说就是业务层面的战绩，你团队打造了一个公司 GMV 占比超过 50%的商城，或者支撑了某个快速发展业务，这些都是业务结果，用业务数字来说话。\n\n * 技术创新： 由技术人员发起或完成的所有降本提效的动作，但是同样要看优先级和投入产出比。\n\n * 团队建设： 让团队可以长期健康发展下去，要在 Backup、人员组成、机制建设等多个方面下功夫。\n\n除了这 3 维度去思考规划，我还单独划分了第 4 点“自问”，“自问”是我从经验出发，认为需要贯穿这 3 部分，也就是说，在你拟定每一个规划分支时，都需要自问这样几个问题：\n\n * WHY：为什么做业务目标/技术创新/团队建设的规划？\n\n * WHAT：是否能说明业务目标/技术创新/团队建设规划解决的问题、价值与作用？\n\n * WHO：由谁承担？负责人的优势与跌势是什么？\n\n * WHEN：所做的规划着眼于现在还是未来？能否保证长期有价值？\n\n * HOW：针对不同的部分，具体的落地细则如何？\n\n * HOW MUCH：规划要做到什么程度？是否可以形成可衡量的KPI？\n\n业务结果\n\n现阶段，大部分的技术团队都是用来服务于业务，为了创造更多的业务、商业价值。在此基础上，你要想制定业务价值方面的规划，可以从协作部门的规划、公司整体的战略目标、老板的诉求、团队成员的理解等线索出发。\n\n比如你要明确现阶段上级领导关注的重点是什么？是转化、流量、留存、还是产品的用户体验？作为技术Leader ，你和团队成员的到达路径是什么？这是线索来源之一。\n\n这些思考和 08 讲有所雷同，不一样的是目标更多围绕单一有明确的时间点的结果；规划更多着眼于一个时间段内发生的变化以及事务优先级的平衡，如何找出最重要、最值得做的哪些事才是关键。\n\n技术创新\n\n技术创新我考虑了“稳定性、效能优化、驱动业务、视野展望”这几个方面，当然，这几点并不固定，比例也可以有所不同，你可以结合公司的业务形态，和团队定位进行调整。比如你所在的团队正在做新的项目，主要目的是验证新的业务场景是否跑得通，那么此时快速验证、通过新技术带来新体验更关键，这时，技术稳定性的比例会稍低（接受犯错），新技术尝试和视野展望的相关事项就会更多。\n\n稳定性老生常谈，是技术人在做规划时不可缺少的一部分，如果不能确保系统稳定性，剩下的效能优化、驱动业务、视野展望也就成了空谈。\n\n效能优化在技术规划里也很常见，比如你肯定会听到“优化开发的效率、流程”，但是坦白讲，效能优化是比较难做，除了研发结果量化困难外，研发效率跟人、流程、当前业务状态的绑定非常紧密，牵一发而动全身。尤其是一个业务如果处于不确定的背景下，研发效能优化比较难以寻找合适的着手点，很容易优化来优化去，效率越来越低。\n\n我建议你从几个最痛的点去着手，看如何通过工具、流程、新技术等手段减少不必要的损耗甚至颠覆现有的开发模式来逐步优化，不要总想着一口吃个胖子。\n\n技术驱动业务一直是很多同学期望实现的效果，大部分公司也推崇技术同学多了解业务，成为技术和业务都精通的“双面精英”。比如饿了么最早的餐厅菜单是市场工作人员和餐厅老板手动录入的，OCR 图像识别对这个场景就是技术上的“原子弹”，堪称降维打击。很多时候，我们过去一段时间看理所当然的东西，在最开始创造并应用时，会创造出巨大的价值。\n\n视野展望又可以叫作“团队对新技术的探索”，这一点其实是要求技术 Leader 自己的，你对新技术的敏感和接受程度某种程度上来说，决定了你团队的技术上限。你可以定期关注业内的新技术发展，对于技术趋势你如果不能成为主导或推动者，最起码要紧跟步伐，不让自己成为“前浪”吧？\n\n团队建设\n\n在前面管理框架的几讲中，我已经提及了团队建设的一些基础理论和实践方法，比如团队成员的沟通、流程机制的建立、招聘解聘和绩效等。在这里我只想强调这样一个重点：该怎么思考团队建设这件事？团队建设的关键是什么？\n\n假设你现在带了三个月的团队，开始做团队规划，在团队建设这里的核心重点就在于从未来看现在，从整体到个体，比如团队有 8个人，你的重点是不是考虑“未来怎么把团队的 8 个人用好？怎么安排他们做合适的事情呢？”并不是。\n\n团队建设的关键不只是知人善用，而是：\n\n 1. 团队未来需要什么样的人？\n\n 2. 目前团队成员需要什么样的状态和能力？\n\n 3. 团队成员需要承担什么样的责任？\n\n总的来说，你希望未来自己的团队成为怎样的团队？以此推导离理想状态多远？怎么缩小差距？\n\n而缩小差距的过程就是整体到个体的过程，可能你需要跟张三、李四不断对齐目标，帮助他们调整状态；开除王五；招聘陈六……要记住，团队建设的核心在于思考团队的未来和终态如何，反推每个人、每件事。不然你会发现，所做的每一件工作都是对现状修修补补，很难有质的改变。\n\n\n规划落地时的问题与思路\n\n在明确了规划中需要包括的内容之后，我们还需要正视做规划时，容易出现的问题。\n\n * 规划不等于计划\n\n有的同学认为公司业务不定性，经常调整，做规划没有意义。这是因为一些同学将规划与计划画等号。但其实计划是一张时间表，它严丝合缝，不能打乱；规划则是某个阶段内的优先级，做规划是为了让你知道哪些是重要的？性价比高的？值得做的？是盘点和创造技术价值的过程（比如将规划内容按照重要性排序、产出规划 PPT 、产出关键里程碑时间点）并不是执行的过程。\n\n * 规划内容想得太多，做成的少\n\n规划并不是囊括万物，需要有落脚点，有要核心解决的问题，并以周/月为单位去调整自己的规划，不要放任不管。\n\n * 业务压力大，盲盯痛点，忽视目标\n\n这个问题比较常见，要知道解决痛点最终是为了实现目标，如果你一直盯着痛点的话，会发现自己永远没有目标，只有痛点。\n\n * 规划最终成了技术Leader的规划\n\n我之前在 08 讲里提到了类似的场景，目标规划一定要形成 KPI，落到每一个人身上，让每一个人都跟结果息息相关，一定将规划拿出来讲、拿出来看，每周带领团队成员查看进度，同学们一定会重视。\n\n\n小结\n\n做团队规划是一件比较综合宏观的事情，有时哪怕只是几个人的团队，想做好一份规划而非执行计划也很考验 Leader 的思考深度，某种程度来说，规划是你定义一群人在未来一段时间内做什么、怎么做、最终变成什么样。这个过程中需要考量的点非常多，这些深入的思考也会促进你日常的一些行为和结果，对于团队的季度乃至半年规划我是非常推荐你要定期梳理并落地的，有目标和没目标的团队，还是有很大的差别的。\n\n留个作业吧：你觉得技术团队规划中最有价值的点是什么，为什么你这样觉得？\n\n\n\n----------------------------------------\n\n\n# 精选评论\n\n# *鹏：\n\n> 您好，能否提供一份规划模版参考一下，谢谢\n\n#     讲师回复：\n\n>     我一般常用的就是脑图中“规划包含”什么那个结构，可以先罗列所有的点，然后在合并同类项 + 确定优先级",normalizedContent:"在大部分公司中，技术团队的规划存在两种情况：公司制度需要做规划上报，leader 主动做团队规划。如果公司本身就会制定季度规划/半年规划，并要求每个部门和团队都要做，在这种情况下，所得出的规划有一定作用，但是大部分是为了与上一级目标保持一致；反之，如果公司并没有硬性要求，但技术团队负责人主动去做，说明愿意长期去完成一些事情，是好的习惯。\n\n而有意识地做团队规划价值很高，你可以通过做规划，严肃、完整地重新审视团队的情况和问题；另一方面，随着业务发展和系统迭代，你会发现业务与技术需求都呈几何倍增，但时间、资源、人力、物力却是有限的，这时候该做什么、不该做什么、哪些事儿要加大投入，很大程度上，“团队规划”所确定的内容会作为原则或判断标准。\n\n所以我认为团队规划解决的核心问题是：让你在有限的时间和资源内，明确怎么去创造最大的技术价值（roi）。而且在做团队规划的过程中，其实是一个深入思考、梳理的过程，你可以复盘过去、梳理当下、展望未来，少走弯路。\n\n总之，做团队规划需要一些思考、流程和章法，当然，技术团队的规划流程大同小异，比如从公司、上级部门、业务团队得到一些规划线索，结合团队现状（问题 + 痛点）一起敲定规划范围，从价值优先级的角度不停排序打磨，形成规划初稿分析难点和可执行计划，形成共识并在接下来一段时间内严格执行，阶段性带领相关人员进行复盘。\n\n今天我这一讲，我会结合经验强调其中三个比较重要的环节，希望你能有所收获。\n\n\n做规划要考虑团队现状\n\n团队规划不是无中生有，需要思考一定的问题，有一定的依据（比如团队现阶段承担的具体职责是什么？今后的发展目标是什么？分哪几个阶段实现……）先定义清晰自己团队的现状再做规划，现状不同、发展目标不同，在规划的选择上就会截然不同。\n\n针对团队现状的梳理，可以从这几方面切入。\n\n * 明确定位与职责： 你的职责以及团队的定位是什么？公司对你们的期望是怎样的？你与上一级目标的关联点在哪？\n\n * 人员情况： 成员能力、团队结构、团队规模以及当前团队负载；\n\n * 业务情况： 业务当前的侧重点是什么？阶段性目标如何？业务的执行计划是怎样？技术能解决的痛点在哪？\n\n梳理团队现状之后，你会发现大量的 todo，并且痛点和问题特别多。这些问题随着时间和业务的发展一直存在，只不过突然把问题放到一起，你会觉得想做的很多，能做的很少。这就很考验 leader 的决断了，比如什么内容是要列入规划，什么事务并不是重点问题？\n\n一个可以参考的思路是： 盯着业务目标去延展人员和业务，从而判断哪些是依赖项，哪些是前置项？在大部分公司中，技术很难直接创造商业价值，往往还是要依赖于业务，所以把业务作为第一目标，为了达成某个业务结果，需要调整人员结构，招聘一些更厉害的人汰换一些不行的人，研究并实现一些新技术，这是比较自然的。当然，并不是所有团队都适用这一点，可能有些非常棒的团队已经走在技术驱动业务的道路上了。\n\n总之规划在开始之初，就应该对优先级（轻重缓急）有一个考量的原则，这样才能在有限的时间内创造更多的价值。这一过程的思考路径和我 “08 | 定目标：让你的方向与公司的方向保持一致”中提到的一些方法大同小异，比如和上级沟通、确定公司方向、探寻周边合作、倾听团队成员反馈等。\n\n总的来说，深入了解自己的团队，才能针对性地去明确规划核心、丰富规划内容，更容易落地。\n\n\n你的规划中包含了什么？\n\n不同的技术团队，在规划时所拟定的内容都是不同的，但你其实都可以提炼成共性的3 部分。\n\n * 业务结果： 直白说就是业务层面的战绩，你团队打造了一个公司 gmv 占比超过 50%的商城，或者支撑了某个快速发展业务，这些都是业务结果，用业务数字来说话。\n\n * 技术创新： 由技术人员发起或完成的所有降本提效的动作，但是同样要看优先级和投入产出比。\n\n * 团队建设： 让团队可以长期健康发展下去，要在 backup、人员组成、机制建设等多个方面下功夫。\n\n除了这 3 维度去思考规划，我还单独划分了第 4 点“自问”，“自问”是我从经验出发，认为需要贯穿这 3 部分，也就是说，在你拟定每一个规划分支时，都需要自问这样几个问题：\n\n * why：为什么做业务目标/技术创新/团队建设的规划？\n\n * what：是否能说明业务目标/技术创新/团队建设规划解决的问题、价值与作用？\n\n * who：由谁承担？负责人的优势与跌势是什么？\n\n * when：所做的规划着眼于现在还是未来？能否保证长期有价值？\n\n * how：针对不同的部分，具体的落地细则如何？\n\n * how much：规划要做到什么程度？是否可以形成可衡量的kpi？\n\n业务结果\n\n现阶段，大部分的技术团队都是用来服务于业务，为了创造更多的业务、商业价值。在此基础上，你要想制定业务价值方面的规划，可以从协作部门的规划、公司整体的战略目标、老板的诉求、团队成员的理解等线索出发。\n\n比如你要明确现阶段上级领导关注的重点是什么？是转化、流量、留存、还是产品的用户体验？作为技术leader ，你和团队成员的到达路径是什么？这是线索来源之一。\n\n这些思考和 08 讲有所雷同，不一样的是目标更多围绕单一有明确的时间点的结果；规划更多着眼于一个时间段内发生的变化以及事务优先级的平衡，如何找出最重要、最值得做的哪些事才是关键。\n\n技术创新\n\n技术创新我考虑了“稳定性、效能优化、驱动业务、视野展望”这几个方面，当然，这几点并不固定，比例也可以有所不同，你可以结合公司的业务形态，和团队定位进行调整。比如你所在的团队正在做新的项目，主要目的是验证新的业务场景是否跑得通，那么此时快速验证、通过新技术带来新体验更关键，这时，技术稳定性的比例会稍低（接受犯错），新技术尝试和视野展望的相关事项就会更多。\n\n稳定性老生常谈，是技术人在做规划时不可缺少的一部分，如果不能确保系统稳定性，剩下的效能优化、驱动业务、视野展望也就成了空谈。\n\n效能优化在技术规划里也很常见，比如你肯定会听到“优化开发的效率、流程”，但是坦白讲，效能优化是比较难做，除了研发结果量化困难外，研发效率跟人、流程、当前业务状态的绑定非常紧密，牵一发而动全身。尤其是一个业务如果处于不确定的背景下，研发效能优化比较难以寻找合适的着手点，很容易优化来优化去，效率越来越低。\n\n我建议你从几个最痛的点去着手，看如何通过工具、流程、新技术等手段减少不必要的损耗甚至颠覆现有的开发模式来逐步优化，不要总想着一口吃个胖子。\n\n技术驱动业务一直是很多同学期望实现的效果，大部分公司也推崇技术同学多了解业务，成为技术和业务都精通的“双面精英”。比如饿了么最早的餐厅菜单是市场工作人员和餐厅老板手动录入的，ocr 图像识别对这个场景就是技术上的“原子弹”，堪称降维打击。很多时候，我们过去一段时间看理所当然的东西，在最开始创造并应用时，会创造出巨大的价值。\n\n视野展望又可以叫作“团队对新技术的探索”，这一点其实是要求技术 leader 自己的，你对新技术的敏感和接受程度某种程度上来说，决定了你团队的技术上限。你可以定期关注业内的新技术发展，对于技术趋势你如果不能成为主导或推动者，最起码要紧跟步伐，不让自己成为“前浪”吧？\n\n团队建设\n\n在前面管理框架的几讲中，我已经提及了团队建设的一些基础理论和实践方法，比如团队成员的沟通、流程机制的建立、招聘解聘和绩效等。在这里我只想强调这样一个重点：该怎么思考团队建设这件事？团队建设的关键是什么？\n\n假设你现在带了三个月的团队，开始做团队规划，在团队建设这里的核心重点就在于从未来看现在，从整体到个体，比如团队有 8个人，你的重点是不是考虑“未来怎么把团队的 8 个人用好？怎么安排他们做合适的事情呢？”并不是。\n\n团队建设的关键不只是知人善用，而是：\n\n 1. 团队未来需要什么样的人？\n\n 2. 目前团队成员需要什么样的状态和能力？\n\n 3. 团队成员需要承担什么样的责任？\n\n总的来说，你希望未来自己的团队成为怎样的团队？以此推导离理想状态多远？怎么缩小差距？\n\n而缩小差距的过程就是整体到个体的过程，可能你需要跟张三、李四不断对齐目标，帮助他们调整状态；开除王五；招聘陈六……要记住，团队建设的核心在于思考团队的未来和终态如何，反推每个人、每件事。不然你会发现，所做的每一件工作都是对现状修修补补，很难有质的改变。\n\n\n规划落地时的问题与思路\n\n在明确了规划中需要包括的内容之后，我们还需要正视做规划时，容易出现的问题。\n\n * 规划不等于计划\n\n有的同学认为公司业务不定性，经常调整，做规划没有意义。这是因为一些同学将规划与计划画等号。但其实计划是一张时间表，它严丝合缝，不能打乱；规划则是某个阶段内的优先级，做规划是为了让你知道哪些是重要的？性价比高的？值得做的？是盘点和创造技术价值的过程（比如将规划内容按照重要性排序、产出规划 ppt 、产出关键里程碑时间点）并不是执行的过程。\n\n * 规划内容想得太多，做成的少\n\n规划并不是囊括万物，需要有落脚点，有要核心解决的问题，并以周/月为单位去调整自己的规划，不要放任不管。\n\n * 业务压力大，盲盯痛点，忽视目标\n\n这个问题比较常见，要知道解决痛点最终是为了实现目标，如果你一直盯着痛点的话，会发现自己永远没有目标，只有痛点。\n\n * 规划最终成了技术leader的规划\n\n我之前在 08 讲里提到了类似的场景，目标规划一定要形成 kpi，落到每一个人身上，让每一个人都跟结果息息相关，一定将规划拿出来讲、拿出来看，每周带领团队成员查看进度，同学们一定会重视。\n\n\n小结\n\n做团队规划是一件比较综合宏观的事情，有时哪怕只是几个人的团队，想做好一份规划而非执行计划也很考验 leader 的思考深度，某种程度来说，规划是你定义一群人在未来一段时间内做什么、怎么做、最终变成什么样。这个过程中需要考量的点非常多，这些深入的思考也会促进你日常的一些行为和结果，对于团队的季度乃至半年规划我是非常推荐你要定期梳理并落地的，有目标和没目标的团队，还是有很大的差别的。\n\n留个作业吧：你觉得技术团队规划中最有价值的点是什么，为什么你这样觉得？\n\n\n\n----------------------------------------\n\n\n# 精选评论\n\n# *鹏：\n\n> 您好，能否提供一份规划模版参考一下，谢谢\n\n#     讲师回复：\n\n>     我一般常用的就是脑图中“规划包含”什么那个结构，可以先罗列所有的点，然后在合并同类项 + 确定优先级",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"升级汰换：“心要慈，刀要快”",frontmatter:{title:"升级汰换：“心要慈，刀要快”",date:"2023-02-22T16:15:53.000Z",permalink:"/pages/dde270/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/17.%20%20%E5%8D%87%E7%BA%A7%E6%B1%B0%E6%8D%A2%EF%BC%9A%E2%80%9C%E5%BF%83%E8%A6%81%E6%85%88%EF%BC%8C%E5%88%80%E8%A6%81%E5%BF%AB%E2%80%9D.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/17.  升级汰换：“心要慈，刀要快”.md",key:"v-222b3d16",path:"/pages/dde270/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:3644}],headersStr:"精选评论",content:"今天我想和你聊一聊“招聘与解聘”中最后一个动作：升级汰换。\n\n升级汰换直白点说就是“开人”，一个团队如果从来没有人“被离开”，就好像人生了病但是从来不去治一样，大概率要出现严重的问题，也体现出管理上的不合格。\n\n在开篇词里，我一直强调，管理是对“人”和“事”的管理，其中对人的管理尤为难，而在管理人的工作中，开除人是大部分 Leader 都不想面对的事，有的 Leader 甚至把“不开除人”“团队 0 流失率”当作谈资。可是你要知道，一个合格的管理者不但要做好招聘，还要果断开除不适配团队的员工，如此才能维持团队整体的健康，才是真正对团队内优秀的成员负责。\n\n那么要想做好升级汰换，即要求清楚的认识团队的基本情况和业务发展，也要对成员有足够的了解，同时从心理上明确解聘是一个非褒非贬的中性词，抛掉不必要的心理包袱。\n\n总的来说，这一讲没有高大上的方法论，更多的是我这几年在升级汰换过程中的经验与要点，我希望通过这些内容，你能认识到很多时候解聘不合适的人与招聘优秀的人一样，都是团队的一次革新，想要组织越来越有力，这是必要的动作。\n\n\n开除人“心要慈，刀要快”\n\n阿里有一句话土话我很喜欢，所以直接作为本节的副标题，即“心要慈，刀要快”，在我看来这句话把解聘的核心味道描述出来了，你可以进一步解读为三个关键词。\n\n * No Surprise： 不要突然Fire一个人（离职一定不是一个突发行为），没有任何征兆告诉员工 A“你被开除了”，这是典型的管理失职。如果A存在问题，你应该先告知，然后一边和他一起制定改善计划，一边督促其改正。离职往往是一个可预期的结果，无法满足工作需要或者对团队有其他伤害而 A 依旧无法改变时，为了避免对团队产生持久不利的影响，就需要让他离开。\n\n * 心要慈、刀要快： 杰克·韦尔奇（Jack Welch）曾经说过这样一句话“如果一个人到了中年之后，还没有被告知自己的弱点，反而在某一天因为节约成本的原因被裁掉了，这是最不公平、最不应该发生的事情。就是因为这个公司太仁慈了，他连出去找工作、提升自我的可能性和机会都没有。”你可能觉得，在情感上解聘一个人非常糟糕，但是换一个角度想，如果你对一个人很不满意，却又不找他谈话，不要求他改进，又不开除他，那么从最终结果看不仅对他很残酷，这种“拉锯战”对团队也是不负责任的。\n\n * Happy stay、Happy go： 很多时候，送走一个同学对彼此来说并不是一件糟糕的事，换个角度看，如果他在当前环境下一直无法适配团队，对他来说也是很难受的，这时分开对他对团队都是解脱。尤其是当公司出现变化时，如果一些同学不再合适，换环境来讲对他是新的机会，所以你不要存在太多的情绪，而是要往“好聚好散”的方向上推动。\n\n既然明确了解聘的原则，那你要解聘什么类型的人呢？\n\n\n不要给“白兔”生存机会\n\n包括阿里在内，很多公司都会根据人才九宫格，从业绩和价值观两个角度考察，把团队成员划分为 4 种类型：狼、明星、黄牛、白兔（叫法不同，但这其实是一个可以参考的工具）。\n\n\n\n从这张图中，你可以很明显地看出来，这四类成员的特征：“狼”的业绩强，但是价值观、态度极差，甚至有才无德；明星不但业绩好，价值观和态度也极好；“黄牛”就是业绩和价值观平平，虽然不出彩，但是兢兢业业、任劳任怨；最后一个“小白兔”就是价值观、态度极好，但是没有业绩。\n\n有的技术 Leader 会纵容“狼”的存在，因为这类成员会给团队甚至公司创造极大的利益，但是他很可能为了达成目标，触碰高压线，比如泄露公司机密、不服从组织安排、影响其他团队成员等，甚至一个人会把一整个团队拖向深渊，所以我们建议你不要容忍这类员工，及时开除，要关注长期价值，而不是短期利益。明星和黄牛我就不重点说了，黄牛虽然业绩平平，但是忠心肯干，只要肯培养，能够努力成为明星。在这里我重点要强调的是小白兔。\n\n白兔看起来人畜无害，繁殖能力极强，大公司里最容易存在的就是“白兔”（不干活的好人）。他们目标和价值观认同度较高，但是业绩长期拖后腿。每一家公司都有这样的人，看着勤勤恳恳，但却拿不到任何结果，如果你纵容白兔的存在，那么长久下去，很容易滋生一群白兔磨洋工，针对这类员工，你前期可以给予改正的机会，如果依旧没有改善，应该毫不犹豫将其送走。\n\n我记得自己刚做部门管理时，第一件事就是开人（当时部门的测试负责人），因为他的工作方式导致整个测试团队都是“大白兔”，关键问题永远测不出来，工作中这种你好、我好、大家好的方式最后一旦较真去看结果，往往是没人好。所以作为负责人，一定要警惕“混日子”的白兔们对团队的强烈的隐形伤害。\n\n\n离职面谈“TRF”\n\n开除人的最后一步就是离职面谈，在离职面谈前，你要遵循 TRF 原则，比如针对白兔，在升级汰换前你要 Train him、Remove him、Fire him。\n\nTrain him 是指如果他能力跟不上，你可以给予其帮助；Remove him 是指如果他的能力和岗位匹配有问题，你要更多地采用转岗的方式，为他的发展打开空间；如果在你给予他机会之后，他还是无法改善，那你就应该 Fire him。\n\n在明确“TRF”原则之后，你在面谈时，也需要注意沟通的差异和重点。\n\n毕竟从当事人的情感上来讲，解聘还是一个被否定的动作，虽然理性上能分析出一些客观的内容，但是感性上很容易情绪化，离职面谈时情绪崩溃的更是比比皆是。不同的人，可以采取不同的沟通策略，比如白兔，可以更多从情感、道理、公司制度的顺序去沟通，因为他更多是能力问题，并且自认在态度上（努力与付出）非常多，所以被离职时更多是感情上接受不了，但是能力的事实又摆在眼前；如果是狼，则更多从公司制度、关键事情的道理、感情的顺序去沟通，他们是属于能力足够，但是并不为团队乃至公司整体考虑。另外，在 Fire 掉狼的过程，其实就是给团队培训的过程，你是在间接地告诉员工，团队不能容忍什么类型的人，不能容忍什么样的事儿。\n\n除了遵循面谈原则和注意差异点之外，我还要提醒你一个很常见的问题：“谈不了、无重点、没技巧和从不谈”。\n\n * “谈不了”：辞退的事实依据不充分，对离职原因讲不清楚。\n\n * “无重点”：对有关问题避重就轻，只说无关痛痒的祝福。\n\n * “没技巧”：对员工工作横加指责，面谈完反而加深了矛盾。\n\n * “从不谈”：是对员工存在很大偏见，不面谈直接一拍两散。\n\n这几种问题都是管理者应该避免的，很多同学会觉得这件事儿很私密，不能拿出来说。但是在我看来，如果团队成员有人被 fire 掉，那么对你来讲其实也是一个很明显的教训、提醒和反思，你其实是要把这些事情公开透明的传达给你的团队的。\n\n\n案例分析\n\n接下来，我们来看一个案例，看一下你会淘汰哪位员工？\n\n> A：年轻、有热情、有潜力、肯拼，能力也强，最近发现他违反公司制度，通过 USB以及邮箱的方式在拷贝公司资料，公司发现后给了处分。\n> \n> B：踏实、勤奋、技术水平一般，原本是 PHP 但最近一年公司技术栈转 Java，他非常吃力。在 S1 的系统改造过程中，结果并不理想，上半年绩效是 C，虽然下半年你花了更多时间与他沟通，还特意安排了高年级的同学辅导他，但目前看依然很难达到期望的结果。\n> \n> C：技术骨干，之前是你的平级，后来因为你的管理半径扩大变成你的下属，不服气，经常在公开场合 diss 你，有时让你很下不来台。\n> \n> D：在公司做了 8 年，是技术骨干。1 年前因为组织调整转到你的团队。目前负责的业务不佳，今年会被砍掉，系统也要下线，团队中很难找到适合他的角色。\n> \n> E：技术专家，刚加入公司没多久，给团队带来很多不一样的想法。但他个性独立，说话直接，很多时候说话会比较伤人，他也觉得在团队约束太多，找不到同类人，landing 困难。\n\n我们来分析一下 A、B、C、D、E 这五个员工：A明显是要被开除掉的，因为它的诚信、价值观等高压线有问题，违反公司机密；B 也同样，因为他的能力、结果不符合团队的角色要求且未能改善，本身没有成长，还会拖团队后腿；C 虽然公然 diss 你，但是对事不对人，对整体不对个体，C的能力是毋庸置疑的；D 不用开除，你可以考虑让他转岗；最后的 E 只是性格不合，可以与其做好磨合和沟通，不能开除。\n\n\n总结\n\n总的来说，技术 Leader 要正确对待升级汰换，从团队的角度出发，正视而不回避。要知道，招聘厉害的人，会出现鲇鱼效应，解聘一个不合格的人，也会有类似的效果，对团队发展的影响也是极强的，相当于刮骨疗伤，虽然短期很痛，但是长期来看，团队会得到更好的发展。\n\n\n\n留个作业：你认为什么样的人一定要离开团队，为什么？欢迎在留言区分享你的经验，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# *磊：\n\n> 没有开出过人的leader就是小白兔\n\n# *春：\n\n> 完全赞同作者的看法，小白兔，老白兔，对公司伤害太大了，努力没有结果的人要在招聘环节就淘汰\n\n#     讲师回复：\n\n>     是的，试用期也是一个适合操作的周期，剩下一般就要靠绩效考核了",normalizedContent:"今天我想和你聊一聊“招聘与解聘”中最后一个动作：升级汰换。\n\n升级汰换直白点说就是“开人”，一个团队如果从来没有人“被离开”，就好像人生了病但是从来不去治一样，大概率要出现严重的问题，也体现出管理上的不合格。\n\n在开篇词里，我一直强调，管理是对“人”和“事”的管理，其中对人的管理尤为难，而在管理人的工作中，开除人是大部分 leader 都不想面对的事，有的 leader 甚至把“不开除人”“团队 0 流失率”当作谈资。可是你要知道，一个合格的管理者不但要做好招聘，还要果断开除不适配团队的员工，如此才能维持团队整体的健康，才是真正对团队内优秀的成员负责。\n\n那么要想做好升级汰换，即要求清楚的认识团队的基本情况和业务发展，也要对成员有足够的了解，同时从心理上明确解聘是一个非褒非贬的中性词，抛掉不必要的心理包袱。\n\n总的来说，这一讲没有高大上的方法论，更多的是我这几年在升级汰换过程中的经验与要点，我希望通过这些内容，你能认识到很多时候解聘不合适的人与招聘优秀的人一样，都是团队的一次革新，想要组织越来越有力，这是必要的动作。\n\n\n开除人“心要慈，刀要快”\n\n阿里有一句话土话我很喜欢，所以直接作为本节的副标题，即“心要慈，刀要快”，在我看来这句话把解聘的核心味道描述出来了，你可以进一步解读为三个关键词。\n\n * no surprise： 不要突然fire一个人（离职一定不是一个突发行为），没有任何征兆告诉员工 a“你被开除了”，这是典型的管理失职。如果a存在问题，你应该先告知，然后一边和他一起制定改善计划，一边督促其改正。离职往往是一个可预期的结果，无法满足工作需要或者对团队有其他伤害而 a 依旧无法改变时，为了避免对团队产生持久不利的影响，就需要让他离开。\n\n * 心要慈、刀要快： 杰克·韦尔奇（jack welch）曾经说过这样一句话“如果一个人到了中年之后，还没有被告知自己的弱点，反而在某一天因为节约成本的原因被裁掉了，这是最不公平、最不应该发生的事情。就是因为这个公司太仁慈了，他连出去找工作、提升自我的可能性和机会都没有。”你可能觉得，在情感上解聘一个人非常糟糕，但是换一个角度想，如果你对一个人很不满意，却又不找他谈话，不要求他改进，又不开除他，那么从最终结果看不仅对他很残酷，这种“拉锯战”对团队也是不负责任的。\n\n * happy stay、happy go： 很多时候，送走一个同学对彼此来说并不是一件糟糕的事，换个角度看，如果他在当前环境下一直无法适配团队，对他来说也是很难受的，这时分开对他对团队都是解脱。尤其是当公司出现变化时，如果一些同学不再合适，换环境来讲对他是新的机会，所以你不要存在太多的情绪，而是要往“好聚好散”的方向上推动。\n\n既然明确了解聘的原则，那你要解聘什么类型的人呢？\n\n\n不要给“白兔”生存机会\n\n包括阿里在内，很多公司都会根据人才九宫格，从业绩和价值观两个角度考察，把团队成员划分为 4 种类型：狼、明星、黄牛、白兔（叫法不同，但这其实是一个可以参考的工具）。\n\n\n\n从这张图中，你可以很明显地看出来，这四类成员的特征：“狼”的业绩强，但是价值观、态度极差，甚至有才无德；明星不但业绩好，价值观和态度也极好；“黄牛”就是业绩和价值观平平，虽然不出彩，但是兢兢业业、任劳任怨；最后一个“小白兔”就是价值观、态度极好，但是没有业绩。\n\n有的技术 leader 会纵容“狼”的存在，因为这类成员会给团队甚至公司创造极大的利益，但是他很可能为了达成目标，触碰高压线，比如泄露公司机密、不服从组织安排、影响其他团队成员等，甚至一个人会把一整个团队拖向深渊，所以我们建议你不要容忍这类员工，及时开除，要关注长期价值，而不是短期利益。明星和黄牛我就不重点说了，黄牛虽然业绩平平，但是忠心肯干，只要肯培养，能够努力成为明星。在这里我重点要强调的是小白兔。\n\n白兔看起来人畜无害，繁殖能力极强，大公司里最容易存在的就是“白兔”（不干活的好人）。他们目标和价值观认同度较高，但是业绩长期拖后腿。每一家公司都有这样的人，看着勤勤恳恳，但却拿不到任何结果，如果你纵容白兔的存在，那么长久下去，很容易滋生一群白兔磨洋工，针对这类员工，你前期可以给予改正的机会，如果依旧没有改善，应该毫不犹豫将其送走。\n\n我记得自己刚做部门管理时，第一件事就是开人（当时部门的测试负责人），因为他的工作方式导致整个测试团队都是“大白兔”，关键问题永远测不出来，工作中这种你好、我好、大家好的方式最后一旦较真去看结果，往往是没人好。所以作为负责人，一定要警惕“混日子”的白兔们对团队的强烈的隐形伤害。\n\n\n离职面谈“trf”\n\n开除人的最后一步就是离职面谈，在离职面谈前，你要遵循 trf 原则，比如针对白兔，在升级汰换前你要 train him、remove him、fire him。\n\ntrain him 是指如果他能力跟不上，你可以给予其帮助；remove him 是指如果他的能力和岗位匹配有问题，你要更多地采用转岗的方式，为他的发展打开空间；如果在你给予他机会之后，他还是无法改善，那你就应该 fire him。\n\n在明确“trf”原则之后，你在面谈时，也需要注意沟通的差异和重点。\n\n毕竟从当事人的情感上来讲，解聘还是一个被否定的动作，虽然理性上能分析出一些客观的内容，但是感性上很容易情绪化，离职面谈时情绪崩溃的更是比比皆是。不同的人，可以采取不同的沟通策略，比如白兔，可以更多从情感、道理、公司制度的顺序去沟通，因为他更多是能力问题，并且自认在态度上（努力与付出）非常多，所以被离职时更多是感情上接受不了，但是能力的事实又摆在眼前；如果是狼，则更多从公司制度、关键事情的道理、感情的顺序去沟通，他们是属于能力足够，但是并不为团队乃至公司整体考虑。另外，在 fire 掉狼的过程，其实就是给团队培训的过程，你是在间接地告诉员工，团队不能容忍什么类型的人，不能容忍什么样的事儿。\n\n除了遵循面谈原则和注意差异点之外，我还要提醒你一个很常见的问题：“谈不了、无重点、没技巧和从不谈”。\n\n * “谈不了”：辞退的事实依据不充分，对离职原因讲不清楚。\n\n * “无重点”：对有关问题避重就轻，只说无关痛痒的祝福。\n\n * “没技巧”：对员工工作横加指责，面谈完反而加深了矛盾。\n\n * “从不谈”：是对员工存在很大偏见，不面谈直接一拍两散。\n\n这几种问题都是管理者应该避免的，很多同学会觉得这件事儿很私密，不能拿出来说。但是在我看来，如果团队成员有人被 fire 掉，那么对你来讲其实也是一个很明显的教训、提醒和反思，你其实是要把这些事情公开透明的传达给你的团队的。\n\n\n案例分析\n\n接下来，我们来看一个案例，看一下你会淘汰哪位员工？\n\n> a：年轻、有热情、有潜力、肯拼，能力也强，最近发现他违反公司制度，通过 usb以及邮箱的方式在拷贝公司资料，公司发现后给了处分。\n> \n> b：踏实、勤奋、技术水平一般，原本是 php 但最近一年公司技术栈转 java，他非常吃力。在 s1 的系统改造过程中，结果并不理想，上半年绩效是 c，虽然下半年你花了更多时间与他沟通，还特意安排了高年级的同学辅导他，但目前看依然很难达到期望的结果。\n> \n> c：技术骨干，之前是你的平级，后来因为你的管理半径扩大变成你的下属，不服气，经常在公开场合 diss 你，有时让你很下不来台。\n> \n> d：在公司做了 8 年，是技术骨干。1 年前因为组织调整转到你的团队。目前负责的业务不佳，今年会被砍掉，系统也要下线，团队中很难找到适合他的角色。\n> \n> e：技术专家，刚加入公司没多久，给团队带来很多不一样的想法。但他个性独立，说话直接，很多时候说话会比较伤人，他也觉得在团队约束太多，找不到同类人，landing 困难。\n\n我们来分析一下 a、b、c、d、e 这五个员工：a明显是要被开除掉的，因为它的诚信、价值观等高压线有问题，违反公司机密；b 也同样，因为他的能力、结果不符合团队的角色要求且未能改善，本身没有成长，还会拖团队后腿；c 虽然公然 diss 你，但是对事不对人，对整体不对个体，c的能力是毋庸置疑的；d 不用开除，你可以考虑让他转岗；最后的 e 只是性格不合，可以与其做好磨合和沟通，不能开除。\n\n\n总结\n\n总的来说，技术 leader 要正确对待升级汰换，从团队的角度出发，正视而不回避。要知道，招聘厉害的人，会出现鲇鱼效应，解聘一个不合格的人，也会有类似的效果，对团队发展的影响也是极强的，相当于刮骨疗伤，虽然短期很痛，但是长期来看，团队会得到更好的发展。\n\n\n\n留个作业：你认为什么样的人一定要离开团队，为什么？欢迎在留言区分享你的经验，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# *磊：\n\n> 没有开出过人的leader就是小白兔\n\n# *春：\n\n> 完全赞同作者的看法，小白兔，老白兔，对公司伤害太大了，努力没有结果的人要在招聘环节就淘汰\n\n#     讲师回复：\n\n>     是的，试用期也是一个适合操作的周期，剩下一般就要靠绩效考核了",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"Dog 智能风控系统",frontmatter:{title:"Dog 智能风控系统",date:"2022-12-07T14:26:48.000Z",permalink:"/pages/e59367/"},regularPath:"/70.%E5%BC%80%E6%BA%90%E4%BA%A7%E5%93%81/20.Dog%20%E6%99%BA%E8%83%BD%E9%A3%8E%E6%8E%A7%E7%B3%BB%E7%BB%9F.html",relativePath:"70.开源产品/20.Dog 智能风控系统.md",key:"v-7724aeba",path:"/pages/e59367/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"概要",frontmatter:{title:"概要",date:"2022-12-07T14:45:11.000Z",permalink:"/pages/fdeb84/"},regularPath:"/80.%E6%95%AC%E8%AF%B7%E6%9C%9F%E5%BE%85/10.%E6%A6%82%E8%A6%81.html",relativePath:"80.敬请期待/10.概要.md",key:"v-6413e9de",path:"/pages/fdeb84/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/12/07, 14:49:16",lastUpdatedTimestamp:1670395756e3},{title:"知人善用：借事修人，借人成事",frontmatter:{title:"知人善用：借事修人，借人成事",date:"2023-02-22T16:15:54.000Z",permalink:"/pages/7841f5/"},regularPath:"/65.%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/30.%20%E5%90%8E%E7%AB%AF&%E6%9E%B6%E6%9E%84/20.%20%E6%88%90%E4%B8%BA%E4%BC%9A%E5%B8%A6%E5%9B%A2%E9%98%9F%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA/14.%20%20%E7%9F%A5%E4%BA%BA%E5%96%84%E7%94%A8%EF%BC%9A%E5%80%9F%E4%BA%8B%E4%BF%AE%E4%BA%BA%EF%BC%8C%E5%80%9F%E4%BA%BA%E6%88%90%E4%BA%8B.html",relativePath:"65.他山之石/30. 后端&架构/20. 成为会带团队的技术人/14.  知人善用：借事修人，借人成事.md",key:"v-dd2b1d86",path:"/pages/7841f5/",headers:[{level:3,title:"精选评论",slug:"精选评论",normalizedTitle:"精选评论",charIndex:3576}],headersStr:"精选评论",content:"上一讲，我带你学习了建机制的相关内容，如果想将机制落地，你首先要建立足够的认知，明确机制的作用以及好机制具备的三个必要条件：规则统一、简单有效便于增减、对整体结果有利。现在，我们通过“沟通”和“机制”夯实了团队运作的基础，那接下来就是让人在团队运作中，发挥最大的作用，进而取得更好的结果。所以这一讲，我们就来学习“建团队”的最后一个动作：知人善用。\n\n直白点儿说，知人善用就是指技术 Leader 怎么用对人？用好人？核心在于怎么给事情安排对的人？怎么给人安排合适的事情？其中，“人”与“事”相辅相成，如果把事情安排给对的人，不光会取得好结果，人也能得到更多的成长。\n\n当然了，很多刚接手团队的 Leader 对管理并没有概念，认为“管理”就是顺序映射：谁有时间，谁的能力差不多，就安排谁去做。可能并不会有针对性地去思考每一件事和每个人的匹配程度。\n\n但当你有了一段时间的管理经验后，随着“管理意识”渐渐觉醒，知人善用是你必须要考虑的。其中，找对人、培养人、养成人就是知人善用的关键点，你需要围绕这三点去思考，学会让管理向“借事修人，借人成事”的方向靠拢。\n\n\n知人善用的三个关键点\n\n * 找对人（寻找）\n\n问自己这样一个问题：你是否了解团队的成员？并清晰说明他们的特质（特征）？\n\n据我观察，很多技术 Leader 在管理过程中并不会主动去观察和分析团队成员，一般靠日常感觉，比如：张三做事好像比较主动、李四完成任务的质量比较高。可是这种感觉的建立往往是随意、零散且不规律的，很多时候并不能完全代表对一个人的判断和认识。\n\n而所谓的找对人就是指：你要有意识地观察团队成员，寻找不同的特质，这些特征往往是一些闪光点。比如张三非常愿意和他人沟通，能够把复杂的事情讲得很简单；李四代码质量很高，再复杂的逻辑他都能处理得很清晰。这些不同的特点就意味着有些事他们会更擅长，也就更容易取得不错的结果。\n\n比如有一个项目需要跨团队协同，张三来做 Owner 就更合适一些，他也能在过程中发挥长处。\n\n * 培养人（培养）\n\n找对人之后，还需要培养人。培养人是指：为事情找到匹配人选的同时，也为有良质的同学安排特定的工作，借事修人。\n\n比如新同学入职之后，你发现他既认真又努力，更有成长的欲望，平时其他人不愿意接手的任务，他都愿意去尝试。这时，你就要结合自己所处的环境、能争取到的资源有针对性地为其提供帮助，弥补他的不足。\n\n假设新同学数据库相关的技术比较薄弱，虽然能应对日常开发，但是能力所限无法主导某些项目（比如技术复杂度过高的工程），针对这类不足，你可以为其安排一个特定的项目，并让团队技术过硬的成员与之配合，自己也可以从旁协助。这样一来，当该项目结束之后，新同学的短板也会得到改善。\n\n如果沟通能力差一些，你也可以寻找能够锻炼他沟通能力的机会，帮新同学补齐沟通短板。\n\n * 养成人（出师）\n\n古话是“青出于蓝而胜于蓝。”要想养成人，你对他的要求和期望一定要是超过自己的。本质上，养成人是互相提高的过程：你希望他比过去的自己更出色；你也会比曾经的自己更出色。这样，双方才会有一个更好的结果。\n\n不要受“人性所趋”，认为我培养一个人，他肯定不如我，如果存在这样的想法，后果很容易是：带的人都不如你，自己也得不到成长。\n\n总的来讲，“找对人——培养人——养成人”是一个过程：你首先要通过观察、了解，发现优质的成员，针对性地培养他（无论是性格，还是软技能，或者硬技能）最后通过养成人达到彼此提升的目的。听起来，这个过程十分简单易懂，但在实际操作时需要格外用心，而且不是所有的团队管理者对这方面都有清晰的认知。\n\n找到合适的人、创造让他成长的机会、给他帮助并同时提高对自己的要求，在做事的过程中让人也不断成长与提高，可以说这对管理者本身也是一个持续成长的过程。如果将这整体看作一件事，那么这也是在对管理者本身“借事修人”。\n\n当然，知人善用的三个关键点主要是步骤和思路，这个过程中你还要通过一些行动去落地这些动作。\n\n\n怎么落地执行？\n\n知人善用的最终落地执行都会体现在具体的工作安排，以及你对团队成员提供的帮助上。这里面除了具体地分配任务、安排工作外，还要有意识地做下面几件事：\n\n * 团队盘点\n\n很多公司在做年底考核时，会做人才盘点（比如能力、潜力、价值观等），其实你自己也可以经常做团队盘点（和公司的人才盘点类似）。定义你认为对工作结果有主要关联的能力维度，然后将团队同学根据你的观察做不同的匹配，最终将这个盘点结果可视化作为自己未来判断的一些依据。当有具体的工作出现时，可以根据这个盘点结果判断团队成员目前担任的工作与其能力是否匹配，对其的成长是否有帮助，从而决定进行相应的调整。这样能有效地提高你用人、识人的能力，深入了解团队成员的长短板，帮你找对人。\n\n * 激发意愿\n\n激发意愿指的是：很多同学能力不错，但是投入意愿不足，影响最终结果。换句话说，很多同学不认可现在正在做的工作内容、担任的职位等。这时，Leader 要主动与他沟通，和他一起确认自己想要什么，想要变成怎样的状态或角色，具备什么能力，主动明确当前工作对他目标达成的作用与影响，把他内心想做这件事的热情激发出来。\n\n * 改善计划\n\n可能很多时候都觉得改善计划是针对一些改善计划表现比较差的同学，但从我过往的经验来看，大多数改善计划往往对一些表现优秀的同学更有帮助，他们会针对性地弥补自己的一些短板。反而对一些表现比较差的同学来讲，改善计划几乎无用。所以你可以围绕一个同学的成长提高点，结合具体的工作内容、与他一起制定改善计划，从他内心意愿的激发到你给予的帮助一起，逐步提升。\n\n当然，可以做的事不仅上述几件，你也可以按照自己的想法动态调整，核心就是通过各方面的认识和帮助，让团队内的同学有成长、有提高。\n\n那么在讲完理论知识之后，接下来，我结合一个小的案例来讲解一下在知人善用时，我自己的一些经验，希望对你有所帮助。\n\n\n一些经验之谈（tips）\n\n * 不怕没缺点，就怕没特点： 你借人成事，不能一味地关注他的缺点，而是要寻找其特点，发挥他的擅长点，有缺点不可怕，就怕没特点。\n\n * 新人做老事，老人做新事： 如果在团队中老人一直做老事，新人做新事，那么会出现老人没有新的提高，新人也要克服很多未知的困难；反之，可以重新激发老人的活力，也让新人有借鉴之处。\n\n * 不要越俎代庖，什么都自己上： 用人的过程中会出现“事情做错”的情况，一旦你发现这样的情况，千万不要直接去帮他纠正，这样无法帮助团队成员成长，团队成员只会当犯错误时，等着你来帮他解决。好的 Leader一定是要在明知前方有坑（这个坑一定是你能控制的）的情况下，也要让团队成员去踩一回，让其有试错的机会，让每个错误都物有所值。\n\n * 给机会的同时，给压力和帮助： 很多时候压力是成长的催化剂，有了压力也就有了 120% 的动力，所以把某个任务或职责给到一个同学的时候，也要把适当的压力传递过去，让他感受到事情的重要性。与此同时，时刻关注，该给的帮助一定要给到，不能不闻不问。\n\n * 既敢于承认错误，也允许别人犯错： 让一个人成长不可能完全不让他犯错，有时一些可控的错误反而可能是事后看最大的收获。同时，也不要认定自己之前的做法都是对的，要意识到，哪怕你之前做成功过，也不意味着你就一定是100%正确的。好的 Leader 在培养团队成员时，既要让团队不怕犯错（敢干事），也要敢于承认自己不足，去改善去提高。\n\n了解完这五点之后，咱们来看一个具体案例：\n\n> 春节刚过，你所在的公司准备跨团队发起一个新业务，这个业务技术难度很大，时间很紧，需要协调很多团队的资源和力量，你的主管希望你能从目前所管理的团队中，抽调几个同学组建新的团队负责这次的业务，这时，你要推荐哪些同学担任新团队的负责人呢？\n\n\n\n当然了，除了 A、B、C、D 四个选项，你也可以自己做项目负责人，但我并不推荐这个做法，因为对于一个新团队、新业务来讲，最大的作用是用来锻炼人的。这样看来，D 作为新同学，更适合从老业务入手；A 虽然能力强，但是判断存在问题；B 同学对于处理跨团队的问题就不太擅长了；相对来讲，C 会更加合适。\n\n\n小结\n\n总的来说，这一讲的内容读起来简单，做起来难。如果你没有管理经验，在看这一讲内容时，是无法做到感同身受的，所以我在这一讲中提供了一些小的案例，希望能帮你建立起一个“知人善用”的感觉。\n\n\n\n留个作业：你的 Leader 之前是如何给你机会、给你帮助培养你的？把你印象最深刻的点分享出来吧。感谢你的阅读，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **琳：\n\n> 判断错误是体现在哪方面",normalizedContent:"上一讲，我带你学习了建机制的相关内容，如果想将机制落地，你首先要建立足够的认知，明确机制的作用以及好机制具备的三个必要条件：规则统一、简单有效便于增减、对整体结果有利。现在，我们通过“沟通”和“机制”夯实了团队运作的基础，那接下来就是让人在团队运作中，发挥最大的作用，进而取得更好的结果。所以这一讲，我们就来学习“建团队”的最后一个动作：知人善用。\n\n直白点儿说，知人善用就是指技术 leader 怎么用对人？用好人？核心在于怎么给事情安排对的人？怎么给人安排合适的事情？其中，“人”与“事”相辅相成，如果把事情安排给对的人，不光会取得好结果，人也能得到更多的成长。\n\n当然了，很多刚接手团队的 leader 对管理并没有概念，认为“管理”就是顺序映射：谁有时间，谁的能力差不多，就安排谁去做。可能并不会有针对性地去思考每一件事和每个人的匹配程度。\n\n但当你有了一段时间的管理经验后，随着“管理意识”渐渐觉醒，知人善用是你必须要考虑的。其中，找对人、培养人、养成人就是知人善用的关键点，你需要围绕这三点去思考，学会让管理向“借事修人，借人成事”的方向靠拢。\n\n\n知人善用的三个关键点\n\n * 找对人（寻找）\n\n问自己这样一个问题：你是否了解团队的成员？并清晰说明他们的特质（特征）？\n\n据我观察，很多技术 leader 在管理过程中并不会主动去观察和分析团队成员，一般靠日常感觉，比如：张三做事好像比较主动、李四完成任务的质量比较高。可是这种感觉的建立往往是随意、零散且不规律的，很多时候并不能完全代表对一个人的判断和认识。\n\n而所谓的找对人就是指：你要有意识地观察团队成员，寻找不同的特质，这些特征往往是一些闪光点。比如张三非常愿意和他人沟通，能够把复杂的事情讲得很简单；李四代码质量很高，再复杂的逻辑他都能处理得很清晰。这些不同的特点就意味着有些事他们会更擅长，也就更容易取得不错的结果。\n\n比如有一个项目需要跨团队协同，张三来做 owner 就更合适一些，他也能在过程中发挥长处。\n\n * 培养人（培养）\n\n找对人之后，还需要培养人。培养人是指：为事情找到匹配人选的同时，也为有良质的同学安排特定的工作，借事修人。\n\n比如新同学入职之后，你发现他既认真又努力，更有成长的欲望，平时其他人不愿意接手的任务，他都愿意去尝试。这时，你就要结合自己所处的环境、能争取到的资源有针对性地为其提供帮助，弥补他的不足。\n\n假设新同学数据库相关的技术比较薄弱，虽然能应对日常开发，但是能力所限无法主导某些项目（比如技术复杂度过高的工程），针对这类不足，你可以为其安排一个特定的项目，并让团队技术过硬的成员与之配合，自己也可以从旁协助。这样一来，当该项目结束之后，新同学的短板也会得到改善。\n\n如果沟通能力差一些，你也可以寻找能够锻炼他沟通能力的机会，帮新同学补齐沟通短板。\n\n * 养成人（出师）\n\n古话是“青出于蓝而胜于蓝。”要想养成人，你对他的要求和期望一定要是超过自己的。本质上，养成人是互相提高的过程：你希望他比过去的自己更出色；你也会比曾经的自己更出色。这样，双方才会有一个更好的结果。\n\n不要受“人性所趋”，认为我培养一个人，他肯定不如我，如果存在这样的想法，后果很容易是：带的人都不如你，自己也得不到成长。\n\n总的来讲，“找对人——培养人——养成人”是一个过程：你首先要通过观察、了解，发现优质的成员，针对性地培养他（无论是性格，还是软技能，或者硬技能）最后通过养成人达到彼此提升的目的。听起来，这个过程十分简单易懂，但在实际操作时需要格外用心，而且不是所有的团队管理者对这方面都有清晰的认知。\n\n找到合适的人、创造让他成长的机会、给他帮助并同时提高对自己的要求，在做事的过程中让人也不断成长与提高，可以说这对管理者本身也是一个持续成长的过程。如果将这整体看作一件事，那么这也是在对管理者本身“借事修人”。\n\n当然，知人善用的三个关键点主要是步骤和思路，这个过程中你还要通过一些行动去落地这些动作。\n\n\n怎么落地执行？\n\n知人善用的最终落地执行都会体现在具体的工作安排，以及你对团队成员提供的帮助上。这里面除了具体地分配任务、安排工作外，还要有意识地做下面几件事：\n\n * 团队盘点\n\n很多公司在做年底考核时，会做人才盘点（比如能力、潜力、价值观等），其实你自己也可以经常做团队盘点（和公司的人才盘点类似）。定义你认为对工作结果有主要关联的能力维度，然后将团队同学根据你的观察做不同的匹配，最终将这个盘点结果可视化作为自己未来判断的一些依据。当有具体的工作出现时，可以根据这个盘点结果判断团队成员目前担任的工作与其能力是否匹配，对其的成长是否有帮助，从而决定进行相应的调整。这样能有效地提高你用人、识人的能力，深入了解团队成员的长短板，帮你找对人。\n\n * 激发意愿\n\n激发意愿指的是：很多同学能力不错，但是投入意愿不足，影响最终结果。换句话说，很多同学不认可现在正在做的工作内容、担任的职位等。这时，leader 要主动与他沟通，和他一起确认自己想要什么，想要变成怎样的状态或角色，具备什么能力，主动明确当前工作对他目标达成的作用与影响，把他内心想做这件事的热情激发出来。\n\n * 改善计划\n\n可能很多时候都觉得改善计划是针对一些改善计划表现比较差的同学，但从我过往的经验来看，大多数改善计划往往对一些表现优秀的同学更有帮助，他们会针对性地弥补自己的一些短板。反而对一些表现比较差的同学来讲，改善计划几乎无用。所以你可以围绕一个同学的成长提高点，结合具体的工作内容、与他一起制定改善计划，从他内心意愿的激发到你给予的帮助一起，逐步提升。\n\n当然，可以做的事不仅上述几件，你也可以按照自己的想法动态调整，核心就是通过各方面的认识和帮助，让团队内的同学有成长、有提高。\n\n那么在讲完理论知识之后，接下来，我结合一个小的案例来讲解一下在知人善用时，我自己的一些经验，希望对你有所帮助。\n\n\n一些经验之谈（tips）\n\n * 不怕没缺点，就怕没特点： 你借人成事，不能一味地关注他的缺点，而是要寻找其特点，发挥他的擅长点，有缺点不可怕，就怕没特点。\n\n * 新人做老事，老人做新事： 如果在团队中老人一直做老事，新人做新事，那么会出现老人没有新的提高，新人也要克服很多未知的困难；反之，可以重新激发老人的活力，也让新人有借鉴之处。\n\n * 不要越俎代庖，什么都自己上： 用人的过程中会出现“事情做错”的情况，一旦你发现这样的情况，千万不要直接去帮他纠正，这样无法帮助团队成员成长，团队成员只会当犯错误时，等着你来帮他解决。好的 leader一定是要在明知前方有坑（这个坑一定是你能控制的）的情况下，也要让团队成员去踩一回，让其有试错的机会，让每个错误都物有所值。\n\n * 给机会的同时，给压力和帮助： 很多时候压力是成长的催化剂，有了压力也就有了 120% 的动力，所以把某个任务或职责给到一个同学的时候，也要把适当的压力传递过去，让他感受到事情的重要性。与此同时，时刻关注，该给的帮助一定要给到，不能不闻不问。\n\n * 既敢于承认错误，也允许别人犯错： 让一个人成长不可能完全不让他犯错，有时一些可控的错误反而可能是事后看最大的收获。同时，也不要认定自己之前的做法都是对的，要意识到，哪怕你之前做成功过，也不意味着你就一定是100%正确的。好的 leader 在培养团队成员时，既要让团队不怕犯错（敢干事），也要敢于承认自己不足，去改善去提高。\n\n了解完这五点之后，咱们来看一个具体案例：\n\n> 春节刚过，你所在的公司准备跨团队发起一个新业务，这个业务技术难度很大，时间很紧，需要协调很多团队的资源和力量，你的主管希望你能从目前所管理的团队中，抽调几个同学组建新的团队负责这次的业务，这时，你要推荐哪些同学担任新团队的负责人呢？\n\n\n\n当然了，除了 a、b、c、d 四个选项，你也可以自己做项目负责人，但我并不推荐这个做法，因为对于一个新团队、新业务来讲，最大的作用是用来锻炼人的。这样看来，d 作为新同学，更适合从老业务入手；a 虽然能力强，但是判断存在问题；b 同学对于处理跨团队的问题就不太擅长了；相对来讲，c 会更加合适。\n\n\n小结\n\n总的来说，这一讲的内容读起来简单，做起来难。如果你没有管理经验，在看这一讲内容时，是无法做到感同身受的，所以我在这一讲中提供了一些小的案例，希望能帮你建立起一个“知人善用”的感觉。\n\n\n\n留个作业：你的 leader 之前是如何给你机会、给你帮助培养你的？把你印象最深刻的点分享出来吧。感谢你的阅读，我们下一讲见。\n\n----------------------------------------\n\n\n# 精选评论\n\n# **琳：\n\n> 判断错误是体现在哪方面",charsets:{cjk:!0},lastUpdated:"2023/02/22, 16:26:20",lastUpdatedTimestamp:167705438e4},{title:"临时笔记",frontmatter:{title:"临时笔记",date:"2022-04-11T15:08:20.000Z",permalink:"/pages/990056/"},regularPath:"/80.%E6%95%AC%E8%AF%B7%E6%9C%9F%E5%BE%85/100.%E4%B8%B4%E6%97%B6%E7%AC%94%E8%AE%B0.html",relativePath:"80.敬请期待/100.临时笔记.md",key:"v-263d1f18",path:"/pages/990056/",headersStr:null,content:" 2. wow4j 如何部署到远端的 Github page 中？\n\nnpm run deploy\n\n\n 3. Java 面试八股文",normalizedContent:" 2. wow4j 如何部署到远端的 github page 中？\n\nnpm run deploy\n\n\n 3. java 面试八股文",charsets:{cjk:!0},lastUpdated:"2023/03/22, 15:21:20",lastUpdatedTimestamp:167946968e4},{title:"Home",frontmatter:{home:!0,heroImage:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200409124835.png",heroText:"Wow4j",tagline:"🚀一个神奇的 Java 网站",actionText:"开始使用 →",actionLink:"/pages/a2f161/",bannerBg:"none",features:[{title:"知识管理",details:"包含三种典型的知识管理形态：结构化、碎片化、体系化。轻松打造属于你自己的知识管理平台"},{title:"简洁高效",details:"以 Markdown 为中心的项目结构，内置自动化工具，以更少的配置完成更多的事。配合多维索引快速定位每个知识点"},{title:"沉浸式阅读",details:"专为阅读设计的UI，配合多种颜色模式、可关闭的侧边栏和导航栏，带给你一种沉浸式阅读体验"}],postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-e3e2bb2c",path:"/",headers:[{level:2,title:"🎉上新推荐",slug:"🎉上新推荐",normalizedTitle:"🎉上新推荐",charIndex:15},{level:2,title:"⚡️未来...",slug:"⚡️未来",normalizedTitle:"⚡️未来...",charIndex:355},{level:2,title:"⚡ 反馈与交流",slug:"⚡-反馈与交流",normalizedTitle:"⚡ 反馈与交流",charIndex:505}],headersStr:"🎉上新推荐 ⚡️未来... ⚡ 反馈与交流",content:"支持这个项目\n\n\n\n\n\n\n# 🎉上新推荐\n\n * v1.9.x：新增配置文件对TypeScript的支持，参考config.ts。新增标题标记。\n * v1.8.x：新增 Markdown中使用的组件：代码块选项卡 。\n * v1.7.x：新增 自定义html模块 配置，可用于插入广告模块。\n * v1.6.x：支持四级目录，提高站点结构可塑性。\n * v1.5.x：新增笔记容器，轻松插入笔记框。\n * v1.4.x：新增了文章内容区块的 背景底纹配置，让你的文章看起来像笔记本的风格~\n * v1.2.x：这个版本对整体的UI细节做了很多优化，比如标签栏和分类栏等\n * v1.1.x：从这个版本开始主题新增超好用、高颜值的Markdown容器，快去 体验 吧~\n\n更多上新请查阅：更新日志\n\n\n\n# ⚡️未来...\n\n提示\n\n期待 VuePress v2.0 以及 VitePress 的正式发布...\n\n届时，VuePress 1.x 编译慢的缺点将得到极大的改善。我将会视情况把主题升级至 VuePress v2.0 或 VitePress。还希望大家多多 💖支持 哟，持续关注吧~\n\n\n\n# ⚡ 反馈与交流\n\n在使用过程中有任何问题和想法，请给我提 Issue。 你也可以在Issue查看别人提的问题和给出解决方案。\n\n或者加入我们的QQ交流群：\n\n# Vdoing官方QQ群: 694387113\n\n\n\n\n\n\n\n",normalizedContent:"支持这个项目\n\n\n\n\n\n\n# 🎉上新推荐\n\n * v1.9.x：新增配置文件对typescript的支持，参考config.ts。新增标题标记。\n * v1.8.x：新增 markdown中使用的组件：代码块选项卡 。\n * v1.7.x：新增 自定义html模块 配置，可用于插入广告模块。\n * v1.6.x：支持四级目录，提高站点结构可塑性。\n * v1.5.x：新增笔记容器，轻松插入笔记框。\n * v1.4.x：新增了文章内容区块的 背景底纹配置，让你的文章看起来像笔记本的风格~\n * v1.2.x：这个版本对整体的ui细节做了很多优化，比如标签栏和分类栏等\n * v1.1.x：从这个版本开始主题新增超好用、高颜值的markdown容器，快去 体验 吧~\n\n更多上新请查阅：更新日志\n\n\n\n# ⚡️未来...\n\n提示\n\n期待 vuepress v2.0 以及 vitepress 的正式发布...\n\n届时，vuepress 1.x 编译慢的缺点将得到极大的改善。我将会视情况把主题升级至 vuepress v2.0 或 vitepress。还希望大家多多 💖支持 哟，持续关注吧~\n\n\n\n# ⚡ 反馈与交流\n\n在使用过程中有任何问题和想法，请给我提 issue。 你也可以在issue查看别人提的问题和给出解决方案。\n\n或者加入我们的qq交流群：\n\n# vdoing官方qq群: 694387113\n\n\n\n\n\n\n\n",charsets:{cjk:!0},lastUpdated:"2022/06/23, 22:45:58",lastUpdatedTimestamp:1655995558e3},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-8461995e",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/23, 22:45:58",lastUpdatedTimestamp:1655995558e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"个人使用说明书",link:"/pages/f380dd/"},{text:"后端开发",link:"/pages/19aee3/"},{text:"前端开发",link:"/pages/d00ad7/"},{text:"测试开发",link:"/pages/ca725f/"},{text:"运维开发",link:"/pages/df4369/"},{text:"大数据开发",link:"/pages/aa09ae/"},{text:"产品&UI交互",link:"/pages/5b4bcd/"},{text:"团队管理",link:"/pages/7ba30c/"},{text:"软技能",link:"/pages/92a016/"},{text:"他山之石",link:"/pages/df3516/"},{text:"开源产品",link:"/pages/366b2d/"},{text:"敬请期待",link:"/pages/fdeb84/"}],sidebarDepth:2,logo:"https://cdn.jsdelivr.net/gh/xugaoyi/image_store/blog/20200409124835.png",repo:"/timchen525/wow4j",searchMaxSuggestions:10,lastUpdated:"上次更新",sidebar:{"/05.个人使用说明书/":[["10.个人使用说明书.md","个人使用说明书","/pages/f380dd/"]],catalogue:{},"/10.后端开发/":[["10.概要.md","概要","/pages/19aee3/"],{title:"面试八股文",collapsable:!0,children:[["20.面试八股文/10.概要.md","概要","/pages/68c4f4/"],["20.面试八股文/20.共享变量在线程中的可见性问题分析.md","共享变量在线程中的可见性问题分析","/pages/b9c58a/"],["20.面试八股文/30.如何设计延时消息.md","如何设计延时消息","/pages/ccdab3/"],["20.面试八股文/50.草稿.md","草稿","/pages/96528a/"]]},{title:"服务端小技巧合集",collapsable:!0,children:[["40.服务端小技巧合集/03.byte buddy 实现链路上所有方法耗时打印.md","byte buddy 实现链路上所有方法耗时打印","/pages/909b0e/"],["40.服务端小技巧合集/05.业务线程池不丢 traceId 的方法.md","业务线程池不丢 traceId 的方法","/pages/87518c/"],["40.服务端小技巧合集/10.让你的java业务代码并发的调用，并正确的处理返回结果.md","让你的java业务代码并发的调用，并正确的处理返回结果","/pages/69dde0/"],["40.服务端小技巧合集/20.服务端常见线上问题整理与解决措施.md","服务端常见线上问题整理与解决措施","/pages/81e5c5/"],["40.服务端小技巧合集/30.服务端日志打印最佳实践.md","服务端日志打印最佳实践","/pages/bfad5e/"],["40.服务端小技巧合集/40.轻松正确理解并上手RESTful.md","轻松正确理解并上手RESTful","/pages/72847a/"],["40.服务端小技巧合集/50.服务端业务线程池优雅使用.md","服务端业务线程池优雅使用","/pages/344010/"],["40.服务端小技巧合集/60.服务端如何正确优雅使用流控平台.md","服务端如何正确优雅使用流控平台","/pages/b901a4/"],["40.服务端小技巧合集/70.服务端如何正确的使用分布式锁防止缓存击穿.md","服务端如何正确的使用分布式锁防止缓存击穿","/pages/3e5740/"],["40.服务端小技巧合集/80.服务端接口设计最佳实践.md","服务端接口设计最佳实践","/pages/e66200/"]]},{title:"Java基础",collapsable:!0,children:[]},{title:"MySQL 相关",collapsable:!0,children:[["50.MySQL 相关/10.MySQL 索引概要.md","MySQL 索引概要","/pages/d7e1e9/"],["50.MySQL 相关/45.MySQL 建表的一些规范.md","MySQL 建表的一些规范","/pages/480b10/"],["50.MySQL 相关/50.MySQL 调优手册.md","MySQL 调优手册","/pages/ea7be2/"]]},{title:"Redis 最佳实践指南",collapsable:!0,children:[]},{title:"文本搜索Elasticsearch",collapsable:!0,children:[["70.文本搜索Elasticsearch/10.垂直电商搜索注意点.md","垂直电商搜索注意点","/pages/3343c6/"],["70.文本搜索Elasticsearch/20.关于搜索建议词的分析以及相应的优化方案.md","关于搜索建议词的分析以及相应的优化方案","/pages/dcbb80/"],["70.文本搜索Elasticsearch/30.ElasticSearch 临时.md","ElasticSearch 临时","/pages/e0e231/"]]},{title:"Kafka 最佳实践指南",collapsable:!0,children:[["80.Kafka 最佳实践指南/10. Kafka 必知问题.md","Kafka 必知问题","/pages/88d53b/"],["80.Kafka 最佳实践指南/20.Kafka 正确的使用姿势.md","Kafka 正确的使用姿势（待完成）","/pages/0c7472/"]]},{title:"网络相关",collapsable:!0,children:[["85.网络相关/10.HTTP 各个版本区别.md","HTTP 各个版本区别","/pages/109cde/"]]},{title:"架构相关",collapsable:!0,children:[["90.架构相关/100.浅谈高并发架构设计.md","浅谈「高并发」架构设计","/pages/b700b8/"],["90.架构相关/110.浅谈高可用架构设计.md","浅谈「高可用」架构设计","/pages/4e98ab/"],["90.架构相关/200.聊一聊MySQL大表数据异构的方案.md","聊一聊MySQL大表数据异构的方案","/pages/d086a2/"]]},{title:"监控告警",collapsable:!0,children:[{title:" Skywalking",collapsable:!0,children:[["100.监控告警/10. Skywalking/10.概要.md","概要","/pages/e9c909/"],["100.监控告警/10. Skywalking/20.插件自动化测试.md","插件自动化测试","/pages/2a1bb9/"],["100.监控告警/10. Skywalking/30. SkyWalking ClickHouse 存储插件开发.md","SkyWalking ClickHouse 存储插件开发","/pages/8ac9f6/"]]},{title:"test",collapsable:!0,children:[]},["100.监控告警/30.后端可观测性体系架构设计.md","后端可观测性体系架构设计","/pages/609888/"]]},{title:"防爬风控",collapsable:!0,children:[["110.防爬风控/10.如何应对爬虫的流量并进行有效狙击？.md","如何应对爬虫的流量并进行有效狙击？","/pages/56c88e/"]]},{title:"稳定性 checklist",collapsable:!0,children:[["120.稳定性 checklist/05.常见 Java 编码故障 Checklist.md","常见 Java 编码故障 Checklist","/pages/0b8f06/"],["120.稳定性 checklist/10.MySQL  故障 Checklist.md","MySQL  故障 Checklist","/pages/1d9f9a/"],["120.稳定性 checklist/20.Redis 故障 Checklist.md","Redis 故障 Checklist","/pages/14973a/"],["120.稳定性 checklist/30.Kafka 故障 Checklist.md","Kafka 故障 Checklist","/pages/13ebf7/"],["120.稳定性 checklist/40.Elasticsearch 故障 Checklist.md","Elasticsearch 故障 Checklist","/pages/64a589/"]]},{title:"效能工具",collapsable:!0,children:[["130.效能工具/10.Jacoco.md","Jacoco","/pages/cf2bd0/"],["130.效能工具/20.Autogit.md","Autogit","/pages/09d86f/"],["130.效能工具/30.Sonar.md","Sonar","/pages/1c8450/"],["130.效能工具/40.代码CheckList.md","代码CheckList","/pages/759e84/"],["130.效能工具/50.Arthas.md","Arthas","/pages/100d77/"],["130.效能工具/60.规则引擎Drools.md","规则引擎Drools","/pages/e54383/"],["130.效能工具/70.模板引擎FreeMarker.md","模板引擎FreeMarker","/pages/40647d/"]]}],"/20.前端开发/":[["10.概要.md","概要","/pages/d00ad7/"],["100.草稿.md","草稿","/pages/884001/"]],"/22.测试开发/":[["10.概要.md","概要","/pages/ca725f/"],["20.精通性能测试.md","精通性能测试","/pages/157465/"]],"/25.运维开发/":[["01.docker 命令.md","docker 命令","/pages/227545/"],["10.概要.md","概要","/pages/df4369/"]],"/27.大数据开发/":[["01.概要.md","概要","/pages/aa09ae/"],["04.用户画像.md","用户画像","/pages/7c75c6/"],["110.数据分析万能法则.md","数据分析万能法则","/pages/c7a395/"],["120.flink.md","flink","/pages/af7f35/"]],"/40.产品&UI交互/":[["10.概要.md","概要","/pages/5b4bcd/"],["20.设计价值观.md","设计价值观","/pages/b124a5/"],["30.设计原则 Element.md","设计原则 Element","/pages/28fad7/"],["40.设计的四大原则.md","设计的四大原则","/pages/d20b3e/"],["50.色彩的秘密.md","色彩的秘密","/pages/2781f1/"],["60.原型图工具.md","原型图工具","/pages/603711/"],["70.设计资源.md","设计资源","/pages/438b60/"]],"/50.团队管理/":[["10.概要.md","概要","/pages/7ba30c/"],["15.成为会带团队的技术人.md","成为会带团队的技术人","/pages/cab062/"],["18. 团队奖优罚劣14条军规.md","团队「奖优罚劣」14条军规","/pages/143f32/"],["20. OKR 最佳实践.md","OKR 最佳实践","/pages/a3aa7e/"],["30.超实用网址大全.md","超实用网址大全","/pages/d6973a/"],["35.技术人员如何准备晋升答辩？.md","技术人员如何准备晋升答辩？【转载】","/pages/b7ec49/"],["40.番茄工作法（简单易行的时间管理方法）.md","番茄工作法（简单易行的时间管理方法）","/pages/91c182/"],["60.电商常见名词.md","电商常见名词","/pages/356a91/"],{title:"规范&模板",collapsable:!0,children:[["100.规范&模板/01.概要.md","概要","/pages/a6ba54/"],["100.规范&模板/10.服务端发布 CheckList 模板.md","服务端上线 CheckList 模板","/pages/8acb94/"],["100.规范&模板/30.Case Study 模板.md","Case Study 模板","/pages/814a15/"],["100.规范&模板/40.服务端系统设计 模板.md","服务端系统设计 模板","/pages/5700d1/"],["100.规范&模板/50.性能测试报告 模板.md","性能测试报告 模板","/pages/97392b/"],["100.规范&模板/60.日报格式 模板.md","日报格式 模板","/pages/f0afeb/"],["100.规范&模板/70.月报格式 模板.md","月报格式 模板","/pages/2da3b0/"],["100.规范&模板/80.Git 提交 message 规范.md","Git 提交 message 规范","/pages/c976cf/"]]},["120.如何做好技术规划.md","如何做好技术规划","/pages/80270d/"],["130.张一鸣精选微博55条.md","张一鸣精选微博55条","/pages/472d9e/"],["140.项目理念与愿景.md","项目理念与愿景","/pages/e96615/"],["150.项目版本号.md","项目版本号","/pages/971682/"]],"/60.软技能/":[["01.概要.md","概要","/pages/92a016/"],["06.如何一键生成项目树形结构.md","如何一键生成项目树形结构","/pages/2b0da9/"],["15.Markdown书写利器Typora最佳实践指南.md","Markdown书写利器Typora最佳实践指南","/pages/f1c5a2/"],["20. 浅谈如何提升职场晋升力.md","浅谈如何提升职场晋升力","/pages/023a9d/"],["30.复盘的技巧：深度复盘的三个步骤【转载】.md","复盘的技巧：深度复盘的三个步骤【转载】","/pages/de968f/"],{title:"好文档最佳实践",collapsable:!0,children:[["40.好文档最佳实践/03.中文技术文档写作规范.md","中文技术文档写作规范（Markdown版）","/pages/92a7c4/"],["40.好文档最佳实践/04.如何坚持写出一份合格的技术文档.md","如何写出一份合格的技术文档","/pages/b5407d/"],["40.好文档最佳实践/05.字节跳动优秀文档 8 大秘籍.md","字节跳动优秀文档 8 大秘籍","/pages/514c10/"],["40.好文档最佳实践/10.写好文档检查清单.md","写好文档检查清单","/pages/bed5b4/"],["40.好文档最佳实践/20.软件手册范例.md","软件手册范例","/pages/e0044f/"]]}],"/65.他山之石/":[["10.他山之石.md","他山之石","/pages/df3516/"],{title:" 后端&架构",collapsable:!0,children:[{title:" 23讲搞定后台架构实战",collapsable:!0,children:[["30. 后端&架构/10. 23讲搞定后台架构实战/01. 开篇词  跳出单点思维模式，才能真正理解架构设计.md","开篇词  跳出单点思维模式，才能真正理解架构设计","/pages/0f9acf/"],["30. 后端&架构/10. 23讲搞定后台架构实战/02. 为什么不同类型的业务后台架构模式是通用的？.md","为什么不同类型的业务后台架构模式是通用的？","/pages/0c2e8b/"],["30. 后端&架构/10. 23讲搞定后台架构实战/03. 如何利用“拆分”降低架构复杂度？.md","如何利用“拆分”降低架构复杂度？","/pages/909a7c/"],["30. 后端&架构/10. 23讲搞定后台架构实战/04. 如何使用简洁的架构实现高性能读服务？.md","如何使用简洁的架构实现高性能读服务？","/pages/935af1/"],["30. 后端&架构/10. 23讲搞定后台架构实战/05. 如何利用全量缓存打造毫秒级的读服务？.md","如何利用全量缓存打造毫秒级的读服务？","/pages/e69306/"],["30. 后端&架构/10. 23讲搞定后台架构实战/06.  如何做到异构数据的同步一致性？.md","如何做到异构数据的同步一致性？","/pages/6746e1/"],["30. 后端&架构/10. 23讲搞定后台架构实战/07. 如何应对热点数据的查询？.md","如何应对热点数据的查询？","/pages/078442/"],["30. 后端&架构/10. 23讲搞定后台架构实战/08. 如何基于流量回放实现读服务的自动化测试回归？.md","如何基于流量回放实现读服务的自动化测试回归？","/pages/2847ee/"],["30. 后端&架构/10. 23讲搞定后台架构实战/09. 如何使用分库分表支持海量数据的写入？.md","如何使用分库分表支持海量数据的写入？","/pages/0a30c5/"],["30. 后端&架构/10. 23讲搞定后台架构实战/10. 如何打造无状态的存储实现随时切库的写入服务？.md","如何打造无状态的存储实现随时切库的写入服务？","/pages/c5fbbe/"],["30. 后端&架构/10. 23讲搞定后台架构实战/11. 如何利用依赖管控来提升写服务的性能和可用性？.md","如何利用依赖管控来提升写服务的性能和可用性？","/pages/e2f528/"],["30. 后端&架构/10. 23讲搞定后台架构实战/12. 分库分表化后如何满足多维度查询？.md","分库分表化后如何满足多维度查询？","/pages/8afe37/"],["30. 后端&架构/10. 23讲搞定后台架构实战/13. 如何利用数据库实现并发扣减？.md","如何利用数据库实现并发扣减？","/pages/8adb6a/"],["30. 后端&架构/10. 23讲搞定后台架构实战/14. 如何利用缓存实现万级并发扣减？.md","如何利用缓存实现万级并发扣减？","/pages/958127/"],["30. 后端&架构/10. 23讲搞定后台架构实战/15. 如何利用缓存+数据库构建高可靠的扣减方案？.md","如何利用缓存+数据库构建高可靠的扣减方案？","/pages/674357/"],["30. 后端&架构/10. 23讲搞定后台架构实战/16. 数据库与缓存的扩展升级与扣减返还.md","数据库与缓存的扩展升级与扣减返还","/pages/72badb/"],["30. 后端&架构/10. 23讲搞定后台架构实战/17. 秒杀场景：热点扣减如何保证命中的存储分片不挂？.md","秒杀场景：热点扣减如何保证命中的存储分片不挂？","/pages/f989bd/"],["30. 后端&架构/10. 23讲搞定后台架构实战/18. 如何设计一锤子买卖的 SDK ？.md","如何设计一锤子买卖的 SDK ？","/pages/dde1f0/"],["30. 后端&架构/10. 23讲搞定后台架构实战/19. 如何设计微服务才能防止宕机？.md","如何设计微服务才能防止宕机？","/pages/55ceda/"],["30. 后端&架构/10. 23讲搞定后台架构实战/20. 如何做好微服务间依赖的治理和分布式事务？.md","如何做好微服务间依赖的治理和分布式事务？","/pages/50b8d5/"],["30. 后端&架构/10. 23讲搞定后台架构实战/21. 如何通过监控快速发现问题？.md","如何通过监控快速发现问题？","/pages/8d2886/"],["30. 后端&架构/10. 23讲搞定后台架构实战/22. 如何进行高保真压测和服务扩容？.md","如何进行高保真压测和服务扩容？","/pages/bbb73e/"],["30. 后端&架构/10. 23讲搞定后台架构实战/23. 重构：系统升级，如何实现不停服的数据迁移和用户切量？.md","重构：系统升级，如何实现不停服的数据迁移和用户切量？","/pages/baf91b/"],["30. 后端&架构/10. 23讲搞定后台架构实战/24. 重构：烟囱式、平台化、中台化的架构同与异.md","重构：烟囱式、平台化、中台化的架构同与异","/pages/556538/"],["30. 后端&架构/10. 23讲搞定后台架构实战/25. 加餐  技术人如何准备晋升答辩？.md","加餐  技术人如何准备晋升答辩？","/pages/b987ac/"],["30. 后端&架构/10. 23讲搞定后台架构实战/26. 结束语  抓住本质，是成为技术专家的不二法则.md","结束语  抓住本质，是成为技术专家的不二法则","/pages/8c029f/"]]},{title:" 成为会带团队的技术人",collapsable:!0,children:[["30. 后端&架构/20. 成为会带团队的技术人/01. 开篇词  在管理艺术中寻找确定性的“工程逻辑”.md","开篇词  在管理艺术中寻找确定性的“工程逻辑”","/pages/9e818c/"],["30. 后端&架构/20. 成为会带团队的技术人/02.  稳定性（一）：如何应对事故并做好复盘？.md","稳定性（一）：如何应对事故并做好复盘？","/pages/a098c4/"],["30. 后端&架构/20. 成为会带团队的技术人/03.  稳定性（二）：可用性治理的三个关键要点.md","稳定性（二）：可用性治理的三个关键要点","/pages/f500e9/"],["30. 后端&架构/20. 成为会带团队的技术人/04.  稳定性（三）：那些年源源不断的“红包”事故.md","稳定性（三）：那些年源源不断的“红包”事故","/pages/961c14/"],["30. 后端&架构/20. 成为会带团队的技术人/05.  技术债务：如何带领团队从困境中突围而出？.md","技术债务：如何带领团队从困境中突围而出？","/pages/c88807/"],["30. 后端&架构/20. 成为会带团队的技术人/06.  大项目：把握关键点，谋定而后动.md","大项目：把握关键点，谋定而后动","/pages/86eda9/"],["30. 后端&架构/20. 成为会带团队的技术人/07.  业务理解：深入业务是做好架构的前提.md","业务理解：深入业务是做好架构的前提","/pages/41e44b/"],["30. 后端&架构/20. 成为会带团队的技术人/08.  架构设计：治理好系统复杂度才最务实.md","架构设计：治理好系统复杂度才最务实","/pages/98e29e/"],["30. 后端&架构/20. 成为会带团队的技术人/09.  定目标：让你的方向与公司的方向保持一致.md","定目标：让你的方向与公司的方向保持一致","/pages/658fc0/"],["30. 后端&架构/20. 成为会带团队的技术人/10.  追过程：如何用 PDCA 做过程管理？.md","追过程：如何用 PDCA 做过程管理？","/pages/fb54bb/"],["30. 后端&架构/20. 成为会带团队的技术人/11.  奖优罚劣：怎样传递我们要什么与“不要什么”？.md","奖优罚劣：怎样传递我们要什么与“不要什么”？","/pages/2e6f7c/"],["30. 后端&架构/20. 成为会带团队的技术人/12.  勤沟通：在信任的基础上，让沟通简单且纯粹.md","勤沟通：在信任的基础上，让沟通简单且纯粹","/pages/cea021/"],["30. 后端&架构/20. 成为会带团队的技术人/13.  建机制：规则流程越建越多，为何效果却越来越差？.md","建机制：规则流程越建越多，为何效果却越来越差？","/pages/f74aaf/"],["30. 后端&架构/20. 成为会带团队的技术人/14.  知人善用：借事修人，借人成事.md","知人善用：借事修人，借人成事","/pages/7841f5/"],["30. 后端&架构/20. 成为会带团队的技术人/15.  找到人：招聘是 Leader 的责任，不是 HR 的.md","找到人：招聘是 Leader 的责任，不是 HR 的","/pages/34fb11/"],["30. 后端&架构/20. 成为会带团队的技术人/16.  能落地：90 天试用期，转正时我们要考察什么？.md","能落地：90 天试用期，转正时我们要考察什么？","/pages/2c32ab/"],["30. 后端&架构/20. 成为会带团队的技术人/17.  升级汰换：“心要慈，刀要快”.md","升级汰换：“心要慈，刀要快”","/pages/dde270/"],["30. 后端&架构/20. 成为会带团队的技术人/18.  晋升：是不是技术到位、项目做好就够了？.md","晋升：是不是技术到位、项目做好就够了？","/pages/70eecd/"],["30. 后端&架构/20. 成为会带团队的技术人/19.  跨团队：没有汇报线的人和事就是推不动？.md","跨团队：没有汇报线的人和事就是推不动？","/pages/cfd14b/"],["30. 后端&架构/20. 成为会带团队的技术人/20.  做规划：除了交付和稳定性，还要规划什么？.md","做规划：除了交付和稳定性，还要规划什么？","/pages/4c68c8/"],["30. 后端&架构/20. 成为会带团队的技术人/21.  接手新团队：士气低、交付迟、事故多发，如何下手解决？.md","接手新团队：士气低、交付迟、事故多发，如何下手解决？","/pages/38ba4d/"],["30. 后端&架构/20. 成为会带团队的技术人/22. 结束语  岁月静好，技术人依然要负重前行.md","结束语  岁月静好，技术人依然要负重前行","/pages/0dcb21/"]]}]}],"/70.开源产品/":[["10.概要.md","概要","/pages/366b2d/"],["20.Dog 智能风控系统.md","Dog 智能风控系统","/pages/e59367/"]],"/80.敬请期待/":[["10.概要.md","概要","/pages/fdeb84/"],["100.临时笔记.md","临时笔记","/pages/990056/"]]},updateBar:{showToArticle:!1},category:!1,tag:!1,author:{name:"timchen525",href:"https://github.com/timchen525/wow4j"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:461330266@qq.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/timchen525"},{iconClass:"icon-erji",title:"听音乐",link:"https://music.163.com/#/playlist?id=755597173"}]},footer:{createYear:2022,copyrightInfo:"timchen525 | MIT License"},htmlModules:{pageB:'\n  <div class="wwads-cn wwads-horizontal pageB" data-id="136" style="width:100%;max-height:80px;min-height:auto;"></div>\n  <style>\n    .pageB img{width:80px!important;}\n    .wwads-horizontal .wwads-text, .wwads-content .wwads-text{line-height:1;}\n  </style>\n  ',windowRB:'\n    <div class="wwads-cn wwads-vertical windowRB" data-id="136" style="max-width:160px;\n    min-width: auto;min-height:auto;"></div>\n    <style>\n      .windowRB{ padding: 0;}\n      .windowRB .wwads-img{margin-top: 10px;}\n      .windowRB .wwads-content{margin: 0 10px 10px 10px;}\n      .custom-html-window-rb .close-but{\n        display: none;\n      }\n    </style>\n  '}}};t(149),t(206),t(139);var ll=t(216),cl=t(217),dl=(t(364),t(231),t(42));var ul={computed:{$filterPosts:function(){return this.$site.pages.filter((function(n){var e=n.frontmatter,t=e.pageComponent,r=e.article,a=e.home;return!(t||!1===r||!0===a)}))},$sortPosts:function(){return(n=this.$filterPosts).sort((function(n,e){var t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(dl.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(dl.a)(n,e)})),n;var n},$sortPostsByDate:function(){return(n=this.$filterPosts).sort((function(n,e){return Object(dl.a)(n,e)})),n;var n},$groupPosts:function(){return function(n){for(var e={},t={},r=function(r,a){var i=n[r].frontmatter,o=i.categories,s=i.tags;"array"===Object(dl.n)(o)&&o.forEach((function(t){t&&(e[t]||(e[t]=[]),e[t].push(n[r]))})),"array"===Object(dl.n)(s)&&s.forEach((function(e){e&&(t[e]||(t[e]=[]),t[e].push(n[r]))}))},a=0,i=n.length;a<i;a++)r(a);return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags:function(){return function(n){var e=[],t=[];for(var r in n.categories)e.push({key:r,length:n.categories[r].length});for(var a in n.tags)t.push({key:a,length:n.tags[a].length});return{categories:e,tags:t}}(this.$groupPosts)}}};ja.component(ll.default),ja.component(cl.default);function pl(n){return n.toString().padStart(2,"0")}t(368);ja.component("Badge",(function(){return Promise.all([t.e(0),t.e(3)]).then(t.bind(null,622))})),ja.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,216))})),ja.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,217))}));t(369);var hl,fl,ml=t(48),gl=(t(372),t(132),t(215)),vl=t.n(gl),El=t(99);"valine"===(fl="valine")?t.e(154).then(t.t.bind(null,470,7)).then((function(n){return hl=n.default})):"gitalk"===fl&&Promise.all([t.e(0),t.e(153)]).then(t.t.bind(null,471,7)).then((function(){return t.e(152).then(t.t.bind(null,472,7))})).then((function(n){return n.default}));function bl(n,e){var t={};return Reflect.ownKeys(n).forEach((function(r){if("string"==typeof n[r])try{t[r]=vl.a.render(n[r],e)}catch(e){console.warn('Comment config option error at key named "'.concat(r,'"')),console.warn("More info: ".concat(e.message)),t[r]=n[r]}else t[r]=n[r]})),t}console.log('How to use "'.concat("valine",'" in ').concat(El.name,"@v").concat(El.version,":"),El.homepage);var yl={render:function(n,e){var t=document.createElement("div");t.id=e,document.querySelector("main.page").appendChild(t),new hl(Object(ml.a)(Object(ml.a)({},bl({el:"#valine-vuepress-comment",appId:"ldw288he0deIwTSWVbOD3FSr-gzGzoHsz",appKey:"TwhUxVNl2exbpHjdE10pTeSn",path:"<%- frontmatter.commentid || frontmatter.permalink %>"},{frontmatter:n})),{},{el:"#".concat(e)}))},clear:function(n){var e=document.querySelector("#".concat(n));return e&&e.remove(),!0}},Al=null;function kl(n){var e="#valine-vuepress-comment";return e.startsWith("#")&&(e=e.slice(1)),console.log(e),yl.clear(e)}function xl(n){return!1!==n.comment&&!1!==n.comments}function Bl(n){if(clearTimeout(Al),document.querySelector("main.page")){var e="#valine-vuepress-comment";return e.startsWith("#")&&(e=e.slice(1)),yl.render(n,e)}Al=setTimeout((function(){return Bl(n)}),200)}var _l={mounted:function(){var n=this;Al=setTimeout((function(){var e=Object(ml.a)({to:{},from:{}},n.$frontmatter);kl()&&xl(e)&&Bl(e)}),1e3),this.$router.afterEach((function(e,t){if(!e||!t||e.path!==t.path){var r=Object(ml.a)({to:e,from:t},n.$frontmatter);kl()&&xl(r)&&Bl(r)}}))}},Tl=Object(al.a)(_l,(function(){var n=this.$createElement;return(this._self._c||n)("div")}),[],!1,null,null,null).exports,wl=[function(n){n.Vue,n.options;var e=n.router;n.siteData;n.isServer||e.beforeEach((function(n,e,t){var r;t(),r=function(){setTimeout((function(){var n,e;void 0===window._AdBlockInit&&(n=document.getElementsByClassName("wwads-cn"),e=document.querySelector(".wwads-content"),n[0]&&!e&&(n[0].innerHTML="<style>.wwads-horizontal,.wwads-vertical{background-color:#f4f8fa;padding:5px;min-height:120px;margin-top:20px;box-sizing:border-box;border-radius:3px;font-family:sans-serif;display:flex;min-width:150px;position:relative;overflow:hidden;}.wwads-horizontal{flex-wrap:wrap;justify-content:center}.wwads-vertical{flex-direction:column;align-items:center;padding-bottom:32px}.wwads-horizontal a,.wwads-vertical a{text-decoration:none}.wwads-horizontal .wwads-img,.wwads-vertical .wwads-img{margin:5px}.wwads-horizontal .wwads-content,.wwads-vertical .wwads-content{margin:5px}.wwads-horizontal .wwads-content{flex:130px}.wwads-vertical .wwads-content{margin-top:10px}.wwads-horizontal .wwads-text,.wwads-content .wwads-text{font-size:14px;line-height:1.4;color:#0e1011;-webkit-font-smoothing:antialiased}.wwads-horizontal .wwads-poweredby,.wwads-vertical .wwads-poweredby{display:block;font-size:11px;color:#a6b7bf;margin-top:1em}.wwads-vertical .wwads-poweredby{position:absolute;left:10px;bottom:10px}.wwads-horizontal .wwads-poweredby span,.wwads-vertical .wwads-poweredby span{transition:all 0.2s ease-in-out;margin-left:-1em}.wwads-horizontal .wwads-poweredby span:first-child,.wwads-vertical .wwads-poweredby span:first-child{opacity:0}.wwads-horizontal:hover .wwads-poweredby span,.wwads-vertical:hover .wwads-poweredby span{opacity:1;margin-left:0}.wwads-horizontal .wwads-hide,.wwads-vertical .wwads-hide{position:absolute;right:-23px;bottom:-23px;width:46px;height:46px;border-radius:23px;transition:all 0.3s ease-in-out;cursor:pointer;}.wwads-horizontal .wwads-hide:hover,.wwads-vertical .wwads-hide:hover{background:rgb(0 0 0 /0.05)}.wwads-horizontal .wwads-hide svg,.wwads-vertical .wwads-hide svg{position:absolute;left:10px;top:10px;fill:#a6b7bf}.wwads-horizontal .wwads-hide:hover svg,.wwads-vertical .wwads-hide:hover svg{fill:#3E4546}</style><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-img' target='_blank' rel='nofollow'><img src='https://cdn.jsdelivr.net/gh/xugaoyi/image_store@master/blog/wwads.2a3pidhlh4ys.webp' width='130'></a><div class='wwads-content'><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-text' target='_blank' rel='nofollow'>为了本站的长期运营，请将我们的网站加入广告拦截器的白名单，感谢您的支持！<span style='color: #11a8cd'>如何添加白名单?</span></a><a href='https://wwads.cn/page/end-user-privacy' class='wwads-poweredby' title='万维广告 ～ 让广告更优雅，且有用' target='_blank'><span>万维</span><span>广告</span></a></div><a class='wwads-hide' onclick='parentNode.remove()' title='隐藏广告'><svg xmlns='http://www.w3.org/2000/svg' width='6' height='7'><path d='M.879.672L3 2.793 5.121.672a.5.5 0 11.707.707L3.708 3.5l2.12 2.121a.5.5 0 11-.707.707l-2.12-2.12-2.122 2.12a.5.5 0 11-.707-.707l2.121-2.12L.172 1.378A.5.5 0 01.879.672z'></path></svg></a>"))}),3e3)},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(r,1):document.addEventListener("DOMContentLoaded",r)}))},function(n){var e=n.Vue,t=(n.options,n.router,n.siteData);t.pages.map((function(n){var e=n.frontmatter,r=e.date,a=e.author;"string"==typeof r&&"Z"===r.charAt(r.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return"".concat(n.getUTCFullYear(),"-").concat(pl(n.getUTCMonth()+1),"-").concat(pl(n.getUTCDate())," ").concat(pl(n.getUTCHours()),":").concat(pl(n.getUTCMinutes()),":").concat(pl(n.getUTCSeconds()))}(r)),a?n.author=a:t.themeConfig.author&&(n.author=t.themeConfig.author)})),e.mixin(ul)},{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(n){n.Vue.component("Comment",Tl)},function(n){var e=n.router;"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?256b0f411e8441cbb78d9124bf7f926a";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),e.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))}],Cl=["Comment"];t(209);function Pl(n,e){return(Pl=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}t(210);function Sl(n){return(Sl=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function Il(n,e){if(e&&("object"===To(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n)}function Ol(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,r=Sl(n);if(e){var a=Sl(this).constructor;t=Reflect.construct(r,arguments,a)}else t=r.apply(this,arguments);return Il(this,t)}}var jl=function(n){!function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&Pl(n,e)}(t,n);var e=Ol(t);function t(){return cs(this,t),e.apply(this,arguments)}return us(t)}(function(){function n(){cs(this,n),this.store=new ja({data:{state:{}}})}return us(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){ja.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(jl.prototype,{getPageAsyncComponent:No,getLayoutAsyncComponent:Ko,getAsyncComponent:$o,getVueComponent:Ho});var Ll={install:function(n){var e=new jl;n.$vuepress=e,n.prototype.$vuepress=e}};function Dl(n){n.beforeEach((function(e,t,r){if(zl(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var a=e.path.replace(/\/$/,"")+".html";zl(n,a)?r(a):r()}else r();else{var i=e.path+"/",o=e.path+".html";zl(n,o)?r(o):zl(n,i)?r(i):r()}}))}function zl(n,e){var t=e.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===t}))}var Fl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return Go("pageKey",e),ja.component(e)||ja.component(e,No(e)),ja.component(e)?n(e):n("")}},Rl={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,r=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},r()[t.slotKey])}},Ul={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Ml=(t(377),t(378),Object(al.a)(Ul,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function ql(){return(ql=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,a,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:sl.routerBase||sl.base,Dl(r=new Bo({base:t,mode:"history",fallback:!1,routes:ol,scrollBehavior:function(n,e,t){return t||(n.hash?!ja.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),a={},n.prev=4,n.next=7,Promise.all(wl.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:ja,options:a,router:r,siteData:sl,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return i=new ja(Object.assign(a,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},Cl.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:i,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}ja.config.productionTip=!1,ja.use(Bo),ja.use(Ll),ja.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:ja;_o(e),t.$vuepress.$set("siteData",e);var r=n(t.$vuepress.$get("siteData")),a=new r,i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(a)),o={};return Object.keys(i).reduce((function(n,e){return e.startsWith("$")&&(n[e]=i[e].get),n}),o),{computed:o}}((function(n){return function(){function e(){cs(this,e)}return us(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,r=void 0===t?{}:t;for(var a in r)"/"===a?e=r[a]:0===this.$page.path.indexOf(a)&&(n=r[a]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),sl)),ja.component("Content",Fl),ja.component("ContentSlotsDistributor",Rl),ja.component("OutboundLink",Ml),ja.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,r=e.children;if(t._isMounted)return r;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),ja.component("Layout",Ko("Layout")),ja.component("NotFound",Ko("NotFound")),ja.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.2",hash:"c5573e8"},function(n){return ql.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);