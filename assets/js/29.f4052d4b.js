(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{499:function(e,n,t){"use strict";t.r(n);var a=t(19),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1-需求背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-需求背景"}},[e._v("#")]),e._v(" 1. 需求背景")]),e._v(" "),t("p",[e._v("业务上需要实现对指定包路径下，所有方法的请求耗时进行打印，要求尽量不要与核心业务耦合。")]),e._v(" "),t("h2",{attrs:{id:"_2-实现思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现思路"}},[e._v("#")]),e._v(" 2. 实现思路")]),e._v(" "),t("p",[e._v("如果想实现对业务尽量无感，且打印每个方法的耗时，先排除掉：在业务中直接进行日志打印耗时。主要实现思路有：")]),e._v(" "),t("ol",[t("li",[e._v("利用 AOP 切面来实现")]),e._v(" "),t("li",[e._v("利用字节码 agent 来实现")])]),e._v(" "),t("p",[e._v("由于网络上对于使用 AOP 切面来实现该功能的例子比较多，这里重点介绍下如何利用 字节码 agent 来实现，具体的字节码相关的，用的是 bytebuddy 来实现。")]),e._v(" "),t("h2",{attrs:{id:"_3-基于-bytebuddy-实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-基于-bytebuddy-实现"}},[e._v("#")]),e._v(" 3. 基于 bytebuddy 实现")]),e._v(" "),t("p",[e._v("基于 bytebuddy 实现的步骤：")]),e._v(" "),t("h3",{attrs:{id:"_3-1-maven-项目java-agent-demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-maven-项目java-agent-demo"}},[e._v("#")]),e._v(" 3.1  maven 项目"),t("code",[e._v("java-agent-demo")])]),e._v(" "),t("ol",[t("li",[e._v("项目的 "),t("code",[e._v("pom.xml")]),e._v(" 的文件如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n\n    <groupId>com.tim</groupId>\n    <version>1.0.0-SNAPSHOT</version>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>java-agent-demo</artifactId>\n\n    <dependencies>\n        <dependency>\n            <groupId>net.bytebuddy</groupId>\n            <artifactId>byte-buddy</artifactId>\n            <version>1.9.2</version>\n        </dependency>\n        <dependency>\n            <groupId>net.bytebuddy</groupId>\n            <artifactId>byte-buddy-agent</artifactId>\n            <version>1.9.2</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <artifactId>maven-assembly-plugin</artifactId>\n                <configuration>\n                    <appendAssemblyId>false</appendAssemblyId>\n                    <descriptorRefs>\n                        <descriptorRef>jar-with-dependencies</descriptorRef>\n                    </descriptorRefs>\n                    <archive>\n                        \x3c!-- 自动添加 META-INF/MAINFEST.MF --\x3e\n                        <manifest>\n                            <addClasspath>true</addClasspath>\n                        </manifest>\n                        <manifestEntries>\n                            <Premain-Class>PreMainAgent</Premain-Class>\n                            <Agent-Class>PreMainAgent</Agent-Class>\n                            <Can-Redefine-Classes>true</Can-Redefine-Classes>\n                            <Can-Retransform-Classes>true</Can-Retransform-Classes>\n                        </manifestEntries>\n                    </archive>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>make-assembly</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>single</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n    </properties>\n\n</project>\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("新增一个类 "),t("code",[e._v("PreMainAgent.java")]),e._v("，里面添加静态方法 "),t("code",[e._v("premain")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import net.bytebuddy.agent.builder.AgentBuilder;\nimport net.bytebuddy.description.method.MethodDescription;\nimport net.bytebuddy.description.type.TypeDescription;\nimport net.bytebuddy.dynamic.DynamicType;\nimport net.bytebuddy.implementation.MethodDelegation;\nimport net.bytebuddy.matcher.ElementMatchers;\nimport net.bytebuddy.utility.JavaModule;\n\nimport java.lang.instrument.Instrumentation;\n\npublic class PreMainAgent {\n\n    // 定义要拦截的包路径前缀\n    private static final String PACKAGE_NAME_PREFIX = "com.agent";\n\n    public static void premain(String agentparam, Instrumentation inst) {\n        AgentBuilder.Transformer transformer = new AgentBuilder.Transformer(){\n            public DynamicType.Builder<?> transform(DynamicType.Builder<?> builder, TypeDescription typeDescription, ClassLoader classLoader, JavaModule javaModule) {\n                // method 指定哪些方法需要被拦截，ElementMatchers.any 指定了所有的方法\n                // 声明 intercept 拦截器\n                return builder.method(ElementMatchers.<MethodDescription>any())\n                        .intercept(MethodDelegation.to(MyInterceptor.class));\n            }\n        };\n\n        // type 指定了 agent 拦截的包名，以com.agent 作为前缀\n        // 指定了 transformer\n        // 将配置安装到 Instrumentation\n        new AgentBuilder.Default().type(ElementMatchers.<TypeDescription>nameStartsWith("com.agent")).transform(transformer).installOn(inst);\n    }\n}\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[e._v("新增一个拦截类 "),t("code",[e._v("MyInterceptor.java")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import net.bytebuddy.implementation.bind.annotation.Origin;\nimport net.bytebuddy.implementation.bind.annotation.RuntimeType;\nimport net.bytebuddy.implementation.bind.annotation.SuperCall;\n\nimport java.lang.reflect.Method;\nimport java.util.concurrent.Callable;\n\npublic class MyInterceptor {\n\n    @RuntimeType\n    public static Object intercept(@Origin Method method,\n                                   @SuperCall Callable<?> callable) throws Exception {\n        Long start = System.currentTimeMillis();\n        try {\n            return callable.call();\n        } finally {\n            System.out.println(method.getName() + ":" + (System.currentTimeMillis() - start) + "ms");\n        }\n    }\n}\n')])])]),t("ol",{attrs:{start:"4"}},[t("li",[t("p",[e._v("执行 "),t("code",[e._v("mvn clean")]),e._v("、"),t("code",[e._v("mvn compile")]),e._v("、"),t("code",[e._v("mvn deploy")]),e._v(" 或者通过 idea中的maven ui界面进行操作")]),e._v(" "),t("p",[e._v("在  "),t("strong",[e._v("target")]),e._v(" 下生成一个 "),t("code",[e._v("java-agent-demo-1.0.0-SNAPSHOT.jar")])])])]),e._v(" "),t("h3",{attrs:{id:"_3-2-项目-java-agent-user-来进行验证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-项目-java-agent-user-来进行验证"}},[e._v("#")]),e._v(" 3.2  项目  java-agent-user 来进行验证")]),e._v(" "),t("ol",[t("li",[e._v("新建一个普通的 java 项目 "),t("code",[e._v("java-agent-user")])]),e._v(" "),t("li",[e._v("在包路径 "),t("strong",[e._v("com.agent")]),e._v(" 下新建一个Main类下，代码如下：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('package com.agent;\n\npublic class Main {\n\n    public static void main(String[] args) throws InterruptedException {\n        System.out.println("main 方法执行");\n        Thread.sleep(1000L);\n        hello();\n        Thread.sleep(10L);\n        hello2();\n    }\n\n    public static void hello() throws InterruptedException {\n        Thread.sleep(50L);\n        System.out.println("23");\n    }\n\n    public static void hello2() throws InterruptedException {\n        Thread.sleep(10L);\n        System.out.println("33");\n    }\n}\n\n')])])]),t("h3",{attrs:{id:"_3-3-在工程-java-agent-user-中执行命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-在工程-java-agent-user-中执行命令"}},[e._v("#")]),e._v(" 3.3  在工程 java-agent-user 中执行命令")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("java -javaagent:/${路径}/java-agent-demo-1.0.0-SNAPSHOT.jar -jar java-agent-user.jar\n")])])]),t("p",[e._v("或者直接在idea的"),t("strong",[e._v("VM options")]),e._v("中执行如下命令：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("-javaagent:/%{路径}/java-agent-demo-1.0.0-SNAPSHOT.jar\n")])])]),t("p",[e._v("说明：${路径} 请换成实际打成 agent 的包路径。")]),e._v(" "),t("h3",{attrs:{id:"_3-4-执行效果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-执行效果"}},[e._v("#")]),e._v(" 3.4 执行效果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("main 方法执行\n23\nhello:52ms\n33\nhello2:12ms\nmain:1078ms\n")])])]),t("h2",{attrs:{id:"_4-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[e._v("#")]),e._v(" 4. 总结")]),e._v(" "),t("p",[e._v("利用 bytebuddy 可以轻松的实现字节码的插砖技术，实现业务解耦打印每个方法的耗时。")])])}),[],!1,null,null,null);n.default=r.exports}}]);