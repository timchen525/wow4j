(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{498:function(e,r,o){"use strict";o.r(r);var t=o(19),a=Object(t.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"_1-背景"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-背景"}},[e._v("#")]),e._v(" 1 背景")]),e._v(" "),o("hr"),e._v(" "),o("p",[e._v("通常，我们会在日志中，通过 traceId 来进行一次完整请求日志的定位，而 traceId 是保存在 MDC 的本地线程中，当主线程开启了一个异步线程时，traceId 就会丢失。本方案，通过线程池中的装饰器，来将父线程中的traceId传递给子线程，从而保证 traceId 不丢失。")]),e._v(" "),o("h2",{attrs:{id:"_2-实现代码"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现代码"}},[e._v("#")]),e._v(" 2 实现代码")]),e._v(" "),o("hr"),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('/**\n * redis 操作线程池\n */\n@Bean(value = "redisOperatorThreadPoolTaskExecutor")\npublic ThreadPoolTaskExecutor redisOperatorThreadPoolTaskExecutor() {\n    // todo 监听线程池使用的情况\n\n    return getThreadPoolTaskExecutor(redisOperatorThreadPoolProperties);\n}\n\n/**\n * 根据线程池的属性值获取对应线程的设置\n *\n * @param baseThreadPoolProperties 线程池配置信息\n * @return 线程池\n */\nprivate ThreadPoolTaskExecutor getThreadPoolTaskExecutor(BaseThreadPoolProperties baseThreadPoolProperties) {\n    ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();\n    if (StringUtils.isNotBlank(baseThreadPoolProperties.getThreadGroupName())) {\n        threadPoolTaskExecutor.setThreadGroupName(baseThreadPoolProperties.getThreadGroupName());\n    }\n    if (StringUtils.isNotBlank(baseThreadPoolProperties.getThreadNamePrefix())) {\n        threadPoolTaskExecutor.setThreadNamePrefix(baseThreadPoolProperties.getThreadNamePrefix());\n    }\n    if (null != baseThreadPoolProperties.getCorePoolSize() && baseThreadPoolProperties.getCorePoolSize() > 0) {\n        threadPoolTaskExecutor.setCorePoolSize(baseThreadPoolProperties.getCorePoolSize());\n    }\n    if (null != baseThreadPoolProperties.getQueueCapacity() && baseThreadPoolProperties.getQueueCapacity() > 0) {\n        threadPoolTaskExecutor.setQueueCapacity(baseThreadPoolProperties.getQueueCapacity());\n    }\n    if (null != baseThreadPoolProperties.getMaxPoolSize() && baseThreadPoolProperties.getMaxPoolSize() > 0) {\n        threadPoolTaskExecutor.setMaxPoolSize(baseThreadPoolProperties.getMaxPoolSize());\n    }\n    if (null != baseThreadPoolProperties.getKeepAliveSeconds() && baseThreadPoolProperties.getKeepAliveSeconds() > 0) {\n        threadPoolTaskExecutor.setKeepAliveSeconds(baseThreadPoolProperties.getKeepAliveSeconds());\n    }\n    // 设置拒绝策略\n    if (StringUtils.isNotBlank(baseThreadPoolProperties.getRejectedPolicy())) {\n        ThreadPoolRejectedPolicyEnum threadPoolRejectedPolicyEnum = ThreadPoolRejectedPolicyEnum.toEnum(baseThreadPoolProperties.getRejectedPolicy());\n        if (null != threadPoolRejectedPolicyEnum) {\n            threadPoolTaskExecutor.setRejectedExecutionHandler(threadPoolRejectedPolicyEnum.getRejectedExecutionHandler());\n        } else {\n            log.warn("Not exist rejectedPolicy:{}, return threadPoolRejectedPolicyEnum null.", baseThreadPoolProperties.getRejectedPolicy());\n        }\n    }\n    // 设置MdcRunnable\n    threadPoolTaskExecutor.setTaskDecorator(new MdcTaskDecorator());\n    return threadPoolTaskExecutor;\n}\n\n/**\n * 主线程traceId传入到子线程（注意：线程池池化） 核心代码\n */\nprivate static class MdcTaskDecorator implements TaskDecorator {\n\n    @Override\n    public Runnable decorate(Runnable runnable) {\n        String traceId = MDC.get(TRACE_ID);\n        return () -> {\n            try {\n                MDC.put(TRACE_ID, traceId);\n                runnable.run();\n            } finally {\n                MDC.remove(TRACE_ID);\n            }\n        };\n    }\n}\n')])])]),o("h2",{attrs:{id:"_3-效果"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3-效果"}},[e._v("#")]),e._v(" 3 效果")]),e._v(" "),o("p",[e._v("异步线程的traceId 和 主线程中的 traceId 一致，从而保证了业务在查看日志时，能够通过 traceId 完成串联一次完整请求的所有日志（包括异步线程中的日志）。")])])}),[],!1,null,null,null);r.default=a.exports}}]);